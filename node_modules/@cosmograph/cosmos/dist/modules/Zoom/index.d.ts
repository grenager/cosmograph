import { ZoomTransform } from 'd3-zoom';
import { Store } from "../Store";
import { GraphConfigInterface } from "../../config";
import { CosmosInputNode, CosmosInputLink } from "../../types";
export declare class Zoom<N extends CosmosInputNode, L extends CosmosInputLink> {
    readonly store: Store<N>;
    readonly config: GraphConfigInterface<N, L>;
    eventTransform: ZoomTransform;
    behavior: import("d3-zoom").ZoomBehavior<HTMLCanvasElement, undefined>;
    isRunning: boolean;
    constructor(store: Store<N>, config: GraphConfigInterface<N, L>);
    /**
     * Get the zoom transform that will fit the given node positions into the viewport
     *
     * @param positions An array of node positions in the form `[x, y]`
     * @param scale An optional scale factor to apply to the transform
     * @param padding Padding around the viewport in percentage
     */
    getTransform(positions: [number, number][], scale?: number, padding?: number): ZoomTransform;
    getDistanceToPoint(position: [number, number]): number;
    getMiddlePointTransform(position: [number, number]): ZoomTransform;
    convertScreenToSpacePosition(screenPosition: [number, number]): [number, number];
    convertSpaceToScreenPosition(spacePosition: [number, number]): [number, number];
    convertSpaceToScreenRadius(spaceRadius: number): number;
}
