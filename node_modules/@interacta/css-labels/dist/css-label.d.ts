import { Options } from './types.js';
export declare class CssLabel {
    element: HTMLDivElement;
    readonly fontWidthHeightRatio = 0.6;
    private _container;
    private _x;
    private _y;
    private _estimatedWidth;
    private _estimatedHeight;
    private _visible;
    private _prevVisible;
    private _weight;
    private _customFontSize;
    private _customColor;
    private _customOpacity;
    private _shouldBeShown;
    private _text;
    private _customPadding;
    private _customPointerEvents;
    private _customStyle;
    private _customClassName;
    constructor(container: HTMLDivElement, text?: string);
    /**
     * Sets the text of the element.
     * @param text - The text to set.
     */
    setText(text: string): void;
    /**
     * Sets the position of the label
     * @param x - The x coordinate of the label
     * @param y - The y coordinate of the label
     */
    setPosition(x: number, y: number): void;
    /**
     * Sets the CSS style of the element.
     * If a color, opacity or pointer-events is specified using the `setColor`,
     * `setOpacity` or `setPointerEvents` method, it takes priority over all custom styles.
     * The `fontSize` style will not apply from `setStyle`, and the `transform` style
     * will not apply, as it is used in the draw method to update the label position.
     * @param style - The style to be set.
     */
    setStyle(style: string): void;
    /**
     * Sets the class name of the component
     * @param className - The class name to be set
     */
    setClassName(className: string): void;
    /**
     * Sets the font size of the text in pixels.
     * This value cannot be changed through `setStyle` or `setClassName`
     * methods because it is used to measure the width and height of the label.
     * @param fontSize - The font size to set. If not specified, it will use the default value of `14px`.
     */
    setFontSize(fontSize?: number): void;
    /**
     * Resets the font size of the element to default value.
     */
    resetFontSize(): void;
    /**
     * Sets the color of the element.
     * This color will rewrite the color from `setStyle` CSS style if specified.
     * @param color - The color to set
     */
    setColor(color: string): void;
    /**
     * Resets the color of the element.
     */
    resetColor(): void;
    /**
     * Sets the opacity of the element.
     * This opacity will rewrite the opacity from `setStyle` CSS style if specified.
     * @param opacity - The opacity to set.
     */
    setOpacity(opacity: number): void;
    /**
     * Resets the opacity of the element.
     */
    resetOpacity(): void;
    /**
     * Sets the `pointerEvents` property to 'none', 'auto', or 'all'.
     * This `pointerEvents` value will rewrite the opacity from `setStyle` CSS style if specified.
     * @param pointerEvents - The `pointerEvents` value to be set.
     */
    setPointerEvents(pointerEvents: Options['pointerEvents']): void;
    /**
     * Resets the pointer-events of the element.
     */
    resetPointerEvents(): void;
    /**
     * Sets the padding of the element in pixels.
     * This value cannot be changed through `setStyle` or `setClassName`
     * methods because it is used to measure the width and height of the label.
     * @param padding - The padding object with left, top, right and bottom properties.
     * If not specified, it will use the default value of `{ left: 9px, top: 6px, right: 9px, bottom: 6px }`.
     */
    setPadding(padding?: {
        left: number;
        top: number;
        right: number;
        bottom: number;
    }): void;
    resetPadding(): void;
    /**
     * Sets the boolean value of whether the element should be forced to shown or not
     * @param shouldBeShown - The boolean value to set
     */
    setForceShow(shouldBeShown: boolean): void;
    /**
     * Gets the boolean value of whether the element should be shown or not.
     * @returns The boolean value of whether the element should be shown or not.
     */
    getForceShow(): boolean;
    /**
     * Draws the element to the container and updates the label's coordinate.
     * The label's coordinate updates using `transform` style. It rewrite
     * the `transform` from `setStyle` CSS style if specified.
     */
    draw(): void;
    overlaps(label: CssLabel): boolean;
    setVisibility(visible?: boolean): void;
    getVisibility(): boolean;
    isOnScreen(): boolean;
    setWeight(weight: number): void;
    getWeight(): number;
    /**
     * Appends the element to the top of the container
     */
    raise(): void;
    /**
     * Removes the element from the DOM.
     */
    destroy(): void;
    private _updateClasses;
    private _measureText;
}
