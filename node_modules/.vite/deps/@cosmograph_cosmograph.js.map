{
  "version": 3,
  "sources": ["../../@cosmograph/src/modules/cosmograph/watermark.ts", "../../@cosmograph/src/api/supabase/supabase.ts", "../../rollup-plugin-styles/dist/runtime/inject-css.js", "", "../../@cosmograph/src/modules/cosmograph/config.ts", "../../@cosmograph/src/modules/cosmograph/crossfilter.ts", "../../@cosmograph/src/modules/cosmograph/index.ts", "../../@cosmograph/src/modules/search/config.ts", "../../@cosmograph/src/modules/search/index.ts", "../../@cosmograph/src/modules/cosmograph/types.ts", "../../@cosmograph/src/modules/timeline/config.ts", "../../@cosmograph/src/modules/timeline/index.ts", "../../@cosmograph/src/modules/histogram/config.ts", "../../@cosmograph/src/modules/histogram/index.ts"],
  "sourcesContent": ["export const watermark = '<svg fill=\"currentColor\" height=\"11\" viewBox=\"0 0 163 11\" width=\"163\" xmlns=\"http://www.w3.org/2000/svg\"><g fill=\"currentColor\"><path d=\"m2.45674 8-1.925002-5.379h.924002l1.617 4.73h.154l1.617-4.73h.924l-1.925 5.379z\"/><path d=\"m7.02243 8v-5.379h.869v5.379zm.44-6.215c-.19067 0-.352-.06233-.484-.187-.12467-.12467-.187-.28233-.187-.473 0-.198.06233-.359333.187-.484.132-.124667.29333-.187.484-.187.19066 0 .34833.062333.473.187.12466.124667.187.286.187.484 0 .19067-.06234.34833-.187.473-.12467.12467-.28234.187-.473.187z\"/><path d=\"m11.8857 8.154c-.6673 0-1.232-.154-1.694-.462-.45465-.308-.72965-.79567-.82499-1.463l.82499-.187c.0587.352.1687.63067.33.836.1613.198.3593.341.594.429.242.08067.4987.121.77.121.4033 0 .7223-.08067.957-.242s.352-.37767.352-.649c0-.27867-.1137-.473-.341-.583-.22-.11733-.5243-.21267-.913-.286l-.451-.077c-.3447-.05867-.66-.15033-.946-.275s-.5133-.29333-.68199-.506c-.16866-.21267-.25299-.48033-.25299-.803 0-.484.18699-.86167.56098-1.133.374-.27133.869-.407 1.485-.407.6087 0 1.1.13933 1.474.418.3813.27133.627.65633.737 1.155l-.814.209c-.066-.38867-.2237-.66-.473-.814-.2493-.16133-.5573-.242-.924-.242s-.6563.06967-.869.209c-.2127.132-.319.33-.319.594 0 .25667.099.44733.297.572.2053.11733.4767.20533.814.264l.451.077c.3813.066.7223.15767 1.023.275.308.11.55.27133.726.484.1833.21267.275.49133.275.836 0 .528-.198.935-.594 1.221-.3887.286-.913.429-1.573.429z\"/><path d=\"m17.5765 8.099c-.3887 0-.748-.08433-1.078-.253-.3227-.16867-.5793-.418-.77-.748-.1833-.33733-.275-.74433-.275-1.221v-3.256h.869v3.19c0 .53533.132.924.396 1.166.2713.242.6343.363 1.089.363.5133 0 .935-.16867 1.265-.506s.495-.83967.495-1.507v-2.706h.869v5.379h-.847v-.913h-.154c-.1173.25667-.319.49133-.605.704-.286.20533-.704.308-1.254.308z\"/><path d=\"m23.9048 8.154c-.374 0-.715-.066-1.023-.198s-.55-.32267-.726-.572-.264-.55367-.264-.913c0-.36667.088-.66733.264-.902.176-.242.418-.42167.726-.539.308-.12467.6527-.187 1.034-.187h1.815v-.396c0-.38133-.1136-.682-.341-.902-.22-.22-.55-.33-.99-.33-.4326 0-.77.10633-1.012.319-.242.20533-.407.484-.495.836l-.814-.264c.088-.30067.2274-.572.418-.814.1907-.24933.4437-.44733.759-.594.3227-.154.7077-.231 1.155-.231.6894 0 1.2247.17967 1.606.539.3814.352.572.85067.572 1.496v2.431c0 .22.1027.33.308.33h.495v.737h-.759c-.242 0-.4363-.066-.583-.198-.1466-.13933-.22-.32267-.22-.55v-.055h-.132c-.0806.13933-.1906.286-.33.44-.132.14667-.3153.26767-.55.363-.2346.10267-.539.154-.913.154zm.099-.748c.5134 0 .9277-.15033 1.243-.451.3227-.308.484-.737.484-1.287v-.121h-1.782c-.3446 0-.6306.077-.858.231-.22.14667-.33.37033-.33.671s.1137.53533.341.704c.2347.16867.5354.253.902.253z\"/><path d=\"m28.582 8v-7.7h.869v7.7z\"/><path d=\"m31.2783 8v-5.379h.869v5.379zm.44-6.215c-.1907 0-.352-.06233-.484-.187-.1247-.12467-.187-.28233-.187-.473 0-.198.0623-.359333.187-.484.132-.124667.2933-.187.484-.187s.3483.062333.473.187.187.286.187.484c0 .19067-.0623.34833-.187.473s-.2823.187-.473.187z\"/><path d=\"m33.7326 8v-1.122l3.421-3.377v-.121h-3.311v-.759h4.224v1.122l-3.432 3.377v.132h3.52v.748z\"/><path d=\"m41.9601 8.154c-.5427 0-1.0194-.11367-1.43-.341-.4107-.23467-.7297-.561-.957-.979-.2274-.418-.341-.902-.341-1.452v-.132c0-.55733.1136-1.045.341-1.463.2273-.418.5426-.74067.946-.968.4033-.23467.8653-.352 1.386-.352.506 0 .9533.11 1.342.33.3886.21267.693.52067.913.924s.33.87633.33 1.419v.396h-4.389c.022.57933.209 1.034.561 1.364.352.32267.792.484 1.32.484.462 0 .8176-.10633 1.067-.319.2493-.21267.44-.46567.572-.759l.748.363c-.11.22733-.264.45467-.462.682-.1907.22733-.4437.418-.759.572-.308.154-.704.231-1.188.231zm-1.848-3.333h3.498c-.0294-.49867-.2017-.88733-.517-1.166-.308-.27867-.704-.418-1.188-.418-.4914 0-.8947.13933-1.21.418-.3154.27867-.5097.66733-.583 1.166z\"/><path d=\"m48.2828 8.154c-.462 0-.8873-.11-1.276-.33-.3886-.22-.6966-.539-.924-.957-.2273-.418-.341-.913-.341-1.485v-.143c0-.572.1137-1.06333.341-1.474.2274-.418.5317-.737.913-.957.3887-.22733.8177-.341 1.287-.341.374 0 .6894.05133.946.154.264.09533.4767.22.638.374.1614.14667.286.30433.374.473h.154v-3.168h.869v7.7h-.847v-.891h-.154c-.1466.27133-.374.51333-.682.726s-.7406.319-1.298.319zm.231-.77c.5574 0 1.0084-.176 1.353-.528.352-.35933.528-.858.528-1.496v-.099c0-.638-.176-1.133-.528-1.485-.3446-.35933-.7956-.539-1.353-.539-.55 0-1.0046.17967-1.364.539-.352.352-.528.847-.528 1.485v.099c0 .638.176 1.13667.528 1.496.3594.352.814.528 1.364.528z\"/><path d=\"m58.8911 8.154c-.5573 0-.9936-.10633-1.309-.319-.308-.21267-.5316-.45467-.671-.726h-.154v.891h-.847v-7.7h.869v3.168h.154c.088-.16867.2127-.32633.374-.473.1614-.154.3704-.27867.627-.374.264-.10267.583-.154.957-.154.4694 0 .8947.11367 1.276.341.3887.22.6967.539.924.957.2274.41067.341.902.341 1.474v.143c0 .572-.1173 1.067-.352 1.485-.2273.418-.5353.737-.924.957-.3813.22-.803.33-1.265.33zm-.231-.77c.5574 0 1.0084-.176 1.353-.528.352-.35933.528-.858.528-1.496v-.099c0-.638-.176-1.133-.528-1.485-.3446-.35933-.7956-.539-1.353-.539-.55 0-1.0046.17967-1.364.539-.352.352-.528.847-.528 1.485v.099c0 .638.176 1.13667.528 1.496.3594.352.814.528 1.364.528z\"/><path d=\"m63.6382 10.2v-.77h3.08c.2127 0 .319-.11.319-.33v-1.958h-.154c-.0733.154-.187.308-.341.462-.1466.14667-.341.26767-.583.363-.242.088-.5463.132-.913.132-.3886 0-.748-.08433-1.078-.253-.3226-.16867-.5793-.418-.77-.748-.1833-.33-.275-.73333-.275-1.21v-3.267h.869v3.201c0 .528.132.913.396 1.155.2714.242.6344.363 1.089.363.5134 0 .935-.16867 1.265-.506s.495-.83967.495-1.507v-2.706h.869v6.633c0 .29333-.0843.52433-.253.693-.1613.1687-.3996.253-.715.253z\"/><path d=\"m75.2998 8.154c-.9167 0-1.6464-.264-2.189-.792-.5427-.53533-.814-1.31267-.814-2.332v-1.76c0-1.01933.2713-1.793.814-2.321.5426-.535333 1.2723-.803 2.189-.803.9093 0 1.606.253 2.09.759.4913.506.737 1.199.737 2.079v.055h-.913v-.088c0-.57933-.1577-1.05233-.473-1.419-.308-.374-.7884-.561-1.441-.561-.6527 0-1.1624.20167-1.529.605-.3667.396-.55.95333-.55 1.672v1.804c0 .71867.1833 1.27967.55 1.683.3666.396.8763.594 1.529.594.6526 0 1.133-.18333 1.441-.55.3153-.374.473-.85067.473-1.43v-.176h.913v.143c0 .88-.2457 1.573-.737 2.079-.484.506-1.1807.759-2.09.759z\"/><path d=\"m82.0934 8.154c-.5427 0-1.023-.11367-1.441-.341-.4107-.22733-.7333-.54633-.968-.957-.2273-.418-.341-.90933-.341-1.474v-.143c0-.55733.1137-1.045.341-1.463.2347-.418.5573-.74067.968-.968.418-.22733.8983-.341 1.441-.341s1.0193.11367 1.43.341c.418.22733.7407.55.968.968.2347.418.352.90567.352 1.463v.143c0 .56467-.1173 1.056-.352 1.474-.2273.41067-.55.72967-.968.957-.4107.22733-.8873.341-1.43.341zm0-.781c.572 0 1.0267-.17967 1.364-.539.3447-.36667.517-.858.517-1.474v-.099c0-.616-.1723-1.10367-.517-1.463-.3373-.36667-.792-.55-1.364-.55-.5647 0-1.0193.18333-1.364.55-.3447.35933-.517.847-.517 1.463v.099c0 .616.1723 1.10733.517 1.474.3447.35933.7993.539 1.364.539z\"/><path d=\"m88.5742 8.154c-.6673 0-1.232-.154-1.694-.462-.4547-.308-.7297-.79567-.825-1.463l.825-.187c.0587.352.1687.63067.33.836.1613.198.3593.341.594.429.242.08067.4987.121.77.121.4033 0 .7223-.08067.957-.242s.352-.37767.352-.649c0-.27867-.1137-.473-.341-.583-.22-.11733-.5243-.21267-.913-.286l-.451-.077c-.3447-.05867-.66-.15033-.946-.275s-.5133-.29333-.682-.506-.253-.48033-.253-.803c0-.484.187-.86167.561-1.133s.869-.407 1.485-.407c.6087 0 1.1.13933 1.474.418.3813.27133.627.65633.737 1.155l-.814.209c-.066-.38867-.2237-.66-.473-.814-.2493-.16133-.5573-.242-.924-.242s-.6563.06967-.869.209c-.2127.132-.319.33-.319.594 0 .25667.099.44733.297.572.2053.11733.4767.20533.814.264l.451.077c.3813.066.7223.15767 1.023.275.308.11.55.27133.726.484.1833.21267.275.49133.275.836 0 .528-.198.935-.594 1.221-.3887.286-.913.429-1.573.429z\"/><path d=\"m92.208 8v-5.379h.847v.671h.154c.1026-.19067.2713-.36667.506-.528.2346-.16133.5646-.242.99-.242.418 0 .7553.09167 1.012.275.264.18333.4546.407.572.671h.154c.1246-.264.3116-.48767.561-.671.2566-.18333.6123-.275 1.067-.275.3593 0 .6746.07333.946.22.2713.14667.484.35933.638.638.1613.27133.242.59767.242.979v3.641h-.869v-3.564c0-.35933-.1064-.64167-.319-.847-.2054-.21267-.495-.319-.869-.319-.396 0-.7224.12833-.979.385-.2494.25667-.374.627-.374 1.111v3.234h-.869v-3.564c0-.35933-.1064-.64167-.319-.847-.2054-.21267-.495-.319-.869-.319-.396 0-.7224.12833-.979.385-.2494.25667-.374.627-.374 1.111v3.234z\"/><path d=\"m104.158 8.154c-.543 0-1.023-.11367-1.441-.341-.411-.22733-.733-.54633-.968-.957-.227-.418-.341-.90933-.341-1.474v-.143c0-.55733.114-1.045.341-1.463.235-.418.557-.74067.968-.968.418-.22733.898-.341 1.441-.341s1.019.11367 1.43.341c.418.22733.741.55.968.968.235.418.352.90567.352 1.463v.143c0 .56467-.117 1.056-.352 1.474-.227.41067-.55.72967-.968.957-.411.22733-.887.341-1.43.341zm0-.781c.572 0 1.027-.17967 1.364-.539.345-.36667.517-.858.517-1.474v-.099c0-.616-.172-1.10367-.517-1.463-.337-.36667-.792-.55-1.364-.55-.565 0-1.019.18333-1.364.55-.345.35933-.517.847-.517 1.463v.099c0 .616.172 1.10733.517 1.474.345.35933.799.539 1.364.539z\"/><path d=\"m108.208 5.338v-.154c0-.56467.113-1.04867.341-1.452.227-.40333.535-.715.924-.935.388-.22.814-.33 1.276-.33.564 0 .997.11 1.298.33.308.21267.535.451.682.715h.154v-.891h.825v6.633c0 .29333-.081.52433-.242.693-.162.1687-.396.253-.704.253h-3.652v-.77h3.421c.22 0 .33-.11.33-.33v-2.046h-.154c-.088.16133-.213.319-.374.473-.162.154-.371.28233-.627.385-.257.09533-.576.143-.957.143-.462 0-.888-.11-1.276-.33-.389-.22-.697-.53167-.924-.935-.228-.41067-.341-.89467-.341-1.452zm2.772 1.947c.557 0 1.008-.176 1.353-.528.352-.352.528-.836.528-1.452v-.088c0-.62333-.176-1.10733-.528-1.452-.345-.352-.796-.528-1.353-.528-.55 0-1.005.176-1.364.528-.352.34467-.528.82867-.528 1.452v.088c0 .616.176 1.1.528 1.452.359.352.814.528 1.364.528z\"/><path d=\"m115.529 8v-5.379h.847v.66h.154c.096-.23467.242-.407.44-.517s.459-.165.781-.165h.638v.792h-.693c-.388 0-.704.11-.946.33-.234.21267-.352.54633-.352 1.001v3.278z\"/><path d=\"m121.143 8.154c-.374 0-.715-.066-1.023-.198s-.55-.32267-.726-.572-.264-.55367-.264-.913c0-.36667.088-.66733.264-.902.176-.242.418-.42167.726-.539.308-.12467.653-.187 1.034-.187h1.815v-.396c0-.38133-.114-.682-.341-.902-.22-.22-.55-.33-.99-.33-.433 0-.77.10633-1.012.319-.242.20533-.407.484-.495.836l-.814-.264c.088-.30067.227-.572.418-.814.191-.24933.444-.44733.759-.594.323-.154.708-.231 1.155-.231.689 0 1.225.17967 1.606.539.381.352.572.85067.572 1.496v2.431c0 .22.103.33.308.33h.495v.737h-.759c-.242 0-.436-.066-.583-.198-.147-.13933-.22-.32267-.22-.55v-.055h-.132c-.081.13933-.191.286-.33.44-.132.14667-.315.26767-.55.363-.235.10267-.539.154-.913.154zm.099-.748c.513 0 .928-.15033 1.243-.451.323-.308.484-.737.484-1.287v-.121h-1.782c-.345 0-.631.077-.858.231-.22.14667-.33.37033-.33.671s.114.53533.341.704c.235.16867.535.253.902.253z\"/><path d=\"m125.82 10.2v-7.579h.847v.891h.154c.14-.27133.363-.51333.671-.726.316-.21267.752-.319 1.309-.319.462 0 .884.11367 1.265.341.389.22.697.53533.924.946.235.41067.352.90567.352 1.485v.143c0 .572-.113 1.067-.341 1.485-.227.418-.535.737-.924.957-.381.22-.806.33-1.276.33-.374 0-.693-.05133-.957-.154-.256-.09533-.465-.22-.627-.374-.161-.154-.286-.31167-.374-.473h-.154v3.047zm2.75-2.816c.558 0 1.009-.176 1.353-.528.352-.35933.528-.858.528-1.496v-.099c0-.638-.176-1.133-.528-1.485-.344-.35933-.795-.539-1.353-.539-.55 0-1.004.17967-1.364.539-.352.352-.528.847-.528 1.485v.099c0 .638.176 1.13667.528 1.496.36.352.814.528 1.364.528z\"/><path d=\"m132.899 8v-7.7h.869v3.179h.154c.074-.16133.184-.31167.33-.451.154-.14667.349-.26767.583-.363.242-.09533.547-.143.913-.143.404 0 .763.088 1.078.264.323.16867.58.418.77.748.191.32267.286.726.286 1.21v3.256h-.869v-3.19c0-.53533-.135-.924-.407-1.166-.264-.242-.623-.363-1.078-.363-.52 0-.946.16867-1.276.506-.322.33733-.484.83967-.484 1.507v2.706z\"/><path d=\"m140.118 8.154c-.212 0-.392-.06967-.539-.209-.139-.13933-.209-.319-.209-.539s.07-.39967.209-.539c.147-.13933.327-.209.539-.209.22 0 .4.06967.539.209.14.13933.209.319.209.539s-.069.39967-.209.539c-.139.13933-.319.209-.539.209z\"/><path d=\"m144.078 8.154c-.374 0-.715-.066-1.023-.198s-.55-.32267-.726-.572-.264-.55367-.264-.913c0-.36667.088-.66733.264-.902.176-.242.418-.42167.726-.539.308-.12467.652-.187 1.034-.187h1.815v-.396c0-.38133-.114-.682-.341-.902-.22-.22-.55-.33-.99-.33-.433 0-.77.10633-1.012.319-.242.20533-.407.484-.495.836l-.814-.264c.088-.30067.227-.572.418-.814.19-.24933.443-.44733.759-.594.322-.154.707-.231 1.155-.231.689 0 1.224.17967 1.606.539.381.352.572.85067.572 1.496v2.431c0 .22.102.33.308.33h.495v.737h-.759c-.242 0-.437-.066-.583-.198-.147-.13933-.22-.32267-.22-.55v-.055h-.132c-.081.13933-.191.286-.33.44-.132.14667-.316.26767-.55.363-.235.10267-.539.154-.913.154zm.099-.748c.513 0 .927-.15033 1.243-.451.322-.308.484-.737.484-1.287v-.121h-1.782c-.345 0-.631.077-.858.231-.22.14667-.33.37033-.33.671s.113.53533.341.704c.234.16867.535.253.902.253z\"/><path d=\"m148.755 10.2v-7.579h.847v.891h.154c.139-.27133.363-.51333.671-.726.315-.21267.752-.319 1.309-.319.462 0 .884.11367 1.265.341.389.22.697.53533.924.946.235.41067.352.90567.352 1.485v.143c0 .572-.114 1.067-.341 1.485s-.535.737-.924.957c-.381.22-.807.33-1.276.33-.374 0-.693-.05133-.957-.154-.257-.09533-.466-.22-.627-.374s-.286-.31167-.374-.473h-.154v3.047zm2.75-2.816c.557 0 1.008-.176 1.353-.528.352-.35933.528-.858.528-1.496v-.099c0-.638-.176-1.133-.528-1.485-.345-.35933-.796-.539-1.353-.539-.55 0-1.005.17967-1.364.539-.352.352-.528.847-.528 1.485v.099c0 .638.176 1.13667.528 1.496.359.352.814.528 1.364.528z\"/><path d=\"m155.834 10.2v-7.579h.847v.891h.154c.139-.27133.363-.51333.671-.726.315-.21267.752-.319 1.309-.319.462 0 .884.11367 1.265.341.389.22.697.53533.924.946.235.41067.352.90567.352 1.485v.143c0 .572-.114 1.067-.341 1.485s-.535.737-.924.957c-.381.22-.807.33-1.276.33-.374 0-.693-.05133-.957-.154-.257-.09533-.466-.22-.627-.374s-.286-.31167-.374-.473h-.154v3.047zm2.75-2.816c.557 0 1.008-.176 1.353-.528.352-.35933.528-.858.528-1.496v-.099c0-.638-.176-1.133-.528-1.485-.345-.35933-.796-.539-1.353-.539-.55 0-1.005.17967-1.364.539-.352.352-.528.847-.528 1.485v.099c0 .638.176 1.13667.528 1.496.359.352.814.528 1.364.528z\"/><path d=\"m71.6368 9.375h90.3682v.55h-90.3682z\"/></g></svg>'\n", "import { PostgrestError, createClient } from '@supabase/supabase-js'\n\n/* eslint-disable @typescript-eslint/naming-convention */\ntype Record = {\n  browser?: string;\n  hostname?: string;\n  is_library_metric?: boolean;\n  links_count?: number;\n  links_have_time?: boolean | null;\n  links_raw_columns?: number;\n  links_raw_lines?: number | null;\n  mode?: string | null;\n  nodes_count?: number;\n  nodes_have_time?: boolean | null;\n  nodes_raw_columns?: number;\n  nodes_raw_lines?: number | null;\n}\n/* eslint-disable @typescript-eslint/naming-convention */\n\n// Create a single supabase client for interacting with your database\nexport const supabase = createClient(\n  'https://xovkkfhojasbjinfslpx.supabase.co',\n  // eslint-disable-next-line max-len\n  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhvdmtrZmhvamFzYmppbmZzbHB4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE2OTM1ODQ0ODAsImV4cCI6MjAwOTE2MDQ4MH0.L3-X0p_un0oSTNubPwtfGo0D8g2bkPIfz7CaZ-iRYXY'\n)\n\nexport async function addMetrics (data: Record): Promise<PostgrestError | null> {\n  const { error } = await supabase\n    .from('metrics')\n    .insert(data)\n  return error\n}\n", "var e=[],t=[];function n(n,r){if(n&&\"undefined\"!=typeof document){var a,s=!0===r.prepend?\"prepend\":\"append\",d=!0===r.singleTag,i=\"string\"==typeof r.container?document.querySelector(r.container):document.getElementsByTagName(\"head\")[0];if(d){var u=e.indexOf(i);-1===u&&(u=e.push(i)-1,t[u]={}),a=t[u]&&t[u][s]?t[u][s]:t[u][s]=c()}else a=c();65279===n.charCodeAt(0)&&(n=n.substring(1)),a.styleSheet?a.styleSheet.cssText+=n:a.appendChild(document.createTextNode(n))}function c(){var e=document.createElement(\"style\");if(e.setAttribute(\"type\",\"text/css\"),r.attributes)for(var t=Object.keys(r.attributes),n=0;n<t.length;n++)e.setAttribute(t[n],r.attributes[t[n]]);var a=\"prepend\"===s?\"afterbegin\":\"beforeend\";return i.insertAdjacentElement(a,e),e}}export{n as default};\n", null, "import { CosmosInputLink, CosmosInputNode, GraphConfigInterface, GraphSimulationSettings, GraphEvents } from '@cosmograph/cosmos'\n\nexport type CosmographConfigInterface<N extends CosmosInputNode, L extends CosmosInputLink> = {\n  /**\n   * Do not run the simulation, just render the graph.\n   * Cosmos uses the x and y values of the nodes’ data to determine their position in the graph.\n   * If x and y values are not specified, the position of the nodes will be assigned randomly.\n   * If the value is set to null and the data does not have any links,\n   * Cosmograph will automatically set this value to `true`.\n   * Default value: `null`\n   */\n  disableSimulation?: boolean | null;\n  /**\n   * Show labels for the nodes that are currently visible on the screen,\n   * and automatically update to reflect the current zoom level.\n   * Default: `true`\n   */\n  showDynamicLabels?: boolean;\n  /**\n   * Show labels for the top nodes.\n   * Default: `false`\n   */\n  showTopLabels?: boolean;\n  /**\n   * Sets the maximum number of top nodes to show labels for.\n   * Default: `100`\n   */\n  showTopLabelsLimit?: number;\n  /**\n   * Specify the key that is used to determine the top nodes.\n   * By default, the top nodes are determined by the node degree.\n   * Default: `undefined`\n   */\n  showTopLabelsValueKey?: keyof N;\n  /**\n   * An array of nodes to show labels for.\n   * Default: `undefined`\n   */\n  showLabelsFor?: N[];\n  /**\n   * Whether to show a hovered node label.\n   * Default: `false`\n   */\n  showHoveredNodeLabel?: boolean;\n  /**\n   * Function that  generate custom text for each label.\n   * Default: `n => n.id`\n   * @param node Node object\n   * @returns String that will be used as the label text for that node\n   */\n  nodeLabelAccessor?: (node: N) => string;\n  /**\n   * Specifies the CSS class to use for the labels.\n   * Default: `undefined`\n   */\n  nodeLabelClassName?: string | ((node: N) => string);\n  /**\n   * Specifies the CSS color to use for the labels.\n   * Default: `undefined`\n   */\n  nodeLabelColor?: string | ((node: N) => string);\n  /**\n   * Specifies the CSS class to use for the hovered node label.\n   * Default: `undefined`\n   */\n  hoveredNodeLabelClassName?: string | ((node: N) => string);\n  /**\n   * Specifies the CSS color to use for the hovered node label.\n   * Default: `undefined`\n   */\n  hoveredNodeLabelColor?: string | ((node: N) => string);\n  /**\n   * Callback function that will be called when the data was updated\n   * Default: `undefined`\n   */\n  onSetData?: (nodes: N[], links: L[]) => void;\n  /**\n   * Callback function that will be called when the nodes was filtered by Node Crossfilter.\n   * Default: `undefined`\n   */\n  onNodesFiltered?: (filteredNodes: N[] | undefined) => void;\n  /**\n   * Callback function that will be called when the links was filtered by Link Crossfilter.\n   * Default: `undefined`\n   */\n  onLinksFiltered?: (filteredLinks: L[] | undefined) => void;\n  /**\n   * Callback function that will be called when clicked on a label.\n   * The Node data for this label will be passed as the first argument,\n   * and the corresponding mouse event as the second argument\n   * Default: `undefined`\n   */\n  onLabelClick?: (node: N, event: MouseEvent) => void;\n} & GraphEvents<N> & {\n  /**\n   * Decay coefficient. Use bigger values if you want the simulation to \"cool down\" slower.\n   * Default value: `1000`\n   */\n  simulationDecay?: GraphSimulationSettings<N>['decay'];\n  /**\n   * Gravity force coefficient.\n   * Default value: `0`\n   */\n  simulationGravity?: GraphSimulationSettings<N>['gravity'];\n  /**\n   * Centering to center mass force coefficient.\n   * Default value: `0`\n   */\n  simulationCenter?: GraphSimulationSettings<N>['center'];\n  /**\n   * Repulsion force coefficient.\n   * Default value: `0.1`\n   */\n  simulationRepulsion?: GraphSimulationSettings<N>['repulsion'];\n  /**\n   * Decreases / increases the detalization of the Many-Body force calculations.\n   * When `useQuadtree` is set to `true`, this property corresponds to the Barnes–Hut approximation criterion.\n   * Default value: `1.7`\n   */\n  simulationRepulsionTheta?: GraphSimulationSettings<N>['repulsionTheta'];\n  /**\n   * Barnes–Hut approximation depth.\n   * Can only be used when `useQuadtree` is set `true`.\n   * Default value: `12`\n   */\n  simulationRepulsionQuadtreeLevels?: GraphSimulationSettings<N>['repulsionQuadtreeLevels'];\n  /**\n   * Link spring force coefficient.\n   * Default value: `1`\n   */\n  simulationLinkSpring?: GraphSimulationSettings<N>['linkSpring'];\n  /**\n   * Minimum link distance.\n   * Default value: `2`\n   */\n  simulationLinkDistance?: GraphSimulationSettings<N>['linkDistance'];\n  /**\n   * Range of random link distance values.\n   * Default value: `[1, 1.2]`\n   */\n  simulationLinkDistRandomVariationRange?: GraphSimulationSettings<N>['linkDistRandomVariationRange'];\n  /**\n   * Repulsion coefficient from mouse position.\n   * The repulsion force is activated by pressing the right mouse button.\n   * Default value: `2`\n   */\n  simulationRepulsionFromMouse?: GraphSimulationSettings<N>['repulsionFromMouse'];\n  /**\n   * Friction coefficient.\n   * Default value: `0.85`\n   */\n  simulationFriction?: GraphSimulationSettings<N>['friction'];\n  /**\n   * Callback function that will be called when the simulation starts.\n   * Default value: `undefined`\n   */\n  onSimulationStart?: GraphSimulationSettings<N>['onStart'];\n  /**\n   * Callback function that will be called on every tick of the simulation.\n   * The value of the first argument `alpha` will decrease over time as the simulation\n   * \"cools down\". If there's a node under the cursor, its datum will be passed as the second argument,\n   * index as the third argument and position as the fourth argument:\n   * (alpha: number, node: Node | undefined, index: number | undefined, nodePosition: [number, number] | undefined) => void. Default value: undefined\n   * Default value: `undefined`\n   */\n  onSimulationTick?: GraphSimulationSettings<N>['onTick'];\n  /**\n   * Callback function that will be called when the simulation stops.\n   * Default value: `undefined`\n   */\n  onSimulationEnd?: GraphSimulationSettings<N>['onEnd'];\n  /**\n   * Callback function that will be called when the simulation is paused.\n   * Default value: `undefined`\n   */\n  onSimulationPause?: GraphSimulationSettings<N>['onPause'];\n  /**\n   * Callback function that will be called when the simulation is restarted.\n   * Default value: `undefined`\n   */\n  onSimulationRestart?: GraphSimulationSettings<N>['onRestart'];\n}\n\nexport const defaultCosmographConfig: CosmographConfigInterface<CosmosInputNode, CosmosInputLink> = {\n  disableSimulation: null,\n  showDynamicLabels: true,\n  showTopLabels: false,\n  showTopLabelsLimit: 100,\n  showTopLabelsValueKey: undefined,\n  showLabelsFor: undefined,\n  showHoveredNodeLabel: true,\n  nodeLabelAccessor: n => n.id,\n  nodeLabelClassName: undefined,\n  nodeLabelColor: undefined,\n  hoveredNodeLabelClassName: undefined,\n  hoveredNodeLabelColor: undefined,\n  onSetData: undefined,\n  onNodesFiltered: undefined,\n  onLinksFiltered: undefined,\n  onLabelClick: undefined,\n}\n\nexport type CosmographInputConfig <N extends CosmosInputNode, L extends CosmosInputLink> =\n  CosmographConfigInterface<N, L> &\n  Omit<GraphConfigInterface<N, L>, 'events' | 'simulation' | 'disableSimulation'>\n", "import crossfilter from 'crossfilter2'\n\ntype OnFilterCallback = () => void\ntype OnDataAddedCallback = () => void\ntype OnDataRemovedCallback = () => void\n\nexport class Filter<Record> {\n  private _crossfilter: crossfilter.Crossfilter<Record>\n  private _dimension: crossfilter.Dimension<Record, string | number> | undefined\n  private _selfRemove: () => void\n  private _syncUp: (() => void) | undefined\n  public onFiltered: OnFilterCallback | undefined\n  public onDataAdded: OnDataAddedCallback | undefined\n  public onDataRemoved: OnDataRemovedCallback | undefined\n\n  constructor (crossfilter: crossfilter.Crossfilter<Record>, selfRemove: () => void, syncUp?: () => void) {\n    this._crossfilter = crossfilter\n    this._selfRemove = selfRemove\n    this._syncUp = syncUp\n  }\n\n  public setAccessor (selector: crossfilter.OrderedValueSelector<Record, string | string[] | number | number[]>): void {\n    const { _crossfilter } = this\n    this.dispose()\n    this._dimension = _crossfilter.dimension(selector)\n  }\n\n  public applyFilter (filterValue: (d: unknown) => boolean): void {\n    this._dimension?.filter(filterValue)\n    this._syncUp?.()\n  }\n\n  public clear (): void {\n    this._dimension?.filterAll()\n    this._syncUp?.()\n  }\n\n  public getAllValues (): crossfilter.NaturallyOrderedValue[] | undefined {\n    const { _crossfilter, _dimension } = this\n    if (!_dimension) return undefined\n    return _crossfilter.all().map(_dimension.accessor)\n  }\n\n  public getFilteredValues (): crossfilter.NaturallyOrderedValue[] | undefined {\n    const { _crossfilter, _dimension } = this\n    if (!_dimension) return undefined\n    return _crossfilter.allFiltered().map(_dimension.accessor)\n  }\n\n  public getFilteredRecords (): Record[] {\n    // Crossfilter declaration file does not have any arguments for `allFiltered` function,\n    // but it is present in the code - https://github.com/crossfilter/crossfilter/wiki/API-Reference#crossfilter_isElementFiltered\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    return this._crossfilter.allFiltered([this._dimension])\n  }\n\n  public isActive (): boolean {\n    return this._dimension?.hasCurrentFilter() || false\n  }\n\n  public dispose (): void {\n    this._dimension?.dispose()\n  }\n\n  public remove (): void {\n    this.dispose()\n    this._selfRemove()\n  }\n}\n\nexport class Crossfilter<Record> {\n  private _crossfilter = crossfilter<Record>()\n  private _records: Record[] | undefined\n  private _filters = new Set<Filter<Record>>()\n  private _syncUpFunction: () => void\n  public onFiltered: OnFilterCallback | undefined\n  public onDataAdded: OnDataAddedCallback | undefined\n  public onDataRemoved: OnDataRemovedCallback | undefined\n\n  constructor (syncUpFunction: () => void) {\n    this._syncUpFunction = syncUpFunction\n    this._crossfilter.onChange(eventType => {\n      switch (eventType) {\n        case 'filtered': {\n          this.onFiltered?.()\n          this._filters.forEach(filter => { filter.onFiltered?.() })\n          break\n        }\n        case 'dataAdded': {\n          this.onDataAdded?.()\n          this._filters.forEach(filter => { filter.onDataAdded?.() })\n          break\n        }\n        case 'dataRemoved':{\n          this.onDataRemoved?.()\n          this._filters.forEach(filter => { filter.onDataRemoved?.() })\n          break\n        }\n      }\n    })\n  }\n\n  public addRecords (records: Record[]): void {\n    const { _crossfilter } = this\n    this._records = records\n    _crossfilter.remove()\n    _crossfilter.add(records)\n  }\n\n  public getFilteredRecords (ignoreFilter?: Filter<Record>): Record[] {\n    const { _crossfilter } = this\n    return ignoreFilter?.getFilteredRecords() || _crossfilter.allFiltered()\n  }\n\n  public addFilter (runSyncOnApply = true): Filter<Record> {\n    const filter = new Filter<Record>(this._crossfilter, () => { this._filters.delete(filter) }, runSyncOnApply ? this._syncUpFunction : undefined)\n    this._filters.add(filter)\n    return filter\n  }\n\n  public clearFilters (): void {\n    this._filters.forEach(filter => {\n      filter.clear()\n    })\n  }\n\n  public isAnyFiltersActive (exceptFilter?: Filter<Record>): boolean {\n    for (const filter of this._filters.values()) {\n      if (filter !== exceptFilter && filter.isActive()) return true\n    }\n    return false\n  }\n\n  public getAllRecords (): Record[] | undefined {\n    return this._records\n  }\n}\n", "import { Graph, GraphConfigInterface, GraphEvents, GraphSimulationSettings, CosmosInputNode, CosmosInputLink } from '@cosmograph/cosmos'\nimport { CssLabel, LabelRenderer, LabelOptions } from '@interacta/css-labels'\nimport { merge } from '@cosmograph/ui'\nimport { color } from 'd3-color'\nimport { watermark } from './watermark'\nimport { addMetrics } from '../../api/supabase/supabase'\nimport s from './style.module.css'\n\nimport { defaultCosmographConfig, type CosmographConfigInterface, type CosmographInputConfig } from './config'\nimport type { CosmographData } from './types'\nimport { Crossfilter, Filter } from './crossfilter'\n\nexport class Cosmograph<N extends CosmosInputNode, L extends CosmosInputLink> {\n  private _data: CosmographData<N, L> = { nodes: [], links: [] }\n  private _previousData: CosmographData<N, L> = { nodes: [], links: [] }\n  private _cosmographConfig: CosmographConfigInterface<N, L> = {}\n  private _cosmosConfig: GraphConfigInterface<N, L> = {}\n  private _containerNode: HTMLDivElement\n  private _labelsDivElement: HTMLDivElement\n  private _watermarkDivElement: HTMLDivElement\n  private _canvasElement: HTMLCanvasElement\n  private _hoveredCssLabel: CssLabel\n  private _hoveredNode: N | undefined\n  private _cssLabelsRenderer: LabelRenderer\n  private _selectedNodesSet: Set<N> | undefined\n  private _nodesForTopLabels = new Set<N>()\n  private _nodesForForcedLabels = new Set<N>()\n  private _trackedNodeToLabel = new Map<N, string>()\n  private _isLabelsDestroyed = false\n  private _svgParser = new DOMParser()\n  private _nodesCrossfilter = new Crossfilter<N>(this._applyLinksFilter.bind(this))\n  private _linksCrossfilter = new Crossfilter<L>(this._applyNodesFilter.bind(this))\n  /** Filters nodes based on a links crossfilter result  */\n  private _nodesFilter = this._nodesCrossfilter.addFilter(false)\n  /** Filters links based on a nodes crossfilter result  */\n  private _linksFilter = this._linksCrossfilter.addFilter(false)\n  /** Filters node based on selected nodes */\n  private _selectedNodesFilter = this._nodesCrossfilter.addFilter()\n  private _disableSimulation: boolean | null | undefined\n\n  private _cosmos?: Graph<N, L>\n\n  /**\n  * @deprecated Direct use of the cosmos can lead to unexpected results,\n  * so we do not recommend using it. Will be removed in version 2.0.0\n  * */\n  public cosmos?: Graph<N, L>\n\n  public constructor (containerNode: HTMLDivElement, config?: CosmographInputConfig<N, L>) {\n    this._containerNode = containerNode\n    this._containerNode.classList.add(s.cosmograph)\n    this._cosmographConfig = merge(defaultCosmographConfig, config ?? {})\n    this._cosmosConfig = this._createCosmosConfig(config)\n\n    this._canvasElement = document.createElement('canvas')\n\n    this._labelsDivElement = document.createElement('div')\n    this._watermarkDivElement = document.createElement('div')\n    this._watermarkDivElement.classList.add(s.watermark)\n    this._watermarkDivElement.onclick = () => window.open('https://cosmograph.app/', '_blank')?.focus()\n\n    containerNode.appendChild(this._canvasElement)\n    containerNode.appendChild(this._labelsDivElement)\n    containerNode.appendChild(this._watermarkDivElement)\n\n    this._cssLabelsRenderer = new LabelRenderer(this._labelsDivElement, {\n      dispatchWheelEventElement: this._canvasElement,\n      pointerEvents: 'all',\n      onLabelClick: this._onLabelClick.bind(this),\n    })\n    this._hoveredCssLabel = new CssLabel(this._labelsDivElement)\n    this._hoveredCssLabel.setPointerEvents('all')\n    this._hoveredCssLabel.element.addEventListener('click', this._onHoveredNodeClick.bind(this))\n\n    this._linksFilter.setAccessor(d => ([d.source, d.target]))\n    this._nodesFilter.setAccessor(d => d.id)\n    this._selectedNodesFilter.setAccessor(d => d.id)\n    this._nodesCrossfilter.onFiltered = () => {\n      let selectedNodes\n      if (this._nodesCrossfilter.isAnyFiltersActive()) {\n        selectedNodes = this._nodesCrossfilter.getFilteredRecords()\n        this._cosmos?.selectNodesByIds(selectedNodes.map(d => d.id))\n      } else {\n        this._cosmos?.unselectNodes()\n      }\n      this._updateSelectedNodesSet(selectedNodes)\n      this._cosmographConfig.onNodesFiltered?.(selectedNodes)\n    }\n    this._linksCrossfilter.onFiltered = () => {\n      let selectedLinks\n      if (this._linksCrossfilter.isAnyFiltersActive()) {\n        selectedLinks = this._linksCrossfilter.getFilteredRecords()\n      }\n      this._cosmographConfig.onLinksFiltered?.(selectedLinks)\n    }\n\n    const svgElement = this._svgParser.parseFromString(watermark, 'image/svg+xml').firstChild as SVGElement\n    this._watermarkDivElement?.appendChild(svgElement)\n  }\n\n  public get data (): CosmographData<N, L> {\n    return this._data\n  }\n\n  /**\n   * Progress value indicates how far the simulation goes from 0 to 1,\n   * where 0 represents the start of the simulation and 1 represents the end.\n   */\n  public get progress (): number | undefined {\n    return this._cosmos?.progress\n  }\n\n  /**\n   * A value that gives information about the running simulation status.\n   */\n  public get isSimulationRunning (): boolean | undefined {\n    return this._cosmos?.isSimulationRunning\n  }\n\n  /**\n   * The maximum point size.\n   * This value is the maximum size of the `gl.POINTS` primitive that WebGL can render on the user's hardware.\n   */\n  public get maxPointSize (): number | undefined {\n    return this._cosmos?.maxPointSize\n  }\n\n  /**\n   * Sets the data for the graph.\n   * @param nodes - Nodes to be added to the graph.\n   * @param links - Links to be added to the graph.\n   * @param runSimulation When set to `false`, the simulation won't be started automatically (`true` by default).\n   */\n  public setData (nodes: N[], links: L[], runSimulation = true): void {\n    const { _cosmographConfig } = this\n    this._data = { nodes, links }\n\n    const nextDisableSimulation = _cosmographConfig.disableSimulation === null ? !links.length : _cosmographConfig.disableSimulation\n    // First initialization of Cosmos\n    if (!this._cosmos) {\n      // If `disableSimulation` is `null` and no links are provided, consider that this is an embedding.\n      this._disableSimulation = nextDisableSimulation\n      this._cosmosConfig.disableSimulation = this._disableSimulation\n      this._cosmos = new Graph(this._canvasElement, this._cosmosConfig)\n      this.cosmos = this._cosmos\n    }\n\n    if (this._disableSimulation !== nextDisableSimulation) {\n      console.warn(\n        `The \\`disableSimulation\\` was initialized to \\`${this._disableSimulation}\\` during initialization and will not be modified.`\n      )\n    }\n\n    this._cosmos.setData(nodes, links, runSimulation)\n    this._nodesCrossfilter.addRecords(nodes)\n    this._linksCrossfilter.addRecords(links)\n    this._updateLabels()\n    this._cosmographConfig.onSetData?.(nodes, links)\n\n    if (this._isDataDifferent()) {\n    /* eslint-disable @typescript-eslint/naming-convention */\n      if (!['cosmograph.app'].includes(window.location.hostname)) {\n        addMetrics({\n          browser: navigator.userAgent,\n          hostname: window.location.hostname,\n          mode: null,\n          is_library_metric: true,\n          links_count: links.length,\n          links_have_time: null,\n          links_raw_columns: links.length ? Object.keys(links?.[0] as L).length ?? 0 : 0,\n          links_raw_lines: null,\n          nodes_count: nodes.length,\n          nodes_have_time: null,\n          nodes_raw_columns: nodes.length ? Object.keys(nodes?.[0] as N).length ?? 0 : 0,\n          nodes_raw_lines: null,\n        })\n      }\n    }\n    this._previousData = { nodes, links }\n    /* eslint-enable @typescript-eslint/naming-convention */\n  }\n\n  /**\n   * Sets the config for the graph.\n   * @param config - Config to be applied to the graph.\n   */\n  public setConfig (config?: CosmographInputConfig<N, L>): void {\n    this._cosmographConfig = merge(defaultCosmographConfig, config ?? {})\n    this._cosmosConfig = this._createCosmosConfig(config)\n    this._cosmos?.setConfig(this._cosmosConfig)\n    if (config?.backgroundColor) {\n      const hexColor = color(config?.backgroundColor)?.formatHex()\n      if (hexColor) {\n        const brightness = this._checkBrightness(hexColor)\n        const root = document.querySelector(':root') as HTMLDivElement\n        if (brightness > 0.65) {\n          root?.style.setProperty('--cosmograph-watermark-color', '#000000')\n        } else {\n          root?.style.setProperty('--cosmograph-watermark-color', '#ffffff')\n        }\n      }\n    }\n    this._updateLabels()\n  }\n\n  /**\n   * Creates a filter for the nodes, adds the filter to the nodes crossfilter and returns this filter.\n   */\n  public addNodesFilter (): Filter<N> {\n    return this._nodesCrossfilter.addFilter()\n  }\n\n  /**\n   * Creates a filter for the links, adds the filter to the links crossfilter and returns this filter.\n   */\n  public addLinksFilter (): Filter<L> {\n    return this._linksCrossfilter.addFilter()\n  }\n\n  /**\n   * Selects nodes inside a rectangular area.\n   * @param selection Array of two corners of the rectangle `[[left, top], [right, bottom]]`.\n   * The `left` and `right` coordinates should be relative to the width of the canvas. The\n   * `top` and `bottom` coordinates should be relative to the height of the canvas.\n   */\n  public selectNodesInRange (selection: [[number, number], [number, number]] | null): void {\n    if (!this._cosmos) return\n    this._cosmos.selectNodesInRange(selection)\n    const selectedNodeIds = new Set((this.getSelectedNodes() ?? []).map(d => d.id))\n    this._selectedNodesFilter.applyFilter(d => selectedNodeIds.has(d as string))\n  }\n\n  /**\n   * Selects nodes.\n   * @param nodes Array of nodes to be selected.\n   */\n  public selectNodes (nodes: N[]): void {\n    if (!this._cosmos) return\n    const selectedNodeIds = new Set(nodes.map(d => d.id))\n    this._selectedNodesFilter.applyFilter(d => selectedNodeIds.has(d as string))\n  }\n\n  /**\n   * Selects a node and, optionally, select its connected nodes.\n   * @param node Selected node.\n   * @param selectAdjacentNodes Optional parameter determining whether to also select the connected nodes.\n   */\n  public selectNode (node: N, selectAdjacentNodes = false): void {\n    if (!this._cosmos) return\n    const selectedNodes = new Set([node, ...(selectAdjacentNodes ? (this._cosmos.getAdjacentNodes(node.id) || []) : [])].map(d => d.id))\n    this._selectedNodesFilter.applyFilter(d => selectedNodes.has(d as string))\n  }\n\n  /**\n   * Unselects all nodes.\n   */\n  public unselectNodes (): void {\n    if (!this._cosmos) return\n    this._selectedNodesFilter.clear()\n  }\n\n\n  /**\n   * Get nodes that are currently selected.\n   * @returns Array of selected nodes.\n   */\n  public getSelectedNodes (): N[] | null | undefined {\n    if (!this._cosmos) return\n    return this._cosmos.getSelectedNodes()\n  }\n\n  /**\n   * Center the view and zoom in to a node.\n   * @param node Node to be zoomed in.\n   */\n  public zoomToNode (node: N): void {\n    if (!this._cosmos) return\n    this._cosmos.zoomToNodeById(node.id)\n  }\n\n  /**\n   * Zoom the view in or out to the specified zoom level.\n   * @param value Zoom level\n   * @param duration Duration of the zoom in/out transition.\n   */\n\n  public setZoomLevel (value: number, duration = 0): void {\n    if (!this._cosmos) return\n    this._cosmos.setZoomLevel(value, duration)\n  }\n\n  /**\n   * Get zoom level.\n   * @returns Zoom level value of the view.\n   */\n  public getZoomLevel (): number | undefined {\n    if (!this._cosmos) return\n    return this._cosmos.getZoomLevel()\n  }\n\n  /**\n   * Get current X and Y coordinates of the nodes.\n   * @returns Object where keys are the ids of the nodes and values are corresponding `{ x: number; y: number }` objects.\n   */\n  public getNodePositions (): { [key: string]: { x: number; y: number } } | undefined {\n    if (!this._cosmos) return\n    return this._cosmos.getNodePositions()\n  }\n\n  /**\n   * Get current X and Y coordinates of the nodes.\n   * @returns A Map object where keys are the ids of the nodes and values are their corresponding X and Y coordinates in the [number, number] format.\n   */\n  public getNodePositionsMap (): Map<string, [number, number]> | undefined {\n    if (!this._cosmos) return\n    return this._cosmos.getNodePositionsMap()\n  }\n\n  /**\n   * Get current X and Y coordinates of the nodes.\n   * @returns Array of `[x: number, y: number]` arrays.\n   */\n  public getNodePositionsArray (): [number, number][] | undefined {\n    if (!this._cosmos) return\n    return this._cosmos.getNodePositionsArray()\n  }\n\n  /**\n   * Center and zoom in/out the view to fit all nodes in the scene.\n   * @param duration Duration of the center and zoom in/out animation in milliseconds (`250` by default).\n   */\n  public fitView (duration = 250): void {\n    if (!this._cosmos) return\n    this._cosmos.fitView(duration)\n  }\n\n  /**\n   * Center and zoom in/out the view to fit nodes by their ids in the scene.\n   * @param duration Duration of the center and zoom in/out animation in milliseconds (`250` by default).\n   */\n  public fitViewByNodeIds (ids: string[], duration = 250): void {\n    if (!this._cosmos) return\n    this._cosmos.fitViewByNodeIds(ids, duration)\n  }\n\n  /**\n   * Set focus on a node. A ring will be drawn around the focused node.\n   * If no node is focused, the ring will be cleared.\n   * @param node Node to be focused.\n   */\n  public focusNode (node?: N): void {\n    if (!this._cosmos) return\n    this._cosmos.setFocusedNodeById(node?.id)\n  }\n\n  /**\n   * Get nodes that are adjacent to a specific node by its id.\n   * @param id Id of the node.\n   * @returns Array of adjacent nodes.\n   */\n\n  public getAdjacentNodes (id: string): N[] | undefined {\n    if (!this._cosmos) return\n    return this._cosmos.getAdjacentNodes(id)\n  }\n\n  /**\n   * Converts the X and Y node coordinates from the space coordinate system to the screen coordinate system.\n   * @param spacePosition Array of x and y coordinates in the space coordinate system.\n   * @returns Array of x and y coordinates in the screen coordinate system.\n   */\n\n  public spaceToScreenPosition (spacePosition: [number, number]): [number, number] | undefined {\n    if (!this._cosmos) return\n    return this._cosmos.spaceToScreenPosition(spacePosition)\n  }\n\n  /**\n   * Converts the node radius value from the space coordinate system to the screen coordinate system.\n   * @param spaceRadius Radius of Node in the space coordinate system.\n   * @returns Radius of Node in the screen coordinate system.\n   */\n  public spaceToScreenRadius (spaceRadius: number): number | undefined {\n    if (!this._cosmos) return\n    return this._cosmos.spaceToScreenRadius(spaceRadius)\n  }\n\n  /**\n   * Get node radius by its index.\n   * @param index Index of the node.\n   * @returns Radius of the node.\n   */\n  public getNodeRadiusByIndex (index: number): number | undefined {\n    if (!this._cosmos) return\n    return this._cosmos.getNodeRadiusByIndex(index)\n  }\n\n  /**\n   * Get node radius by its id.\n   * @param id Id of the node.\n   * @returns Radius of the node.\n   */\n  public getNodeRadiusById (id: string): number | undefined {\n    if (!this._cosmos) return\n    return this._cosmos.getNodeRadiusById(id)\n  }\n\n  /**\n   * For the nodes that are currently visible on the screen, get a sample of node ids with their coordinates.\n   * The resulting number of nodes will depend on the `nodeSamplingDistance` configuration property,\n   * and the sampled nodes will be evenly distributed.\n   * @returns A Map object where keys are the ids of the nodes and values are their corresponding X and Y coordinates in the [number, number] format.\n   */\n  public getSampledNodePositionsMap (): Map<string, [number, number]> | undefined {\n    if (!this._cosmos) return\n    return this._cosmos.getSampledNodePositionsMap()\n  }\n\n  /**\n   * Starts the simulation.\n   * @param alpha Value between 0 and 1. The higher the value,\n   * the more initial energy the simulation will get.\n   */\n  public start (alpha = 1): void {\n    if (!this._cosmos) return\n    this._cosmos.start(alpha)\n  }\n\n  /**\n   * Pause the simulation.\n   */\n  public pause (): void {\n    if (!this._cosmos) return\n    this._cosmos.pause()\n  }\n\n  /**\n   * Restarts the simulation.\n   */\n  public restart (): void {\n    if (!this._cosmos) return\n    this._cosmos.restart()\n  }\n\n  /**\n   * Render only one frame of the simulation (stops the simulation if it was running).\n   */\n  public step (): void {\n    if (!this._cosmos) return\n    this._cosmos.step()\n  }\n\n  /**\n   * Destroy the graph and clean up the context.\n   */\n  public remove (): void {\n    this._cosmos?.destroy()\n    if (this._isLabelsDestroyed) return\n    this._containerNode.innerHTML = ''\n    this._isLabelsDestroyed = true\n    this._hoveredCssLabel.element.removeEventListener('click', this._onHoveredNodeClick.bind(this))\n    this._hoveredCssLabel.destroy()\n    this._cssLabelsRenderer.destroy()\n  }\n\n  /**\n   * Create new Cosmos instance.\n   */\n  public create (): void {\n    if (!this._cosmos) return\n    this._cosmos.create()\n  }\n\n  /**\n   * Returns an array of nodes with their degree values in the order they were sent to Cosmograph.\n   */\n  public getNodeDegrees (): number[] | undefined {\n    if (!this._cosmos) return\n    return this._cosmos.graph.degree\n  }\n\n  private _createCosmosConfig (config?: CosmographInputConfig<N, L>): GraphConfigInterface<N, L> {\n    const cosmosConfig = {\n      ...config,\n      simulation: {\n        ...Object.keys(config ?? {})\n          .filter(d => d.indexOf('simulation') !== -1)\n          .reduce<Record<string, any>>((acc, d) => {\n          const key = d.replace('simulation', '')\n          acc[key.charAt(0).toLowerCase() + key.slice(1)] = config?.[d as keyof CosmographInputConfig<N, L>]\n          return acc\n        }, {}),\n        onStart: this._onStart.bind(this),\n        onTick: this._onTick.bind(this),\n        onEnd: this._onEnd.bind(this),\n        onPause: this._onPause.bind(this),\n        onRestart: this._onRestart.bind(this),\n      },\n      events: {\n        onClick: this._onClick.bind(this),\n        onNodeMouseOver: this._onNodeMouseOver.bind(this),\n        onNodeMouseOut: this._onNodeMouseOut.bind(this),\n        onMouseMove: this._onMouseMove.bind(this),\n        onZoomStart: this._onZoomStart.bind(this),\n        onZoom: this._onZoom.bind(this),\n        onZoomEnd: this._onZoomEnd.bind(this),\n      },\n    }\n    delete cosmosConfig.disableSimulation\n\n    return cosmosConfig as Omit<CosmographInputConfig<N, L>, 'disableSimulation'>\n  }\n\n  private _updateLabels (): void {\n    if (this._isLabelsDestroyed || !this._cosmos) return\n    const { _cosmos, data: { nodes }, _cosmographConfig: { showTopLabels, showTopLabelsLimit, showLabelsFor, showTopLabelsValueKey, nodeLabelAccessor } } = this\n    this._nodesForTopLabels.clear()\n\n    if (showTopLabels && showTopLabelsLimit) {\n      let sortedNodes: (N | undefined)[]\n      if (showTopLabelsValueKey) {\n        sortedNodes = [...nodes].sort((a, b) => {\n          const aValue = a[showTopLabelsValueKey]\n          const bValue = b[showTopLabelsValueKey]\n\n          if (typeof aValue === 'number' && typeof bValue === 'number') return bValue - aValue\n          else return 0\n        })\n      } else {\n        sortedNodes = Object.entries(_cosmos.graph.degree)\n          .sort((a, b) => b[1] - a[1])\n          .slice(0, showTopLabelsLimit)\n          .map(d => _cosmos.graph.getNodeByIndex(+d[0]))\n      }\n      for (let i = 0; i < showTopLabelsLimit; i++) {\n        if (i >= nodes.length) break\n        const node = sortedNodes[i]\n        if (node) this._nodesForTopLabels.add(node)\n      }\n    }\n    this._nodesForForcedLabels.clear()\n    showLabelsFor?.forEach(this._nodesForForcedLabels.add, this._nodesForForcedLabels)\n\n    this._trackedNodeToLabel.clear()\n    _cosmos.trackNodePositionsByIds([\n      ...(showTopLabels ? this._nodesForTopLabels : []),\n      ...this._nodesForForcedLabels,\n    ].map(d => {\n      this._trackedNodeToLabel.set(d, nodeLabelAccessor?.(d) ?? d.id)\n      return d.id\n    }))\n    this._renderLabels()\n  }\n\n  private _updateSelectedNodesSet (selectedNodes: N[] | undefined): void {\n    if (this._isLabelsDestroyed) return\n    if (selectedNodes) {\n      this._selectedNodesSet = new Set<N>()\n      selectedNodes?.forEach(this._selectedNodesSet.add, this._selectedNodesSet)\n    } else {\n      this._selectedNodesSet = undefined\n    }\n    this._renderLabels()\n  }\n\n  private _renderLabels (): void {\n    if (this._isLabelsDestroyed || !this._cosmos) return\n    const { _cosmos, _selectedNodesSet, _cosmographConfig: { showDynamicLabels, nodeLabelAccessor, nodeLabelColor, nodeLabelClassName } } = this\n    let labels: LabelOptions[] = []\n    const trackedNodesPositions = _cosmos.getTrackedNodePositionsMap()\n    const nodeToLabelInfo = new Map<N, [string | undefined, [number, number] | undefined, string, number]>()\n    if (showDynamicLabels) {\n      const sampledNodesPositions = this.getSampledNodePositionsMap()\n      sampledNodesPositions?.forEach((positions, id) => {\n        const node = _cosmos.graph.getNodeById(id)\n        if (node) nodeToLabelInfo.set(node, [nodeLabelAccessor?.(node) ?? node.id, positions, s.cosmographShowDynamicLabels, 0.7])\n      })\n    }\n    this._nodesForTopLabels.forEach(node => {\n      nodeToLabelInfo.set(node, [this._trackedNodeToLabel.get(node), trackedNodesPositions.get(node.id), s.cosmographShowTopLabels, 0.9])\n    })\n    this._nodesForForcedLabels.forEach(node => {\n      nodeToLabelInfo.set(node, [this._trackedNodeToLabel.get(node), trackedNodesPositions.get(node.id), s.cosmographShowLabelsFor, 1.0])\n    })\n    labels = [...nodeToLabelInfo.entries()].map(([p, [text, positions, className, weight]]) => {\n      const screenPosition = this.spaceToScreenPosition([positions?.[0] ?? 0, positions?.[1] ?? 0]) as [number, number]\n      const radius = this.spaceToScreenRadius(_cosmos.config.nodeSizeScale * (this.getNodeRadiusById(p.id) as number)) as number\n      const hasSelectedNodes = !!_selectedNodesSet\n      const isNodeSelected = _selectedNodesSet?.has(p)\n      return {\n        id: p.id,\n        text: text ?? '',\n        x: screenPosition[0],\n        y: screenPosition[1] - (radius / 2) - radius * 0.1,\n        weight: (hasSelectedNodes && !isNodeSelected) ? 0.1 : weight,\n        shouldBeShown: this._nodesForForcedLabels.has(p),\n        style: (hasSelectedNodes && !isNodeSelected) ? 'opacity: 0.1;' : '',\n        color: nodeLabelColor && (typeof nodeLabelColor === 'string' ? nodeLabelColor : nodeLabelColor?.(p)),\n        className: (typeof nodeLabelClassName === 'string' ? nodeLabelClassName : nodeLabelClassName?.(p)) ?? className,\n      }\n    })\n    this._cssLabelsRenderer.setLabels(labels)\n    this._cssLabelsRenderer.draw(true)\n  }\n\n  private _renderLabelForHovered (node?: N, nodeSpacePosition?: [number, number]): void {\n    if (!this._cosmos) return\n    const { _cosmographConfig: { showHoveredNodeLabel, nodeLabelAccessor, hoveredNodeLabelClassName, hoveredNodeLabelColor } } = this\n    if (this._isLabelsDestroyed) return\n\n    if (showHoveredNodeLabel && node && nodeSpacePosition) {\n      const screenPosition = this.spaceToScreenPosition(nodeSpacePosition) as [number, number]\n      const radius = this.spaceToScreenRadius(this.getNodeRadiusById(node.id) as number) as number\n      this._hoveredCssLabel.setText(nodeLabelAccessor?.(node) ?? node.id)\n      this._hoveredCssLabel.setVisibility(true)\n      this._hoveredCssLabel.setPosition(screenPosition[0], screenPosition[1] - (radius / 2) - radius * 0.1)\n      this._hoveredCssLabel.setClassName(\n        typeof hoveredNodeLabelClassName === 'string' ? hoveredNodeLabelClassName : hoveredNodeLabelClassName?.(node) ?? ''\n      )\n      const textColor = hoveredNodeLabelColor && (typeof hoveredNodeLabelColor === 'string' ? hoveredNodeLabelColor : hoveredNodeLabelColor?.(node))\n      if (textColor) this._hoveredCssLabel.setColor(textColor)\n    } else {\n      this._hoveredCssLabel.setVisibility(false)\n    }\n    this._hoveredCssLabel.draw()\n  }\n\n  /** Apply crossfiltered nodes result to links crossfilter */\n  private _applyLinksFilter (): void {\n    if (this._nodesCrossfilter.isAnyFiltersActive(this._nodesFilter)) {\n      const crossSelectedNodes = this._nodesCrossfilter.getFilteredRecords(this._nodesFilter)\n      const crossSelectedNodeIdSet = new Set(crossSelectedNodes.map(d => d.id))\n      this._linksFilter.applyFilter(d => {\n        const source = (d as [string, string])?.[0]\n        const target = (d as [string, string])?.[1]\n        return crossSelectedNodeIdSet.has(source) && crossSelectedNodeIdSet.has(target)\n      })\n    } else {\n      this._linksFilter.clear()\n    }\n  }\n\n  /** Apply crossfiltered links result to nodes crossfilter */\n  private _applyNodesFilter (): void {\n    if (this._linksCrossfilter.isAnyFiltersActive(this._linksFilter)) {\n      const crossSelectedLinks = this._linksCrossfilter.getFilteredRecords(this._linksFilter)\n      const crossSelectedNodeIdSet = new Set(crossSelectedLinks.map(d => ([d.source, d.target])).flat())\n      this._nodesFilter.applyFilter(d => crossSelectedNodeIdSet.has(d as string))\n    } else {\n      this._nodesFilter.clear()\n    }\n  }\n\n  private _checkBrightness (hex: string): number {\n    const hexToRgb = (hex: string): { r: number; g: number; b: number } => {\n      const parsed = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n      return parsed ? {\n        r: parseInt((parsed[1] || 0).toString(), 16),\n        g: parseInt((parsed[2] || 0).toString(), 16),\n        b: parseInt((parsed[3] || 0).toString(), 16),\n      } : { r: 0, g: 0, b: 0 }\n    }\n    const rgb = hexToRgb(hex)\n    return (0.2126 * rgb.r + 0.7152 * rgb.g + 0.0722 * rgb.b) / 255\n  }\n\n  private _isDataDifferent = (): boolean => {\n    const nodesJSON = JSON.stringify(this._data.nodes)\n    const prevNodesJSON = JSON.stringify(this._previousData.nodes)\n    const linksJSON = JSON.stringify(this._data.links)\n    const prevLinksJSON = JSON.stringify(this._previousData.links)\n\n    if (nodesJSON !== prevNodesJSON || linksJSON !== prevLinksJSON) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  private _onClick: Exclude<GraphEvents<N>['onClick'], undefined> = (...args) => {\n    this._cosmographConfig.onClick?.(...args)\n  }\n\n  private _onLabelClick = (e: MouseEvent, label: LabelOptions): void => {\n    const node = this._cosmos?.graph.getNodeById(label.id)\n    if (!node) return\n    this._cosmographConfig.onLabelClick?.(node, e)\n  }\n\n  private _onHoveredNodeClick = (e: MouseEvent): void => {\n    if (!this._hoveredNode) return\n    this._cosmographConfig.onLabelClick?.(this._hoveredNode, e)\n  }\n\n  private _onNodeMouseOver: Exclude<GraphEvents<N>['onNodeMouseOver'], undefined> = (...args) => {\n    this._cosmographConfig.onNodeMouseOver?.(...args)\n    const [hoveredNode, , nodePosition] = args\n    this._hoveredNode = hoveredNode\n    this._renderLabelForHovered(hoveredNode, nodePosition)\n  }\n\n  private _onNodeMouseOut: Exclude<GraphEvents<N>['onNodeMouseOut'], undefined> = (...args) => {\n    this._cosmographConfig.onNodeMouseOut?.(...args)\n    this._renderLabelForHovered()\n  }\n\n  private _onMouseMove: Exclude<GraphEvents<N>['onMouseMove'], undefined> = (...args) => {\n    this._cosmographConfig.onMouseMove?.(...args)\n    const [node, , nodePosition] = args\n    this._renderLabelForHovered(node, nodePosition)\n  }\n\n  private _onZoomStart: Exclude<GraphEvents<N>['onZoomStart'], undefined> = (...args) => {\n    this._cosmographConfig.onZoomStart?.(...args)\n  }\n\n  private _onZoom: Exclude<GraphEvents<N>['onZoom'], undefined> = (...args) => {\n    this._cosmographConfig.onZoom?.(...args)\n    this._renderLabelForHovered()\n    this._renderLabels()\n  }\n\n  private _onZoomEnd: Exclude<GraphEvents<N>['onZoomEnd'], undefined> = (...args) => {\n    this._cosmographConfig.onZoomEnd?.(...args)\n  }\n\n  private _onStart: Exclude<GraphSimulationSettings<N>['onStart'], undefined> = (...args) => {\n    this._cosmographConfig.onSimulationStart?.(...args)\n  }\n\n  private _onTick: Exclude<GraphSimulationSettings<N>['onTick'], undefined> = (...args) => {\n    this._cosmographConfig.onSimulationTick?.(...args)\n    this._renderLabels()\n  }\n\n  private _onEnd: Exclude<GraphSimulationSettings<N>['onEnd'], undefined> = (...args) => {\n    this._cosmographConfig.onSimulationEnd?.(...args)\n  }\n\n  private _onPause: Exclude<GraphSimulationSettings<N>['onPause'], undefined> = (...args) => {\n    this._cosmographConfig.onSimulationPause?.(...args)\n  }\n\n  private _onRestart: Exclude<GraphSimulationSettings<N>['onRestart'], undefined> = (...args) => {\n    this._cosmographConfig.onSimulationRestart?.(...args)\n  }\n}\n\nexport type { CosmographData, CosmographConfigInterface, CosmographInputConfig, Filter }\n", "import { CosmosInputNode } from '@cosmograph/cosmos'\nimport type { SearchConfigInterface, SearchEvents } from '@cosmograph/ui'\n\nexport type CosmographSearchConfigInterface<N extends CosmosInputNode> = {\n  /**\n   * Callback function that will be called when the user selects an item from the suggestions list.\n   * Provides selected node as argument.\n   */\n  onSelectResult?: (node?: N) => void;\n} & Omit<SearchEvents<N>, 'onSelect'>\n\nexport const defaultCosmographSearchConfig: CosmographSearchInputConfig<CosmosInputNode> = {\n  onSelectResult: undefined,\n  accessors: undefined,\n}\n\nexport type CosmographSearchInputConfig<N extends CosmosInputNode> =\n  CosmographSearchConfigInterface<N> & Omit<SearchConfigInterface<N>, 'events'>\n", "import { CosmosInputNode, CosmosInputLink } from '@cosmograph/cosmos'\nimport { Search, type SearchConfigInterface, merge, SearchEvents, SearchAccessorOption } from '@cosmograph/ui'\nimport { CosmographSearchInputConfig, CosmographSearchConfigInterface, defaultCosmographSearchConfig } from './config'\nimport { Cosmograph, Filter } from '../cosmograph'\n\nexport class CosmographSearch<N extends CosmosInputNode, L extends CosmosInputLink> {\n  private _cosmograph: Cosmograph<N, L>\n  private _config: CosmographSearchInputConfig<N> = {}\n  private _data: N[] = []\n  private _filter: Filter<CosmosInputNode>\n  private _defaultAccessors: SearchAccessorOption<N>[] = []\n\n  public search: Search<N>\n\n  public constructor (cosmograph: Cosmograph<N, L>, targetElement: HTMLElement, config?: SearchConfigInterface<N>) {\n    this._cosmograph = cosmograph\n    this._config = merge(defaultCosmographSearchConfig, config ?? {}) as CosmographSearchInputConfig<N>\n    this.search = new Search<N>(targetElement, this._createSearchConfig(config))\n    this._filter = this._cosmograph.addNodesFilter()\n    this._filter.onDataAdded = () => {\n      this._updateData()\n    }\n    this._updateData()\n  }\n\n  /**  `setConfig`: Sets config for the `Search` instance. */\n  public setConfig (config?: CosmographSearchInputConfig<N>): void {\n    const nextConfig = merge(defaultCosmographSearchConfig, config ?? {})\n    // Check if `accessors` is still empty after merging configs,\n    // if yes - use default `accessors`\n    if (this._data.length && nextConfig.accessors === undefined) {\n      nextConfig.accessors = this._defaultAccessors as (SearchAccessorOption<CosmosInputNode>[] & SearchAccessorOption<N>[]) | undefined\n    }\n    this.search.setConfig(this._createSearchConfig(nextConfig))\n    this._config = nextConfig\n  }\n\n  private _updateData (): void {\n    const data = this._cosmograph.data.nodes\n    if (data?.length) {\n      this._data = data as unknown as N[]\n      this.search.setData(this._data)\n      if (this._config.accessors === undefined) {\n        this._defaultAccessors = this._createDefaultAccessorOptions(this._data)\n        this.setConfig({ accessors: this._defaultAccessors })\n      }\n    }\n  }\n\n\n  /**  `getConfig`: Returns current `Search` configuration. */\n  public getConfig (): CosmographSearchConfigInterface<N> {\n    return this._config\n  }\n\n  /**  `remove`: Destroys current `Search` instance. */\n  public remove (): void {\n    this.search.destroy()\n  }\n\n  /**  `setListState`: Manages the state of the `Search` suggestions/accessors dropdown list. */\n  public setListState (state: boolean): void {\n    this.search.setListState(state)\n  }\n\n  /**  `clearInput`: Clears the text input of `Search` instance. */\n  public clearInput (): void {\n    this.search.clearInput()\n  }\n\n  private _createDefaultAccessorOptions = (data: N[]): SearchAccessorOption<N>[] => {\n    if (data.length > 0 && data[0]) {\n      return Object.keys(data[0]).map((key) => {\n        return { label: key, accessor: (n: N) => String(n[key as keyof typeof n]) }\n      })\n    } else {\n      return [{ label: 'id', accessor: (n: N) => n.id }]\n    }\n  }\n\n  private _onSelectResult (node: N): void {\n    this._cosmograph.pause()\n    this._cosmograph.zoomToNode(node)\n    this._cosmograph.selectNode(node)\n    this._config.onSelectResult?.(node)\n  }\n\n  private _createSearchConfig (config?: CosmographSearchInputConfig<N>): SearchConfigInterface<N> {\n    return {\n      ...config,\n      events: {\n        onSelect: this._onSelect.bind(this),\n        onSearch: this._onSearch.bind(this),\n        onEnter: this._onEnter.bind(this),\n        onAccessorSelect: this._onAccessorSelect.bind(this),\n      },\n    }\n  }\n\n  private _onSelect: Exclude<SearchEvents<N>['onSelect'], undefined> = (...args) => {\n    this._onSelectResult(...args)\n    // this._config.onSelect?.(...args)\n  }\n\n  private _onSearch: Exclude<SearchEvents<N>['onSearch'], undefined> = (...args) => {\n    this._config.onSearch?.(...args)\n  }\n\n  private _onEnter: Exclude<SearchEvents<N>['onEnter'], undefined> = (...args) => {\n    this._config.onEnter?.(...args)\n  }\n\n  private _onAccessorSelect: Exclude<SearchEvents<N>['onAccessorSelect'], undefined> = (...args) => {\n    this._config.onAccessorSelect?.(...args)\n  }\n}\n\nexport type { SearchConfigInterface as CosmographSearchConfigInterface, CosmographSearchInputConfig }\n", "import { CosmosInputNode, CosmosInputLink } from '@cosmograph/cosmos'\n\nexport type CosmographData<N extends CosmosInputNode = CosmosInputNode, L extends CosmosInputLink = CosmosInputLink> = { nodes: N[]; links: L[] }\n\nexport enum FilterType {\n  Nodes = 'nodes',\n  Links = 'links',\n}\n", "import { TimelineEvents, type TimelineConfigInterface } from '@cosmograph/ui'\nimport { FilterType } from '../cosmograph/types'\n\nexport type CosmographTimelineConfigInterface<Datum> = {\n  /** `timeAccessor`: Data key to access time values from `L` data for the `CosmographTimeline`. Default: `date` */\n  accessor?: (d: Datum) => Date | number;\n  /** `filterType` Defines which types of Cosmograph Crossfilter to use.\n   * Can only be set once during initialization. Default: `nodes` */\n  filterType?: FilterType | string;\n  /**  `onSelection`: Callback for the range selection. Provides current selection of `CosmographTimeline`. */\n  onSelection?: Exclude<TimelineEvents['onBrush'], undefined>;\n} & Omit<TimelineEvents, 'onBrush'>\n\nexport const defaultCosmographTimelineConfig: CosmographTimelineConfigInterface<unknown> = {\n  accessor: l => (l as {date: Date | number}).date,\n  filterType: FilterType.Links,\n}\n\nexport type CosmographTimelineInputConfig<Datum> =\n  CosmographTimelineConfigInterface<Datum> & Omit<TimelineConfigInterface, 'events'>\n", "import { CosmosInputNode, CosmosInputLink } from '@cosmograph/cosmos'\nimport { Timeline, TimelineConfigInterface, type TimelineData, TimelineEvents, merge } from '@cosmograph/ui'\nimport { Cosmograph, Filter } from '../cosmograph'\nimport { FilterType } from '../cosmograph/types'\nimport { CosmographTimelineInputConfig, CosmographTimelineConfigInterface, defaultCosmographTimelineConfig } from './config'\n\nexport class CosmographTimeline<Datum> {\n  private _cosmograph: Cosmograph<CosmosInputNode, CosmosInputLink>\n  private _config: CosmographTimelineConfigInterface<Datum> = {}\n  private _filter: Filter<CosmosInputNode | CosmosInputLink>\n\n  public timeline: Timeline\n\n  public constructor (cosmograph: Cosmograph<CosmosInputNode, CosmosInputLink>, targetElement: HTMLElement, config?: CosmographTimelineInputConfig<Datum>) {\n    this._config = merge(defaultCosmographTimelineConfig, config ?? {})\n    this.timeline = new Timeline(targetElement, this._createTimelineConfig(config))\n    this._cosmograph = cosmograph\n    this._filter = this._config.filterType === FilterType.Nodes ? this._cosmograph.addNodesFilter() : this._cosmograph.addLinksFilter()\n    this._filter.onDataAdded = () => {\n      this._updateData()\n    }\n    this._updateDimension()\n    this._updateData()\n  }\n\n  /**\n   * Sets the configuration for the timeline.\n   * @param config Configuration to be applied to the timeline.\n   */\n  public setConfig (config?: CosmographTimelineInputConfig<Datum>): void {\n    const nextConfig = merge(defaultCosmographTimelineConfig, config ?? {})\n    this.timeline.setConfig(this._createTimelineConfig(config))\n    if (this._config.accessor?.toString() !== nextConfig.accessor?.toString()) {\n      this._updateData()\n    }\n    this._config = nextConfig\n  }\n\n  /**  `getCurrentSelection`: Returns current brush selection in data units (`Date` or `number`). */\n  public getCurrentSelection (): [Date, Date] | [number, number] | undefined {\n    return this.timeline.getCurrentSelection()\n  }\n\n  /**  `getCurrentSelectionInPixels`: Returns current brush selection in pixels. */\n  public getCurrentSelectionInPixels (): [number, number] | undefined {\n    return this.timeline.getCurrentSelectionInPixels()\n  }\n\n  /**  `getBarWidth`: Returns computed bar width in pixels */\n  public getBarWidth (): number {\n    return this.timeline.getBarWidth()\n  }\n\n  /**  `getIsAnimationRunning`: Returns a boolean value indicating if the animation is running. */\n  public getIsAnimationRunning (): boolean {\n    return this.timeline.getIsAnimationRunning()\n  }\n\n  /**  `setSelection`: Set the selected range on a `Timeline`. Takes a selection range as a parameter, which can be a range of dates or a range of numbers if `TimelineData` is numeric. */\n  public setSelection (selectionRange?: [Date, Date] | [number, number]): void {\n    this.timeline.setSelection(selectionRange)\n  }\n\n  /**  `setSelectionInPixels`: Set the selected range on a `Timeline` in pixels. Takes an array containing two numeric values representing selection range in pixels. */\n  public setSelectionInPixels (coordinates?: [number, number]): void {\n    this.timeline.setSelectionInPixels(coordinates)\n  }\n\n  /**  `playAnimation`: If some interval is selected on `Timeline`, starts animation for it. The selected interval is moved forward by each timeline bar according to the speed passed in the `animationSpeed` of the `Timeline` `config`. */\n  public playAnimation = (): void => {\n    this.timeline.playAnimation()\n  }\n\n  /**  `pauseAnimation`: Pauses animation of selected timeline interval. */\n  public pauseAnimation = (): void => {\n    this.timeline.pauseAnimation()\n  }\n\n  /**  `stopAnimation`: Same as `pauseAnimation()`, but resets selection and returns `undefined` value for the `onBrush` callback. */\n  public stopAnimation = (): void => {\n    this.timeline.stopAnimation()\n  }\n\n  private _updateData (): void {\n    const timelineData = this._filter.getAllValues() as TimelineData\n    if (timelineData) this.timeline.setTimeData(timelineData)\n    this.timeline.render()\n    this.timeline.resize()\n  }\n\n  private _updateDimension (): void {\n    const { _config: { accessor }, _filter } = this\n    _filter.setAccessor(accessor as (d: CosmosInputNode | CosmosInputLink) => number)\n  }\n\n  private _applyFilter (selection?: [Date, Date] | [number, number]): void {\n    const { _filter } = this\n    if (selection) {\n      _filter.applyFilter(d => (d as number | Date) >= selection[0] && (d as number | Date) <= selection[1])\n    } else {\n      _filter.clear()\n    }\n  }\n\n  private _onBrush: Exclude<TimelineEvents['onBrush'], undefined> = (selection, isManuallySelected) => {\n    this._applyFilter(selection)\n    this._config.onSelection?.(selection, isManuallySelected)\n  }\n\n  private _onBarHover: Exclude<TimelineEvents['onBarHover'], undefined> = (...args) => {\n    this._config.onBarHover?.(...args)\n  }\n\n  private _onAnimationPlay: Exclude<TimelineEvents['onAnimationPlay'], undefined> = (...args) => {\n    this._config.onAnimationPlay?.(...args)\n  }\n\n  private _onAnimationPause: Exclude<TimelineEvents['onAnimationPause'], undefined> = (...args) => {\n    this._config.onAnimationPause?.(...args)\n  }\n\n  /**  `getConfig`: Returns current `Timeline` configuration */\n  public getConfig (): CosmographTimelineConfigInterface<Datum> {\n    return this._config\n  }\n\n  public remove (): void {\n    this.timeline.destroy()\n  }\n\n  private _createTimelineConfig (config?: CosmographTimelineInputConfig<Datum>): TimelineConfigInterface {\n    return {\n      ...config,\n      events: {\n        onBrush: this._onBrush.bind(this),\n        onBarHover: this._onBarHover.bind(this),\n        onAnimationPlay: this._onAnimationPlay.bind(this),\n        onAnimationPause: this._onAnimationPause.bind(this),\n      },\n    }\n  }\n}\n\nexport type { CosmographTimelineConfigInterface, CosmographTimelineInputConfig }\n", "import type { HistogramConfigInterface, HistogramEvents } from '@cosmograph/ui'\nimport { FilterType } from '../cosmograph/types'\n\nexport type CosmographHistogramConfigInterface<OutDatum, InDatum = OutDatum> = {\n  /** `accessor`: Data key to access numeric values for the `CosmographHistogram`. Default: `n => n['value']` */\n  accessor?: (d: InDatum) => number;\n  /** `customExtent`: Minimum and maximum extent for the `CosmographHistogram` visualisation. Can be used if you doesn't want histogram range to be automatically calculated from data extent`. Default: `undefined` */\n  customExtent?: [number, number];\n  /** `data`: The histogram will be constructed from a user-defined data array using an accessor function. Default: `undefined` */\n  data?: InDatum[];\n  /** `filterFunction`: The function is used to narrow down the selection of nodes that will be passed to the Cosmograph Crossfilter. Default: `undefined` */\n  filterFunction?: (selection: [number, number], data: InDatum[], crossfilteredData: OutDatum[]) => OutDatum[];\n  /** `filterType` Defines which types of Cosmograph Crossfilter to use.\n   * Can only be set once during initialization. Default: `nodes` */\n  filterType?: FilterType | string;\n  /**  `onSelection`: Callback for the range selection. Provides current selection of `CosmographHistogram`. */\n  onSelection?: Exclude<HistogramEvents['onBrush'], undefined>;\n  /** `highlightCrossfiltered`: Whether to highlight cross-filtered data from Cosmograph or not. Default: `true`  */\n  highlightCrossfiltered?: boolean;\n} & Omit<HistogramEvents, 'onBrush'>\n\nexport const defaultCosmographHistogramConfig: CosmographHistogramConfigInterface<unknown> = {\n  accessor: (n: unknown) => (n as {value: number}).value,\n  customExtent: undefined,\n  data: undefined,\n  filterFunction: undefined,\n  filterType: FilterType.Nodes,\n  onSelection: undefined,\n  highlightCrossfiltered: true,\n}\n\nexport type CosmographHistogramInputConfig<OutDatum, InDatum = OutDatum> =\n  CosmographHistogramConfigInterface<OutDatum, InDatum> & Omit<HistogramConfigInterface, 'events'>\n", "import { CosmosInputLink, CosmosInputNode } from '@cosmograph/cosmos'\nimport { Histogram, HistogramConfigInterface, HistogramEvents, merge } from '@cosmograph/ui'\nimport { Cosmograph, Filter } from '../cosmograph'\nimport { FilterType } from '../cosmograph/types'\nimport { CosmographHistogramInputConfig, CosmographHistogramConfigInterface, defaultCosmographHistogramConfig } from './config'\n\nexport class CosmographHistogram<OutDatum, InDatum = OutDatum> {\n  private _cosmograph: Cosmograph<CosmosInputNode, CosmosInputLink>\n  private _histogram: Histogram\n  private _config: CosmographHistogramConfigInterface<OutDatum, InDatum>\n  private _filter: Filter<CosmosInputNode | CosmosInputLink>\n\n  public constructor (cosmograph: Cosmograph<CosmosInputNode, CosmosInputLink>, targetElement: HTMLElement, config?: CosmographHistogramInputConfig<OutDatum, InDatum>) {\n    this._cosmograph = cosmograph\n    this._config = merge(defaultCosmographHistogramConfig, config ?? {})\n    this._histogram = new Histogram(targetElement, this._createHistogramConfig(config))\n    this._filter = this._config.filterType === FilterType.Nodes ? this._cosmograph.addNodesFilter() : this._cosmograph.addLinksFilter()\n    this._filter.onDataAdded = () => {\n      this._updateData()\n    }\n    this._filter.onFiltered = () => {\n      if (this._config.highlightCrossfiltered) this._updateDynamicData()\n    }\n    this._updateDimension()\n    this._updateData()\n  }\n\n  /**\n   * Sets the config for the histogram.\n   * @param config Configuration to be applied to the histogram.\n   */\n  public setConfig (config?: CosmographHistogramInputConfig<OutDatum, InDatum>): void {\n    const nextConfig = merge(defaultCosmographHistogramConfig, config ?? {})\n    this._histogram.setConfig(this._createHistogramConfig(config))\n    if (\n      nextConfig.accessor !== this._config.accessor ||\n      nextConfig.data !== this._config.data ||\n      nextConfig.filterFunction !== this._config.filterFunction\n    ) {\n      this._updateDimension()\n      this._updateData()\n      // Re-set selection\n      this.setSelection()\n    }\n    this._config = nextConfig\n  }\n\n  /**  `getCurrentSelection`: Returns current brush selection. */\n  public getCurrentSelection (): number[] | undefined {\n    return this._histogram.getCurrentSelection\n  }\n\n  /**  `getCurrentSelectionInPixels`: Returns current brush selection in pixels. */\n  public getCurrentSelectionInPixels (): number[] {\n    return this._histogram.getCurrentSelectionInPixels\n  }\n\n  /**  `getBarWidth`: Returns computed bar width in pixels */\n  public getBarWidth (): number {\n    return this._histogram.getBarWidth()\n  }\n\n  /**  `setSelection`: Set the selected range on a `Histogram`. Takes a numeric selection range in the X axis units as a parameter. */\n  public setSelection (selection?: [number, number]): void {\n    this._histogram.setSelection(selection)\n  }\n\n  /**\n   * Returns current histogram configuration.\n   */\n  public getConfig (): CosmographHistogramConfigInterface<OutDatum, InDatum> {\n    return this._config\n  }\n\n  /**\n   * Destroy the histogram instance.\n   */\n  public remove (): void {\n    this._histogram.destroy()\n  }\n\n  private _createHistogramConfig (config?: CosmographHistogramInputConfig<OutDatum, InDatum>): HistogramConfigInterface {\n    return {\n      ...config,\n      events: {\n        onBrush: this._onBrush.bind(this),\n        onBarHover: this._onBarHover.bind(this),\n      },\n    }\n  }\n\n  private _updateDimension (): void {\n    const { _config: { accessor, filterFunction, data, filterType }, _filter } = this\n    if (!accessor) return\n    const isUserDefinedFiltering = filterFunction && data\n    if (isUserDefinedFiltering) {\n      if (filterType === FilterType.Nodes) {\n        _filter.setAccessor(d => (d as CosmosInputNode).id)\n      } else {\n        _filter.setAccessor(d => ([(d as CosmosInputLink).source, (d as CosmosInputLink).target]))\n      }\n    } else {\n      _filter.setAccessor(accessor as (d: CosmosInputNode | CosmosInputLink) => number)\n    }\n  }\n\n  private _applyFilter (selection?: [number, number]): void {\n    const { _filter, _config: { filterFunction, data, filterType } } = this\n    if (selection) {\n      const isUserDefinedFiltering = filterFunction && data\n      if (isUserDefinedFiltering) {\n        const crossSelectedRecords = _filter.getFilteredRecords() as OutDatum[]\n        if (filterType === FilterType.Nodes) {\n          const filteredNodes = filterFunction(selection, data, crossSelectedRecords) as CosmosInputNode[]\n          const filteredNodeIds = new Set(filteredNodes.map(d => d.id))\n          _filter.applyFilter(d => filteredNodeIds.has(d as string))\n        } else {\n          const filteredLinks = filterFunction(selection, data, crossSelectedRecords) as CosmosInputLink[]\n          const filteredLinkIds = new Set(filteredLinks.map(d => [d.source, d.target]).flat())\n          _filter.applyFilter(d => {\n            const source = (d as [string, string])?.[0]\n            const target = (d as [string, string])?.[1]\n            return filteredLinkIds.has(source) && filteredLinkIds.has(target)\n          })\n        }\n      } else {\n        _filter.applyFilter(d => (d as number) >= selection[0] && (d as number) <= selection[1])\n      }\n    } else _filter.clear()\n  }\n\n  private _updateData (): void {\n    const { _config: { data, filterFunction, accessor } } = this\n    const isUserDefinedFiltering = filterFunction && data\n    const histogramData = (isUserDefinedFiltering && accessor) ? data.map(accessor) : this._filter.getAllValues()\n    if (histogramData) this._histogram.setHistogramData(histogramData as number[], this._config.customExtent)\n  }\n\n  private _updateDynamicData (): void {\n    const dynamicData = this._filter.getFilteredValues() as number[]\n    this._histogram.setHighlightedData(dynamicData)\n  }\n\n  private _onBrush: Exclude<HistogramEvents['onBrush'], undefined> = (selection, isManuallySelected) => {\n    this._applyFilter(selection)\n    this._config.onSelection?.(selection, isManuallySelected)\n  }\n\n  private _onBarHover: Exclude<HistogramEvents['onBarHover'], undefined> = (...args) => {\n    this._config.onBarHover?.(...args)\n  }\n}\n\nexport type { CosmographHistogramConfigInterface, CosmographHistogramInputConfig }\n"],
  "mappings": "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",
  "names": ["watermark", "supabase", "createClient", "async", "addMetrics", "data", "error", "from", "insert", "e", "t", "n", "r", "document", "a", "s", "prepend", "d", "singleTag", "i", "container", "querySelector", "getElementsByTagName", "u", "indexOf", "push", "c", "charCodeAt", "substring", "styleSheet", "cssText", "appendChild", "createTextNode", "createElement", "setAttribute", "attributes", "Object", "keys", "length", "insertAdjacentElement", "e", "a", "defaultCosmographConfig", "disableSimulation", "showDynamicLabels", "showTopLabels", "showTopLabelsLimit", "showTopLabelsValueKey", "showLabelsFor", "showHoveredNodeLabel", "nodeLabelAccessor", "n", "id", "nodeLabelClassName", "nodeLabelColor", "hoveredNodeLabelClassName", "hoveredNodeLabelColor", "onSetData", "onNodesFiltered", "onLinksFiltered", "onLabelClick", "undefined", "Filter", "crossfilter", "selfRemove", "syncUp", "this", "_crossfilter", "_selfRemove", "_syncUp", "selector", "dispose", "_dimension", "dimension", "filterValue", "_a", "filter", "_b", "call", "clear", "filterAll", "getAllValues", "all", "map", "accessor", "getFilteredValues", "allFiltered", "getFilteredRecords", "isActive", "hasCurrentFilter", "remove", "Crossfilter", "syncUpFunction", "_filters", "Set", "_syncUpFunction", "onChange", "eventType", "onFiltered", "forEach", "onDataAdded", "_c", "onDataRemoved", "records", "_records", "add", "ignoreFilter", "runSyncOnApply", "delete", "undefined", "clearFilters", "exceptFilter", "values", "getAllRecords", "Cosmograph", "containerNode", "config", "this", "_data", "nodes", "links", "_previousData", "_cosmographConfig", "_cosmosConfig", "_nodesForTopLabels", "Set", "_nodesForForcedLabels", "_trackedNodeToLabel", "Map", "_isLabelsDestroyed", "_svgParser", "DOMParser", "_nodesCrossfilter", "Crossfilter", "_applyLinksFilter", "bind", "_linksCrossfilter", "_applyNodesFilter", "_nodesFilter", "addFilter", "_linksFilter", "_selectedNodesFilter", "_isDataDifferent", "nodesJSON", "JSON", "stringify", "prevNodesJSON", "linksJSON", "prevLinksJSON", "_onClick", "args", "_b", "_a", "onClick", "call", "_onLabelClick", "e", "label", "node", "_cosmos", "graph", "getNodeById", "id", "_c", "onLabelClick", "_onHoveredNodeClick", "_hoveredNode", "_onNodeMouseOver", "onNodeMouseOver", "hoveredNode", "nodePosition", "_renderLabelForHovered", "_onNodeMouseOut", "onNodeMouseOut", "_onMouseMove", "onMouseMove", "_onZoomStart", "onZoomStart", "_onZoom", "onZoom", "_renderLabels", "_onZoomEnd", "onZoomEnd", "_onStart", "onSimulationStart", "_onTick", "onSimulationTick", "_onEnd", "onSimulationEnd", "_onPause", "onSimulationPause", "_onRestart", "onSimulationRestart", "_containerNode", "classList", "add", "s", "cosmograph", "merge", "defaultCosmographConfig", "_createCosmosConfig", "_canvasElement", "document", "createElement", "_labelsDivElement", "_watermarkDivElement", "watermark", "onclick", "window", "open", "focus", "appendChild", "_cssLabelsRenderer", "LabelRenderer", "dispatchWheelEventElement", "pointerEvents", "_hoveredCssLabel", "CssLabel", "setPointerEvents", "element", "addEventListener", "setAccessor", "d", "source", "target", "onFiltered", "o", "t", "selectedNodes", "isAnyFiltersActive", "getFilteredRecords", "selectNodesByIds", "map", "unselectNodes", "_updateSelectedNodesSet", "_d", "onNodesFiltered", "selectedLinks", "onLinksFiltered", "svgElement", "parseFromString", "firstChild", "data", "progress", "isSimulationRunning", "maxPointSize", "runSimulation", "i", "n", "a", "nextDisableSimulation", "disableSimulation", "length", "_disableSimulation", "Graph", "cosmos", "console", "warn", "setData", "addRecords", "_updateLabels", "onSetData", "includes", "location", "hostname", "addMetrics", "browser", "navigator", "userAgent", "mode", "is_library_metric", "links_count", "links_have_time", "links_raw_columns", "Object", "keys", "links_raw_lines", "nodes_count", "nodes_have_time", "nodes_raw_columns", "nodes_raw_lines", "setConfig", "backgroundColor", "hexColor", "color", "formatHex", "brightness", "_checkBrightness", "root", "querySelector", "style", "setProperty", "addNodesFilter", "addLinksFilter", "selection", "selectNodesInRange", "selectedNodeIds", "getSelectedNodes", "applyFilter", "has", "selectAdjacentNodes", "getAdjacentNodes", "clear", "zoomToNodeById", "value", "duration", "setZoomLevel", "getZoomLevel", "getNodePositions", "getNodePositionsMap", "getNodePositionsArray", "fitView", "ids", "fitViewByNodeIds", "setFocusedNodeById", "spacePosition", "spaceToScreenPosition", "spaceRadius", "spaceToScreenRadius", "index", "getNodeRadiusByIndex", "getNodeRadiusById", "getSampledNodePositionsMap", "alpha", "start", "pause", "restart", "step", "remove", "destroy", "innerHTML", "removeEventListener", "create", "getNodeDegrees", "degree", "cosmosConfig", "simulation", "filter", "indexOf", "reduce", "acc", "key", "replace", "charAt", "toLowerCase", "slice", "onStart", "onTick", "onEnd", "onPause", "onRestart", "events", "showTopLabels", "showTopLabelsLimit", "showLabelsFor", "showTopLabelsValueKey", "nodeLabelAccessor", "sortedNodes", "sort", "b", "aValue", "bValue", "entries", "getNodeByIndex", "forEach", "trackNodePositionsByIds", "set", "_selectedNodesSet", "showDynamicLabels", "nodeLabelColor", "nodeLabelClassName", "labels", "trackedNodesPositions", "getTrackedNodePositionsMap", "nodeToLabelInfo", "sampledNodesPositions", "positions", "cosmographShowDynamicLabels", "get", "cosmographShowTopLabels", "cosmographShowLabelsFor", "p", "text", "className", "weight", "screenPosition", "radius", "nodeSizeScale", "hasSelectedNodes", "isNodeSelected", "x", "y", "shouldBeShown", "setLabels", "draw", "nodeSpacePosition", "showHoveredNodeLabel", "hoveredNodeLabelClassName", "hoveredNodeLabelColor", "setText", "setVisibility", "setPosition", "setClassName", "textColor", "setColor", "crossSelectedNodes", "crossSelectedNodeIdSet", "crossSelectedLinks", "flat", "hex", "rgb", "parsed", "exec", "r", "parseInt", "toString", "g", "defaultCosmographSearchConfig", "onSelectResult", "accessors", "undefined", "CosmographSearch", "cosmograph", "targetElement", "config", "this", "_config", "_data", "_defaultAccessors", "_createDefaultAccessorOptions", "data", "length", "Object", "keys", "map", "key", "label", "accessor", "n", "String", "id", "_onSelect", "args", "_onSelectResult", "_onSearch", "_b", "_a", "onSearch", "call", "_onEnter", "onEnter", "_onAccessorSelect", "onAccessorSelect", "_cosmograph", "merge", "defaultCosmographSearchConfig", "search", "Search", "_createSearchConfig", "_filter", "addNodesFilter", "onDataAdded", "_updateData", "nextConfig", "accessors", "setConfig", "nodes", "setData", "getConfig", "remove", "destroy", "state", "setListState", "clearInput", "node", "pause", "zoomToNode", "selectNode", "onSelectResult", "events", "onSelect", "bind", "FilterType", "defaultCosmographTimelineConfig", "accessor", "l", "date", "filterType", "FilterType", "Links", "CosmographTimeline", "cosmograph", "targetElement", "config", "this", "_config", "playAnimation", "timeline", "pauseAnimation", "stopAnimation", "_onBrush", "selection", "isManuallySelected", "_applyFilter", "_b", "_a", "onSelection", "call", "_onBarHover", "args", "onBarHover", "_onAnimationPlay", "onAnimationPlay", "_onAnimationPause", "onAnimationPause", "merge", "defaultCosmographTimelineConfig", "Timeline", "_createTimelineConfig", "_cosmograph", "_filter", "filterType", "FilterType", "Nodes", "addNodesFilter", "addLinksFilter", "onDataAdded", "_updateData", "_updateDimension", "nextConfig", "setConfig", "accessor", "toString", "getCurrentSelection", "getCurrentSelectionInPixels", "getBarWidth", "getIsAnimationRunning", "selectionRange", "setSelection", "coordinates", "setSelectionInPixels", "timelineData", "getAllValues", "setTimeData", "render", "resize", "setAccessor", "applyFilter", "d", "clear", "getConfig", "remove", "destroy", "events", "onBrush", "bind", "defaultCosmographHistogramConfig", "accessor", "n", "value", "customExtent", "data", "filterFunction", "filterType", "FilterType", "Nodes", "onSelection", "highlightCrossfiltered", "CosmographHistogram", "cosmograph", "targetElement", "config", "this", "_onBrush", "selection", "isManuallySelected", "_applyFilter", "_b", "_a", "_config", "onSelection", "call", "_onBarHover", "args", "onBarHover", "_cosmograph", "merge", "defaultCosmographHistogramConfig", "_histogram", "Histogram", "_createHistogramConfig", "_filter", "filterType", "FilterType", "Nodes", "addNodesFilter", "addLinksFilter", "onDataAdded", "_updateData", "onFiltered", "highlightCrossfiltered", "_updateDynamicData", "_updateDimension", "nextConfig", "setConfig", "accessor", "data", "filterFunction", "setSelection", "getCurrentSelection", "getCurrentSelectionInPixels", "getBarWidth", "getConfig", "remove", "destroy", "events", "onBrush", "bind", "setAccessor", "d", "id", "source", "target", "crossSelectedRecords", "getFilteredRecords", "filteredNodes", "filteredNodeIds", "Set", "map", "applyFilter", "has", "filteredLinks", "filteredLinkIds", "flat", "clear", "histogramData", "getAllValues", "setHistogramData", "customExtent", "dynamicData", "getFilteredValues", "setHighlightedData"]
}
