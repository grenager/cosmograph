import {
  dispatch_default,
  extent,
  interrupt_default,
  linear,
  nodrag_default,
  pointer_default,
  pow,
  quadIn,
  quadInOut,
  quadOut,
  range,
  select_default,
  yesdrag,
  zoom_default
} from "./chunk-FMA5RTTC.js";
import {
  color
} from "./chunk-SARWLFPZ.js";
import {
  __commonJS,
  __export,
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/regl/dist/regl.unchecked.js
var require_regl_unchecked = __commonJS({
  "node_modules/regl/dist/regl.unchecked.js"(exports, module) {
    (function(global2, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : global2.createREGL = factory();
    })(exports, (function() {
      "use strict";
      var extend = function(base, opts) {
        var keys = Object.keys(opts);
        for (var i = 0; i < keys.length; ++i) {
          base[keys[i]] = opts[keys[i]];
        }
        return base;
      };
      var VARIABLE_COUNTER = 0;
      var DYN_FUNC = 0;
      var DYN_CONSTANT = 5;
      var DYN_ARRAY = 6;
      function DynamicVariable(type, data) {
        this.id = VARIABLE_COUNTER++;
        this.type = type;
        this.data = data;
      }
      function escapeStr(str2) {
        return str2.replace(/\\/g, "\\\\").replace(/"/g, '\\"');
      }
      function splitParts(str2) {
        if (str2.length === 0) {
          return [];
        }
        var firstChar = str2.charAt(0);
        var lastChar = str2.charAt(str2.length - 1);
        if (str2.length > 1 && firstChar === lastChar && (firstChar === '"' || firstChar === "'")) {
          return ['"' + escapeStr(str2.substr(1, str2.length - 2)) + '"'];
        }
        var parts = /\[(false|true|null|\d+|'[^']*'|"[^"]*")\]/.exec(str2);
        if (parts) {
          return splitParts(str2.substr(0, parts.index)).concat(splitParts(parts[1])).concat(splitParts(str2.substr(parts.index + parts[0].length)));
        }
        var subparts = str2.split(".");
        if (subparts.length === 1) {
          return ['"' + escapeStr(str2) + '"'];
        }
        var result = [];
        for (var i = 0; i < subparts.length; ++i) {
          result = result.concat(splitParts(subparts[i]));
        }
        return result;
      }
      function toAccessorString(str2) {
        return "[" + splitParts(str2).join("][") + "]";
      }
      function defineDynamic(type, data) {
        return new DynamicVariable(type, toAccessorString(data + ""));
      }
      function isDynamic(x) {
        return typeof x === "function" && !x._reglType || x instanceof DynamicVariable;
      }
      function unbox(x, path) {
        if (typeof x === "function") {
          return new DynamicVariable(DYN_FUNC, x);
        } else if (typeof x === "number" || typeof x === "boolean") {
          return new DynamicVariable(DYN_CONSTANT, x);
        } else if (Array.isArray(x)) {
          return new DynamicVariable(DYN_ARRAY, x.map(function(y, i) {
            return unbox(y, path + "[" + i + "]");
          }));
        } else if (x instanceof DynamicVariable) {
          return x;
        }
      }
      var dynamic = {
        DynamicVariable,
        define: defineDynamic,
        isDynamic,
        unbox,
        accessor: toAccessorString
      };
      var raf = {
        next: typeof requestAnimationFrame === "function" ? function(cb) {
          return requestAnimationFrame(cb);
        } : function(cb) {
          return setTimeout(cb, 16);
        },
        cancel: typeof cancelAnimationFrame === "function" ? function(raf2) {
          return cancelAnimationFrame(raf2);
        } : clearTimeout
      };
      var clock = typeof performance !== "undefined" && performance.now ? function() {
        return performance.now();
      } : function() {
        return +/* @__PURE__ */ new Date();
      };
      function createStringStore() {
        var stringIds = { "": 0 };
        var stringValues = [""];
        return {
          id: function(str2) {
            var result = stringIds[str2];
            if (result) {
              return result;
            }
            result = stringIds[str2] = stringValues.length;
            stringValues.push(str2);
            return result;
          },
          str: function(id) {
            return stringValues[id];
          }
        };
      }
      function createCanvas(element, onDone, pixelRatio) {
        var canvas = document.createElement("canvas");
        extend(canvas.style, {
          border: 0,
          margin: 0,
          padding: 0,
          top: 0,
          left: 0,
          width: "100%",
          height: "100%"
        });
        element.appendChild(canvas);
        if (element === document.body) {
          canvas.style.position = "absolute";
          extend(element.style, {
            margin: 0,
            padding: 0
          });
        }
        function resize() {
          var w = window.innerWidth;
          var h = window.innerHeight;
          if (element !== document.body) {
            var bounds = canvas.getBoundingClientRect();
            w = bounds.right - bounds.left;
            h = bounds.bottom - bounds.top;
          }
          canvas.width = pixelRatio * w;
          canvas.height = pixelRatio * h;
        }
        var resizeObserver;
        if (element !== document.body && typeof ResizeObserver === "function") {
          resizeObserver = new ResizeObserver(function() {
            setTimeout(resize);
          });
          resizeObserver.observe(element);
        } else {
          window.addEventListener("resize", resize, false);
        }
        function onDestroy() {
          if (resizeObserver) {
            resizeObserver.disconnect();
          } else {
            window.removeEventListener("resize", resize);
          }
          element.removeChild(canvas);
        }
        resize();
        return {
          canvas,
          onDestroy
        };
      }
      function createContext(canvas, contextAttributes) {
        function get(name) {
          try {
            return canvas.getContext(name, contextAttributes);
          } catch (e) {
            return null;
          }
        }
        return get("webgl") || get("experimental-webgl") || get("webgl-experimental");
      }
      function isHTMLElement(obj) {
        return typeof obj.nodeName === "string" && typeof obj.appendChild === "function" && typeof obj.getBoundingClientRect === "function";
      }
      function isWebGLContext(obj) {
        return typeof obj.drawArrays === "function" || typeof obj.drawElements === "function";
      }
      function parseExtensions(input) {
        if (typeof input === "string") {
          return input.split();
        }
        return input;
      }
      function getElement(desc) {
        if (typeof desc === "string") {
          return document.querySelector(desc);
        }
        return desc;
      }
      function parseArgs(args_) {
        var args = args_ || {};
        var element, container, canvas, gl;
        var contextAttributes = {};
        var extensions = [];
        var optionalExtensions = [];
        var pixelRatio = typeof window === "undefined" ? 1 : window.devicePixelRatio;
        var profile = false;
        var cachedCode = {};
        var onDone = function(err) {
          if (err) {
          }
        };
        var onDestroy = function() {
        };
        if (typeof args === "string") {
          element = document.querySelector(args);
        } else if (typeof args === "object") {
          if (isHTMLElement(args)) {
            element = args;
          } else if (isWebGLContext(args)) {
            gl = args;
            canvas = gl.canvas;
          } else {
            if ("gl" in args) {
              gl = args.gl;
            } else if ("canvas" in args) {
              canvas = getElement(args.canvas);
            } else if ("container" in args) {
              container = getElement(args.container);
            }
            if ("attributes" in args) {
              contextAttributes = args.attributes;
            }
            if ("extensions" in args) {
              extensions = parseExtensions(args.extensions);
            }
            if ("optionalExtensions" in args) {
              optionalExtensions = parseExtensions(args.optionalExtensions);
            }
            if ("onDone" in args) {
              onDone = args.onDone;
            }
            if ("profile" in args) {
              profile = !!args.profile;
            }
            if ("pixelRatio" in args) {
              pixelRatio = +args.pixelRatio;
            }
            if ("cachedCode" in args) {
              cachedCode = args.cachedCode;
            }
          }
        } else {
        }
        if (element) {
          if (element.nodeName.toLowerCase() === "canvas") {
            canvas = element;
          } else {
            container = element;
          }
        }
        if (!gl) {
          if (!canvas) {
            var result = createCanvas(container || document.body, onDone, pixelRatio);
            if (!result) {
              return null;
            }
            canvas = result.canvas;
            onDestroy = result.onDestroy;
          }
          if (contextAttributes.premultipliedAlpha === void 0) contextAttributes.premultipliedAlpha = true;
          gl = createContext(canvas, contextAttributes);
        }
        if (!gl) {
          onDestroy();
          onDone("webgl not supported, try upgrading your browser or graphics drivers http://get.webgl.org");
          return null;
        }
        return {
          gl,
          canvas,
          container,
          extensions,
          optionalExtensions,
          pixelRatio,
          profile,
          cachedCode,
          onDone,
          onDestroy
        };
      }
      function createExtensionCache(gl, config) {
        var extensions = {};
        function tryLoadExtension(name_) {
          var name2 = name_.toLowerCase();
          var ext;
          try {
            ext = extensions[name2] = gl.getExtension(name2);
          } catch (e) {
          }
          return !!ext;
        }
        for (var i = 0; i < config.extensions.length; ++i) {
          var name = config.extensions[i];
          if (!tryLoadExtension(name)) {
            config.onDestroy();
            config.onDone('"' + name + '" extension is not supported by the current WebGL context, try upgrading your system or a different browser');
            return null;
          }
        }
        config.optionalExtensions.forEach(tryLoadExtension);
        return {
          extensions,
          restore: function() {
            Object.keys(extensions).forEach(function(name2) {
              if (extensions[name2] && !tryLoadExtension(name2)) {
                throw new Error("(regl): error restoring extension " + name2);
              }
            });
          }
        };
      }
      function loop(n, f) {
        var result = Array(n);
        for (var i = 0; i < n; ++i) {
          result[i] = f(i);
        }
        return result;
      }
      var GL_BYTE = 5120;
      var GL_UNSIGNED_BYTE$1 = 5121;
      var GL_SHORT = 5122;
      var GL_UNSIGNED_SHORT = 5123;
      var GL_INT = 5124;
      var GL_UNSIGNED_INT = 5125;
      var GL_FLOAT$1 = 5126;
      function nextPow16(v) {
        for (var i = 16; i <= 1 << 28; i *= 16) {
          if (v <= i) {
            return i;
          }
        }
        return 0;
      }
      function log2(v) {
        var r, shift;
        r = (v > 65535) << 4;
        v >>>= r;
        shift = (v > 255) << 3;
        v >>>= shift;
        r |= shift;
        shift = (v > 15) << 2;
        v >>>= shift;
        r |= shift;
        shift = (v > 3) << 1;
        v >>>= shift;
        r |= shift;
        return r | v >> 1;
      }
      function createPool() {
        var bufferPool = loop(8, function() {
          return [];
        });
        function alloc(n) {
          var sz = nextPow16(n);
          var bin = bufferPool[log2(sz) >> 2];
          if (bin.length > 0) {
            return bin.pop();
          }
          return new ArrayBuffer(sz);
        }
        function free(buf) {
          bufferPool[log2(buf.byteLength) >> 2].push(buf);
        }
        function allocType(type, n) {
          var result = null;
          switch (type) {
            case GL_BYTE:
              result = new Int8Array(alloc(n), 0, n);
              break;
            case GL_UNSIGNED_BYTE$1:
              result = new Uint8Array(alloc(n), 0, n);
              break;
            case GL_SHORT:
              result = new Int16Array(alloc(2 * n), 0, n);
              break;
            case GL_UNSIGNED_SHORT:
              result = new Uint16Array(alloc(2 * n), 0, n);
              break;
            case GL_INT:
              result = new Int32Array(alloc(4 * n), 0, n);
              break;
            case GL_UNSIGNED_INT:
              result = new Uint32Array(alloc(4 * n), 0, n);
              break;
            case GL_FLOAT$1:
              result = new Float32Array(alloc(4 * n), 0, n);
              break;
            default:
              return null;
          }
          if (result.length !== n) {
            return result.subarray(0, n);
          }
          return result;
        }
        function freeType(array) {
          free(array.buffer);
        }
        return {
          alloc,
          free,
          allocType,
          freeType
        };
      }
      var pool = createPool();
      pool.zero = createPool();
      var GL_SUBPIXEL_BITS = 3408;
      var GL_RED_BITS = 3410;
      var GL_GREEN_BITS = 3411;
      var GL_BLUE_BITS = 3412;
      var GL_ALPHA_BITS = 3413;
      var GL_DEPTH_BITS = 3414;
      var GL_STENCIL_BITS = 3415;
      var GL_ALIASED_POINT_SIZE_RANGE = 33901;
      var GL_ALIASED_LINE_WIDTH_RANGE = 33902;
      var GL_MAX_TEXTURE_SIZE = 3379;
      var GL_MAX_VIEWPORT_DIMS = 3386;
      var GL_MAX_VERTEX_ATTRIBS = 34921;
      var GL_MAX_VERTEX_UNIFORM_VECTORS = 36347;
      var GL_MAX_VARYING_VECTORS = 36348;
      var GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
      var GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
      var GL_MAX_TEXTURE_IMAGE_UNITS = 34930;
      var GL_MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
      var GL_MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
      var GL_MAX_RENDERBUFFER_SIZE = 34024;
      var GL_VENDOR = 7936;
      var GL_RENDERER = 7937;
      var GL_VERSION = 7938;
      var GL_SHADING_LANGUAGE_VERSION = 35724;
      var GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 34047;
      var GL_MAX_COLOR_ATTACHMENTS_WEBGL = 36063;
      var GL_MAX_DRAW_BUFFERS_WEBGL = 34852;
      var GL_TEXTURE_2D = 3553;
      var GL_TEXTURE_CUBE_MAP = 34067;
      var GL_TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
      var GL_TEXTURE0 = 33984;
      var GL_RGBA = 6408;
      var GL_FLOAT = 5126;
      var GL_UNSIGNED_BYTE = 5121;
      var GL_FRAMEBUFFER = 36160;
      var GL_FRAMEBUFFER_COMPLETE = 36053;
      var GL_COLOR_ATTACHMENT0 = 36064;
      var GL_COLOR_BUFFER_BIT$1 = 16384;
      var wrapLimits = function(gl, extensions) {
        var maxAnisotropic = 1;
        if (extensions.ext_texture_filter_anisotropic) {
          maxAnisotropic = gl.getParameter(GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT);
        }
        var maxDrawbuffers = 1;
        var maxColorAttachments = 1;
        if (extensions.webgl_draw_buffers) {
          maxDrawbuffers = gl.getParameter(GL_MAX_DRAW_BUFFERS_WEBGL);
          maxColorAttachments = gl.getParameter(GL_MAX_COLOR_ATTACHMENTS_WEBGL);
        }
        var readFloat = !!extensions.oes_texture_float;
        if (readFloat) {
          var readFloatTexture = gl.createTexture();
          gl.bindTexture(GL_TEXTURE_2D, readFloatTexture);
          gl.texImage2D(GL_TEXTURE_2D, 0, GL_RGBA, 1, 1, 0, GL_RGBA, GL_FLOAT, null);
          var fbo = gl.createFramebuffer();
          gl.bindFramebuffer(GL_FRAMEBUFFER, fbo);
          gl.framebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, readFloatTexture, 0);
          gl.bindTexture(GL_TEXTURE_2D, null);
          if (gl.checkFramebufferStatus(GL_FRAMEBUFFER) !== GL_FRAMEBUFFER_COMPLETE) readFloat = false;
          else {
            gl.viewport(0, 0, 1, 1);
            gl.clearColor(1, 0, 0, 1);
            gl.clear(GL_COLOR_BUFFER_BIT$1);
            var pixels = pool.allocType(GL_FLOAT, 4);
            gl.readPixels(0, 0, 1, 1, GL_RGBA, GL_FLOAT, pixels);
            if (gl.getError()) readFloat = false;
            else {
              gl.deleteFramebuffer(fbo);
              gl.deleteTexture(readFloatTexture);
              readFloat = pixels[0] === 1;
            }
            pool.freeType(pixels);
          }
        }
        var isIE = typeof navigator !== "undefined" && (/MSIE/.test(navigator.userAgent) || /Trident\//.test(navigator.appVersion) || /Edge/.test(navigator.userAgent));
        var npotTextureCube = true;
        if (!isIE) {
          var cubeTexture = gl.createTexture();
          var data = pool.allocType(GL_UNSIGNED_BYTE, 36);
          gl.activeTexture(GL_TEXTURE0);
          gl.bindTexture(GL_TEXTURE_CUBE_MAP, cubeTexture);
          gl.texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X, 0, GL_RGBA, 3, 3, 0, GL_RGBA, GL_UNSIGNED_BYTE, data);
          pool.freeType(data);
          gl.bindTexture(GL_TEXTURE_CUBE_MAP, null);
          gl.deleteTexture(cubeTexture);
          npotTextureCube = !gl.getError();
        }
        return {
          // drawing buffer bit depth
          colorBits: [
            gl.getParameter(GL_RED_BITS),
            gl.getParameter(GL_GREEN_BITS),
            gl.getParameter(GL_BLUE_BITS),
            gl.getParameter(GL_ALPHA_BITS)
          ],
          depthBits: gl.getParameter(GL_DEPTH_BITS),
          stencilBits: gl.getParameter(GL_STENCIL_BITS),
          subpixelBits: gl.getParameter(GL_SUBPIXEL_BITS),
          // supported extensions
          extensions: Object.keys(extensions).filter(function(ext) {
            return !!extensions[ext];
          }),
          // max aniso samples
          maxAnisotropic,
          // max draw buffers
          maxDrawbuffers,
          maxColorAttachments,
          // point and line size ranges
          pointSizeDims: gl.getParameter(GL_ALIASED_POINT_SIZE_RANGE),
          lineWidthDims: gl.getParameter(GL_ALIASED_LINE_WIDTH_RANGE),
          maxViewportDims: gl.getParameter(GL_MAX_VIEWPORT_DIMS),
          maxCombinedTextureUnits: gl.getParameter(GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS),
          maxCubeMapSize: gl.getParameter(GL_MAX_CUBE_MAP_TEXTURE_SIZE),
          maxRenderbufferSize: gl.getParameter(GL_MAX_RENDERBUFFER_SIZE),
          maxTextureUnits: gl.getParameter(GL_MAX_TEXTURE_IMAGE_UNITS),
          maxTextureSize: gl.getParameter(GL_MAX_TEXTURE_SIZE),
          maxAttributes: gl.getParameter(GL_MAX_VERTEX_ATTRIBS),
          maxVertexUniforms: gl.getParameter(GL_MAX_VERTEX_UNIFORM_VECTORS),
          maxVertexTextureUnits: gl.getParameter(GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS),
          maxVaryingVectors: gl.getParameter(GL_MAX_VARYING_VECTORS),
          maxFragmentUniforms: gl.getParameter(GL_MAX_FRAGMENT_UNIFORM_VECTORS),
          // vendor info
          glsl: gl.getParameter(GL_SHADING_LANGUAGE_VERSION),
          renderer: gl.getParameter(GL_RENDERER),
          vendor: gl.getParameter(GL_VENDOR),
          version: gl.getParameter(GL_VERSION),
          // quirks
          readFloat,
          npotTextureCube
        };
      };
      var isTypedArray = function(x) {
        return x instanceof Uint8Array || x instanceof Uint16Array || x instanceof Uint32Array || x instanceof Int8Array || x instanceof Int16Array || x instanceof Int32Array || x instanceof Float32Array || x instanceof Float64Array || x instanceof Uint8ClampedArray;
      };
      function isNDArrayLike(obj) {
        return !!obj && typeof obj === "object" && Array.isArray(obj.shape) && Array.isArray(obj.stride) && typeof obj.offset === "number" && obj.shape.length === obj.stride.length && (Array.isArray(obj.data) || isTypedArray(obj.data));
      }
      var values = function(obj) {
        return Object.keys(obj).map(function(key) {
          return obj[key];
        });
      };
      var flattenUtils = {
        shape: arrayShape$1,
        flatten: flattenArray
      };
      function flatten1D(array, nx, out) {
        for (var i = 0; i < nx; ++i) {
          out[i] = array[i];
        }
      }
      function flatten2D(array, nx, ny, out) {
        var ptr = 0;
        for (var i = 0; i < nx; ++i) {
          var row = array[i];
          for (var j = 0; j < ny; ++j) {
            out[ptr++] = row[j];
          }
        }
      }
      function flatten3D(array, nx, ny, nz, out, ptr_) {
        var ptr = ptr_;
        for (var i = 0; i < nx; ++i) {
          var row = array[i];
          for (var j = 0; j < ny; ++j) {
            var col = row[j];
            for (var k = 0; k < nz; ++k) {
              out[ptr++] = col[k];
            }
          }
        }
      }
      function flattenRec(array, shape, level, out, ptr) {
        var stride = 1;
        for (var i = level + 1; i < shape.length; ++i) {
          stride *= shape[i];
        }
        var n = shape[level];
        if (shape.length - level === 4) {
          var nx = shape[level + 1];
          var ny = shape[level + 2];
          var nz = shape[level + 3];
          for (i = 0; i < n; ++i) {
            flatten3D(array[i], nx, ny, nz, out, ptr);
            ptr += stride;
          }
        } else {
          for (i = 0; i < n; ++i) {
            flattenRec(array[i], shape, level + 1, out, ptr);
            ptr += stride;
          }
        }
      }
      function flattenArray(array, shape, type, out_) {
        var sz = 1;
        if (shape.length) {
          for (var i = 0; i < shape.length; ++i) {
            sz *= shape[i];
          }
        } else {
          sz = 0;
        }
        var out = out_ || pool.allocType(type, sz);
        switch (shape.length) {
          case 0:
            break;
          case 1:
            flatten1D(array, shape[0], out);
            break;
          case 2:
            flatten2D(array, shape[0], shape[1], out);
            break;
          case 3:
            flatten3D(array, shape[0], shape[1], shape[2], out, 0);
            break;
          default:
            flattenRec(array, shape, 0, out, 0);
        }
        return out;
      }
      function arrayShape$1(array_) {
        var shape = [];
        for (var array = array_; array.length; array = array[0]) {
          shape.push(array.length);
        }
        return shape;
      }
      var arrayTypes = {
        "[object Int8Array]": 5120,
        "[object Int16Array]": 5122,
        "[object Int32Array]": 5124,
        "[object Uint8Array]": 5121,
        "[object Uint8ClampedArray]": 5121,
        "[object Uint16Array]": 5123,
        "[object Uint32Array]": 5125,
        "[object Float32Array]": 5126,
        "[object Float64Array]": 5121,
        "[object ArrayBuffer]": 5121
      };
      var int8 = 5120;
      var int16 = 5122;
      var int32 = 5124;
      var uint8 = 5121;
      var uint16 = 5123;
      var uint32 = 5125;
      var float = 5126;
      var float32 = 5126;
      var glTypes = {
        int8,
        int16,
        int32,
        uint8,
        uint16,
        uint32,
        float,
        float32
      };
      var dynamic$1 = 35048;
      var stream = 35040;
      var usageTypes = {
        dynamic: dynamic$1,
        stream,
        "static": 35044
      };
      var arrayFlatten = flattenUtils.flatten;
      var arrayShape = flattenUtils.shape;
      var GL_STATIC_DRAW = 35044;
      var GL_STREAM_DRAW = 35040;
      var GL_UNSIGNED_BYTE$2 = 5121;
      var GL_FLOAT$2 = 5126;
      var DTYPES_SIZES = [];
      DTYPES_SIZES[5120] = 1;
      DTYPES_SIZES[5122] = 2;
      DTYPES_SIZES[5124] = 4;
      DTYPES_SIZES[5121] = 1;
      DTYPES_SIZES[5123] = 2;
      DTYPES_SIZES[5125] = 4;
      DTYPES_SIZES[5126] = 4;
      function typedArrayCode(data) {
        return arrayTypes[Object.prototype.toString.call(data)] | 0;
      }
      function copyArray(out, inp) {
        for (var i = 0; i < inp.length; ++i) {
          out[i] = inp[i];
        }
      }
      function transpose2(result, data, shapeX, shapeY, strideX, strideY, offset) {
        var ptr = 0;
        for (var i = 0; i < shapeX; ++i) {
          for (var j = 0; j < shapeY; ++j) {
            result[ptr++] = data[strideX * i + strideY * j + offset];
          }
        }
      }
      function wrapBufferState(gl, stats2, config, destroyBuffer2) {
        var bufferCount = 0;
        var bufferSet = {};
        function REGLBuffer(type) {
          this.id = bufferCount++;
          this.buffer = gl.createBuffer();
          this.type = type;
          this.usage = GL_STATIC_DRAW;
          this.byteLength = 0;
          this.dimension = 1;
          this.dtype = GL_UNSIGNED_BYTE$2;
          this.persistentData = null;
          if (config.profile) {
            this.stats = { size: 0 };
          }
        }
        REGLBuffer.prototype.bind = function() {
          gl.bindBuffer(this.type, this.buffer);
        };
        REGLBuffer.prototype.destroy = function() {
          destroy(this);
        };
        var streamPool = [];
        function createStream(type, data) {
          var buffer = streamPool.pop();
          if (!buffer) {
            buffer = new REGLBuffer(type);
          }
          buffer.bind();
          initBufferFromData(buffer, data, GL_STREAM_DRAW, 0, 1, false);
          return buffer;
        }
        function destroyStream(stream$$1) {
          streamPool.push(stream$$1);
        }
        function initBufferFromTypedArray(buffer, data, usage) {
          buffer.byteLength = data.byteLength;
          gl.bufferData(buffer.type, data, usage);
        }
        function initBufferFromData(buffer, data, usage, dtype, dimension, persist) {
          var shape;
          buffer.usage = usage;
          if (Array.isArray(data)) {
            buffer.dtype = dtype || GL_FLOAT$2;
            if (data.length > 0) {
              var flatData;
              if (Array.isArray(data[0])) {
                shape = arrayShape(data);
                var dim = 1;
                for (var i = 1; i < shape.length; ++i) {
                  dim *= shape[i];
                }
                buffer.dimension = dim;
                flatData = arrayFlatten(data, shape, buffer.dtype);
                initBufferFromTypedArray(buffer, flatData, usage);
                if (persist) {
                  buffer.persistentData = flatData;
                } else {
                  pool.freeType(flatData);
                }
              } else if (typeof data[0] === "number") {
                buffer.dimension = dimension;
                var typedData = pool.allocType(buffer.dtype, data.length);
                copyArray(typedData, data);
                initBufferFromTypedArray(buffer, typedData, usage);
                if (persist) {
                  buffer.persistentData = typedData;
                } else {
                  pool.freeType(typedData);
                }
              } else if (isTypedArray(data[0])) {
                buffer.dimension = data[0].length;
                buffer.dtype = dtype || typedArrayCode(data[0]) || GL_FLOAT$2;
                flatData = arrayFlatten(
                  data,
                  [data.length, data[0].length],
                  buffer.dtype
                );
                initBufferFromTypedArray(buffer, flatData, usage);
                if (persist) {
                  buffer.persistentData = flatData;
                } else {
                  pool.freeType(flatData);
                }
              } else {
              }
            }
          } else if (isTypedArray(data)) {
            buffer.dtype = dtype || typedArrayCode(data);
            buffer.dimension = dimension;
            initBufferFromTypedArray(buffer, data, usage);
            if (persist) {
              buffer.persistentData = new Uint8Array(new Uint8Array(data.buffer));
            }
          } else if (isNDArrayLike(data)) {
            shape = data.shape;
            var stride = data.stride;
            var offset = data.offset;
            var shapeX = 0;
            var shapeY = 0;
            var strideX = 0;
            var strideY = 0;
            if (shape.length === 1) {
              shapeX = shape[0];
              shapeY = 1;
              strideX = stride[0];
              strideY = 0;
            } else if (shape.length === 2) {
              shapeX = shape[0];
              shapeY = shape[1];
              strideX = stride[0];
              strideY = stride[1];
            } else {
            }
            buffer.dtype = dtype || typedArrayCode(data.data) || GL_FLOAT$2;
            buffer.dimension = shapeY;
            var transposeData2 = pool.allocType(buffer.dtype, shapeX * shapeY);
            transpose2(
              transposeData2,
              data.data,
              shapeX,
              shapeY,
              strideX,
              strideY,
              offset
            );
            initBufferFromTypedArray(buffer, transposeData2, usage);
            if (persist) {
              buffer.persistentData = transposeData2;
            } else {
              pool.freeType(transposeData2);
            }
          } else if (data instanceof ArrayBuffer) {
            buffer.dtype = GL_UNSIGNED_BYTE$2;
            buffer.dimension = dimension;
            initBufferFromTypedArray(buffer, data, usage);
            if (persist) {
              buffer.persistentData = new Uint8Array(new Uint8Array(data));
            }
          } else {
          }
        }
        function destroy(buffer) {
          stats2.bufferCount--;
          destroyBuffer2(buffer);
          var handle = buffer.buffer;
          gl.deleteBuffer(handle);
          buffer.buffer = null;
          delete bufferSet[buffer.id];
        }
        function createBuffer(options, type, deferInit, persistent) {
          stats2.bufferCount++;
          var buffer = new REGLBuffer(type);
          bufferSet[buffer.id] = buffer;
          function reglBuffer(options2) {
            var usage = GL_STATIC_DRAW;
            var data = null;
            var byteLength = 0;
            var dtype = 0;
            var dimension = 1;
            if (Array.isArray(options2) || isTypedArray(options2) || isNDArrayLike(options2) || options2 instanceof ArrayBuffer) {
              data = options2;
            } else if (typeof options2 === "number") {
              byteLength = options2 | 0;
            } else if (options2) {
              if ("data" in options2) {
                data = options2.data;
              }
              if ("usage" in options2) {
                usage = usageTypes[options2.usage];
              }
              if ("type" in options2) {
                dtype = glTypes[options2.type];
              }
              if ("dimension" in options2) {
                dimension = options2.dimension | 0;
              }
              if ("length" in options2) {
                byteLength = options2.length | 0;
              }
            }
            buffer.bind();
            if (!data) {
              if (byteLength) gl.bufferData(buffer.type, byteLength, usage);
              buffer.dtype = dtype || GL_UNSIGNED_BYTE$2;
              buffer.usage = usage;
              buffer.dimension = dimension;
              buffer.byteLength = byteLength;
            } else {
              initBufferFromData(buffer, data, usage, dtype, dimension, persistent);
            }
            if (config.profile) {
              buffer.stats.size = buffer.byteLength * DTYPES_SIZES[buffer.dtype];
            }
            return reglBuffer;
          }
          function setSubData(data, offset) {
            gl.bufferSubData(buffer.type, offset, data);
          }
          function subdata(data, offset_) {
            var offset = (offset_ || 0) | 0;
            var shape;
            buffer.bind();
            if (isTypedArray(data) || data instanceof ArrayBuffer) {
              setSubData(data, offset);
            } else if (Array.isArray(data)) {
              if (data.length > 0) {
                if (typeof data[0] === "number") {
                  var converted = pool.allocType(buffer.dtype, data.length);
                  copyArray(converted, data);
                  setSubData(converted, offset);
                  pool.freeType(converted);
                } else if (Array.isArray(data[0]) || isTypedArray(data[0])) {
                  shape = arrayShape(data);
                  var flatData = arrayFlatten(data, shape, buffer.dtype);
                  setSubData(flatData, offset);
                  pool.freeType(flatData);
                } else {
                }
              }
            } else if (isNDArrayLike(data)) {
              shape = data.shape;
              var stride = data.stride;
              var shapeX = 0;
              var shapeY = 0;
              var strideX = 0;
              var strideY = 0;
              if (shape.length === 1) {
                shapeX = shape[0];
                shapeY = 1;
                strideX = stride[0];
                strideY = 0;
              } else if (shape.length === 2) {
                shapeX = shape[0];
                shapeY = shape[1];
                strideX = stride[0];
                strideY = stride[1];
              } else {
              }
              var dtype = Array.isArray(data.data) ? buffer.dtype : typedArrayCode(data.data);
              var transposeData2 = pool.allocType(dtype, shapeX * shapeY);
              transpose2(
                transposeData2,
                data.data,
                shapeX,
                shapeY,
                strideX,
                strideY,
                data.offset
              );
              setSubData(transposeData2, offset);
              pool.freeType(transposeData2);
            } else {
            }
            return reglBuffer;
          }
          if (!deferInit) {
            reglBuffer(options);
          }
          reglBuffer._reglType = "buffer";
          reglBuffer._buffer = buffer;
          reglBuffer.subdata = subdata;
          if (config.profile) {
            reglBuffer.stats = buffer.stats;
          }
          reglBuffer.destroy = function() {
            destroy(buffer);
          };
          return reglBuffer;
        }
        function restoreBuffers() {
          values(bufferSet).forEach(function(buffer) {
            buffer.buffer = gl.createBuffer();
            gl.bindBuffer(buffer.type, buffer.buffer);
            gl.bufferData(
              buffer.type,
              buffer.persistentData || buffer.byteLength,
              buffer.usage
            );
          });
        }
        if (config.profile) {
          stats2.getTotalBufferSize = function() {
            var total = 0;
            Object.keys(bufferSet).forEach(function(key) {
              total += bufferSet[key].stats.size;
            });
            return total;
          };
        }
        return {
          create: createBuffer,
          createStream,
          destroyStream,
          clear: function() {
            values(bufferSet).forEach(destroy);
            streamPool.forEach(destroy);
          },
          getBuffer: function(wrapper) {
            if (wrapper && wrapper._buffer instanceof REGLBuffer) {
              return wrapper._buffer;
            }
            return null;
          },
          restore: restoreBuffers,
          _initBuffer: initBufferFromData
        };
      }
      var points = 0;
      var point = 0;
      var lines = 1;
      var line = 1;
      var triangles = 4;
      var triangle = 4;
      var primTypes = {
        points,
        point,
        lines,
        line,
        triangles,
        triangle,
        "line loop": 2,
        "line strip": 3,
        "triangle strip": 5,
        "triangle fan": 6
      };
      var GL_POINTS = 0;
      var GL_LINES = 1;
      var GL_TRIANGLES = 4;
      var GL_BYTE$1 = 5120;
      var GL_UNSIGNED_BYTE$3 = 5121;
      var GL_SHORT$1 = 5122;
      var GL_UNSIGNED_SHORT$1 = 5123;
      var GL_INT$1 = 5124;
      var GL_UNSIGNED_INT$1 = 5125;
      var GL_ELEMENT_ARRAY_BUFFER = 34963;
      var GL_STREAM_DRAW$1 = 35040;
      var GL_STATIC_DRAW$1 = 35044;
      function wrapElementsState(gl, extensions, bufferState, stats2) {
        var elementSet = {};
        var elementCount = 0;
        var elementTypes = {
          "uint8": GL_UNSIGNED_BYTE$3,
          "uint16": GL_UNSIGNED_SHORT$1
        };
        if (extensions.oes_element_index_uint) {
          elementTypes.uint32 = GL_UNSIGNED_INT$1;
        }
        function REGLElementBuffer(buffer) {
          this.id = elementCount++;
          elementSet[this.id] = this;
          this.buffer = buffer;
          this.primType = GL_TRIANGLES;
          this.vertCount = 0;
          this.type = 0;
        }
        REGLElementBuffer.prototype.bind = function() {
          this.buffer.bind();
        };
        var bufferPool = [];
        function createElementStream(data) {
          var result = bufferPool.pop();
          if (!result) {
            result = new REGLElementBuffer(bufferState.create(
              null,
              GL_ELEMENT_ARRAY_BUFFER,
              true,
              false
            )._buffer);
          }
          initElements(result, data, GL_STREAM_DRAW$1, -1, -1, 0, 0);
          return result;
        }
        function destroyElementStream(elements) {
          bufferPool.push(elements);
        }
        function initElements(elements, data, usage, prim, count, byteLength, type) {
          elements.buffer.bind();
          var dtype;
          if (data) {
            var predictedType = type;
            if (!type && (!isTypedArray(data) || isNDArrayLike(data) && !isTypedArray(data.data))) {
              predictedType = extensions.oes_element_index_uint ? GL_UNSIGNED_INT$1 : GL_UNSIGNED_SHORT$1;
            }
            bufferState._initBuffer(
              elements.buffer,
              data,
              usage,
              predictedType,
              3
            );
          } else {
            gl.bufferData(GL_ELEMENT_ARRAY_BUFFER, byteLength, usage);
            elements.buffer.dtype = dtype || GL_UNSIGNED_BYTE$3;
            elements.buffer.usage = usage;
            elements.buffer.dimension = 3;
            elements.buffer.byteLength = byteLength;
          }
          dtype = type;
          if (!type) {
            switch (elements.buffer.dtype) {
              case GL_UNSIGNED_BYTE$3:
              case GL_BYTE$1:
                dtype = GL_UNSIGNED_BYTE$3;
                break;
              case GL_UNSIGNED_SHORT$1:
              case GL_SHORT$1:
                dtype = GL_UNSIGNED_SHORT$1;
                break;
              case GL_UNSIGNED_INT$1:
              case GL_INT$1:
                dtype = GL_UNSIGNED_INT$1;
                break;
              default:
            }
            elements.buffer.dtype = dtype;
          }
          elements.type = dtype;
          var vertCount = count;
          if (vertCount < 0) {
            vertCount = elements.buffer.byteLength;
            if (dtype === GL_UNSIGNED_SHORT$1) {
              vertCount >>= 1;
            } else if (dtype === GL_UNSIGNED_INT$1) {
              vertCount >>= 2;
            }
          }
          elements.vertCount = vertCount;
          var primType = prim;
          if (prim < 0) {
            primType = GL_TRIANGLES;
            var dimension = elements.buffer.dimension;
            if (dimension === 1) primType = GL_POINTS;
            if (dimension === 2) primType = GL_LINES;
            if (dimension === 3) primType = GL_TRIANGLES;
          }
          elements.primType = primType;
        }
        function destroyElements(elements) {
          stats2.elementsCount--;
          delete elementSet[elements.id];
          elements.buffer.destroy();
          elements.buffer = null;
        }
        function createElements(options, persistent) {
          var buffer = bufferState.create(null, GL_ELEMENT_ARRAY_BUFFER, true);
          var elements = new REGLElementBuffer(buffer._buffer);
          stats2.elementsCount++;
          function reglElements(options2) {
            if (!options2) {
              buffer();
              elements.primType = GL_TRIANGLES;
              elements.vertCount = 0;
              elements.type = GL_UNSIGNED_BYTE$3;
            } else if (typeof options2 === "number") {
              buffer(options2);
              elements.primType = GL_TRIANGLES;
              elements.vertCount = options2 | 0;
              elements.type = GL_UNSIGNED_BYTE$3;
            } else {
              var data = null;
              var usage = GL_STATIC_DRAW$1;
              var primType = -1;
              var vertCount = -1;
              var byteLength = 0;
              var dtype = 0;
              if (Array.isArray(options2) || isTypedArray(options2) || isNDArrayLike(options2)) {
                data = options2;
              } else {
                if ("data" in options2) {
                  data = options2.data;
                }
                if ("usage" in options2) {
                  usage = usageTypes[options2.usage];
                }
                if ("primitive" in options2) {
                  primType = primTypes[options2.primitive];
                }
                if ("count" in options2) {
                  vertCount = options2.count | 0;
                }
                if ("type" in options2) {
                  dtype = elementTypes[options2.type];
                }
                if ("length" in options2) {
                  byteLength = options2.length | 0;
                } else {
                  byteLength = vertCount;
                  if (dtype === GL_UNSIGNED_SHORT$1 || dtype === GL_SHORT$1) {
                    byteLength *= 2;
                  } else if (dtype === GL_UNSIGNED_INT$1 || dtype === GL_INT$1) {
                    byteLength *= 4;
                  }
                }
              }
              initElements(
                elements,
                data,
                usage,
                primType,
                vertCount,
                byteLength,
                dtype
              );
            }
            return reglElements;
          }
          reglElements(options);
          reglElements._reglType = "elements";
          reglElements._elements = elements;
          reglElements.subdata = function(data, offset) {
            buffer.subdata(data, offset);
            return reglElements;
          };
          reglElements.destroy = function() {
            destroyElements(elements);
          };
          return reglElements;
        }
        return {
          create: createElements,
          createStream: createElementStream,
          destroyStream: destroyElementStream,
          getElements: function(elements) {
            if (typeof elements === "function" && elements._elements instanceof REGLElementBuffer) {
              return elements._elements;
            }
            return null;
          },
          clear: function() {
            values(elementSet).forEach(destroyElements);
          }
        };
      }
      var FLOAT = new Float32Array(1);
      var INT = new Uint32Array(FLOAT.buffer);
      var GL_UNSIGNED_SHORT$3 = 5123;
      function convertToHalfFloat(array) {
        var ushorts = pool.allocType(GL_UNSIGNED_SHORT$3, array.length);
        for (var i = 0; i < array.length; ++i) {
          if (isNaN(array[i])) {
            ushorts[i] = 65535;
          } else if (array[i] === Infinity) {
            ushorts[i] = 31744;
          } else if (array[i] === -Infinity) {
            ushorts[i] = 64512;
          } else {
            FLOAT[0] = array[i];
            var x = INT[0];
            var sgn = x >>> 31 << 15;
            var exp = (x << 1 >>> 24) - 127;
            var frac = x >> 13 & (1 << 10) - 1;
            if (exp < -24) {
              ushorts[i] = sgn;
            } else if (exp < -14) {
              var s = -14 - exp;
              ushorts[i] = sgn + (frac + (1 << 10) >> s);
            } else if (exp > 15) {
              ushorts[i] = sgn + 31744;
            } else {
              ushorts[i] = sgn + (exp + 15 << 10) + frac;
            }
          }
        }
        return ushorts;
      }
      function isArrayLike(s) {
        return Array.isArray(s) || isTypedArray(s);
      }
      var GL_COMPRESSED_TEXTURE_FORMATS = 34467;
      var GL_TEXTURE_2D$1 = 3553;
      var GL_TEXTURE_CUBE_MAP$1 = 34067;
      var GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 = 34069;
      var GL_RGBA$1 = 6408;
      var GL_ALPHA = 6406;
      var GL_RGB = 6407;
      var GL_LUMINANCE = 6409;
      var GL_LUMINANCE_ALPHA = 6410;
      var GL_RGBA4 = 32854;
      var GL_RGB5_A1 = 32855;
      var GL_RGB565 = 36194;
      var GL_UNSIGNED_SHORT_4_4_4_4 = 32819;
      var GL_UNSIGNED_SHORT_5_5_5_1 = 32820;
      var GL_UNSIGNED_SHORT_5_6_5 = 33635;
      var GL_UNSIGNED_INT_24_8_WEBGL = 34042;
      var GL_DEPTH_COMPONENT = 6402;
      var GL_DEPTH_STENCIL = 34041;
      var GL_SRGB_EXT = 35904;
      var GL_SRGB_ALPHA_EXT = 35906;
      var GL_HALF_FLOAT_OES = 36193;
      var GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 33776;
      var GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 33777;
      var GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 33778;
      var GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 33779;
      var GL_COMPRESSED_RGB_ATC_WEBGL = 35986;
      var GL_COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL = 35987;
      var GL_COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL = 34798;
      var GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 35840;
      var GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 35841;
      var GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 35842;
      var GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 35843;
      var GL_COMPRESSED_RGB_ETC1_WEBGL = 36196;
      var GL_UNSIGNED_BYTE$4 = 5121;
      var GL_UNSIGNED_SHORT$2 = 5123;
      var GL_UNSIGNED_INT$2 = 5125;
      var GL_FLOAT$3 = 5126;
      var GL_TEXTURE_WRAP_S = 10242;
      var GL_TEXTURE_WRAP_T = 10243;
      var GL_REPEAT = 10497;
      var GL_CLAMP_TO_EDGE = 33071;
      var GL_MIRRORED_REPEAT = 33648;
      var GL_TEXTURE_MAG_FILTER = 10240;
      var GL_TEXTURE_MIN_FILTER = 10241;
      var GL_NEAREST = 9728;
      var GL_LINEAR = 9729;
      var GL_NEAREST_MIPMAP_NEAREST = 9984;
      var GL_LINEAR_MIPMAP_NEAREST = 9985;
      var GL_NEAREST_MIPMAP_LINEAR = 9986;
      var GL_LINEAR_MIPMAP_LINEAR = 9987;
      var GL_GENERATE_MIPMAP_HINT = 33170;
      var GL_DONT_CARE = 4352;
      var GL_FASTEST = 4353;
      var GL_NICEST = 4354;
      var GL_TEXTURE_MAX_ANISOTROPY_EXT = 34046;
      var GL_UNPACK_ALIGNMENT = 3317;
      var GL_UNPACK_FLIP_Y_WEBGL = 37440;
      var GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
      var GL_UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
      var GL_BROWSER_DEFAULT_WEBGL = 37444;
      var GL_TEXTURE0$1 = 33984;
      var MIPMAP_FILTERS = [
        GL_NEAREST_MIPMAP_NEAREST,
        GL_NEAREST_MIPMAP_LINEAR,
        GL_LINEAR_MIPMAP_NEAREST,
        GL_LINEAR_MIPMAP_LINEAR
      ];
      var CHANNELS_FORMAT = [
        0,
        GL_LUMINANCE,
        GL_LUMINANCE_ALPHA,
        GL_RGB,
        GL_RGBA$1
      ];
      var FORMAT_CHANNELS = {};
      FORMAT_CHANNELS[GL_LUMINANCE] = FORMAT_CHANNELS[GL_ALPHA] = FORMAT_CHANNELS[GL_DEPTH_COMPONENT] = 1;
      FORMAT_CHANNELS[GL_DEPTH_STENCIL] = FORMAT_CHANNELS[GL_LUMINANCE_ALPHA] = 2;
      FORMAT_CHANNELS[GL_RGB] = FORMAT_CHANNELS[GL_SRGB_EXT] = 3;
      FORMAT_CHANNELS[GL_RGBA$1] = FORMAT_CHANNELS[GL_SRGB_ALPHA_EXT] = 4;
      function objectName(str2) {
        return "[object " + str2 + "]";
      }
      var CANVAS_CLASS = objectName("HTMLCanvasElement");
      var OFFSCREENCANVAS_CLASS = objectName("OffscreenCanvas");
      var CONTEXT2D_CLASS = objectName("CanvasRenderingContext2D");
      var BITMAP_CLASS = objectName("ImageBitmap");
      var IMAGE_CLASS = objectName("HTMLImageElement");
      var VIDEO_CLASS = objectName("HTMLVideoElement");
      var PIXEL_CLASSES = Object.keys(arrayTypes).concat([
        CANVAS_CLASS,
        OFFSCREENCANVAS_CLASS,
        CONTEXT2D_CLASS,
        BITMAP_CLASS,
        IMAGE_CLASS,
        VIDEO_CLASS
      ]);
      var TYPE_SIZES = [];
      TYPE_SIZES[GL_UNSIGNED_BYTE$4] = 1;
      TYPE_SIZES[GL_FLOAT$3] = 4;
      TYPE_SIZES[GL_HALF_FLOAT_OES] = 2;
      TYPE_SIZES[GL_UNSIGNED_SHORT$2] = 2;
      TYPE_SIZES[GL_UNSIGNED_INT$2] = 4;
      var FORMAT_SIZES_SPECIAL = [];
      FORMAT_SIZES_SPECIAL[GL_RGBA4] = 2;
      FORMAT_SIZES_SPECIAL[GL_RGB5_A1] = 2;
      FORMAT_SIZES_SPECIAL[GL_RGB565] = 2;
      FORMAT_SIZES_SPECIAL[GL_DEPTH_STENCIL] = 4;
      FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_S3TC_DXT1_EXT] = 0.5;
      FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_S3TC_DXT1_EXT] = 0.5;
      FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_S3TC_DXT3_EXT] = 1;
      FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_S3TC_DXT5_EXT] = 1;
      FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_ATC_WEBGL] = 0.5;
      FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL] = 1;
      FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL] = 1;
      FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG] = 0.5;
      FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG] = 0.25;
      FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG] = 0.5;
      FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG] = 0.25;
      FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_ETC1_WEBGL] = 0.5;
      function isNumericArray(arr) {
        return Array.isArray(arr) && (arr.length === 0 || typeof arr[0] === "number");
      }
      function isRectArray(arr) {
        if (!Array.isArray(arr)) {
          return false;
        }
        var width = arr.length;
        if (width === 0 || !isArrayLike(arr[0])) {
          return false;
        }
        return true;
      }
      function classString(x) {
        return Object.prototype.toString.call(x);
      }
      function isCanvasElement(object) {
        return classString(object) === CANVAS_CLASS;
      }
      function isOffscreenCanvas(object) {
        return classString(object) === OFFSCREENCANVAS_CLASS;
      }
      function isContext2D(object) {
        return classString(object) === CONTEXT2D_CLASS;
      }
      function isBitmap(object) {
        return classString(object) === BITMAP_CLASS;
      }
      function isImageElement(object) {
        return classString(object) === IMAGE_CLASS;
      }
      function isVideoElement(object) {
        return classString(object) === VIDEO_CLASS;
      }
      function isPixelData(object) {
        if (!object) {
          return false;
        }
        var className = classString(object);
        if (PIXEL_CLASSES.indexOf(className) >= 0) {
          return true;
        }
        return isNumericArray(object) || isRectArray(object) || isNDArrayLike(object);
      }
      function typedArrayCode$1(data) {
        return arrayTypes[Object.prototype.toString.call(data)] | 0;
      }
      function convertData(result, data) {
        var n = data.length;
        switch (result.type) {
          case GL_UNSIGNED_BYTE$4:
          case GL_UNSIGNED_SHORT$2:
          case GL_UNSIGNED_INT$2:
          case GL_FLOAT$3:
            var converted = pool.allocType(result.type, n);
            converted.set(data);
            result.data = converted;
            break;
          case GL_HALF_FLOAT_OES:
            result.data = convertToHalfFloat(data);
            break;
          default:
        }
      }
      function preConvert(image, n) {
        return pool.allocType(
          image.type === GL_HALF_FLOAT_OES ? GL_FLOAT$3 : image.type,
          n
        );
      }
      function postConvert(image, data) {
        if (image.type === GL_HALF_FLOAT_OES) {
          image.data = convertToHalfFloat(data);
          pool.freeType(data);
        } else {
          image.data = data;
        }
      }
      function transposeData(image, array, strideX, strideY, strideC, offset) {
        var w = image.width;
        var h = image.height;
        var c = image.channels;
        var n = w * h * c;
        var data = preConvert(image, n);
        var p = 0;
        for (var i = 0; i < h; ++i) {
          for (var j = 0; j < w; ++j) {
            for (var k = 0; k < c; ++k) {
              data[p++] = array[strideX * j + strideY * i + strideC * k + offset];
            }
          }
        }
        postConvert(image, data);
      }
      function getTextureSize(format, type, width, height, isMipmap, isCube) {
        var s;
        if (typeof FORMAT_SIZES_SPECIAL[format] !== "undefined") {
          s = FORMAT_SIZES_SPECIAL[format];
        } else {
          s = FORMAT_CHANNELS[format] * TYPE_SIZES[type];
        }
        if (isCube) {
          s *= 6;
        }
        if (isMipmap) {
          var total = 0;
          var w = width;
          while (w >= 1) {
            total += s * w * w;
            w /= 2;
          }
          return total;
        } else {
          return s * width * height;
        }
      }
      function createTextureSet(gl, extensions, limits, reglPoll, contextState, stats2, config) {
        var mipmapHint = {
          "don't care": GL_DONT_CARE,
          "dont care": GL_DONT_CARE,
          "nice": GL_NICEST,
          "fast": GL_FASTEST
        };
        var wrapModes = {
          "repeat": GL_REPEAT,
          "clamp": GL_CLAMP_TO_EDGE,
          "mirror": GL_MIRRORED_REPEAT
        };
        var magFilters = {
          "nearest": GL_NEAREST,
          "linear": GL_LINEAR
        };
        var minFilters = extend({
          "mipmap": GL_LINEAR_MIPMAP_LINEAR,
          "nearest mipmap nearest": GL_NEAREST_MIPMAP_NEAREST,
          "linear mipmap nearest": GL_LINEAR_MIPMAP_NEAREST,
          "nearest mipmap linear": GL_NEAREST_MIPMAP_LINEAR,
          "linear mipmap linear": GL_LINEAR_MIPMAP_LINEAR
        }, magFilters);
        var colorSpace = {
          "none": 0,
          "browser": GL_BROWSER_DEFAULT_WEBGL
        };
        var textureTypes = {
          "uint8": GL_UNSIGNED_BYTE$4,
          "rgba4": GL_UNSIGNED_SHORT_4_4_4_4,
          "rgb565": GL_UNSIGNED_SHORT_5_6_5,
          "rgb5 a1": GL_UNSIGNED_SHORT_5_5_5_1
        };
        var textureFormats = {
          "alpha": GL_ALPHA,
          "luminance": GL_LUMINANCE,
          "luminance alpha": GL_LUMINANCE_ALPHA,
          "rgb": GL_RGB,
          "rgba": GL_RGBA$1,
          "rgba4": GL_RGBA4,
          "rgb5 a1": GL_RGB5_A1,
          "rgb565": GL_RGB565
        };
        var compressedTextureFormats = {};
        if (extensions.ext_srgb) {
          textureFormats.srgb = GL_SRGB_EXT;
          textureFormats.srgba = GL_SRGB_ALPHA_EXT;
        }
        if (extensions.oes_texture_float) {
          textureTypes.float32 = textureTypes.float = GL_FLOAT$3;
        }
        if (extensions.oes_texture_half_float) {
          textureTypes["float16"] = textureTypes["half float"] = GL_HALF_FLOAT_OES;
        }
        if (extensions.webgl_depth_texture) {
          extend(textureFormats, {
            "depth": GL_DEPTH_COMPONENT,
            "depth stencil": GL_DEPTH_STENCIL
          });
          extend(textureTypes, {
            "uint16": GL_UNSIGNED_SHORT$2,
            "uint32": GL_UNSIGNED_INT$2,
            "depth stencil": GL_UNSIGNED_INT_24_8_WEBGL
          });
        }
        if (extensions.webgl_compressed_texture_s3tc) {
          extend(compressedTextureFormats, {
            "rgb s3tc dxt1": GL_COMPRESSED_RGB_S3TC_DXT1_EXT,
            "rgba s3tc dxt1": GL_COMPRESSED_RGBA_S3TC_DXT1_EXT,
            "rgba s3tc dxt3": GL_COMPRESSED_RGBA_S3TC_DXT3_EXT,
            "rgba s3tc dxt5": GL_COMPRESSED_RGBA_S3TC_DXT5_EXT
          });
        }
        if (extensions.webgl_compressed_texture_atc) {
          extend(compressedTextureFormats, {
            "rgb atc": GL_COMPRESSED_RGB_ATC_WEBGL,
            "rgba atc explicit alpha": GL_COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL,
            "rgba atc interpolated alpha": GL_COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL
          });
        }
        if (extensions.webgl_compressed_texture_pvrtc) {
          extend(compressedTextureFormats, {
            "rgb pvrtc 4bppv1": GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG,
            "rgb pvrtc 2bppv1": GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG,
            "rgba pvrtc 4bppv1": GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG,
            "rgba pvrtc 2bppv1": GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG
          });
        }
        if (extensions.webgl_compressed_texture_etc1) {
          compressedTextureFormats["rgb etc1"] = GL_COMPRESSED_RGB_ETC1_WEBGL;
        }
        var supportedCompressedFormats = Array.prototype.slice.call(
          gl.getParameter(GL_COMPRESSED_TEXTURE_FORMATS)
        );
        Object.keys(compressedTextureFormats).forEach(function(name) {
          var format = compressedTextureFormats[name];
          if (supportedCompressedFormats.indexOf(format) >= 0) {
            textureFormats[name] = format;
          }
        });
        var supportedFormats = Object.keys(textureFormats);
        limits.textureFormats = supportedFormats;
        var textureFormatsInvert = [];
        Object.keys(textureFormats).forEach(function(key) {
          var val = textureFormats[key];
          textureFormatsInvert[val] = key;
        });
        var textureTypesInvert = [];
        Object.keys(textureTypes).forEach(function(key) {
          var val = textureTypes[key];
          textureTypesInvert[val] = key;
        });
        var magFiltersInvert = [];
        Object.keys(magFilters).forEach(function(key) {
          var val = magFilters[key];
          magFiltersInvert[val] = key;
        });
        var minFiltersInvert = [];
        Object.keys(minFilters).forEach(function(key) {
          var val = minFilters[key];
          minFiltersInvert[val] = key;
        });
        var wrapModesInvert = [];
        Object.keys(wrapModes).forEach(function(key) {
          var val = wrapModes[key];
          wrapModesInvert[val] = key;
        });
        var colorFormats = supportedFormats.reduce(function(color2, key) {
          var glenum = textureFormats[key];
          if (glenum === GL_LUMINANCE || glenum === GL_ALPHA || glenum === GL_LUMINANCE || glenum === GL_LUMINANCE_ALPHA || glenum === GL_DEPTH_COMPONENT || glenum === GL_DEPTH_STENCIL || extensions.ext_srgb && (glenum === GL_SRGB_EXT || glenum === GL_SRGB_ALPHA_EXT)) {
            color2[glenum] = glenum;
          } else if (glenum === GL_RGB5_A1 || key.indexOf("rgba") >= 0) {
            color2[glenum] = GL_RGBA$1;
          } else {
            color2[glenum] = GL_RGB;
          }
          return color2;
        }, {});
        function TexFlags() {
          this.internalformat = GL_RGBA$1;
          this.format = GL_RGBA$1;
          this.type = GL_UNSIGNED_BYTE$4;
          this.compressed = false;
          this.premultiplyAlpha = false;
          this.flipY = false;
          this.unpackAlignment = 1;
          this.colorSpace = GL_BROWSER_DEFAULT_WEBGL;
          this.width = 0;
          this.height = 0;
          this.channels = 0;
        }
        function copyFlags(result, other) {
          result.internalformat = other.internalformat;
          result.format = other.format;
          result.type = other.type;
          result.compressed = other.compressed;
          result.premultiplyAlpha = other.premultiplyAlpha;
          result.flipY = other.flipY;
          result.unpackAlignment = other.unpackAlignment;
          result.colorSpace = other.colorSpace;
          result.width = other.width;
          result.height = other.height;
          result.channels = other.channels;
        }
        function parseFlags(flags, options) {
          if (typeof options !== "object" || !options) {
            return;
          }
          if ("premultiplyAlpha" in options) {
            flags.premultiplyAlpha = options.premultiplyAlpha;
          }
          if ("flipY" in options) {
            flags.flipY = options.flipY;
          }
          if ("alignment" in options) {
            flags.unpackAlignment = options.alignment;
          }
          if ("colorSpace" in options) {
            flags.colorSpace = colorSpace[options.colorSpace];
          }
          if ("type" in options) {
            var type = options.type;
            flags.type = textureTypes[type];
          }
          var w = flags.width;
          var h = flags.height;
          var c = flags.channels;
          var hasChannels = false;
          if ("shape" in options) {
            w = options.shape[0];
            h = options.shape[1];
            if (options.shape.length === 3) {
              c = options.shape[2];
              hasChannels = true;
            }
          } else {
            if ("radius" in options) {
              w = h = options.radius;
            }
            if ("width" in options) {
              w = options.width;
            }
            if ("height" in options) {
              h = options.height;
            }
            if ("channels" in options) {
              c = options.channels;
              hasChannels = true;
            }
          }
          flags.width = w | 0;
          flags.height = h | 0;
          flags.channels = c | 0;
          var hasFormat = false;
          if ("format" in options) {
            var formatStr = options.format;
            var internalformat = flags.internalformat = textureFormats[formatStr];
            flags.format = colorFormats[internalformat];
            if (formatStr in textureTypes) {
              if (!("type" in options)) {
                flags.type = textureTypes[formatStr];
              }
            }
            if (formatStr in compressedTextureFormats) {
              flags.compressed = true;
            }
            hasFormat = true;
          }
          if (!hasChannels && hasFormat) {
            flags.channels = FORMAT_CHANNELS[flags.format];
          } else if (hasChannels && !hasFormat) {
            if (flags.channels !== CHANNELS_FORMAT[flags.format]) {
              flags.format = flags.internalformat = CHANNELS_FORMAT[flags.channels];
            }
          } else if (hasFormat && hasChannels) {
          }
        }
        function setFlags(flags) {
          gl.pixelStorei(GL_UNPACK_FLIP_Y_WEBGL, flags.flipY);
          gl.pixelStorei(GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL, flags.premultiplyAlpha);
          gl.pixelStorei(GL_UNPACK_COLORSPACE_CONVERSION_WEBGL, flags.colorSpace);
          gl.pixelStorei(GL_UNPACK_ALIGNMENT, flags.unpackAlignment);
        }
        function TexImage() {
          TexFlags.call(this);
          this.xOffset = 0;
          this.yOffset = 0;
          this.data = null;
          this.needsFree = false;
          this.element = null;
          this.needsCopy = false;
        }
        function parseImage(image, options) {
          var data = null;
          if (isPixelData(options)) {
            data = options;
          } else if (options) {
            parseFlags(image, options);
            if ("x" in options) {
              image.xOffset = options.x | 0;
            }
            if ("y" in options) {
              image.yOffset = options.y | 0;
            }
            if (isPixelData(options.data)) {
              data = options.data;
            }
          }
          if (options.copy) {
            var viewW = contextState.viewportWidth;
            var viewH = contextState.viewportHeight;
            image.width = image.width || viewW - image.xOffset;
            image.height = image.height || viewH - image.yOffset;
            image.needsCopy = true;
          } else if (!data) {
            image.width = image.width || 1;
            image.height = image.height || 1;
            image.channels = image.channels || 4;
          } else if (isTypedArray(data)) {
            image.channels = image.channels || 4;
            image.data = data;
            if (!("type" in options) && image.type === GL_UNSIGNED_BYTE$4) {
              image.type = typedArrayCode$1(data);
            }
          } else if (isNumericArray(data)) {
            image.channels = image.channels || 4;
            convertData(image, data);
            image.alignment = 1;
            image.needsFree = true;
          } else if (isNDArrayLike(data)) {
            var array = data.data;
            if (!Array.isArray(array) && image.type === GL_UNSIGNED_BYTE$4) {
              image.type = typedArrayCode$1(array);
            }
            var shape = data.shape;
            var stride = data.stride;
            var shapeX, shapeY, shapeC, strideX, strideY, strideC;
            if (shape.length === 3) {
              shapeC = shape[2];
              strideC = stride[2];
            } else {
              shapeC = 1;
              strideC = 1;
            }
            shapeX = shape[0];
            shapeY = shape[1];
            strideX = stride[0];
            strideY = stride[1];
            image.alignment = 1;
            image.width = shapeX;
            image.height = shapeY;
            image.channels = shapeC;
            image.format = image.internalformat = CHANNELS_FORMAT[shapeC];
            image.needsFree = true;
            transposeData(image, array, strideX, strideY, strideC, data.offset);
          } else if (isCanvasElement(data) || isOffscreenCanvas(data) || isContext2D(data)) {
            if (isCanvasElement(data) || isOffscreenCanvas(data)) {
              image.element = data;
            } else {
              image.element = data.canvas;
            }
            image.width = image.element.width;
            image.height = image.element.height;
            image.channels = 4;
          } else if (isBitmap(data)) {
            image.element = data;
            image.width = data.width;
            image.height = data.height;
            image.channels = 4;
          } else if (isImageElement(data)) {
            image.element = data;
            image.width = data.naturalWidth;
            image.height = data.naturalHeight;
            image.channels = 4;
          } else if (isVideoElement(data)) {
            image.element = data;
            image.width = data.videoWidth;
            image.height = data.videoHeight;
            image.channels = 4;
          } else if (isRectArray(data)) {
            var w = image.width || data[0].length;
            var h = image.height || data.length;
            var c = image.channels;
            if (isArrayLike(data[0][0])) {
              c = c || data[0][0].length;
            } else {
              c = c || 1;
            }
            var arrayShape2 = flattenUtils.shape(data);
            var n = 1;
            for (var dd = 0; dd < arrayShape2.length; ++dd) {
              n *= arrayShape2[dd];
            }
            var allocData = preConvert(image, n);
            flattenUtils.flatten(data, arrayShape2, "", allocData);
            postConvert(image, allocData);
            image.alignment = 1;
            image.width = w;
            image.height = h;
            image.channels = c;
            image.format = image.internalformat = CHANNELS_FORMAT[c];
            image.needsFree = true;
          }
          if (image.type === GL_FLOAT$3) {
          } else if (image.type === GL_HALF_FLOAT_OES) {
          }
        }
        function setImage(info, target, miplevel) {
          var element = info.element;
          var data = info.data;
          var internalformat = info.internalformat;
          var format = info.format;
          var type = info.type;
          var width = info.width;
          var height = info.height;
          setFlags(info);
          if (element) {
            gl.texImage2D(target, miplevel, format, format, type, element);
          } else if (info.compressed) {
            gl.compressedTexImage2D(target, miplevel, internalformat, width, height, 0, data);
          } else if (info.needsCopy) {
            reglPoll();
            gl.copyTexImage2D(
              target,
              miplevel,
              format,
              info.xOffset,
              info.yOffset,
              width,
              height,
              0
            );
          } else {
            gl.texImage2D(target, miplevel, format, width, height, 0, format, type, data || null);
          }
        }
        function setSubImage(info, target, x, y, miplevel) {
          var element = info.element;
          var data = info.data;
          var internalformat = info.internalformat;
          var format = info.format;
          var type = info.type;
          var width = info.width;
          var height = info.height;
          setFlags(info);
          if (element) {
            gl.texSubImage2D(
              target,
              miplevel,
              x,
              y,
              format,
              type,
              element
            );
          } else if (info.compressed) {
            gl.compressedTexSubImage2D(
              target,
              miplevel,
              x,
              y,
              internalformat,
              width,
              height,
              data
            );
          } else if (info.needsCopy) {
            reglPoll();
            gl.copyTexSubImage2D(
              target,
              miplevel,
              x,
              y,
              info.xOffset,
              info.yOffset,
              width,
              height
            );
          } else {
            gl.texSubImage2D(
              target,
              miplevel,
              x,
              y,
              width,
              height,
              format,
              type,
              data
            );
          }
        }
        var imagePool = [];
        function allocImage() {
          return imagePool.pop() || new TexImage();
        }
        function freeImage(image) {
          if (image.needsFree) {
            pool.freeType(image.data);
          }
          TexImage.call(image);
          imagePool.push(image);
        }
        function MipMap() {
          TexFlags.call(this);
          this.genMipmaps = false;
          this.mipmapHint = GL_DONT_CARE;
          this.mipmask = 0;
          this.images = Array(16);
        }
        function parseMipMapFromShape(mipmap, width, height) {
          var img = mipmap.images[0] = allocImage();
          mipmap.mipmask = 1;
          img.width = mipmap.width = width;
          img.height = mipmap.height = height;
          img.channels = mipmap.channels = 4;
        }
        function parseMipMapFromObject(mipmap, options) {
          var imgData = null;
          if (isPixelData(options)) {
            imgData = mipmap.images[0] = allocImage();
            copyFlags(imgData, mipmap);
            parseImage(imgData, options);
            mipmap.mipmask = 1;
          } else {
            parseFlags(mipmap, options);
            if (Array.isArray(options.mipmap)) {
              var mipData = options.mipmap;
              for (var i = 0; i < mipData.length; ++i) {
                imgData = mipmap.images[i] = allocImage();
                copyFlags(imgData, mipmap);
                imgData.width >>= i;
                imgData.height >>= i;
                parseImage(imgData, mipData[i]);
                mipmap.mipmask |= 1 << i;
              }
            } else {
              imgData = mipmap.images[0] = allocImage();
              copyFlags(imgData, mipmap);
              parseImage(imgData, options);
              mipmap.mipmask = 1;
            }
          }
          copyFlags(mipmap, mipmap.images[0]);
          if (mipmap.compressed && (mipmap.internalformat === GL_COMPRESSED_RGB_S3TC_DXT1_EXT || mipmap.internalformat === GL_COMPRESSED_RGBA_S3TC_DXT1_EXT || mipmap.internalformat === GL_COMPRESSED_RGBA_S3TC_DXT3_EXT || mipmap.internalformat === GL_COMPRESSED_RGBA_S3TC_DXT5_EXT)) {
          }
        }
        function setMipMap(mipmap, target) {
          var images = mipmap.images;
          for (var i = 0; i < images.length; ++i) {
            if (!images[i]) {
              return;
            }
            setImage(images[i], target, i);
          }
        }
        var mipPool = [];
        function allocMipMap() {
          var result = mipPool.pop() || new MipMap();
          TexFlags.call(result);
          result.mipmask = 0;
          for (var i = 0; i < 16; ++i) {
            result.images[i] = null;
          }
          return result;
        }
        function freeMipMap(mipmap) {
          var images = mipmap.images;
          for (var i = 0; i < images.length; ++i) {
            if (images[i]) {
              freeImage(images[i]);
            }
            images[i] = null;
          }
          mipPool.push(mipmap);
        }
        function TexInfo() {
          this.minFilter = GL_NEAREST;
          this.magFilter = GL_NEAREST;
          this.wrapS = GL_CLAMP_TO_EDGE;
          this.wrapT = GL_CLAMP_TO_EDGE;
          this.anisotropic = 1;
          this.genMipmaps = false;
          this.mipmapHint = GL_DONT_CARE;
        }
        function parseTexInfo(info, options) {
          if ("min" in options) {
            var minFilter = options.min;
            info.minFilter = minFilters[minFilter];
            if (MIPMAP_FILTERS.indexOf(info.minFilter) >= 0 && !("faces" in options)) {
              info.genMipmaps = true;
            }
          }
          if ("mag" in options) {
            var magFilter = options.mag;
            info.magFilter = magFilters[magFilter];
          }
          var wrapS = info.wrapS;
          var wrapT = info.wrapT;
          if ("wrap" in options) {
            var wrap = options.wrap;
            if (typeof wrap === "string") {
              wrapS = wrapT = wrapModes[wrap];
            } else if (Array.isArray(wrap)) {
              wrapS = wrapModes[wrap[0]];
              wrapT = wrapModes[wrap[1]];
            }
          } else {
            if ("wrapS" in options) {
              var optWrapS = options.wrapS;
              wrapS = wrapModes[optWrapS];
            }
            if ("wrapT" in options) {
              var optWrapT = options.wrapT;
              wrapT = wrapModes[optWrapT];
            }
          }
          info.wrapS = wrapS;
          info.wrapT = wrapT;
          if ("anisotropic" in options) {
            var anisotropic = options.anisotropic;
            info.anisotropic = options.anisotropic;
          }
          if ("mipmap" in options) {
            var hasMipMap = false;
            switch (typeof options.mipmap) {
              case "string":
                info.mipmapHint = mipmapHint[options.mipmap];
                info.genMipmaps = true;
                hasMipMap = true;
                break;
              case "boolean":
                hasMipMap = info.genMipmaps = options.mipmap;
                break;
              case "object":
                info.genMipmaps = false;
                hasMipMap = true;
                break;
              default:
            }
            if (hasMipMap && !("min" in options)) {
              info.minFilter = GL_NEAREST_MIPMAP_NEAREST;
            }
          }
        }
        function setTexInfo(info, target) {
          gl.texParameteri(target, GL_TEXTURE_MIN_FILTER, info.minFilter);
          gl.texParameteri(target, GL_TEXTURE_MAG_FILTER, info.magFilter);
          gl.texParameteri(target, GL_TEXTURE_WRAP_S, info.wrapS);
          gl.texParameteri(target, GL_TEXTURE_WRAP_T, info.wrapT);
          if (extensions.ext_texture_filter_anisotropic) {
            gl.texParameteri(target, GL_TEXTURE_MAX_ANISOTROPY_EXT, info.anisotropic);
          }
          if (info.genMipmaps) {
            gl.hint(GL_GENERATE_MIPMAP_HINT, info.mipmapHint);
            gl.generateMipmap(target);
          }
        }
        var textureCount = 0;
        var textureSet = {};
        var numTexUnits = limits.maxTextureUnits;
        var textureUnits = Array(numTexUnits).map(function() {
          return null;
        });
        function REGLTexture(target) {
          TexFlags.call(this);
          this.mipmask = 0;
          this.internalformat = GL_RGBA$1;
          this.id = textureCount++;
          this.refCount = 1;
          this.target = target;
          this.texture = gl.createTexture();
          this.unit = -1;
          this.bindCount = 0;
          this.texInfo = new TexInfo();
          if (config.profile) {
            this.stats = { size: 0 };
          }
        }
        function tempBind(texture) {
          gl.activeTexture(GL_TEXTURE0$1);
          gl.bindTexture(texture.target, texture.texture);
        }
        function tempRestore() {
          var prev = textureUnits[0];
          if (prev) {
            gl.bindTexture(prev.target, prev.texture);
          } else {
            gl.bindTexture(GL_TEXTURE_2D$1, null);
          }
        }
        function destroy(texture) {
          var handle = texture.texture;
          var unit = texture.unit;
          var target = texture.target;
          if (unit >= 0) {
            gl.activeTexture(GL_TEXTURE0$1 + unit);
            gl.bindTexture(target, null);
            textureUnits[unit] = null;
          }
          gl.deleteTexture(handle);
          texture.texture = null;
          texture.params = null;
          texture.pixels = null;
          texture.refCount = 0;
          delete textureSet[texture.id];
          stats2.textureCount--;
        }
        extend(REGLTexture.prototype, {
          bind: function() {
            var texture = this;
            texture.bindCount += 1;
            var unit = texture.unit;
            if (unit < 0) {
              for (var i = 0; i < numTexUnits; ++i) {
                var other = textureUnits[i];
                if (other) {
                  if (other.bindCount > 0) {
                    continue;
                  }
                  other.unit = -1;
                }
                textureUnits[i] = texture;
                unit = i;
                break;
              }
              if (unit >= numTexUnits) {
              }
              if (config.profile && stats2.maxTextureUnits < unit + 1) {
                stats2.maxTextureUnits = unit + 1;
              }
              texture.unit = unit;
              gl.activeTexture(GL_TEXTURE0$1 + unit);
              gl.bindTexture(texture.target, texture.texture);
            }
            return unit;
          },
          unbind: function() {
            this.bindCount -= 1;
          },
          decRef: function() {
            if (--this.refCount <= 0) {
              destroy(this);
            }
          }
        });
        function createTexture2D(a, b) {
          var texture = new REGLTexture(GL_TEXTURE_2D$1);
          textureSet[texture.id] = texture;
          stats2.textureCount++;
          function reglTexture2D(a2, b2) {
            var texInfo = texture.texInfo;
            TexInfo.call(texInfo);
            var mipData = allocMipMap();
            if (typeof a2 === "number") {
              if (typeof b2 === "number") {
                parseMipMapFromShape(mipData, a2 | 0, b2 | 0);
              } else {
                parseMipMapFromShape(mipData, a2 | 0, a2 | 0);
              }
            } else if (a2) {
              parseTexInfo(texInfo, a2);
              parseMipMapFromObject(mipData, a2);
            } else {
              parseMipMapFromShape(mipData, 1, 1);
            }
            if (texInfo.genMipmaps) {
              mipData.mipmask = (mipData.width << 1) - 1;
            }
            texture.mipmask = mipData.mipmask;
            copyFlags(texture, mipData);
            texture.internalformat = mipData.internalformat;
            reglTexture2D.width = mipData.width;
            reglTexture2D.height = mipData.height;
            tempBind(texture);
            setMipMap(mipData, GL_TEXTURE_2D$1);
            setTexInfo(texInfo, GL_TEXTURE_2D$1);
            tempRestore();
            freeMipMap(mipData);
            if (config.profile) {
              texture.stats.size = getTextureSize(
                texture.internalformat,
                texture.type,
                mipData.width,
                mipData.height,
                texInfo.genMipmaps,
                false
              );
            }
            reglTexture2D.format = textureFormatsInvert[texture.internalformat];
            reglTexture2D.type = textureTypesInvert[texture.type];
            reglTexture2D.mag = magFiltersInvert[texInfo.magFilter];
            reglTexture2D.min = minFiltersInvert[texInfo.minFilter];
            reglTexture2D.wrapS = wrapModesInvert[texInfo.wrapS];
            reglTexture2D.wrapT = wrapModesInvert[texInfo.wrapT];
            return reglTexture2D;
          }
          function subimage(image, x_, y_, level_) {
            var x = x_ | 0;
            var y = y_ | 0;
            var level = level_ | 0;
            var imageData = allocImage();
            copyFlags(imageData, texture);
            imageData.width = 0;
            imageData.height = 0;
            parseImage(imageData, image);
            imageData.width = imageData.width || (texture.width >> level) - x;
            imageData.height = imageData.height || (texture.height >> level) - y;
            tempBind(texture);
            setSubImage(imageData, GL_TEXTURE_2D$1, x, y, level);
            tempRestore();
            freeImage(imageData);
            return reglTexture2D;
          }
          function resize(w_, h_) {
            var w = w_ | 0;
            var h = h_ | 0 || w;
            if (w === texture.width && h === texture.height) {
              return reglTexture2D;
            }
            reglTexture2D.width = texture.width = w;
            reglTexture2D.height = texture.height = h;
            tempBind(texture);
            for (var i = 0; texture.mipmask >> i; ++i) {
              var _w = w >> i;
              var _h = h >> i;
              if (!_w || !_h) break;
              gl.texImage2D(
                GL_TEXTURE_2D$1,
                i,
                texture.format,
                _w,
                _h,
                0,
                texture.format,
                texture.type,
                null
              );
            }
            tempRestore();
            if (config.profile) {
              texture.stats.size = getTextureSize(
                texture.internalformat,
                texture.type,
                w,
                h,
                false,
                false
              );
            }
            return reglTexture2D;
          }
          reglTexture2D(a, b);
          reglTexture2D.subimage = subimage;
          reglTexture2D.resize = resize;
          reglTexture2D._reglType = "texture2d";
          reglTexture2D._texture = texture;
          if (config.profile) {
            reglTexture2D.stats = texture.stats;
          }
          reglTexture2D.destroy = function() {
            texture.decRef();
          };
          return reglTexture2D;
        }
        function createTextureCube(a0, a1, a2, a3, a4, a5) {
          var texture = new REGLTexture(GL_TEXTURE_CUBE_MAP$1);
          textureSet[texture.id] = texture;
          stats2.cubeCount++;
          var faces = new Array(6);
          function reglTextureCube(a02, a12, a22, a32, a42, a52) {
            var i;
            var texInfo = texture.texInfo;
            TexInfo.call(texInfo);
            for (i = 0; i < 6; ++i) {
              faces[i] = allocMipMap();
            }
            if (typeof a02 === "number" || !a02) {
              var s = a02 | 0 || 1;
              for (i = 0; i < 6; ++i) {
                parseMipMapFromShape(faces[i], s, s);
              }
            } else if (typeof a02 === "object") {
              if (a12) {
                parseMipMapFromObject(faces[0], a02);
                parseMipMapFromObject(faces[1], a12);
                parseMipMapFromObject(faces[2], a22);
                parseMipMapFromObject(faces[3], a32);
                parseMipMapFromObject(faces[4], a42);
                parseMipMapFromObject(faces[5], a52);
              } else {
                parseTexInfo(texInfo, a02);
                parseFlags(texture, a02);
                if ("faces" in a02) {
                  var faceInput = a02.faces;
                  for (i = 0; i < 6; ++i) {
                    copyFlags(faces[i], texture);
                    parseMipMapFromObject(faces[i], faceInput[i]);
                  }
                } else {
                  for (i = 0; i < 6; ++i) {
                    parseMipMapFromObject(faces[i], a02);
                  }
                }
              }
            } else {
            }
            copyFlags(texture, faces[0]);
            if (texInfo.genMipmaps) {
              texture.mipmask = (faces[0].width << 1) - 1;
            } else {
              texture.mipmask = faces[0].mipmask;
            }
            texture.internalformat = faces[0].internalformat;
            reglTextureCube.width = faces[0].width;
            reglTextureCube.height = faces[0].height;
            tempBind(texture);
            for (i = 0; i < 6; ++i) {
              setMipMap(faces[i], GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + i);
            }
            setTexInfo(texInfo, GL_TEXTURE_CUBE_MAP$1);
            tempRestore();
            if (config.profile) {
              texture.stats.size = getTextureSize(
                texture.internalformat,
                texture.type,
                reglTextureCube.width,
                reglTextureCube.height,
                texInfo.genMipmaps,
                true
              );
            }
            reglTextureCube.format = textureFormatsInvert[texture.internalformat];
            reglTextureCube.type = textureTypesInvert[texture.type];
            reglTextureCube.mag = magFiltersInvert[texInfo.magFilter];
            reglTextureCube.min = minFiltersInvert[texInfo.minFilter];
            reglTextureCube.wrapS = wrapModesInvert[texInfo.wrapS];
            reglTextureCube.wrapT = wrapModesInvert[texInfo.wrapT];
            for (i = 0; i < 6; ++i) {
              freeMipMap(faces[i]);
            }
            return reglTextureCube;
          }
          function subimage(face, image, x_, y_, level_) {
            var x = x_ | 0;
            var y = y_ | 0;
            var level = level_ | 0;
            var imageData = allocImage();
            copyFlags(imageData, texture);
            imageData.width = 0;
            imageData.height = 0;
            parseImage(imageData, image);
            imageData.width = imageData.width || (texture.width >> level) - x;
            imageData.height = imageData.height || (texture.height >> level) - y;
            tempBind(texture);
            setSubImage(imageData, GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + face, x, y, level);
            tempRestore();
            freeImage(imageData);
            return reglTextureCube;
          }
          function resize(radius_) {
            var radius = radius_ | 0;
            if (radius === texture.width) {
              return;
            }
            reglTextureCube.width = texture.width = radius;
            reglTextureCube.height = texture.height = radius;
            tempBind(texture);
            for (var i = 0; i < 6; ++i) {
              for (var j = 0; texture.mipmask >> j; ++j) {
                gl.texImage2D(
                  GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + i,
                  j,
                  texture.format,
                  radius >> j,
                  radius >> j,
                  0,
                  texture.format,
                  texture.type,
                  null
                );
              }
            }
            tempRestore();
            if (config.profile) {
              texture.stats.size = getTextureSize(
                texture.internalformat,
                texture.type,
                reglTextureCube.width,
                reglTextureCube.height,
                false,
                true
              );
            }
            return reglTextureCube;
          }
          reglTextureCube(a0, a1, a2, a3, a4, a5);
          reglTextureCube.subimage = subimage;
          reglTextureCube.resize = resize;
          reglTextureCube._reglType = "textureCube";
          reglTextureCube._texture = texture;
          if (config.profile) {
            reglTextureCube.stats = texture.stats;
          }
          reglTextureCube.destroy = function() {
            texture.decRef();
          };
          return reglTextureCube;
        }
        function destroyTextures() {
          for (var i = 0; i < numTexUnits; ++i) {
            gl.activeTexture(GL_TEXTURE0$1 + i);
            gl.bindTexture(GL_TEXTURE_2D$1, null);
            textureUnits[i] = null;
          }
          values(textureSet).forEach(destroy);
          stats2.cubeCount = 0;
          stats2.textureCount = 0;
        }
        if (config.profile) {
          stats2.getTotalTextureSize = function() {
            var total = 0;
            Object.keys(textureSet).forEach(function(key) {
              total += textureSet[key].stats.size;
            });
            return total;
          };
        }
        function restoreTextures() {
          for (var i = 0; i < numTexUnits; ++i) {
            var tex = textureUnits[i];
            if (tex) {
              tex.bindCount = 0;
              tex.unit = -1;
              textureUnits[i] = null;
            }
          }
          values(textureSet).forEach(function(texture) {
            texture.texture = gl.createTexture();
            gl.bindTexture(texture.target, texture.texture);
            for (var i2 = 0; i2 < 32; ++i2) {
              if ((texture.mipmask & 1 << i2) === 0) {
                continue;
              }
              if (texture.target === GL_TEXTURE_2D$1) {
                gl.texImage2D(
                  GL_TEXTURE_2D$1,
                  i2,
                  texture.internalformat,
                  texture.width >> i2,
                  texture.height >> i2,
                  0,
                  texture.internalformat,
                  texture.type,
                  null
                );
              } else {
                for (var j = 0; j < 6; ++j) {
                  gl.texImage2D(
                    GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + j,
                    i2,
                    texture.internalformat,
                    texture.width >> i2,
                    texture.height >> i2,
                    0,
                    texture.internalformat,
                    texture.type,
                    null
                  );
                }
              }
            }
            setTexInfo(texture.texInfo, texture.target);
          });
        }
        function refreshTextures() {
          for (var i = 0; i < numTexUnits; ++i) {
            var tex = textureUnits[i];
            if (tex) {
              tex.bindCount = 0;
              tex.unit = -1;
              textureUnits[i] = null;
            }
            gl.activeTexture(GL_TEXTURE0$1 + i);
            gl.bindTexture(GL_TEXTURE_2D$1, null);
            gl.bindTexture(GL_TEXTURE_CUBE_MAP$1, null);
          }
        }
        return {
          create2D: createTexture2D,
          createCube: createTextureCube,
          clear: destroyTextures,
          getTexture: function(wrapper) {
            return null;
          },
          restore: restoreTextures,
          refresh: refreshTextures
        };
      }
      var GL_RENDERBUFFER = 36161;
      var GL_RGBA4$1 = 32854;
      var GL_RGB5_A1$1 = 32855;
      var GL_RGB565$1 = 36194;
      var GL_DEPTH_COMPONENT16 = 33189;
      var GL_STENCIL_INDEX8 = 36168;
      var GL_DEPTH_STENCIL$1 = 34041;
      var GL_SRGB8_ALPHA8_EXT = 35907;
      var GL_RGBA32F_EXT = 34836;
      var GL_RGBA16F_EXT = 34842;
      var GL_RGB16F_EXT = 34843;
      var FORMAT_SIZES = [];
      FORMAT_SIZES[GL_RGBA4$1] = 2;
      FORMAT_SIZES[GL_RGB5_A1$1] = 2;
      FORMAT_SIZES[GL_RGB565$1] = 2;
      FORMAT_SIZES[GL_DEPTH_COMPONENT16] = 2;
      FORMAT_SIZES[GL_STENCIL_INDEX8] = 1;
      FORMAT_SIZES[GL_DEPTH_STENCIL$1] = 4;
      FORMAT_SIZES[GL_SRGB8_ALPHA8_EXT] = 4;
      FORMAT_SIZES[GL_RGBA32F_EXT] = 16;
      FORMAT_SIZES[GL_RGBA16F_EXT] = 8;
      FORMAT_SIZES[GL_RGB16F_EXT] = 6;
      function getRenderbufferSize(format, width, height) {
        return FORMAT_SIZES[format] * width * height;
      }
      var wrapRenderbuffers = function(gl, extensions, limits, stats2, config) {
        var formatTypes = {
          "rgba4": GL_RGBA4$1,
          "rgb565": GL_RGB565$1,
          "rgb5 a1": GL_RGB5_A1$1,
          "depth": GL_DEPTH_COMPONENT16,
          "stencil": GL_STENCIL_INDEX8,
          "depth stencil": GL_DEPTH_STENCIL$1
        };
        if (extensions.ext_srgb) {
          formatTypes["srgba"] = GL_SRGB8_ALPHA8_EXT;
        }
        if (extensions.ext_color_buffer_half_float) {
          formatTypes["rgba16f"] = GL_RGBA16F_EXT;
          formatTypes["rgb16f"] = GL_RGB16F_EXT;
        }
        if (extensions.webgl_color_buffer_float) {
          formatTypes["rgba32f"] = GL_RGBA32F_EXT;
        }
        var formatTypesInvert = [];
        Object.keys(formatTypes).forEach(function(key) {
          var val = formatTypes[key];
          formatTypesInvert[val] = key;
        });
        var renderbufferCount = 0;
        var renderbufferSet = {};
        function REGLRenderbuffer(renderbuffer) {
          this.id = renderbufferCount++;
          this.refCount = 1;
          this.renderbuffer = renderbuffer;
          this.format = GL_RGBA4$1;
          this.width = 0;
          this.height = 0;
          if (config.profile) {
            this.stats = { size: 0 };
          }
        }
        REGLRenderbuffer.prototype.decRef = function() {
          if (--this.refCount <= 0) {
            destroy(this);
          }
        };
        function destroy(rb) {
          var handle = rb.renderbuffer;
          gl.bindRenderbuffer(GL_RENDERBUFFER, null);
          gl.deleteRenderbuffer(handle);
          rb.renderbuffer = null;
          rb.refCount = 0;
          delete renderbufferSet[rb.id];
          stats2.renderbufferCount--;
        }
        function createRenderbuffer(a, b) {
          var renderbuffer = new REGLRenderbuffer(gl.createRenderbuffer());
          renderbufferSet[renderbuffer.id] = renderbuffer;
          stats2.renderbufferCount++;
          function reglRenderbuffer(a2, b2) {
            var w = 0;
            var h = 0;
            var format = GL_RGBA4$1;
            if (typeof a2 === "object" && a2) {
              var options = a2;
              if ("shape" in options) {
                var shape = options.shape;
                w = shape[0] | 0;
                h = shape[1] | 0;
              } else {
                if ("radius" in options) {
                  w = h = options.radius | 0;
                }
                if ("width" in options) {
                  w = options.width | 0;
                }
                if ("height" in options) {
                  h = options.height | 0;
                }
              }
              if ("format" in options) {
                format = formatTypes[options.format];
              }
            } else if (typeof a2 === "number") {
              w = a2 | 0;
              if (typeof b2 === "number") {
                h = b2 | 0;
              } else {
                h = w;
              }
            } else if (!a2) {
              w = h = 1;
            } else {
            }
            if (w === renderbuffer.width && h === renderbuffer.height && format === renderbuffer.format) {
              return;
            }
            reglRenderbuffer.width = renderbuffer.width = w;
            reglRenderbuffer.height = renderbuffer.height = h;
            renderbuffer.format = format;
            gl.bindRenderbuffer(GL_RENDERBUFFER, renderbuffer.renderbuffer);
            gl.renderbufferStorage(GL_RENDERBUFFER, format, w, h);
            if (config.profile) {
              renderbuffer.stats.size = getRenderbufferSize(renderbuffer.format, renderbuffer.width, renderbuffer.height);
            }
            reglRenderbuffer.format = formatTypesInvert[renderbuffer.format];
            return reglRenderbuffer;
          }
          function resize(w_, h_) {
            var w = w_ | 0;
            var h = h_ | 0 || w;
            if (w === renderbuffer.width && h === renderbuffer.height) {
              return reglRenderbuffer;
            }
            reglRenderbuffer.width = renderbuffer.width = w;
            reglRenderbuffer.height = renderbuffer.height = h;
            gl.bindRenderbuffer(GL_RENDERBUFFER, renderbuffer.renderbuffer);
            gl.renderbufferStorage(GL_RENDERBUFFER, renderbuffer.format, w, h);
            if (config.profile) {
              renderbuffer.stats.size = getRenderbufferSize(
                renderbuffer.format,
                renderbuffer.width,
                renderbuffer.height
              );
            }
            return reglRenderbuffer;
          }
          reglRenderbuffer(a, b);
          reglRenderbuffer.resize = resize;
          reglRenderbuffer._reglType = "renderbuffer";
          reglRenderbuffer._renderbuffer = renderbuffer;
          if (config.profile) {
            reglRenderbuffer.stats = renderbuffer.stats;
          }
          reglRenderbuffer.destroy = function() {
            renderbuffer.decRef();
          };
          return reglRenderbuffer;
        }
        if (config.profile) {
          stats2.getTotalRenderbufferSize = function() {
            var total = 0;
            Object.keys(renderbufferSet).forEach(function(key) {
              total += renderbufferSet[key].stats.size;
            });
            return total;
          };
        }
        function restoreRenderbuffers() {
          values(renderbufferSet).forEach(function(rb) {
            rb.renderbuffer = gl.createRenderbuffer();
            gl.bindRenderbuffer(GL_RENDERBUFFER, rb.renderbuffer);
            gl.renderbufferStorage(GL_RENDERBUFFER, rb.format, rb.width, rb.height);
          });
          gl.bindRenderbuffer(GL_RENDERBUFFER, null);
        }
        return {
          create: createRenderbuffer,
          clear: function() {
            values(renderbufferSet).forEach(destroy);
          },
          restore: restoreRenderbuffers
        };
      };
      var GL_FRAMEBUFFER$1 = 36160;
      var GL_RENDERBUFFER$1 = 36161;
      var GL_TEXTURE_2D$2 = 3553;
      var GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 = 34069;
      var GL_COLOR_ATTACHMENT0$1 = 36064;
      var GL_DEPTH_ATTACHMENT = 36096;
      var GL_STENCIL_ATTACHMENT = 36128;
      var GL_DEPTH_STENCIL_ATTACHMENT = 33306;
      var GL_FRAMEBUFFER_COMPLETE$1 = 36053;
      var GL_HALF_FLOAT_OES$1 = 36193;
      var GL_UNSIGNED_BYTE$5 = 5121;
      var GL_FLOAT$4 = 5126;
      var GL_RGB$1 = 6407;
      var GL_RGBA$2 = 6408;
      var textureFormatChannels = [];
      textureFormatChannels[GL_RGBA$2] = 4;
      textureFormatChannels[GL_RGB$1] = 3;
      var textureTypeSizes = [];
      textureTypeSizes[GL_UNSIGNED_BYTE$5] = 1;
      textureTypeSizes[GL_FLOAT$4] = 4;
      textureTypeSizes[GL_HALF_FLOAT_OES$1] = 2;
      function wrapFBOState(gl, extensions, limits, textureState, renderbufferState, stats2) {
        var framebufferState = {
          cur: null,
          next: null,
          dirty: false,
          setFBO: null
        };
        var colorTextureFormats = ["rgba"];
        var colorRenderbufferFormats = ["rgba4", "rgb565", "rgb5 a1"];
        if (extensions.ext_srgb) {
          colorRenderbufferFormats.push("srgba");
        }
        if (extensions.ext_color_buffer_half_float) {
          colorRenderbufferFormats.push("rgba16f", "rgb16f");
        }
        if (extensions.webgl_color_buffer_float) {
          colorRenderbufferFormats.push("rgba32f");
        }
        var colorTypes = ["uint8"];
        if (extensions.oes_texture_half_float) {
          colorTypes.push("half float", "float16");
        }
        if (extensions.oes_texture_float) {
          colorTypes.push("float", "float32");
        }
        function FramebufferAttachment(target, texture, renderbuffer) {
          this.target = target;
          this.texture = texture;
          this.renderbuffer = renderbuffer;
          var w = 0;
          var h = 0;
          if (texture) {
            w = texture.width;
            h = texture.height;
          } else if (renderbuffer) {
            w = renderbuffer.width;
            h = renderbuffer.height;
          }
          this.width = w;
          this.height = h;
        }
        function decRef(attachment) {
          if (attachment) {
            if (attachment.texture) {
              attachment.texture._texture.decRef();
            }
            if (attachment.renderbuffer) {
              attachment.renderbuffer._renderbuffer.decRef();
            }
          }
        }
        function incRefAndCheckShape(attachment, width, height) {
          if (!attachment) {
            return;
          }
          if (attachment.texture) {
            var texture = attachment.texture._texture;
            var tw = Math.max(1, texture.width);
            var th = Math.max(1, texture.height);
            texture.refCount += 1;
          } else {
            var renderbuffer = attachment.renderbuffer._renderbuffer;
            renderbuffer.refCount += 1;
          }
        }
        function attach(location, attachment) {
          if (attachment) {
            if (attachment.texture) {
              gl.framebufferTexture2D(
                GL_FRAMEBUFFER$1,
                location,
                attachment.target,
                attachment.texture._texture.texture,
                0
              );
            } else {
              gl.framebufferRenderbuffer(
                GL_FRAMEBUFFER$1,
                location,
                GL_RENDERBUFFER$1,
                attachment.renderbuffer._renderbuffer.renderbuffer
              );
            }
          }
        }
        function parseAttachment(attachment) {
          var target = GL_TEXTURE_2D$2;
          var texture = null;
          var renderbuffer = null;
          var data = attachment;
          if (typeof attachment === "object") {
            data = attachment.data;
            if ("target" in attachment) {
              target = attachment.target | 0;
            }
          }
          var type = data._reglType;
          if (type === "texture2d") {
            texture = data;
          } else if (type === "textureCube") {
            texture = data;
          } else if (type === "renderbuffer") {
            renderbuffer = data;
            target = GL_RENDERBUFFER$1;
          } else {
          }
          return new FramebufferAttachment(target, texture, renderbuffer);
        }
        function allocAttachment(width, height, isTexture, format, type) {
          if (isTexture) {
            var texture = textureState.create2D({
              width,
              height,
              format,
              type
            });
            texture._texture.refCount = 0;
            return new FramebufferAttachment(GL_TEXTURE_2D$2, texture, null);
          } else {
            var rb = renderbufferState.create({
              width,
              height,
              format
            });
            rb._renderbuffer.refCount = 0;
            return new FramebufferAttachment(GL_RENDERBUFFER$1, null, rb);
          }
        }
        function unwrapAttachment(attachment) {
          return attachment && (attachment.texture || attachment.renderbuffer);
        }
        function resizeAttachment(attachment, w, h) {
          if (attachment) {
            if (attachment.texture) {
              attachment.texture.resize(w, h);
            } else if (attachment.renderbuffer) {
              attachment.renderbuffer.resize(w, h);
            }
            attachment.width = w;
            attachment.height = h;
          }
        }
        var framebufferCount = 0;
        var framebufferSet = {};
        function REGLFramebuffer() {
          this.id = framebufferCount++;
          framebufferSet[this.id] = this;
          this.framebuffer = gl.createFramebuffer();
          this.width = 0;
          this.height = 0;
          this.colorAttachments = [];
          this.depthAttachment = null;
          this.stencilAttachment = null;
          this.depthStencilAttachment = null;
        }
        function decFBORefs(framebuffer) {
          framebuffer.colorAttachments.forEach(decRef);
          decRef(framebuffer.depthAttachment);
          decRef(framebuffer.stencilAttachment);
          decRef(framebuffer.depthStencilAttachment);
        }
        function destroy(framebuffer) {
          var handle = framebuffer.framebuffer;
          gl.deleteFramebuffer(handle);
          framebuffer.framebuffer = null;
          stats2.framebufferCount--;
          delete framebufferSet[framebuffer.id];
        }
        function updateFramebuffer(framebuffer) {
          var i;
          gl.bindFramebuffer(GL_FRAMEBUFFER$1, framebuffer.framebuffer);
          var colorAttachments = framebuffer.colorAttachments;
          for (i = 0; i < colorAttachments.length; ++i) {
            attach(GL_COLOR_ATTACHMENT0$1 + i, colorAttachments[i]);
          }
          for (i = colorAttachments.length; i < limits.maxColorAttachments; ++i) {
            gl.framebufferTexture2D(
              GL_FRAMEBUFFER$1,
              GL_COLOR_ATTACHMENT0$1 + i,
              GL_TEXTURE_2D$2,
              null,
              0
            );
          }
          gl.framebufferTexture2D(
            GL_FRAMEBUFFER$1,
            GL_DEPTH_STENCIL_ATTACHMENT,
            GL_TEXTURE_2D$2,
            null,
            0
          );
          gl.framebufferTexture2D(
            GL_FRAMEBUFFER$1,
            GL_DEPTH_ATTACHMENT,
            GL_TEXTURE_2D$2,
            null,
            0
          );
          gl.framebufferTexture2D(
            GL_FRAMEBUFFER$1,
            GL_STENCIL_ATTACHMENT,
            GL_TEXTURE_2D$2,
            null,
            0
          );
          attach(GL_DEPTH_ATTACHMENT, framebuffer.depthAttachment);
          attach(GL_STENCIL_ATTACHMENT, framebuffer.stencilAttachment);
          attach(GL_DEPTH_STENCIL_ATTACHMENT, framebuffer.depthStencilAttachment);
          var status = gl.checkFramebufferStatus(GL_FRAMEBUFFER$1);
          if (!gl.isContextLost() && status !== GL_FRAMEBUFFER_COMPLETE$1) {
          }
          gl.bindFramebuffer(GL_FRAMEBUFFER$1, framebufferState.next ? framebufferState.next.framebuffer : null);
          framebufferState.cur = framebufferState.next;
          gl.getError();
        }
        function createFBO(a0, a1) {
          var framebuffer = new REGLFramebuffer();
          stats2.framebufferCount++;
          function reglFramebuffer(a, b) {
            var i;
            var width = 0;
            var height = 0;
            var needsDepth = true;
            var needsStencil = true;
            var colorBuffer = null;
            var colorTexture = true;
            var colorFormat = "rgba";
            var colorType = "uint8";
            var colorCount = 1;
            var depthBuffer = null;
            var stencilBuffer = null;
            var depthStencilBuffer = null;
            var depthStencilTexture = false;
            if (typeof a === "number") {
              width = a | 0;
              height = b | 0 || width;
            } else if (!a) {
              width = height = 1;
            } else {
              var options = a;
              if ("shape" in options) {
                var shape = options.shape;
                width = shape[0];
                height = shape[1];
              } else {
                if ("radius" in options) {
                  width = height = options.radius;
                }
                if ("width" in options) {
                  width = options.width;
                }
                if ("height" in options) {
                  height = options.height;
                }
              }
              if ("color" in options || "colors" in options) {
                colorBuffer = options.color || options.colors;
                if (Array.isArray(colorBuffer)) {
                }
              }
              if (!colorBuffer) {
                if ("colorCount" in options) {
                  colorCount = options.colorCount | 0;
                }
                if ("colorTexture" in options) {
                  colorTexture = !!options.colorTexture;
                  colorFormat = "rgba4";
                }
                if ("colorType" in options) {
                  colorType = options.colorType;
                  if (!colorTexture) {
                    if (colorType === "half float" || colorType === "float16") {
                      colorFormat = "rgba16f";
                    } else if (colorType === "float" || colorType === "float32") {
                      colorFormat = "rgba32f";
                    }
                  } else {
                  }
                }
                if ("colorFormat" in options) {
                  colorFormat = options.colorFormat;
                  if (colorTextureFormats.indexOf(colorFormat) >= 0) {
                    colorTexture = true;
                  } else if (colorRenderbufferFormats.indexOf(colorFormat) >= 0) {
                    colorTexture = false;
                  } else {
                  }
                }
              }
              if ("depthTexture" in options || "depthStencilTexture" in options) {
                depthStencilTexture = !!(options.depthTexture || options.depthStencilTexture);
              }
              if ("depth" in options) {
                if (typeof options.depth === "boolean") {
                  needsDepth = options.depth;
                } else {
                  depthBuffer = options.depth;
                  needsStencil = false;
                }
              }
              if ("stencil" in options) {
                if (typeof options.stencil === "boolean") {
                  needsStencil = options.stencil;
                } else {
                  stencilBuffer = options.stencil;
                  needsDepth = false;
                }
              }
              if ("depthStencil" in options) {
                if (typeof options.depthStencil === "boolean") {
                  needsDepth = needsStencil = options.depthStencil;
                } else {
                  depthStencilBuffer = options.depthStencil;
                  needsDepth = false;
                  needsStencil = false;
                }
              }
            }
            var colorAttachments = null;
            var depthAttachment = null;
            var stencilAttachment = null;
            var depthStencilAttachment = null;
            if (Array.isArray(colorBuffer)) {
              colorAttachments = colorBuffer.map(parseAttachment);
            } else if (colorBuffer) {
              colorAttachments = [parseAttachment(colorBuffer)];
            } else {
              colorAttachments = new Array(colorCount);
              for (i = 0; i < colorCount; ++i) {
                colorAttachments[i] = allocAttachment(
                  width,
                  height,
                  colorTexture,
                  colorFormat,
                  colorType
                );
              }
            }
            width = width || colorAttachments[0].width;
            height = height || colorAttachments[0].height;
            if (depthBuffer) {
              depthAttachment = parseAttachment(depthBuffer);
            } else if (needsDepth && !needsStencil) {
              depthAttachment = allocAttachment(
                width,
                height,
                depthStencilTexture,
                "depth",
                "uint32"
              );
            }
            if (stencilBuffer) {
              stencilAttachment = parseAttachment(stencilBuffer);
            } else if (needsStencil && !needsDepth) {
              stencilAttachment = allocAttachment(
                width,
                height,
                false,
                "stencil",
                "uint8"
              );
            }
            if (depthStencilBuffer) {
              depthStencilAttachment = parseAttachment(depthStencilBuffer);
            } else if (!depthBuffer && !stencilBuffer && needsStencil && needsDepth) {
              depthStencilAttachment = allocAttachment(
                width,
                height,
                depthStencilTexture,
                "depth stencil",
                "depth stencil"
              );
            }
            var commonColorAttachmentSize = null;
            for (i = 0; i < colorAttachments.length; ++i) {
              incRefAndCheckShape(colorAttachments[i], width, height);
              if (colorAttachments[i] && colorAttachments[i].texture) {
                var colorAttachmentSize = textureFormatChannels[colorAttachments[i].texture._texture.format] * textureTypeSizes[colorAttachments[i].texture._texture.type];
                if (commonColorAttachmentSize === null) {
                  commonColorAttachmentSize = colorAttachmentSize;
                } else {
                }
              }
            }
            incRefAndCheckShape(depthAttachment, width, height);
            incRefAndCheckShape(stencilAttachment, width, height);
            incRefAndCheckShape(depthStencilAttachment, width, height);
            decFBORefs(framebuffer);
            framebuffer.width = width;
            framebuffer.height = height;
            framebuffer.colorAttachments = colorAttachments;
            framebuffer.depthAttachment = depthAttachment;
            framebuffer.stencilAttachment = stencilAttachment;
            framebuffer.depthStencilAttachment = depthStencilAttachment;
            reglFramebuffer.color = colorAttachments.map(unwrapAttachment);
            reglFramebuffer.depth = unwrapAttachment(depthAttachment);
            reglFramebuffer.stencil = unwrapAttachment(stencilAttachment);
            reglFramebuffer.depthStencil = unwrapAttachment(depthStencilAttachment);
            reglFramebuffer.width = framebuffer.width;
            reglFramebuffer.height = framebuffer.height;
            updateFramebuffer(framebuffer);
            return reglFramebuffer;
          }
          function resize(w_, h_) {
            var w = Math.max(w_ | 0, 1);
            var h = Math.max(h_ | 0 || w, 1);
            if (w === framebuffer.width && h === framebuffer.height) {
              return reglFramebuffer;
            }
            var colorAttachments = framebuffer.colorAttachments;
            for (var i = 0; i < colorAttachments.length; ++i) {
              resizeAttachment(colorAttachments[i], w, h);
            }
            resizeAttachment(framebuffer.depthAttachment, w, h);
            resizeAttachment(framebuffer.stencilAttachment, w, h);
            resizeAttachment(framebuffer.depthStencilAttachment, w, h);
            framebuffer.width = reglFramebuffer.width = w;
            framebuffer.height = reglFramebuffer.height = h;
            updateFramebuffer(framebuffer);
            return reglFramebuffer;
          }
          reglFramebuffer(a0, a1);
          return extend(reglFramebuffer, {
            resize,
            _reglType: "framebuffer",
            _framebuffer: framebuffer,
            destroy: function() {
              destroy(framebuffer);
              decFBORefs(framebuffer);
            },
            use: function(block) {
              framebufferState.setFBO({
                framebuffer: reglFramebuffer
              }, block);
            }
          });
        }
        function createCubeFBO(options) {
          var faces = Array(6);
          function reglFramebufferCube(a) {
            var i;
            var params = {
              color: null
            };
            var radius = 0;
            var colorBuffer = null;
            var colorFormat = "rgba";
            var colorType = "uint8";
            var colorCount = 1;
            if (typeof a === "number") {
              radius = a | 0;
            } else if (!a) {
              radius = 1;
            } else {
              var options2 = a;
              if ("shape" in options2) {
                var shape = options2.shape;
                radius = shape[0];
              } else {
                if ("radius" in options2) {
                  radius = options2.radius | 0;
                }
                if ("width" in options2) {
                  radius = options2.width | 0;
                  if ("height" in options2) {
                  }
                } else if ("height" in options2) {
                  radius = options2.height | 0;
                }
              }
              if ("color" in options2 || "colors" in options2) {
                colorBuffer = options2.color || options2.colors;
                if (Array.isArray(colorBuffer)) {
                }
              }
              if (!colorBuffer) {
                if ("colorCount" in options2) {
                  colorCount = options2.colorCount | 0;
                }
                if ("colorType" in options2) {
                  colorType = options2.colorType;
                }
                if ("colorFormat" in options2) {
                  colorFormat = options2.colorFormat;
                }
              }
              if ("depth" in options2) {
                params.depth = options2.depth;
              }
              if ("stencil" in options2) {
                params.stencil = options2.stencil;
              }
              if ("depthStencil" in options2) {
                params.depthStencil = options2.depthStencil;
              }
            }
            var colorCubes;
            if (colorBuffer) {
              if (Array.isArray(colorBuffer)) {
                colorCubes = [];
                for (i = 0; i < colorBuffer.length; ++i) {
                  colorCubes[i] = colorBuffer[i];
                }
              } else {
                colorCubes = [colorBuffer];
              }
            } else {
              colorCubes = Array(colorCount);
              var cubeMapParams = {
                radius,
                format: colorFormat,
                type: colorType
              };
              for (i = 0; i < colorCount; ++i) {
                colorCubes[i] = textureState.createCube(cubeMapParams);
              }
            }
            params.color = Array(colorCubes.length);
            for (i = 0; i < colorCubes.length; ++i) {
              var cube = colorCubes[i];
              radius = radius || cube.width;
              params.color[i] = {
                target: GL_TEXTURE_CUBE_MAP_POSITIVE_X$2,
                data: colorCubes[i]
              };
            }
            for (i = 0; i < 6; ++i) {
              for (var j = 0; j < colorCubes.length; ++j) {
                params.color[j].target = GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 + i;
              }
              if (i > 0) {
                params.depth = faces[0].depth;
                params.stencil = faces[0].stencil;
                params.depthStencil = faces[0].depthStencil;
              }
              if (faces[i]) {
                faces[i](params);
              } else {
                faces[i] = createFBO(params);
              }
            }
            return extend(reglFramebufferCube, {
              width: radius,
              height: radius,
              color: colorCubes
            });
          }
          function resize(radius_) {
            var i;
            var radius = radius_ | 0;
            if (radius === reglFramebufferCube.width) {
              return reglFramebufferCube;
            }
            var colors = reglFramebufferCube.color;
            for (i = 0; i < colors.length; ++i) {
              colors[i].resize(radius);
            }
            for (i = 0; i < 6; ++i) {
              faces[i].resize(radius);
            }
            reglFramebufferCube.width = reglFramebufferCube.height = radius;
            return reglFramebufferCube;
          }
          reglFramebufferCube(options);
          return extend(reglFramebufferCube, {
            faces,
            resize,
            _reglType: "framebufferCube",
            destroy: function() {
              faces.forEach(function(f) {
                f.destroy();
              });
            }
          });
        }
        function restoreFramebuffers() {
          framebufferState.cur = null;
          framebufferState.next = null;
          framebufferState.dirty = true;
          values(framebufferSet).forEach(function(fb) {
            fb.framebuffer = gl.createFramebuffer();
            updateFramebuffer(fb);
          });
        }
        return extend(framebufferState, {
          getFramebuffer: function(object) {
            if (typeof object === "function" && object._reglType === "framebuffer") {
              var fbo = object._framebuffer;
              if (fbo instanceof REGLFramebuffer) {
                return fbo;
              }
            }
            return null;
          },
          create: createFBO,
          createCube: createCubeFBO,
          clear: function() {
            values(framebufferSet).forEach(destroy);
          },
          restore: restoreFramebuffers
        });
      }
      var GL_FLOAT$5 = 5126;
      var GL_ARRAY_BUFFER$1 = 34962;
      var GL_ELEMENT_ARRAY_BUFFER$1 = 34963;
      function AttributeRecord() {
        this.state = 0;
        this.x = 0;
        this.y = 0;
        this.z = 0;
        this.w = 0;
        this.buffer = null;
        this.size = 0;
        this.normalized = false;
        this.type = GL_FLOAT$5;
        this.offset = 0;
        this.stride = 0;
        this.divisor = 0;
      }
      function wrapAttributeState(gl, extensions, limits, stats2, bufferState, elementState, drawState) {
        var NUM_ATTRIBUTES = limits.maxAttributes;
        var attributeBindings = new Array(NUM_ATTRIBUTES);
        for (var i = 0; i < NUM_ATTRIBUTES; ++i) {
          attributeBindings[i] = new AttributeRecord();
        }
        var vaoCount = 0;
        var vaoSet = {};
        var state = {
          Record: AttributeRecord,
          scope: {},
          state: attributeBindings,
          currentVAO: null,
          targetVAO: null,
          restore: extVAO() ? restoreVAO : function() {
          },
          createVAO,
          getVAO,
          destroyBuffer: destroyBuffer2,
          setVAO: extVAO() ? setVAOEXT : setVAOEmulated,
          clear: extVAO() ? destroyVAOEXT : function() {
          }
        };
        function destroyBuffer2(buffer) {
          for (var i2 = 0; i2 < attributeBindings.length; ++i2) {
            var record = attributeBindings[i2];
            if (record.buffer === buffer) {
              gl.disableVertexAttribArray(i2);
              record.buffer = null;
            }
          }
        }
        function extVAO() {
          return extensions.oes_vertex_array_object;
        }
        function extInstanced() {
          return extensions.angle_instanced_arrays;
        }
        function getVAO(vao) {
          if (typeof vao === "function" && vao._vao) {
            return vao._vao;
          }
          return null;
        }
        function setVAOEXT(vao) {
          if (vao === state.currentVAO) {
            return;
          }
          var ext = extVAO();
          if (vao) {
            ext.bindVertexArrayOES(vao.vao);
          } else {
            ext.bindVertexArrayOES(null);
          }
          state.currentVAO = vao;
        }
        function setVAOEmulated(vao) {
          if (vao === state.currentVAO) {
            return;
          }
          if (vao) {
            vao.bindAttrs();
          } else {
            var exti = extInstanced();
            for (var i2 = 0; i2 < attributeBindings.length; ++i2) {
              var binding = attributeBindings[i2];
              if (binding.buffer) {
                gl.enableVertexAttribArray(i2);
                binding.buffer.bind();
                gl.vertexAttribPointer(i2, binding.size, binding.type, binding.normalized, binding.stride, binding.offfset);
                if (exti && binding.divisor) {
                  exti.vertexAttribDivisorANGLE(i2, binding.divisor);
                }
              } else {
                gl.disableVertexAttribArray(i2);
                gl.vertexAttrib4f(i2, binding.x, binding.y, binding.z, binding.w);
              }
            }
            if (drawState.elements) {
              gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER$1, drawState.elements.buffer.buffer);
            } else {
              gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER$1, null);
            }
          }
          state.currentVAO = vao;
        }
        function destroyVAOEXT() {
          values(vaoSet).forEach(function(vao) {
            vao.destroy();
          });
        }
        function REGLVAO() {
          this.id = ++vaoCount;
          this.attributes = [];
          this.elements = null;
          this.ownsElements = false;
          this.count = 0;
          this.offset = 0;
          this.instances = -1;
          this.primitive = 4;
          var extension = extVAO();
          if (extension) {
            this.vao = extension.createVertexArrayOES();
          } else {
            this.vao = null;
          }
          vaoSet[this.id] = this;
          this.buffers = [];
        }
        REGLVAO.prototype.bindAttrs = function() {
          var exti = extInstanced();
          var attributes = this.attributes;
          for (var i2 = 0; i2 < attributes.length; ++i2) {
            var attr = attributes[i2];
            if (attr.buffer) {
              gl.enableVertexAttribArray(i2);
              gl.bindBuffer(GL_ARRAY_BUFFER$1, attr.buffer.buffer);
              gl.vertexAttribPointer(i2, attr.size, attr.type, attr.normalized, attr.stride, attr.offset);
              if (exti && attr.divisor) {
                exti.vertexAttribDivisorANGLE(i2, attr.divisor);
              }
            } else {
              gl.disableVertexAttribArray(i2);
              gl.vertexAttrib4f(i2, attr.x, attr.y, attr.z, attr.w);
            }
          }
          for (var j = attributes.length; j < NUM_ATTRIBUTES; ++j) {
            gl.disableVertexAttribArray(j);
          }
          var elements = elementState.getElements(this.elements);
          if (elements) {
            gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER$1, elements.buffer.buffer);
          } else {
            gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER$1, null);
          }
        };
        REGLVAO.prototype.refresh = function() {
          var ext = extVAO();
          if (ext) {
            ext.bindVertexArrayOES(this.vao);
            this.bindAttrs();
            state.currentVAO = null;
            ext.bindVertexArrayOES(null);
          }
        };
        REGLVAO.prototype.destroy = function() {
          if (this.vao) {
            var extension = extVAO();
            if (this === state.currentVAO) {
              state.currentVAO = null;
              extension.bindVertexArrayOES(null);
            }
            extension.deleteVertexArrayOES(this.vao);
            this.vao = null;
          }
          if (this.ownsElements) {
            this.elements.destroy();
            this.elements = null;
            this.ownsElements = false;
          }
          if (vaoSet[this.id]) {
            delete vaoSet[this.id];
            stats2.vaoCount -= 1;
          }
        };
        function restoreVAO() {
          var ext = extVAO();
          if (ext) {
            values(vaoSet).forEach(function(vao) {
              vao.refresh();
            });
          }
        }
        function createVAO(_attr) {
          var vao = new REGLVAO();
          stats2.vaoCount += 1;
          function updateVAO(options) {
            var attributes;
            if (Array.isArray(options)) {
              attributes = options;
              if (vao.elements && vao.ownsElements) {
                vao.elements.destroy();
              }
              vao.elements = null;
              vao.ownsElements = false;
              vao.offset = 0;
              vao.count = 0;
              vao.instances = -1;
              vao.primitive = 4;
            } else {
              if (options.elements) {
                var elements = options.elements;
                if (vao.ownsElements) {
                  if (typeof elements === "function" && elements._reglType === "elements") {
                    vao.elements.destroy();
                    vao.ownsElements = false;
                  } else {
                    vao.elements(elements);
                    vao.ownsElements = false;
                  }
                } else if (elementState.getElements(options.elements)) {
                  vao.elements = options.elements;
                  vao.ownsElements = false;
                } else {
                  vao.elements = elementState.create(options.elements);
                  vao.ownsElements = true;
                }
              } else {
                vao.elements = null;
                vao.ownsElements = false;
              }
              attributes = options.attributes;
              vao.offset = 0;
              vao.count = -1;
              vao.instances = -1;
              vao.primitive = 4;
              if (vao.elements) {
                vao.count = vao.elements._elements.vertCount;
                vao.primitive = vao.elements._elements.primType;
              }
              if ("offset" in options) {
                vao.offset = options.offset | 0;
              }
              if ("count" in options) {
                vao.count = options.count | 0;
              }
              if ("instances" in options) {
                vao.instances = options.instances | 0;
              }
              if ("primitive" in options) {
                vao.primitive = primTypes[options.primitive];
              }
            }
            var bufUpdated = {};
            var nattributes = vao.attributes;
            nattributes.length = attributes.length;
            for (var i2 = 0; i2 < attributes.length; ++i2) {
              var spec = attributes[i2];
              var rec = nattributes[i2] = new AttributeRecord();
              var data = spec.data || spec;
              if (Array.isArray(data) || isTypedArray(data) || isNDArrayLike(data)) {
                var buf;
                if (vao.buffers[i2]) {
                  buf = vao.buffers[i2];
                  if (isTypedArray(data) && buf._buffer.byteLength >= data.byteLength) {
                    buf.subdata(data);
                  } else {
                    buf.destroy();
                    vao.buffers[i2] = null;
                  }
                }
                if (!vao.buffers[i2]) {
                  buf = vao.buffers[i2] = bufferState.create(spec, GL_ARRAY_BUFFER$1, false, true);
                }
                rec.buffer = bufferState.getBuffer(buf);
                rec.size = rec.buffer.dimension | 0;
                rec.normalized = false;
                rec.type = rec.buffer.dtype;
                rec.offset = 0;
                rec.stride = 0;
                rec.divisor = 0;
                rec.state = 1;
                bufUpdated[i2] = 1;
              } else if (bufferState.getBuffer(spec)) {
                rec.buffer = bufferState.getBuffer(spec);
                rec.size = rec.buffer.dimension | 0;
                rec.normalized = false;
                rec.type = rec.buffer.dtype;
                rec.offset = 0;
                rec.stride = 0;
                rec.divisor = 0;
                rec.state = 1;
              } else if (bufferState.getBuffer(spec.buffer)) {
                rec.buffer = bufferState.getBuffer(spec.buffer);
                rec.size = (+spec.size || rec.buffer.dimension) | 0;
                rec.normalized = !!spec.normalized || false;
                if ("type" in spec) {
                  rec.type = glTypes[spec.type];
                } else {
                  rec.type = rec.buffer.dtype;
                }
                rec.offset = (spec.offset || 0) | 0;
                rec.stride = (spec.stride || 0) | 0;
                rec.divisor = (spec.divisor || 0) | 0;
                rec.state = 1;
              } else if ("x" in spec) {
                rec.x = +spec.x || 0;
                rec.y = +spec.y || 0;
                rec.z = +spec.z || 0;
                rec.w = +spec.w || 0;
                rec.state = 2;
              } else {
              }
            }
            for (var j = 0; j < vao.buffers.length; ++j) {
              if (!bufUpdated[j] && vao.buffers[j]) {
                vao.buffers[j].destroy();
                vao.buffers[j] = null;
              }
            }
            vao.refresh();
            return updateVAO;
          }
          updateVAO.destroy = function() {
            for (var j = 0; j < vao.buffers.length; ++j) {
              if (vao.buffers[j]) {
                vao.buffers[j].destroy();
              }
            }
            vao.buffers.length = 0;
            if (vao.ownsElements) {
              vao.elements.destroy();
              vao.elements = null;
              vao.ownsElements = false;
            }
            vao.destroy();
          };
          updateVAO._vao = vao;
          updateVAO._reglType = "vao";
          return updateVAO(_attr);
        }
        return state;
      }
      var GL_FRAGMENT_SHADER = 35632;
      var GL_VERTEX_SHADER = 35633;
      var GL_ACTIVE_UNIFORMS = 35718;
      var GL_ACTIVE_ATTRIBUTES = 35721;
      function wrapShaderState(gl, stringStore, stats2, config) {
        var fragShaders = {};
        var vertShaders = {};
        function ActiveInfo(name, id, location, info) {
          this.name = name;
          this.id = id;
          this.location = location;
          this.info = info;
        }
        function insertActiveInfo(list, info) {
          for (var i = 0; i < list.length; ++i) {
            if (list[i].id === info.id) {
              list[i].location = info.location;
              return;
            }
          }
          list.push(info);
        }
        function getShader(type, id, command) {
          var cache = type === GL_FRAGMENT_SHADER ? fragShaders : vertShaders;
          var shader = cache[id];
          if (!shader) {
            var source = stringStore.str(id);
            shader = gl.createShader(type);
            gl.shaderSource(shader, source);
            gl.compileShader(shader);
            cache[id] = shader;
          }
          return shader;
        }
        var programCache = {};
        var programList = [];
        var PROGRAM_COUNTER = 0;
        function REGLProgram(fragId, vertId) {
          this.id = PROGRAM_COUNTER++;
          this.fragId = fragId;
          this.vertId = vertId;
          this.program = null;
          this.uniforms = [];
          this.attributes = [];
          this.refCount = 1;
          if (config.profile) {
            this.stats = {
              uniformsCount: 0,
              attributesCount: 0
            };
          }
        }
        function linkProgram(desc, command, attributeLocations) {
          var i, info;
          var fragShader = getShader(GL_FRAGMENT_SHADER, desc.fragId);
          var vertShader = getShader(GL_VERTEX_SHADER, desc.vertId);
          var program = desc.program = gl.createProgram();
          gl.attachShader(program, fragShader);
          gl.attachShader(program, vertShader);
          if (attributeLocations) {
            for (i = 0; i < attributeLocations.length; ++i) {
              var binding = attributeLocations[i];
              gl.bindAttribLocation(program, binding[0], binding[1]);
            }
          }
          gl.linkProgram(program);
          var numUniforms = gl.getProgramParameter(program, GL_ACTIVE_UNIFORMS);
          if (config.profile) {
            desc.stats.uniformsCount = numUniforms;
          }
          var uniforms = desc.uniforms;
          for (i = 0; i < numUniforms; ++i) {
            info = gl.getActiveUniform(program, i);
            if (info) {
              if (info.size > 1) {
                for (var j = 0; j < info.size; ++j) {
                  var name = info.name.replace("[0]", "[" + j + "]");
                  insertActiveInfo(uniforms, new ActiveInfo(
                    name,
                    stringStore.id(name),
                    gl.getUniformLocation(program, name),
                    info
                  ));
                }
              } else {
                insertActiveInfo(uniforms, new ActiveInfo(
                  info.name,
                  stringStore.id(info.name),
                  gl.getUniformLocation(program, info.name),
                  info
                ));
              }
            }
          }
          var numAttributes = gl.getProgramParameter(program, GL_ACTIVE_ATTRIBUTES);
          if (config.profile) {
            desc.stats.attributesCount = numAttributes;
          }
          var attributes = desc.attributes;
          for (i = 0; i < numAttributes; ++i) {
            info = gl.getActiveAttrib(program, i);
            if (info) {
              insertActiveInfo(attributes, new ActiveInfo(
                info.name,
                stringStore.id(info.name),
                gl.getAttribLocation(program, info.name),
                info
              ));
            }
          }
        }
        if (config.profile) {
          stats2.getMaxUniformsCount = function() {
            var m = 0;
            programList.forEach(function(desc) {
              if (desc.stats.uniformsCount > m) {
                m = desc.stats.uniformsCount;
              }
            });
            return m;
          };
          stats2.getMaxAttributesCount = function() {
            var m = 0;
            programList.forEach(function(desc) {
              if (desc.stats.attributesCount > m) {
                m = desc.stats.attributesCount;
              }
            });
            return m;
          };
        }
        function restoreShaders() {
          fragShaders = {};
          vertShaders = {};
          for (var i = 0; i < programList.length; ++i) {
            linkProgram(programList[i], null, programList[i].attributes.map(function(info) {
              return [info.location, info.name];
            }));
          }
        }
        return {
          clear: function() {
            var deleteShader = gl.deleteShader.bind(gl);
            values(fragShaders).forEach(deleteShader);
            fragShaders = {};
            values(vertShaders).forEach(deleteShader);
            vertShaders = {};
            programList.forEach(function(desc) {
              gl.deleteProgram(desc.program);
            });
            programList.length = 0;
            programCache = {};
            stats2.shaderCount = 0;
          },
          program: function(vertId, fragId, command, attribLocations) {
            var cache = programCache[fragId];
            if (!cache) {
              cache = programCache[fragId] = {};
            }
            var prevProgram = cache[vertId];
            if (prevProgram) {
              prevProgram.refCount++;
              if (!attribLocations) {
                return prevProgram;
              }
            }
            var program = new REGLProgram(fragId, vertId);
            stats2.shaderCount++;
            linkProgram(program, command, attribLocations);
            if (!prevProgram) {
              cache[vertId] = program;
            }
            programList.push(program);
            return extend(program, {
              destroy: function() {
                program.refCount--;
                if (program.refCount <= 0) {
                  gl.deleteProgram(program.program);
                  var idx = programList.indexOf(program);
                  programList.splice(idx, 1);
                  stats2.shaderCount--;
                }
                if (cache[program.vertId].refCount <= 0) {
                  gl.deleteShader(vertShaders[program.vertId]);
                  delete vertShaders[program.vertId];
                  delete programCache[program.fragId][program.vertId];
                }
                if (!Object.keys(programCache[program.fragId]).length) {
                  gl.deleteShader(fragShaders[program.fragId]);
                  delete fragShaders[program.fragId];
                  delete programCache[program.fragId];
                }
              }
            });
          },
          restore: restoreShaders,
          shader: getShader,
          frag: -1,
          vert: -1
        };
      }
      var GL_RGBA$3 = 6408;
      var GL_UNSIGNED_BYTE$6 = 5121;
      var GL_PACK_ALIGNMENT = 3333;
      var GL_FLOAT$6 = 5126;
      function wrapReadPixels(gl, framebufferState, reglPoll, context, glAttributes, extensions, limits) {
        function readPixelsImpl(input) {
          var type;
          if (framebufferState.next === null) {
            type = GL_UNSIGNED_BYTE$6;
          } else {
            type = framebufferState.next.colorAttachments[0].texture._texture.type;
          }
          var x = 0;
          var y = 0;
          var width = context.framebufferWidth;
          var height = context.framebufferHeight;
          var data = null;
          if (isTypedArray(input)) {
            data = input;
          } else if (input) {
            x = input.x | 0;
            y = input.y | 0;
            width = (input.width || context.framebufferWidth - x) | 0;
            height = (input.height || context.framebufferHeight - y) | 0;
            data = input.data || null;
          }
          if (data) {
            if (type === GL_UNSIGNED_BYTE$6) {
            } else if (type === GL_FLOAT$6) {
            }
          }
          reglPoll();
          var size = width * height * 4;
          if (!data) {
            if (type === GL_UNSIGNED_BYTE$6) {
              data = new Uint8Array(size);
            } else if (type === GL_FLOAT$6) {
              data = data || new Float32Array(size);
            }
          }
          gl.pixelStorei(GL_PACK_ALIGNMENT, 4);
          gl.readPixels(
            x,
            y,
            width,
            height,
            GL_RGBA$3,
            type,
            data
          );
          return data;
        }
        function readPixelsFBO(options) {
          var result;
          framebufferState.setFBO({
            framebuffer: options.framebuffer
          }, function() {
            result = readPixelsImpl(options);
          });
          return result;
        }
        function readPixels2(options) {
          if (!options || !("framebuffer" in options)) {
            return readPixelsImpl(options);
          } else {
            return readPixelsFBO(options);
          }
        }
        return readPixels2;
      }
      var hexcase = 0;
      var b64pad = "";
      function hex_sha256(s) {
        return rstr2hex(rstr_sha256(str2rstr_utf8(s)));
      }
      function rstr_sha256(s) {
        return binb2rstr(binb_sha256(rstr2binb(s), s.length * 8));
      }
      function rstr_hmac_sha256(key, data) {
        var bkey = rstr2binb(key);
        if (bkey.length > 16) bkey = binb_sha256(bkey, key.length * 8);
        var ipad = Array(16), opad = Array(16);
        for (var i = 0; i < 16; i++) {
          ipad[i] = bkey[i] ^ 909522486;
          opad[i] = bkey[i] ^ 1549556828;
        }
        var hash = binb_sha256(ipad.concat(rstr2binb(data)), 512 + data.length * 8);
        return binb2rstr(binb_sha256(opad.concat(hash), 512 + 256));
      }
      function rstr2hex(input) {
        var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
        var output = "";
        var x;
        for (var i = 0; i < input.length; i++) {
          x = input.charCodeAt(i);
          output += hex_tab.charAt(x >>> 4 & 15) + hex_tab.charAt(x & 15);
        }
        return output;
      }
      function rstr2b64(input) {
        var tab = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        var output = "";
        var len2 = input.length;
        for (var i = 0; i < len2; i += 3) {
          var triplet = input.charCodeAt(i) << 16 | (i + 1 < len2 ? input.charCodeAt(i + 1) << 8 : 0) | (i + 2 < len2 ? input.charCodeAt(i + 2) : 0);
          for (var j = 0; j < 4; j++) {
            if (i * 8 + j * 6 > input.length * 8) output += b64pad;
            else output += tab.charAt(triplet >>> 6 * (3 - j) & 63);
          }
        }
        return output;
      }
      function rstr2any(input, encoding) {
        var divisor = encoding.length;
        var remainders = Array();
        var i, q, x, quotient;
        var dividend = Array(Math.ceil(input.length / 2));
        for (i = 0; i < dividend.length; i++) {
          dividend[i] = input.charCodeAt(i * 2) << 8 | input.charCodeAt(i * 2 + 1);
        }
        while (dividend.length > 0) {
          quotient = Array();
          x = 0;
          for (i = 0; i < dividend.length; i++) {
            x = (x << 16) + dividend[i];
            q = Math.floor(x / divisor);
            x -= q * divisor;
            if (quotient.length > 0 || q > 0)
              quotient[quotient.length] = q;
          }
          remainders[remainders.length] = x;
          dividend = quotient;
        }
        var output = "";
        for (i = remainders.length - 1; i >= 0; i--)
          output += encoding.charAt(remainders[i]);
        var full_length = Math.ceil(input.length * 8 / (Math.log(encoding.length) / Math.log(2)));
        for (i = output.length; i < full_length; i++)
          output = encoding[0] + output;
        return output;
      }
      function str2rstr_utf8(input) {
        var output = "";
        var i = -1;
        var x, y;
        while (++i < input.length) {
          x = input.charCodeAt(i);
          y = i + 1 < input.length ? input.charCodeAt(i + 1) : 0;
          if (55296 <= x && x <= 56319 && 56320 <= y && y <= 57343) {
            x = 65536 + ((x & 1023) << 10) + (y & 1023);
            i++;
          }
          if (x <= 127)
            output += String.fromCharCode(x);
          else if (x <= 2047)
            output += String.fromCharCode(
              192 | x >>> 6 & 31,
              128 | x & 63
            );
          else if (x <= 65535)
            output += String.fromCharCode(
              224 | x >>> 12 & 15,
              128 | x >>> 6 & 63,
              128 | x & 63
            );
          else if (x <= 2097151)
            output += String.fromCharCode(
              240 | x >>> 18 & 7,
              128 | x >>> 12 & 63,
              128 | x >>> 6 & 63,
              128 | x & 63
            );
        }
        return output;
      }
      function rstr2binb(input) {
        var output = Array(input.length >> 2);
        for (var i = 0; i < output.length; i++)
          output[i] = 0;
        for (var i = 0; i < input.length * 8; i += 8)
          output[i >> 5] |= (input.charCodeAt(i / 8) & 255) << 24 - i % 32;
        return output;
      }
      function binb2rstr(input) {
        var output = "";
        for (var i = 0; i < input.length * 32; i += 8)
          output += String.fromCharCode(input[i >> 5] >>> 24 - i % 32 & 255);
        return output;
      }
      function sha256_S(X, n) {
        return X >>> n | X << 32 - n;
      }
      function sha256_R(X, n) {
        return X >>> n;
      }
      function sha256_Ch(x, y, z) {
        return x & y ^ ~x & z;
      }
      function sha256_Maj(x, y, z) {
        return x & y ^ x & z ^ y & z;
      }
      function sha256_Sigma0256(x) {
        return sha256_S(x, 2) ^ sha256_S(x, 13) ^ sha256_S(x, 22);
      }
      function sha256_Sigma1256(x) {
        return sha256_S(x, 6) ^ sha256_S(x, 11) ^ sha256_S(x, 25);
      }
      function sha256_Gamma0256(x) {
        return sha256_S(x, 7) ^ sha256_S(x, 18) ^ sha256_R(x, 3);
      }
      function sha256_Gamma1256(x) {
        return sha256_S(x, 17) ^ sha256_S(x, 19) ^ sha256_R(x, 10);
      }
      var sha256_K = new Array(
        1116352408,
        1899447441,
        -1245643825,
        -373957723,
        961987163,
        1508970993,
        -1841331548,
        -1424204075,
        -670586216,
        310598401,
        607225278,
        1426881987,
        1925078388,
        -2132889090,
        -1680079193,
        -1046744716,
        -459576895,
        -272742522,
        264347078,
        604807628,
        770255983,
        1249150122,
        1555081692,
        1996064986,
        -1740746414,
        -1473132947,
        -1341970488,
        -1084653625,
        -958395405,
        -710438585,
        113926993,
        338241895,
        666307205,
        773529912,
        1294757372,
        1396182291,
        1695183700,
        1986661051,
        -2117940946,
        -1838011259,
        -1564481375,
        -1474664885,
        -1035236496,
        -949202525,
        -778901479,
        -694614492,
        -200395387,
        275423344,
        430227734,
        506948616,
        659060556,
        883997877,
        958139571,
        1322822218,
        1537002063,
        1747873779,
        1955562222,
        2024104815,
        -2067236844,
        -1933114872,
        -1866530822,
        -1538233109,
        -1090935817,
        -965641998
      );
      function binb_sha256(m, l) {
        var HASH = new Array(
          1779033703,
          -1150833019,
          1013904242,
          -1521486534,
          1359893119,
          -1694144372,
          528734635,
          1541459225
        );
        var W = new Array(64);
        var a, b, c, d, e, f, g, h;
        var i, j, T1, T2;
        m[l >> 5] |= 128 << 24 - l % 32;
        m[(l + 64 >> 9 << 4) + 15] = l;
        for (i = 0; i < m.length; i += 16) {
          a = HASH[0];
          b = HASH[1];
          c = HASH[2];
          d = HASH[3];
          e = HASH[4];
          f = HASH[5];
          g = HASH[6];
          h = HASH[7];
          for (j = 0; j < 64; j++) {
            if (j < 16) W[j] = m[j + i];
            else W[j] = safe_add(safe_add(
              safe_add(sha256_Gamma1256(W[j - 2]), W[j - 7]),
              sha256_Gamma0256(W[j - 15])
            ), W[j - 16]);
            T1 = safe_add(safe_add(
              safe_add(safe_add(h, sha256_Sigma1256(e)), sha256_Ch(e, f, g)),
              sha256_K[j]
            ), W[j]);
            T2 = safe_add(sha256_Sigma0256(a), sha256_Maj(a, b, c));
            h = g;
            g = f;
            f = e;
            e = safe_add(d, T1);
            d = c;
            c = b;
            b = a;
            a = safe_add(T1, T2);
          }
          HASH[0] = safe_add(a, HASH[0]);
          HASH[1] = safe_add(b, HASH[1]);
          HASH[2] = safe_add(c, HASH[2]);
          HASH[3] = safe_add(d, HASH[3]);
          HASH[4] = safe_add(e, HASH[4]);
          HASH[5] = safe_add(f, HASH[5]);
          HASH[6] = safe_add(g, HASH[6]);
          HASH[7] = safe_add(h, HASH[7]);
        }
        return HASH;
      }
      function safe_add(x, y) {
        var lsw = (x & 65535) + (y & 65535);
        var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
        return msw << 16 | lsw & 65535;
      }
      function slice(x) {
        return Array.prototype.slice.call(x);
      }
      function join(x) {
        return slice(x).join("");
      }
      function createEnvironment(options) {
        var cache = options && options.cache;
        var varCounter = 0;
        var linkedNames = [];
        var linkedValues = [];
        var isStable = [];
        function link(value, options2) {
          var stable = options2 && options2.stable;
          if (!stable) {
            for (var i = 0; i < linkedValues.length; ++i) {
              if (linkedValues[i] === value && !isStable[i]) {
                return linkedNames[i];
              }
            }
          }
          var name = "g" + varCounter++;
          linkedNames.push(name);
          linkedValues.push(value);
          isStable.push(stable);
          return name;
        }
        function block() {
          var code = [];
          function push() {
            code.push.apply(code, slice(arguments));
          }
          var vars = [];
          function def() {
            var name = "v" + varCounter++;
            vars.push(name);
            if (arguments.length > 0) {
              code.push(name, "=");
              code.push.apply(code, slice(arguments));
              code.push(";");
            }
            return name;
          }
          return extend(push, {
            def,
            toString: function() {
              return join([
                vars.length > 0 ? "var " + vars.join(",") + ";" : "",
                join(code)
              ]);
            }
          });
        }
        function scope() {
          var entry = block();
          var exit = block();
          var entryToString = entry.toString;
          var exitToString = exit.toString;
          function save(object, prop) {
            exit(object, prop, "=", entry.def(object, prop), ";");
          }
          return extend(function() {
            entry.apply(entry, slice(arguments));
          }, {
            def: entry.def,
            entry,
            exit,
            save,
            set: function(object, prop, value) {
              save(object, prop);
              entry(object, prop, "=", value, ";");
            },
            toString: function() {
              return entryToString() + exitToString();
            }
          });
        }
        function conditional() {
          var pred = join(arguments);
          var thenBlock = scope();
          var elseBlock = scope();
          var thenToString = thenBlock.toString;
          var elseToString = elseBlock.toString;
          return extend(thenBlock, {
            then: function() {
              thenBlock.apply(thenBlock, slice(arguments));
              return this;
            },
            else: function() {
              elseBlock.apply(elseBlock, slice(arguments));
              return this;
            },
            toString: function() {
              var elseClause = elseToString();
              if (elseClause) {
                elseClause = "else{" + elseClause + "}";
              }
              return join([
                "if(",
                pred,
                "){",
                thenToString(),
                "}",
                elseClause
              ]);
            }
          });
        }
        var globalBlock = block();
        var procedures = {};
        function proc(name, count) {
          var args = [];
          function arg() {
            var name2 = "a" + args.length;
            args.push(name2);
            return name2;
          }
          count = count || 0;
          for (var i = 0; i < count; ++i) {
            arg();
          }
          var body = scope();
          var bodyToString = body.toString;
          var result = procedures[name] = extend(body, {
            arg,
            toString: function() {
              return join([
                "function(",
                args.join(),
                "){",
                bodyToString(),
                "}"
              ]);
            }
          });
          return result;
        }
        function compile() {
          var code = [
            '"use strict";',
            globalBlock,
            "return {"
          ];
          Object.keys(procedures).forEach(function(name) {
            code.push('"', name, '":', procedures[name].toString(), ",");
          });
          code.push("}");
          var src = join(code).replace(/;/g, ";\n").replace(/}/g, "}\n").replace(/{/g, "{\n");
          var key;
          if (cache) {
            key = hex_sha256(src);
            if (cache[key]) {
              return cache[key].apply(null, linkedValues);
            }
          }
          var proc2 = Function.apply(null, linkedNames.concat(src));
          if (cache) {
            cache[key] = proc2;
          }
          return proc2.apply(null, linkedValues);
        }
        return {
          global: globalBlock,
          link,
          block,
          proc,
          scope,
          cond: conditional,
          compile
        };
      }
      var CUTE_COMPONENTS = "xyzw".split("");
      var GL_UNSIGNED_BYTE$7 = 5121;
      var ATTRIB_STATE_POINTER = 1;
      var ATTRIB_STATE_CONSTANT = 2;
      var DYN_FUNC$1 = 0;
      var DYN_PROP$1 = 1;
      var DYN_CONTEXT$1 = 2;
      var DYN_STATE$1 = 3;
      var DYN_THUNK = 4;
      var DYN_CONSTANT$1 = 5;
      var DYN_ARRAY$1 = 6;
      var S_DITHER = "dither";
      var S_BLEND_ENABLE = "blend.enable";
      var S_BLEND_COLOR = "blend.color";
      var S_BLEND_EQUATION = "blend.equation";
      var S_BLEND_FUNC = "blend.func";
      var S_DEPTH_ENABLE = "depth.enable";
      var S_DEPTH_FUNC = "depth.func";
      var S_DEPTH_RANGE = "depth.range";
      var S_DEPTH_MASK = "depth.mask";
      var S_COLOR_MASK = "colorMask";
      var S_CULL_ENABLE = "cull.enable";
      var S_CULL_FACE = "cull.face";
      var S_FRONT_FACE = "frontFace";
      var S_LINE_WIDTH = "lineWidth";
      var S_POLYGON_OFFSET_ENABLE = "polygonOffset.enable";
      var S_POLYGON_OFFSET_OFFSET = "polygonOffset.offset";
      var S_SAMPLE_ALPHA = "sample.alpha";
      var S_SAMPLE_ENABLE = "sample.enable";
      var S_SAMPLE_COVERAGE = "sample.coverage";
      var S_STENCIL_ENABLE = "stencil.enable";
      var S_STENCIL_MASK = "stencil.mask";
      var S_STENCIL_FUNC = "stencil.func";
      var S_STENCIL_OPFRONT = "stencil.opFront";
      var S_STENCIL_OPBACK = "stencil.opBack";
      var S_SCISSOR_ENABLE = "scissor.enable";
      var S_SCISSOR_BOX = "scissor.box";
      var S_VIEWPORT = "viewport";
      var S_PROFILE = "profile";
      var S_FRAMEBUFFER = "framebuffer";
      var S_VERT = "vert";
      var S_FRAG = "frag";
      var S_ELEMENTS = "elements";
      var S_PRIMITIVE = "primitive";
      var S_COUNT = "count";
      var S_OFFSET = "offset";
      var S_INSTANCES = "instances";
      var S_VAO = "vao";
      var SUFFIX_WIDTH = "Width";
      var SUFFIX_HEIGHT = "Height";
      var S_FRAMEBUFFER_WIDTH = S_FRAMEBUFFER + SUFFIX_WIDTH;
      var S_FRAMEBUFFER_HEIGHT = S_FRAMEBUFFER + SUFFIX_HEIGHT;
      var S_VIEWPORT_WIDTH = S_VIEWPORT + SUFFIX_WIDTH;
      var S_VIEWPORT_HEIGHT = S_VIEWPORT + SUFFIX_HEIGHT;
      var S_DRAWINGBUFFER = "drawingBuffer";
      var S_DRAWINGBUFFER_WIDTH = S_DRAWINGBUFFER + SUFFIX_WIDTH;
      var S_DRAWINGBUFFER_HEIGHT = S_DRAWINGBUFFER + SUFFIX_HEIGHT;
      var NESTED_OPTIONS = [
        S_BLEND_FUNC,
        S_BLEND_EQUATION,
        S_STENCIL_FUNC,
        S_STENCIL_OPFRONT,
        S_STENCIL_OPBACK,
        S_SAMPLE_COVERAGE,
        S_VIEWPORT,
        S_SCISSOR_BOX,
        S_POLYGON_OFFSET_OFFSET
      ];
      var GL_ARRAY_BUFFER$2 = 34962;
      var GL_ELEMENT_ARRAY_BUFFER$2 = 34963;
      var GL_CULL_FACE = 2884;
      var GL_BLEND = 3042;
      var GL_DITHER = 3024;
      var GL_STENCIL_TEST = 2960;
      var GL_DEPTH_TEST = 2929;
      var GL_SCISSOR_TEST = 3089;
      var GL_POLYGON_OFFSET_FILL = 32823;
      var GL_SAMPLE_ALPHA_TO_COVERAGE = 32926;
      var GL_SAMPLE_COVERAGE = 32928;
      var GL_FLOAT$7 = 5126;
      var GL_FLOAT_VEC2 = 35664;
      var GL_FLOAT_VEC3 = 35665;
      var GL_FLOAT_VEC4 = 35666;
      var GL_INT$2 = 5124;
      var GL_INT_VEC2 = 35667;
      var GL_INT_VEC3 = 35668;
      var GL_INT_VEC4 = 35669;
      var GL_BOOL = 35670;
      var GL_BOOL_VEC2 = 35671;
      var GL_BOOL_VEC3 = 35672;
      var GL_BOOL_VEC4 = 35673;
      var GL_FLOAT_MAT2 = 35674;
      var GL_FLOAT_MAT3 = 35675;
      var GL_FLOAT_MAT4 = 35676;
      var GL_SAMPLER_2D = 35678;
      var GL_SAMPLER_CUBE = 35680;
      var GL_TRIANGLES$1 = 4;
      var GL_FRONT = 1028;
      var GL_BACK = 1029;
      var GL_CW = 2304;
      var GL_CCW = 2305;
      var GL_MIN_EXT = 32775;
      var GL_MAX_EXT = 32776;
      var GL_ALWAYS = 519;
      var GL_KEEP = 7680;
      var GL_ZERO = 0;
      var GL_ONE = 1;
      var GL_FUNC_ADD = 32774;
      var GL_LESS = 513;
      var GL_FRAMEBUFFER$2 = 36160;
      var GL_COLOR_ATTACHMENT0$2 = 36064;
      var blendFuncs = {
        "0": 0,
        "1": 1,
        "zero": 0,
        "one": 1,
        "src color": 768,
        "one minus src color": 769,
        "src alpha": 770,
        "one minus src alpha": 771,
        "dst color": 774,
        "one minus dst color": 775,
        "dst alpha": 772,
        "one minus dst alpha": 773,
        "constant color": 32769,
        "one minus constant color": 32770,
        "constant alpha": 32771,
        "one minus constant alpha": 32772,
        "src alpha saturate": 776
      };
      var compareFuncs = {
        "never": 512,
        "less": 513,
        "<": 513,
        "equal": 514,
        "=": 514,
        "==": 514,
        "===": 514,
        "lequal": 515,
        "<=": 515,
        "greater": 516,
        ">": 516,
        "notequal": 517,
        "!=": 517,
        "!==": 517,
        "gequal": 518,
        ">=": 518,
        "always": 519
      };
      var stencilOps = {
        "0": 0,
        "zero": 0,
        "keep": 7680,
        "replace": 7681,
        "increment": 7682,
        "decrement": 7683,
        "increment wrap": 34055,
        "decrement wrap": 34056,
        "invert": 5386
      };
      var orientationType = {
        "cw": GL_CW,
        "ccw": GL_CCW
      };
      function isBufferArgs(x) {
        return Array.isArray(x) || isTypedArray(x) || isNDArrayLike(x);
      }
      function sortState(state) {
        return state.sort(function(a, b) {
          if (a === S_VIEWPORT) {
            return -1;
          } else if (b === S_VIEWPORT) {
            return 1;
          }
          return a < b ? -1 : 1;
        });
      }
      function Declaration(thisDep, contextDep, propDep, append) {
        this.thisDep = thisDep;
        this.contextDep = contextDep;
        this.propDep = propDep;
        this.append = append;
      }
      function isStatic(decl) {
        return decl && !(decl.thisDep || decl.contextDep || decl.propDep);
      }
      function createStaticDecl(append) {
        return new Declaration(false, false, false, append);
      }
      function createDynamicDecl(dyn, append) {
        var type = dyn.type;
        if (type === DYN_FUNC$1) {
          var numArgs = dyn.data.length;
          return new Declaration(
            true,
            numArgs >= 1,
            numArgs >= 2,
            append
          );
        } else if (type === DYN_THUNK) {
          var data = dyn.data;
          return new Declaration(
            data.thisDep,
            data.contextDep,
            data.propDep,
            append
          );
        } else if (type === DYN_CONSTANT$1) {
          return new Declaration(
            false,
            false,
            false,
            append
          );
        } else if (type === DYN_ARRAY$1) {
          var thisDep = false;
          var contextDep = false;
          var propDep = false;
          for (var i = 0; i < dyn.data.length; ++i) {
            var subDyn = dyn.data[i];
            if (subDyn.type === DYN_PROP$1) {
              propDep = true;
            } else if (subDyn.type === DYN_CONTEXT$1) {
              contextDep = true;
            } else if (subDyn.type === DYN_STATE$1) {
              thisDep = true;
            } else if (subDyn.type === DYN_FUNC$1) {
              thisDep = true;
              var subArgs = subDyn.data;
              if (subArgs >= 1) {
                contextDep = true;
              }
              if (subArgs >= 2) {
                propDep = true;
              }
            } else if (subDyn.type === DYN_THUNK) {
              thisDep = thisDep || subDyn.data.thisDep;
              contextDep = contextDep || subDyn.data.contextDep;
              propDep = propDep || subDyn.data.propDep;
            }
          }
          return new Declaration(
            thisDep,
            contextDep,
            propDep,
            append
          );
        } else {
          return new Declaration(
            type === DYN_STATE$1,
            type === DYN_CONTEXT$1,
            type === DYN_PROP$1,
            append
          );
        }
      }
      var SCOPE_DECL = new Declaration(false, false, false, function() {
      });
      function reglCore(gl, stringStore, extensions, limits, bufferState, elementState, textureState, framebufferState, uniformState, attributeState, shaderState, drawState, contextState, timer, cachedCode, config) {
        var AttributeRecord2 = attributeState.Record;
        var blendEquations = {
          "add": 32774,
          "subtract": 32778,
          "reverse subtract": 32779
        };
        if (extensions.ext_blend_minmax) {
          blendEquations.min = GL_MIN_EXT;
          blendEquations.max = GL_MAX_EXT;
        }
        var extInstancing = extensions.angle_instanced_arrays;
        var extDrawBuffers = extensions.webgl_draw_buffers;
        var extVertexArrays = extensions.oes_vertex_array_object;
        var currentState = {
          dirty: true,
          profile: config.profile
        };
        var nextState = {};
        var GL_STATE_NAMES = [];
        var GL_FLAGS = {};
        var GL_VARIABLES = {};
        function propName(name) {
          return name.replace(".", "_");
        }
        function stateFlag(sname, cap, init) {
          var name = propName(sname);
          GL_STATE_NAMES.push(sname);
          nextState[name] = currentState[name] = !!init;
          GL_FLAGS[name] = cap;
        }
        function stateVariable(sname, func, init) {
          var name = propName(sname);
          GL_STATE_NAMES.push(sname);
          if (Array.isArray(init)) {
            currentState[name] = init.slice();
            nextState[name] = init.slice();
          } else {
            currentState[name] = nextState[name] = init;
          }
          GL_VARIABLES[name] = func;
        }
        function hasVariableReference(exp) {
          if (!isNaN(exp)) {
            return false;
          }
          return true;
        }
        stateFlag(S_DITHER, GL_DITHER);
        stateFlag(S_BLEND_ENABLE, GL_BLEND);
        stateVariable(S_BLEND_COLOR, "blendColor", [0, 0, 0, 0]);
        stateVariable(
          S_BLEND_EQUATION,
          "blendEquationSeparate",
          [GL_FUNC_ADD, GL_FUNC_ADD]
        );
        stateVariable(
          S_BLEND_FUNC,
          "blendFuncSeparate",
          [GL_ONE, GL_ZERO, GL_ONE, GL_ZERO]
        );
        stateFlag(S_DEPTH_ENABLE, GL_DEPTH_TEST, true);
        stateVariable(S_DEPTH_FUNC, "depthFunc", GL_LESS);
        stateVariable(S_DEPTH_RANGE, "depthRange", [0, 1]);
        stateVariable(S_DEPTH_MASK, "depthMask", true);
        stateVariable(S_COLOR_MASK, S_COLOR_MASK, [true, true, true, true]);
        stateFlag(S_CULL_ENABLE, GL_CULL_FACE);
        stateVariable(S_CULL_FACE, "cullFace", GL_BACK);
        stateVariable(S_FRONT_FACE, S_FRONT_FACE, GL_CCW);
        stateVariable(S_LINE_WIDTH, S_LINE_WIDTH, 1);
        stateFlag(S_POLYGON_OFFSET_ENABLE, GL_POLYGON_OFFSET_FILL);
        stateVariable(S_POLYGON_OFFSET_OFFSET, "polygonOffset", [0, 0]);
        stateFlag(S_SAMPLE_ALPHA, GL_SAMPLE_ALPHA_TO_COVERAGE);
        stateFlag(S_SAMPLE_ENABLE, GL_SAMPLE_COVERAGE);
        stateVariable(S_SAMPLE_COVERAGE, "sampleCoverage", [1, false]);
        stateFlag(S_STENCIL_ENABLE, GL_STENCIL_TEST);
        stateVariable(S_STENCIL_MASK, "stencilMask", -1);
        stateVariable(S_STENCIL_FUNC, "stencilFunc", [GL_ALWAYS, 0, -1]);
        stateVariable(
          S_STENCIL_OPFRONT,
          "stencilOpSeparate",
          [GL_FRONT, GL_KEEP, GL_KEEP, GL_KEEP]
        );
        stateVariable(
          S_STENCIL_OPBACK,
          "stencilOpSeparate",
          [GL_BACK, GL_KEEP, GL_KEEP, GL_KEEP]
        );
        stateFlag(S_SCISSOR_ENABLE, GL_SCISSOR_TEST);
        stateVariable(
          S_SCISSOR_BOX,
          "scissor",
          [0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight]
        );
        stateVariable(
          S_VIEWPORT,
          S_VIEWPORT,
          [0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight]
        );
        var sharedState = {
          gl,
          context: contextState,
          strings: stringStore,
          next: nextState,
          current: currentState,
          draw: drawState,
          elements: elementState,
          buffer: bufferState,
          shader: shaderState,
          attributes: attributeState.state,
          vao: attributeState,
          uniforms: uniformState,
          framebuffer: framebufferState,
          extensions,
          timer,
          isBufferArgs
        };
        var sharedConstants = {
          primTypes,
          compareFuncs,
          blendFuncs,
          blendEquations,
          stencilOps,
          glTypes,
          orientationType
        };
        if (extDrawBuffers) {
          sharedConstants.backBuffer = [GL_BACK];
          sharedConstants.drawBuffer = loop(limits.maxDrawbuffers, function(i) {
            if (i === 0) {
              return [0];
            }
            return loop(i, function(j) {
              return GL_COLOR_ATTACHMENT0$2 + j;
            });
          });
        }
        var drawCallCounter = 0;
        function createREGLEnvironment() {
          var env = createEnvironment({ cache: cachedCode });
          var link = env.link;
          var global2 = env.global;
          env.id = drawCallCounter++;
          env.batchId = "0";
          var SHARED = link(sharedState);
          var shared = env.shared = {
            props: "a0"
          };
          Object.keys(sharedState).forEach(function(prop) {
            shared[prop] = global2.def(SHARED, ".", prop);
          });
          var nextVars = env.next = {};
          var currentVars = env.current = {};
          Object.keys(GL_VARIABLES).forEach(function(variable) {
            if (Array.isArray(currentState[variable])) {
              nextVars[variable] = global2.def(shared.next, ".", variable);
              currentVars[variable] = global2.def(shared.current, ".", variable);
            }
          });
          var constants = env.constants = {};
          Object.keys(sharedConstants).forEach(function(name) {
            constants[name] = global2.def(JSON.stringify(sharedConstants[name]));
          });
          env.invoke = function(block, x) {
            switch (x.type) {
              case DYN_FUNC$1:
                var argList = [
                  "this",
                  shared.context,
                  shared.props,
                  env.batchId
                ];
                return block.def(
                  link(x.data),
                  ".call(",
                  argList.slice(0, Math.max(x.data.length + 1, 4)),
                  ")"
                );
              case DYN_PROP$1:
                return block.def(shared.props, x.data);
              case DYN_CONTEXT$1:
                return block.def(shared.context, x.data);
              case DYN_STATE$1:
                return block.def("this", x.data);
              case DYN_THUNK:
                x.data.append(env, block);
                return x.data.ref;
              case DYN_CONSTANT$1:
                return x.data.toString();
              case DYN_ARRAY$1:
                return x.data.map(function(y) {
                  return env.invoke(block, y);
                });
            }
          };
          env.attribCache = {};
          var scopeAttribs = {};
          env.scopeAttrib = function(name) {
            var id = stringStore.id(name);
            if (id in scopeAttribs) {
              return scopeAttribs[id];
            }
            var binding = attributeState.scope[id];
            if (!binding) {
              binding = attributeState.scope[id] = new AttributeRecord2();
            }
            var result = scopeAttribs[id] = link(binding);
            return result;
          };
          return env;
        }
        function parseProfile(options) {
          var staticOptions = options.static;
          var dynamicOptions = options.dynamic;
          var profileEnable;
          if (S_PROFILE in staticOptions) {
            var value = !!staticOptions[S_PROFILE];
            profileEnable = createStaticDecl(function(env, scope) {
              return value;
            });
            profileEnable.enable = value;
          } else if (S_PROFILE in dynamicOptions) {
            var dyn = dynamicOptions[S_PROFILE];
            profileEnable = createDynamicDecl(dyn, function(env, scope) {
              return env.invoke(scope, dyn);
            });
          }
          return profileEnable;
        }
        function parseFramebuffer(options, env) {
          var staticOptions = options.static;
          var dynamicOptions = options.dynamic;
          if (S_FRAMEBUFFER in staticOptions) {
            var framebuffer = staticOptions[S_FRAMEBUFFER];
            if (framebuffer) {
              framebuffer = framebufferState.getFramebuffer(framebuffer);
              return createStaticDecl(function(env2, block) {
                var FRAMEBUFFER = env2.link(framebuffer);
                var shared = env2.shared;
                block.set(
                  shared.framebuffer,
                  ".next",
                  FRAMEBUFFER
                );
                var CONTEXT = shared.context;
                block.set(
                  CONTEXT,
                  "." + S_FRAMEBUFFER_WIDTH,
                  FRAMEBUFFER + ".width"
                );
                block.set(
                  CONTEXT,
                  "." + S_FRAMEBUFFER_HEIGHT,
                  FRAMEBUFFER + ".height"
                );
                return FRAMEBUFFER;
              });
            } else {
              return createStaticDecl(function(env2, scope) {
                var shared = env2.shared;
                scope.set(
                  shared.framebuffer,
                  ".next",
                  "null"
                );
                var CONTEXT = shared.context;
                scope.set(
                  CONTEXT,
                  "." + S_FRAMEBUFFER_WIDTH,
                  CONTEXT + "." + S_DRAWINGBUFFER_WIDTH
                );
                scope.set(
                  CONTEXT,
                  "." + S_FRAMEBUFFER_HEIGHT,
                  CONTEXT + "." + S_DRAWINGBUFFER_HEIGHT
                );
                return "null";
              });
            }
          } else if (S_FRAMEBUFFER in dynamicOptions) {
            var dyn = dynamicOptions[S_FRAMEBUFFER];
            return createDynamicDecl(dyn, function(env2, scope) {
              var FRAMEBUFFER_FUNC = env2.invoke(scope, dyn);
              var shared = env2.shared;
              var FRAMEBUFFER_STATE = shared.framebuffer;
              var FRAMEBUFFER = scope.def(
                FRAMEBUFFER_STATE,
                ".getFramebuffer(",
                FRAMEBUFFER_FUNC,
                ")"
              );
              scope.set(
                FRAMEBUFFER_STATE,
                ".next",
                FRAMEBUFFER
              );
              var CONTEXT = shared.context;
              scope.set(
                CONTEXT,
                "." + S_FRAMEBUFFER_WIDTH,
                FRAMEBUFFER + "?" + FRAMEBUFFER + ".width:" + CONTEXT + "." + S_DRAWINGBUFFER_WIDTH
              );
              scope.set(
                CONTEXT,
                "." + S_FRAMEBUFFER_HEIGHT,
                FRAMEBUFFER + "?" + FRAMEBUFFER + ".height:" + CONTEXT + "." + S_DRAWINGBUFFER_HEIGHT
              );
              return FRAMEBUFFER;
            });
          } else {
            return null;
          }
        }
        function parseViewportScissor(options, framebuffer, env) {
          var staticOptions = options.static;
          var dynamicOptions = options.dynamic;
          function parseBox(param) {
            if (param in staticOptions) {
              var box = staticOptions[param];
              var isStatic2 = true;
              var x = box.x | 0;
              var y = box.y | 0;
              var w, h;
              if ("width" in box) {
                w = box.width | 0;
              } else {
                isStatic2 = false;
              }
              if ("height" in box) {
                h = box.height | 0;
              } else {
                isStatic2 = false;
              }
              return new Declaration(
                !isStatic2 && framebuffer && framebuffer.thisDep,
                !isStatic2 && framebuffer && framebuffer.contextDep,
                !isStatic2 && framebuffer && framebuffer.propDep,
                function(env2, scope) {
                  var CONTEXT = env2.shared.context;
                  var BOX_W = w;
                  if (!("width" in box)) {
                    BOX_W = scope.def(CONTEXT, ".", S_FRAMEBUFFER_WIDTH, "-", x);
                  }
                  var BOX_H = h;
                  if (!("height" in box)) {
                    BOX_H = scope.def(CONTEXT, ".", S_FRAMEBUFFER_HEIGHT, "-", y);
                  }
                  return [x, y, BOX_W, BOX_H];
                }
              );
            } else if (param in dynamicOptions) {
              var dynBox = dynamicOptions[param];
              var result = createDynamicDecl(dynBox, function(env2, scope) {
                var BOX = env2.invoke(scope, dynBox);
                var CONTEXT = env2.shared.context;
                var BOX_X = scope.def(BOX, ".x|0");
                var BOX_Y = scope.def(BOX, ".y|0");
                var BOX_W = scope.def(
                  '"width" in ',
                  BOX,
                  "?",
                  BOX,
                  ".width|0:",
                  "(",
                  CONTEXT,
                  ".",
                  S_FRAMEBUFFER_WIDTH,
                  "-",
                  BOX_X,
                  ")"
                );
                var BOX_H = scope.def(
                  '"height" in ',
                  BOX,
                  "?",
                  BOX,
                  ".height|0:",
                  "(",
                  CONTEXT,
                  ".",
                  S_FRAMEBUFFER_HEIGHT,
                  "-",
                  BOX_Y,
                  ")"
                );
                return [BOX_X, BOX_Y, BOX_W, BOX_H];
              });
              if (framebuffer) {
                result.thisDep = result.thisDep || framebuffer.thisDep;
                result.contextDep = result.contextDep || framebuffer.contextDep;
                result.propDep = result.propDep || framebuffer.propDep;
              }
              return result;
            } else if (framebuffer) {
              return new Declaration(
                framebuffer.thisDep,
                framebuffer.contextDep,
                framebuffer.propDep,
                function(env2, scope) {
                  var CONTEXT = env2.shared.context;
                  return [
                    0,
                    0,
                    scope.def(CONTEXT, ".", S_FRAMEBUFFER_WIDTH),
                    scope.def(CONTEXT, ".", S_FRAMEBUFFER_HEIGHT)
                  ];
                }
              );
            } else {
              return null;
            }
          }
          var viewport = parseBox(S_VIEWPORT);
          if (viewport) {
            var prevViewport = viewport;
            viewport = new Declaration(
              viewport.thisDep,
              viewport.contextDep,
              viewport.propDep,
              function(env2, scope) {
                var VIEWPORT = prevViewport.append(env2, scope);
                var CONTEXT = env2.shared.context;
                scope.set(
                  CONTEXT,
                  "." + S_VIEWPORT_WIDTH,
                  VIEWPORT[2]
                );
                scope.set(
                  CONTEXT,
                  "." + S_VIEWPORT_HEIGHT,
                  VIEWPORT[3]
                );
                return VIEWPORT;
              }
            );
          }
          return {
            viewport,
            scissor_box: parseBox(S_SCISSOR_BOX)
          };
        }
        function parseAttribLocations(options, attributes) {
          var staticOptions = options.static;
          var staticProgram = typeof staticOptions[S_FRAG] === "string" && typeof staticOptions[S_VERT] === "string";
          if (staticProgram) {
            if (Object.keys(attributes.dynamic).length > 0) {
              return null;
            }
            var staticAttributes = attributes.static;
            var sAttributes = Object.keys(staticAttributes);
            if (sAttributes.length > 0 && typeof staticAttributes[sAttributes[0]] === "number") {
              var bindings = [];
              for (var i = 0; i < sAttributes.length; ++i) {
                bindings.push([staticAttributes[sAttributes[i]] | 0, sAttributes[i]]);
              }
              return bindings;
            }
          }
          return null;
        }
        function parseProgram(options, env, attribLocations) {
          var staticOptions = options.static;
          var dynamicOptions = options.dynamic;
          function parseShader(name) {
            if (name in staticOptions) {
              var id = stringStore.id(staticOptions[name]);
              var result = createStaticDecl(function() {
                return id;
              });
              result.id = id;
              return result;
            } else if (name in dynamicOptions) {
              var dyn = dynamicOptions[name];
              return createDynamicDecl(dyn, function(env2, scope) {
                var str2 = env2.invoke(scope, dyn);
                var id2 = scope.def(env2.shared.strings, ".id(", str2, ")");
                return id2;
              });
            }
            return null;
          }
          var frag = parseShader(S_FRAG);
          var vert = parseShader(S_VERT);
          var program = null;
          var progVar;
          if (isStatic(frag) && isStatic(vert)) {
            program = shaderState.program(vert.id, frag.id, null, attribLocations);
            progVar = createStaticDecl(function(env2, scope) {
              return env2.link(program);
            });
          } else {
            progVar = new Declaration(
              frag && frag.thisDep || vert && vert.thisDep,
              frag && frag.contextDep || vert && vert.contextDep,
              frag && frag.propDep || vert && vert.propDep,
              function(env2, scope) {
                var SHADER_STATE = env2.shared.shader;
                var fragId;
                if (frag) {
                  fragId = frag.append(env2, scope);
                } else {
                  fragId = scope.def(SHADER_STATE, ".", S_FRAG);
                }
                var vertId;
                if (vert) {
                  vertId = vert.append(env2, scope);
                } else {
                  vertId = scope.def(SHADER_STATE, ".", S_VERT);
                }
                var progDef = SHADER_STATE + ".program(" + vertId + "," + fragId;
                return scope.def(progDef + ")");
              }
            );
          }
          return {
            frag,
            vert,
            progVar,
            program
          };
        }
        function parseDraw(options, env) {
          var staticOptions = options.static;
          var dynamicOptions = options.dynamic;
          var staticDraw = {};
          var vaoActive = false;
          function parseVAO() {
            if (S_VAO in staticOptions) {
              var vao2 = staticOptions[S_VAO];
              if (vao2 !== null && attributeState.getVAO(vao2) === null) {
                vao2 = attributeState.createVAO(vao2);
              }
              vaoActive = true;
              staticDraw.vao = vao2;
              return createStaticDecl(function(env2) {
                var vaoRef = attributeState.getVAO(vao2);
                if (vaoRef) {
                  return env2.link(vaoRef);
                } else {
                  return "null";
                }
              });
            } else if (S_VAO in dynamicOptions) {
              vaoActive = true;
              var dyn = dynamicOptions[S_VAO];
              return createDynamicDecl(dyn, function(env2, scope) {
                var vaoRef = env2.invoke(scope, dyn);
                return scope.def(env2.shared.vao + ".getVAO(" + vaoRef + ")");
              });
            }
            return null;
          }
          var vao = parseVAO();
          var elementsActive = false;
          function parseElements() {
            if (S_ELEMENTS in staticOptions) {
              var elements2 = staticOptions[S_ELEMENTS];
              staticDraw.elements = elements2;
              if (isBufferArgs(elements2)) {
                var e = staticDraw.elements = elementState.create(elements2, true);
                elements2 = elementState.getElements(e);
                elementsActive = true;
              } else if (elements2) {
                elements2 = elementState.getElements(elements2);
                elementsActive = true;
              }
              var result = createStaticDecl(function(env2, scope) {
                if (elements2) {
                  var result2 = env2.link(elements2);
                  env2.ELEMENTS = result2;
                  return result2;
                }
                env2.ELEMENTS = null;
                return null;
              });
              result.value = elements2;
              return result;
            } else if (S_ELEMENTS in dynamicOptions) {
              elementsActive = true;
              var dyn = dynamicOptions[S_ELEMENTS];
              return createDynamicDecl(dyn, function(env2, scope) {
                var shared = env2.shared;
                var IS_BUFFER_ARGS = shared.isBufferArgs;
                var ELEMENT_STATE = shared.elements;
                var elementDefn = env2.invoke(scope, dyn);
                var elements3 = scope.def("null");
                var elementStream = scope.def(IS_BUFFER_ARGS, "(", elementDefn, ")");
                var ifte = env2.cond(elementStream).then(elements3, "=", ELEMENT_STATE, ".createStream(", elementDefn, ");").else(elements3, "=", ELEMENT_STATE, ".getElements(", elementDefn, ");");
                scope.entry(ifte);
                scope.exit(
                  env2.cond(elementStream).then(ELEMENT_STATE, ".destroyStream(", elements3, ");")
                );
                env2.ELEMENTS = elements3;
                return elements3;
              });
            } else if (vaoActive) {
              return new Declaration(
                vao.thisDep,
                vao.contextDep,
                vao.propDep,
                function(env2, scope) {
                  return scope.def(env2.shared.vao + ".currentVAO?" + env2.shared.elements + ".getElements(" + env2.shared.vao + ".currentVAO.elements):null");
                }
              );
            }
            return null;
          }
          var elements = parseElements();
          function parsePrimitive() {
            if (S_PRIMITIVE in staticOptions) {
              var primitive2 = staticOptions[S_PRIMITIVE];
              staticDraw.primitive = primitive2;
              return createStaticDecl(function(env2, scope) {
                return primTypes[primitive2];
              });
            } else if (S_PRIMITIVE in dynamicOptions) {
              var dynPrimitive = dynamicOptions[S_PRIMITIVE];
              return createDynamicDecl(dynPrimitive, function(env2, scope) {
                var PRIM_TYPES = env2.constants.primTypes;
                var prim = env2.invoke(scope, dynPrimitive);
                return scope.def(PRIM_TYPES, "[", prim, "]");
              });
            } else if (elementsActive) {
              if (isStatic(elements)) {
                if (elements.value) {
                  return createStaticDecl(function(env2, scope) {
                    return scope.def(env2.ELEMENTS, ".primType");
                  });
                } else {
                  return createStaticDecl(function() {
                    return GL_TRIANGLES$1;
                  });
                }
              } else {
                return new Declaration(
                  elements.thisDep,
                  elements.contextDep,
                  elements.propDep,
                  function(env2, scope) {
                    var elements2 = env2.ELEMENTS;
                    return scope.def(elements2, "?", elements2, ".primType:", GL_TRIANGLES$1);
                  }
                );
              }
            } else if (vaoActive) {
              return new Declaration(
                vao.thisDep,
                vao.contextDep,
                vao.propDep,
                function(env2, scope) {
                  return scope.def(env2.shared.vao + ".currentVAO?" + env2.shared.vao + ".currentVAO.primitive:" + GL_TRIANGLES$1);
                }
              );
            }
            return null;
          }
          function parseParam(param, isOffset) {
            if (param in staticOptions) {
              var value = staticOptions[param] | 0;
              if (isOffset) {
                staticDraw.offset = value;
              } else {
                staticDraw.instances = value;
              }
              return createStaticDecl(function(env2, scope) {
                if (isOffset) {
                  env2.OFFSET = value;
                }
                return value;
              });
            } else if (param in dynamicOptions) {
              var dynValue = dynamicOptions[param];
              return createDynamicDecl(dynValue, function(env2, scope) {
                var result = env2.invoke(scope, dynValue);
                if (isOffset) {
                  env2.OFFSET = result;
                }
                return result;
              });
            } else if (isOffset) {
              if (elementsActive) {
                return createStaticDecl(function(env2, scope) {
                  env2.OFFSET = 0;
                  return 0;
                });
              } else if (vaoActive) {
                return new Declaration(
                  vao.thisDep,
                  vao.contextDep,
                  vao.propDep,
                  function(env2, scope) {
                    return scope.def(env2.shared.vao + ".currentVAO?" + env2.shared.vao + ".currentVAO.offset:0");
                  }
                );
              }
            } else if (vaoActive) {
              return new Declaration(
                vao.thisDep,
                vao.contextDep,
                vao.propDep,
                function(env2, scope) {
                  return scope.def(env2.shared.vao + ".currentVAO?" + env2.shared.vao + ".currentVAO.instances:-1");
                }
              );
            }
            return null;
          }
          var OFFSET = parseParam(S_OFFSET, true);
          function parseVertCount() {
            if (S_COUNT in staticOptions) {
              var count2 = staticOptions[S_COUNT] | 0;
              staticDraw.count = count2;
              return createStaticDecl(function() {
                return count2;
              });
            } else if (S_COUNT in dynamicOptions) {
              var dynCount = dynamicOptions[S_COUNT];
              return createDynamicDecl(dynCount, function(env2, scope) {
                var result2 = env2.invoke(scope, dynCount);
                return result2;
              });
            } else if (elementsActive) {
              if (isStatic(elements)) {
                if (elements) {
                  if (OFFSET) {
                    return new Declaration(
                      OFFSET.thisDep,
                      OFFSET.contextDep,
                      OFFSET.propDep,
                      function(env2, scope) {
                        var result2 = scope.def(
                          env2.ELEMENTS,
                          ".vertCount-",
                          env2.OFFSET
                        );
                        return result2;
                      }
                    );
                  } else {
                    return createStaticDecl(function(env2, scope) {
                      return scope.def(env2.ELEMENTS, ".vertCount");
                    });
                  }
                } else {
                  var result = createStaticDecl(function() {
                    return -1;
                  });
                  return result;
                }
              } else {
                var variable = new Declaration(
                  elements.thisDep || OFFSET.thisDep,
                  elements.contextDep || OFFSET.contextDep,
                  elements.propDep || OFFSET.propDep,
                  function(env2, scope) {
                    var elements2 = env2.ELEMENTS;
                    if (env2.OFFSET) {
                      return scope.def(
                        elements2,
                        "?",
                        elements2,
                        ".vertCount-",
                        env2.OFFSET,
                        ":-1"
                      );
                    }
                    return scope.def(elements2, "?", elements2, ".vertCount:-1");
                  }
                );
                return variable;
              }
            } else if (vaoActive) {
              var countVariable = new Declaration(
                vao.thisDep,
                vao.contextDep,
                vao.propDep,
                function(env2, scope) {
                  return scope.def(env2.shared.vao, ".currentVAO?", env2.shared.vao, ".currentVAO.count:-1");
                }
              );
              return countVariable;
            }
            return null;
          }
          var primitive = parsePrimitive();
          var count = parseVertCount();
          var instances = parseParam(S_INSTANCES, false);
          return {
            elements,
            primitive,
            count,
            instances,
            offset: OFFSET,
            vao,
            vaoActive,
            elementsActive,
            // static draw props
            static: staticDraw
          };
        }
        function parseGLState(options, env) {
          var staticOptions = options.static;
          var dynamicOptions = options.dynamic;
          var STATE = {};
          GL_STATE_NAMES.forEach(function(prop) {
            var param = propName(prop);
            function parseParam(parseStatic, parseDynamic) {
              if (prop in staticOptions) {
                var value = parseStatic(staticOptions[prop]);
                STATE[param] = createStaticDecl(function() {
                  return value;
                });
              } else if (prop in dynamicOptions) {
                var dyn = dynamicOptions[prop];
                STATE[param] = createDynamicDecl(dyn, function(env2, scope) {
                  return parseDynamic(env2, scope, env2.invoke(scope, dyn));
                });
              }
            }
            switch (prop) {
              case S_CULL_ENABLE:
              case S_BLEND_ENABLE:
              case S_DITHER:
              case S_STENCIL_ENABLE:
              case S_DEPTH_ENABLE:
              case S_SCISSOR_ENABLE:
              case S_POLYGON_OFFSET_ENABLE:
              case S_SAMPLE_ALPHA:
              case S_SAMPLE_ENABLE:
              case S_DEPTH_MASK:
                return parseParam(
                  function(value) {
                    return value;
                  },
                  function(env2, scope, value) {
                    return value;
                  }
                );
              case S_DEPTH_FUNC:
                return parseParam(
                  function(value) {
                    return compareFuncs[value];
                  },
                  function(env2, scope, value) {
                    var COMPARE_FUNCS = env2.constants.compareFuncs;
                    return scope.def(COMPARE_FUNCS, "[", value, "]");
                  }
                );
              case S_DEPTH_RANGE:
                return parseParam(
                  function(value) {
                    return value;
                  },
                  function(env2, scope, value) {
                    var Z_NEAR = scope.def("+", value, "[0]");
                    var Z_FAR = scope.def("+", value, "[1]");
                    return [Z_NEAR, Z_FAR];
                  }
                );
              case S_BLEND_FUNC:
                return parseParam(
                  function(value) {
                    var srcRGB = "srcRGB" in value ? value.srcRGB : value.src;
                    var srcAlpha = "srcAlpha" in value ? value.srcAlpha : value.src;
                    var dstRGB = "dstRGB" in value ? value.dstRGB : value.dst;
                    var dstAlpha = "dstAlpha" in value ? value.dstAlpha : value.dst;
                    return [
                      blendFuncs[srcRGB],
                      blendFuncs[dstRGB],
                      blendFuncs[srcAlpha],
                      blendFuncs[dstAlpha]
                    ];
                  },
                  function(env2, scope, value) {
                    var BLEND_FUNCS = env2.constants.blendFuncs;
                    function read(prefix, suffix) {
                      var func = scope.def(
                        '"',
                        prefix,
                        suffix,
                        '" in ',
                        value,
                        "?",
                        value,
                        ".",
                        prefix,
                        suffix,
                        ":",
                        value,
                        ".",
                        prefix
                      );
                      return func;
                    }
                    var srcRGB = read("src", "RGB");
                    var dstRGB = read("dst", "RGB");
                    var SRC_RGB = scope.def(BLEND_FUNCS, "[", srcRGB, "]");
                    var SRC_ALPHA = scope.def(BLEND_FUNCS, "[", read("src", "Alpha"), "]");
                    var DST_RGB = scope.def(BLEND_FUNCS, "[", dstRGB, "]");
                    var DST_ALPHA = scope.def(BLEND_FUNCS, "[", read("dst", "Alpha"), "]");
                    return [SRC_RGB, DST_RGB, SRC_ALPHA, DST_ALPHA];
                  }
                );
              case S_BLEND_EQUATION:
                return parseParam(
                  function(value) {
                    if (typeof value === "string") {
                      return [
                        blendEquations[value],
                        blendEquations[value]
                      ];
                    } else if (typeof value === "object") {
                      return [
                        blendEquations[value.rgb],
                        blendEquations[value.alpha]
                      ];
                    } else {
                    }
                  },
                  function(env2, scope, value) {
                    var BLEND_EQUATIONS = env2.constants.blendEquations;
                    var RGB = scope.def();
                    var ALPHA = scope.def();
                    var ifte = env2.cond("typeof ", value, '==="string"');
                    ifte.then(
                      RGB,
                      "=",
                      ALPHA,
                      "=",
                      BLEND_EQUATIONS,
                      "[",
                      value,
                      "];"
                    );
                    ifte.else(
                      RGB,
                      "=",
                      BLEND_EQUATIONS,
                      "[",
                      value,
                      ".rgb];",
                      ALPHA,
                      "=",
                      BLEND_EQUATIONS,
                      "[",
                      value,
                      ".alpha];"
                    );
                    scope(ifte);
                    return [RGB, ALPHA];
                  }
                );
              case S_BLEND_COLOR:
                return parseParam(
                  function(value) {
                    return loop(4, function(i) {
                      return +value[i];
                    });
                  },
                  function(env2, scope, value) {
                    return loop(4, function(i) {
                      return scope.def("+", value, "[", i, "]");
                    });
                  }
                );
              case S_STENCIL_MASK:
                return parseParam(
                  function(value) {
                    return value | 0;
                  },
                  function(env2, scope, value) {
                    return scope.def(value, "|0");
                  }
                );
              case S_STENCIL_FUNC:
                return parseParam(
                  function(value) {
                    var cmp = value.cmp || "keep";
                    var ref = value.ref || 0;
                    var mask = "mask" in value ? value.mask : -1;
                    return [
                      compareFuncs[cmp],
                      ref,
                      mask
                    ];
                  },
                  function(env2, scope, value) {
                    var COMPARE_FUNCS = env2.constants.compareFuncs;
                    var cmp = scope.def(
                      '"cmp" in ',
                      value,
                      "?",
                      COMPARE_FUNCS,
                      "[",
                      value,
                      ".cmp]",
                      ":",
                      GL_KEEP
                    );
                    var ref = scope.def(value, ".ref|0");
                    var mask = scope.def(
                      '"mask" in ',
                      value,
                      "?",
                      value,
                      ".mask|0:-1"
                    );
                    return [cmp, ref, mask];
                  }
                );
              case S_STENCIL_OPFRONT:
              case S_STENCIL_OPBACK:
                return parseParam(
                  function(value) {
                    var fail = value.fail || "keep";
                    var zfail = value.zfail || "keep";
                    var zpass = value.zpass || "keep";
                    return [
                      prop === S_STENCIL_OPBACK ? GL_BACK : GL_FRONT,
                      stencilOps[fail],
                      stencilOps[zfail],
                      stencilOps[zpass]
                    ];
                  },
                  function(env2, scope, value) {
                    var STENCIL_OPS = env2.constants.stencilOps;
                    function read(name) {
                      return scope.def(
                        '"',
                        name,
                        '" in ',
                        value,
                        "?",
                        STENCIL_OPS,
                        "[",
                        value,
                        ".",
                        name,
                        "]:",
                        GL_KEEP
                      );
                    }
                    return [
                      prop === S_STENCIL_OPBACK ? GL_BACK : GL_FRONT,
                      read("fail"),
                      read("zfail"),
                      read("zpass")
                    ];
                  }
                );
              case S_POLYGON_OFFSET_OFFSET:
                return parseParam(
                  function(value) {
                    var factor = value.factor | 0;
                    var units = value.units | 0;
                    return [factor, units];
                  },
                  function(env2, scope, value) {
                    var FACTOR = scope.def(value, ".factor|0");
                    var UNITS = scope.def(value, ".units|0");
                    return [FACTOR, UNITS];
                  }
                );
              case S_CULL_FACE:
                return parseParam(
                  function(value) {
                    var face = 0;
                    if (value === "front") {
                      face = GL_FRONT;
                    } else if (value === "back") {
                      face = GL_BACK;
                    }
                    return face;
                  },
                  function(env2, scope, value) {
                    return scope.def(value, '==="front"?', GL_FRONT, ":", GL_BACK);
                  }
                );
              case S_LINE_WIDTH:
                return parseParam(
                  function(value) {
                    return value;
                  },
                  function(env2, scope, value) {
                    return value;
                  }
                );
              case S_FRONT_FACE:
                return parseParam(
                  function(value) {
                    return orientationType[value];
                  },
                  function(env2, scope, value) {
                    return scope.def(value + '==="cw"?' + GL_CW + ":" + GL_CCW);
                  }
                );
              case S_COLOR_MASK:
                return parseParam(
                  function(value) {
                    return value.map(function(v) {
                      return !!v;
                    });
                  },
                  function(env2, scope, value) {
                    return loop(4, function(i) {
                      return "!!" + value + "[" + i + "]";
                    });
                  }
                );
              case S_SAMPLE_COVERAGE:
                return parseParam(
                  function(value) {
                    var sampleValue = "value" in value ? value.value : 1;
                    var sampleInvert = !!value.invert;
                    return [sampleValue, sampleInvert];
                  },
                  function(env2, scope, value) {
                    var VALUE = scope.def(
                      '"value" in ',
                      value,
                      "?+",
                      value,
                      ".value:1"
                    );
                    var INVERT = scope.def("!!", value, ".invert");
                    return [VALUE, INVERT];
                  }
                );
            }
          });
          return STATE;
        }
        function parseUniforms(uniforms, env) {
          var staticUniforms = uniforms.static;
          var dynamicUniforms = uniforms.dynamic;
          var UNIFORMS = {};
          Object.keys(staticUniforms).forEach(function(name) {
            var value = staticUniforms[name];
            var result;
            if (typeof value === "number" || typeof value === "boolean") {
              result = createStaticDecl(function() {
                return value;
              });
            } else if (typeof value === "function") {
              var reglType = value._reglType;
              if (reglType === "texture2d" || reglType === "textureCube") {
                result = createStaticDecl(function(env2) {
                  return env2.link(value);
                });
              } else if (reglType === "framebuffer" || reglType === "framebufferCube") {
                result = createStaticDecl(function(env2) {
                  return env2.link(value.color[0]);
                });
              } else {
              }
            } else if (isArrayLike(value)) {
              result = createStaticDecl(function(env2) {
                var ITEM = env2.global.def(
                  "[",
                  loop(value.length, function(i) {
                    return value[i];
                  }),
                  "]"
                );
                return ITEM;
              });
            } else {
            }
            result.value = value;
            UNIFORMS[name] = result;
          });
          Object.keys(dynamicUniforms).forEach(function(key) {
            var dyn = dynamicUniforms[key];
            UNIFORMS[key] = createDynamicDecl(dyn, function(env2, scope) {
              return env2.invoke(scope, dyn);
            });
          });
          return UNIFORMS;
        }
        function parseAttributes(attributes, env) {
          var staticAttributes = attributes.static;
          var dynamicAttributes = attributes.dynamic;
          var attributeDefs = {};
          Object.keys(staticAttributes).forEach(function(attribute) {
            var value = staticAttributes[attribute];
            var id = stringStore.id(attribute);
            var record = new AttributeRecord2();
            if (isBufferArgs(value)) {
              record.state = ATTRIB_STATE_POINTER;
              record.buffer = bufferState.getBuffer(
                bufferState.create(value, GL_ARRAY_BUFFER$2, false, true)
              );
              record.type = 0;
            } else {
              var buffer = bufferState.getBuffer(value);
              if (buffer) {
                record.state = ATTRIB_STATE_POINTER;
                record.buffer = buffer;
                record.type = 0;
              } else {
                if ("constant" in value) {
                  var constant = value.constant;
                  record.buffer = "null";
                  record.state = ATTRIB_STATE_CONSTANT;
                  if (typeof constant === "number") {
                    record.x = constant;
                  } else {
                    CUTE_COMPONENTS.forEach(function(c, i) {
                      if (i < constant.length) {
                        record[c] = constant[i];
                      }
                    });
                  }
                } else {
                  if (isBufferArgs(value.buffer)) {
                    buffer = bufferState.getBuffer(
                      bufferState.create(value.buffer, GL_ARRAY_BUFFER$2, false, true)
                    );
                  } else {
                    buffer = bufferState.getBuffer(value.buffer);
                  }
                  var offset = value.offset | 0;
                  var stride = value.stride | 0;
                  var size = value.size | 0;
                  var normalized = !!value.normalized;
                  var type = 0;
                  if ("type" in value) {
                    type = glTypes[value.type];
                  }
                  var divisor = value.divisor | 0;
                  record.buffer = buffer;
                  record.state = ATTRIB_STATE_POINTER;
                  record.size = size;
                  record.normalized = normalized;
                  record.type = type || buffer.dtype;
                  record.offset = offset;
                  record.stride = stride;
                  record.divisor = divisor;
                }
              }
            }
            attributeDefs[attribute] = createStaticDecl(function(env2, scope) {
              var cache = env2.attribCache;
              if (id in cache) {
                return cache[id];
              }
              var result = {
                isStream: false
              };
              Object.keys(record).forEach(function(key) {
                result[key] = record[key];
              });
              if (record.buffer) {
                result.buffer = env2.link(record.buffer);
                result.type = result.type || result.buffer + ".dtype";
              }
              cache[id] = result;
              return result;
            });
          });
          Object.keys(dynamicAttributes).forEach(function(attribute) {
            var dyn = dynamicAttributes[attribute];
            function appendAttributeCode(env2, block) {
              var VALUE = env2.invoke(block, dyn);
              var shared = env2.shared;
              var constants = env2.constants;
              var IS_BUFFER_ARGS = shared.isBufferArgs;
              var BUFFER_STATE = shared.buffer;
              var result = {
                isStream: block.def(false)
              };
              var defaultRecord = new AttributeRecord2();
              defaultRecord.state = ATTRIB_STATE_POINTER;
              Object.keys(defaultRecord).forEach(function(key) {
                result[key] = block.def("" + defaultRecord[key]);
              });
              var BUFFER = result.buffer;
              var TYPE = result.type;
              block(
                "if(",
                IS_BUFFER_ARGS,
                "(",
                VALUE,
                ")){",
                result.isStream,
                "=true;",
                BUFFER,
                "=",
                BUFFER_STATE,
                ".createStream(",
                GL_ARRAY_BUFFER$2,
                ",",
                VALUE,
                ");",
                TYPE,
                "=",
                BUFFER,
                ".dtype;",
                "}else{",
                BUFFER,
                "=",
                BUFFER_STATE,
                ".getBuffer(",
                VALUE,
                ");",
                "if(",
                BUFFER,
                "){",
                TYPE,
                "=",
                BUFFER,
                ".dtype;",
                '}else if("constant" in ',
                VALUE,
                "){",
                result.state,
                "=",
                ATTRIB_STATE_CONSTANT,
                ";",
                "if(typeof " + VALUE + '.constant === "number"){',
                result[CUTE_COMPONENTS[0]],
                "=",
                VALUE,
                ".constant;",
                CUTE_COMPONENTS.slice(1).map(function(n) {
                  return result[n];
                }).join("="),
                "=0;",
                "}else{",
                CUTE_COMPONENTS.map(function(name, i) {
                  return result[name] + "=" + VALUE + ".constant.length>" + i + "?" + VALUE + ".constant[" + i + "]:0;";
                }).join(""),
                "}}else{",
                "if(",
                IS_BUFFER_ARGS,
                "(",
                VALUE,
                ".buffer)){",
                BUFFER,
                "=",
                BUFFER_STATE,
                ".createStream(",
                GL_ARRAY_BUFFER$2,
                ",",
                VALUE,
                ".buffer);",
                "}else{",
                BUFFER,
                "=",
                BUFFER_STATE,
                ".getBuffer(",
                VALUE,
                ".buffer);",
                "}",
                TYPE,
                '="type" in ',
                VALUE,
                "?",
                constants.glTypes,
                "[",
                VALUE,
                ".type]:",
                BUFFER,
                ".dtype;",
                result.normalized,
                "=!!",
                VALUE,
                ".normalized;"
              );
              function emitReadRecord(name) {
                block(result[name], "=", VALUE, ".", name, "|0;");
              }
              emitReadRecord("size");
              emitReadRecord("offset");
              emitReadRecord("stride");
              emitReadRecord("divisor");
              block("}}");
              block.exit(
                "if(",
                result.isStream,
                "){",
                BUFFER_STATE,
                ".destroyStream(",
                BUFFER,
                ");",
                "}"
              );
              return result;
            }
            attributeDefs[attribute] = createDynamicDecl(dyn, appendAttributeCode);
          });
          return attributeDefs;
        }
        function parseContext(context) {
          var staticContext = context.static;
          var dynamicContext = context.dynamic;
          var result = {};
          Object.keys(staticContext).forEach(function(name) {
            var value = staticContext[name];
            result[name] = createStaticDecl(function(env, scope) {
              if (typeof value === "number" || typeof value === "boolean") {
                return "" + value;
              } else {
                return env.link(value);
              }
            });
          });
          Object.keys(dynamicContext).forEach(function(name) {
            var dyn = dynamicContext[name];
            result[name] = createDynamicDecl(dyn, function(env, scope) {
              return env.invoke(scope, dyn);
            });
          });
          return result;
        }
        function parseArguments(options, attributes, uniforms, context, env) {
          var staticOptions = options.static;
          var dynamicOptions = options.dynamic;
          var attribLocations = parseAttribLocations(options, attributes);
          var framebuffer = parseFramebuffer(options, env);
          var viewportAndScissor = parseViewportScissor(options, framebuffer, env);
          var draw = parseDraw(options, env);
          var state = parseGLState(options, env);
          var shader = parseProgram(options, env, attribLocations);
          function copyBox(name) {
            var defn = viewportAndScissor[name];
            if (defn) {
              state[name] = defn;
            }
          }
          copyBox(S_VIEWPORT);
          copyBox(propName(S_SCISSOR_BOX));
          var dirty = Object.keys(state).length > 0;
          var result = {
            framebuffer,
            draw,
            shader,
            state,
            dirty,
            scopeVAO: null,
            drawVAO: null,
            useVAO: false,
            attributes: {}
          };
          result.profile = parseProfile(options, env);
          result.uniforms = parseUniforms(uniforms, env);
          result.drawVAO = result.scopeVAO = draw.vao;
          if (!result.drawVAO && shader.program && !attribLocations && extensions.angle_instanced_arrays && draw.static.elements) {
            var useVAO = true;
            var staticBindings = shader.program.attributes.map(function(attr) {
              var binding = attributes.static[attr];
              useVAO = useVAO && !!binding;
              return binding;
            });
            if (useVAO && staticBindings.length > 0) {
              var vao = attributeState.getVAO(attributeState.createVAO({
                attributes: staticBindings,
                elements: draw.static.elements
              }));
              result.drawVAO = new Declaration(null, null, null, function(env2, scope) {
                return env2.link(vao);
              });
              result.useVAO = true;
            }
          }
          if (attribLocations) {
            result.useVAO = true;
          } else {
            result.attributes = parseAttributes(attributes, env);
          }
          result.context = parseContext(context, env);
          return result;
        }
        function emitContext(env, scope, context) {
          var shared = env.shared;
          var CONTEXT = shared.context;
          var contextEnter = env.scope();
          Object.keys(context).forEach(function(name) {
            scope.save(CONTEXT, "." + name);
            var defn = context[name];
            var value = defn.append(env, scope);
            if (Array.isArray(value)) {
              contextEnter(CONTEXT, ".", name, "=[", value.join(), "];");
            } else {
              contextEnter(CONTEXT, ".", name, "=", value, ";");
            }
          });
          scope(contextEnter);
        }
        function emitPollFramebuffer(env, scope, framebuffer, skipCheck) {
          var shared = env.shared;
          var GL = shared.gl;
          var FRAMEBUFFER_STATE = shared.framebuffer;
          var EXT_DRAW_BUFFERS;
          if (extDrawBuffers) {
            EXT_DRAW_BUFFERS = scope.def(shared.extensions, ".webgl_draw_buffers");
          }
          var constants = env.constants;
          var DRAW_BUFFERS = constants.drawBuffer;
          var BACK_BUFFER = constants.backBuffer;
          var NEXT;
          if (framebuffer) {
            NEXT = framebuffer.append(env, scope);
          } else {
            NEXT = scope.def(FRAMEBUFFER_STATE, ".next");
          }
          if (!skipCheck) {
            scope("if(", NEXT, "!==", FRAMEBUFFER_STATE, ".cur){");
          }
          scope(
            "if(",
            NEXT,
            "){",
            GL,
            ".bindFramebuffer(",
            GL_FRAMEBUFFER$2,
            ",",
            NEXT,
            ".framebuffer);"
          );
          if (extDrawBuffers) {
            scope(
              EXT_DRAW_BUFFERS,
              ".drawBuffersWEBGL(",
              DRAW_BUFFERS,
              "[",
              NEXT,
              ".colorAttachments.length]);"
            );
          }
          scope(
            "}else{",
            GL,
            ".bindFramebuffer(",
            GL_FRAMEBUFFER$2,
            ",null);"
          );
          if (extDrawBuffers) {
            scope(EXT_DRAW_BUFFERS, ".drawBuffersWEBGL(", BACK_BUFFER, ");");
          }
          scope(
            "}",
            FRAMEBUFFER_STATE,
            ".cur=",
            NEXT,
            ";"
          );
          if (!skipCheck) {
            scope("}");
          }
        }
        function emitPollState(env, scope, args) {
          var shared = env.shared;
          var GL = shared.gl;
          var CURRENT_VARS = env.current;
          var NEXT_VARS = env.next;
          var CURRENT_STATE = shared.current;
          var NEXT_STATE = shared.next;
          var block = env.cond(CURRENT_STATE, ".dirty");
          GL_STATE_NAMES.forEach(function(prop) {
            var param = propName(prop);
            if (param in args.state) {
              return;
            }
            var NEXT, CURRENT;
            if (param in NEXT_VARS) {
              NEXT = NEXT_VARS[param];
              CURRENT = CURRENT_VARS[param];
              var parts = loop(currentState[param].length, function(i) {
                return block.def(NEXT, "[", i, "]");
              });
              block(env.cond(parts.map(function(p, i) {
                return p + "!==" + CURRENT + "[" + i + "]";
              }).join("||")).then(
                GL,
                ".",
                GL_VARIABLES[param],
                "(",
                parts,
                ");",
                parts.map(function(p, i) {
                  return CURRENT + "[" + i + "]=" + p;
                }).join(";"),
                ";"
              ));
            } else {
              NEXT = block.def(NEXT_STATE, ".", param);
              var ifte = env.cond(NEXT, "!==", CURRENT_STATE, ".", param);
              block(ifte);
              if (param in GL_FLAGS) {
                ifte(
                  env.cond(NEXT).then(GL, ".enable(", GL_FLAGS[param], ");").else(GL, ".disable(", GL_FLAGS[param], ");"),
                  CURRENT_STATE,
                  ".",
                  param,
                  "=",
                  NEXT,
                  ";"
                );
              } else {
                ifte(
                  GL,
                  ".",
                  GL_VARIABLES[param],
                  "(",
                  NEXT,
                  ");",
                  CURRENT_STATE,
                  ".",
                  param,
                  "=",
                  NEXT,
                  ";"
                );
              }
            }
          });
          if (Object.keys(args.state).length === 0) {
            block(CURRENT_STATE, ".dirty=false;");
          }
          scope(block);
        }
        function emitSetOptions(env, scope, options, filter) {
          var shared = env.shared;
          var CURRENT_VARS = env.current;
          var CURRENT_STATE = shared.current;
          var GL = shared.gl;
          var VALUE;
          sortState(Object.keys(options)).forEach(function(param) {
            var defn = options[param];
            if (filter && !filter(defn)) {
              return;
            }
            var variable = defn.append(env, scope);
            if (GL_FLAGS[param]) {
              var flag = GL_FLAGS[param];
              if (isStatic(defn)) {
                VALUE = env.link(variable, { stable: true });
                scope(env.cond(VALUE).then(GL, ".enable(", flag, ");").else(GL, ".disable(", flag, ");"));
                scope(CURRENT_STATE, ".", param, "=", VALUE, ";");
              } else {
                scope(env.cond(variable).then(GL, ".enable(", flag, ");").else(GL, ".disable(", flag, ");"));
                scope(CURRENT_STATE, ".", param, "=", variable, ";");
              }
            } else if (isArrayLike(variable)) {
              var CURRENT = CURRENT_VARS[param];
              scope(
                GL,
                ".",
                GL_VARIABLES[param],
                "(",
                variable,
                ");",
                variable.map(function(v, i) {
                  return CURRENT + "[" + i + "]=" + v;
                }).join(";"),
                ";"
              );
            } else {
              if (isStatic(defn)) {
                VALUE = env.link(variable, { stable: true });
                scope(
                  GL,
                  ".",
                  GL_VARIABLES[param],
                  "(",
                  VALUE,
                  ");",
                  CURRENT_STATE,
                  ".",
                  param,
                  "=",
                  VALUE,
                  ";"
                );
              } else {
                scope(
                  GL,
                  ".",
                  GL_VARIABLES[param],
                  "(",
                  variable,
                  ");",
                  CURRENT_STATE,
                  ".",
                  param,
                  "=",
                  variable,
                  ";"
                );
              }
            }
          });
        }
        function injectExtensions(env, scope) {
          if (extInstancing) {
            env.instancing = scope.def(
              env.shared.extensions,
              ".angle_instanced_arrays"
            );
          }
        }
        function emitProfile(env, scope, args, useScope, incrementCounter) {
          var shared = env.shared;
          var STATS = env.stats;
          var CURRENT_STATE = shared.current;
          var TIMER = shared.timer;
          var profileArg = args.profile;
          function perfCounter() {
            if (typeof performance === "undefined") {
              return "Date.now()";
            } else {
              return "performance.now()";
            }
          }
          var CPU_START, QUERY_COUNTER;
          function emitProfileStart(block) {
            CPU_START = scope.def();
            block(CPU_START, "=", perfCounter(), ";");
            if (typeof incrementCounter === "string") {
              block(STATS, ".count+=", incrementCounter, ";");
            } else {
              block(STATS, ".count++;");
            }
            if (timer) {
              if (useScope) {
                QUERY_COUNTER = scope.def();
                block(QUERY_COUNTER, "=", TIMER, ".getNumPendingQueries();");
              } else {
                block(TIMER, ".beginQuery(", STATS, ");");
              }
            }
          }
          function emitProfileEnd(block) {
            block(STATS, ".cpuTime+=", perfCounter(), "-", CPU_START, ";");
            if (timer) {
              if (useScope) {
                block(
                  TIMER,
                  ".pushScopeStats(",
                  QUERY_COUNTER,
                  ",",
                  TIMER,
                  ".getNumPendingQueries(),",
                  STATS,
                  ");"
                );
              } else {
                block(TIMER, ".endQuery();");
              }
            }
          }
          function scopeProfile(value) {
            var prev = scope.def(CURRENT_STATE, ".profile");
            scope(CURRENT_STATE, ".profile=", value, ";");
            scope.exit(CURRENT_STATE, ".profile=", prev, ";");
          }
          var USE_PROFILE;
          if (profileArg) {
            if (isStatic(profileArg)) {
              if (profileArg.enable) {
                emitProfileStart(scope);
                emitProfileEnd(scope.exit);
                scopeProfile("true");
              } else {
                scopeProfile("false");
              }
              return;
            }
            USE_PROFILE = profileArg.append(env, scope);
            scopeProfile(USE_PROFILE);
          } else {
            USE_PROFILE = scope.def(CURRENT_STATE, ".profile");
          }
          var start = env.block();
          emitProfileStart(start);
          scope("if(", USE_PROFILE, "){", start, "}");
          var end = env.block();
          emitProfileEnd(end);
          scope.exit("if(", USE_PROFILE, "){", end, "}");
        }
        function emitAttributes(env, scope, args, attributes, filter) {
          var shared = env.shared;
          function typeLength(x) {
            switch (x) {
              case GL_FLOAT_VEC2:
              case GL_INT_VEC2:
              case GL_BOOL_VEC2:
                return 2;
              case GL_FLOAT_VEC3:
              case GL_INT_VEC3:
              case GL_BOOL_VEC3:
                return 3;
              case GL_FLOAT_VEC4:
              case GL_INT_VEC4:
              case GL_BOOL_VEC4:
                return 4;
              default:
                return 1;
            }
          }
          function emitBindAttribute(ATTRIBUTE, size, record) {
            var GL = shared.gl;
            var LOCATION = scope.def(ATTRIBUTE, ".location");
            var BINDING = scope.def(shared.attributes, "[", LOCATION, "]");
            var STATE = record.state;
            var BUFFER = record.buffer;
            var CONST_COMPONENTS = [
              record.x,
              record.y,
              record.z,
              record.w
            ];
            var COMMON_KEYS = [
              "buffer",
              "normalized",
              "offset",
              "stride"
            ];
            function emitBuffer() {
              scope(
                "if(!",
                BINDING,
                ".buffer){",
                GL,
                ".enableVertexAttribArray(",
                LOCATION,
                ");}"
              );
              var TYPE = record.type;
              var SIZE;
              if (!record.size) {
                SIZE = size;
              } else {
                SIZE = scope.def(record.size, "||", size);
              }
              scope(
                "if(",
                BINDING,
                ".type!==",
                TYPE,
                "||",
                BINDING,
                ".size!==",
                SIZE,
                "||",
                COMMON_KEYS.map(function(key) {
                  return BINDING + "." + key + "!==" + record[key];
                }).join("||"),
                "){",
                GL,
                ".bindBuffer(",
                GL_ARRAY_BUFFER$2,
                ",",
                BUFFER,
                ".buffer);",
                GL,
                ".vertexAttribPointer(",
                [
                  LOCATION,
                  SIZE,
                  TYPE,
                  record.normalized,
                  record.stride,
                  record.offset
                ],
                ");",
                BINDING,
                ".type=",
                TYPE,
                ";",
                BINDING,
                ".size=",
                SIZE,
                ";",
                COMMON_KEYS.map(function(key) {
                  return BINDING + "." + key + "=" + record[key] + ";";
                }).join(""),
                "}"
              );
              if (extInstancing) {
                var DIVISOR = record.divisor;
                scope(
                  "if(",
                  BINDING,
                  ".divisor!==",
                  DIVISOR,
                  "){",
                  env.instancing,
                  ".vertexAttribDivisorANGLE(",
                  [LOCATION, DIVISOR],
                  ");",
                  BINDING,
                  ".divisor=",
                  DIVISOR,
                  ";}"
                );
              }
            }
            function emitConstant() {
              scope(
                "if(",
                BINDING,
                ".buffer){",
                GL,
                ".disableVertexAttribArray(",
                LOCATION,
                ");",
                BINDING,
                ".buffer=null;",
                "}if(",
                CUTE_COMPONENTS.map(function(c, i) {
                  return BINDING + "." + c + "!==" + CONST_COMPONENTS[i];
                }).join("||"),
                "){",
                GL,
                ".vertexAttrib4f(",
                LOCATION,
                ",",
                CONST_COMPONENTS,
                ");",
                CUTE_COMPONENTS.map(function(c, i) {
                  return BINDING + "." + c + "=" + CONST_COMPONENTS[i] + ";";
                }).join(""),
                "}"
              );
            }
            if (STATE === ATTRIB_STATE_POINTER) {
              emitBuffer();
            } else if (STATE === ATTRIB_STATE_CONSTANT) {
              emitConstant();
            } else {
              scope("if(", STATE, "===", ATTRIB_STATE_POINTER, "){");
              emitBuffer();
              scope("}else{");
              emitConstant();
              scope("}");
            }
          }
          attributes.forEach(function(attribute) {
            var name = attribute.name;
            var arg = args.attributes[name];
            var record;
            if (arg) {
              if (!filter(arg)) {
                return;
              }
              record = arg.append(env, scope);
            } else {
              if (!filter(SCOPE_DECL)) {
                return;
              }
              var scopeAttrib = env.scopeAttrib(name);
              record = {};
              Object.keys(new AttributeRecord2()).forEach(function(key) {
                record[key] = scope.def(scopeAttrib, ".", key);
              });
            }
            emitBindAttribute(
              env.link(attribute),
              typeLength(attribute.info.type),
              record
            );
          });
        }
        function emitUniforms(env, scope, args, uniforms, filter, isBatchInnerLoop) {
          var shared = env.shared;
          var GL = shared.gl;
          var infix;
          for (var i = 0; i < uniforms.length; ++i) {
            var uniform2 = uniforms[i];
            var name = uniform2.name;
            var type = uniform2.info.type;
            var arg = args.uniforms[name];
            var UNIFORM = env.link(uniform2);
            var LOCATION = UNIFORM + ".location";
            var VALUE;
            if (arg) {
              if (!filter(arg)) {
                continue;
              }
              if (isStatic(arg)) {
                var value = arg.value;
                if (type === GL_SAMPLER_2D || type === GL_SAMPLER_CUBE) {
                  var TEX_VALUE = env.link(value._texture || value.color[0]._texture);
                  scope(GL, ".uniform1i(", LOCATION, ",", TEX_VALUE + ".bind());");
                  scope.exit(TEX_VALUE, ".unbind();");
                } else if (type === GL_FLOAT_MAT2 || type === GL_FLOAT_MAT3 || type === GL_FLOAT_MAT4) {
                  var MAT_VALUE = env.global.def("new Float32Array([" + Array.prototype.slice.call(value) + "])");
                  var dim = 2;
                  if (type === GL_FLOAT_MAT3) {
                    dim = 3;
                  } else if (type === GL_FLOAT_MAT4) {
                    dim = 4;
                  }
                  scope(
                    GL,
                    ".uniformMatrix",
                    dim,
                    "fv(",
                    LOCATION,
                    ",false,",
                    MAT_VALUE,
                    ");"
                  );
                } else {
                  switch (type) {
                    case GL_FLOAT$7:
                      infix = "1f";
                      break;
                    case GL_FLOAT_VEC2:
                      infix = "2f";
                      break;
                    case GL_FLOAT_VEC3:
                      infix = "3f";
                      break;
                    case GL_FLOAT_VEC4:
                      infix = "4f";
                      break;
                    case GL_BOOL:
                      infix = "1i";
                      break;
                    case GL_INT$2:
                      infix = "1i";
                      break;
                    case GL_BOOL_VEC2:
                      infix = "2i";
                      break;
                    case GL_INT_VEC2:
                      infix = "2i";
                      break;
                    case GL_BOOL_VEC3:
                      infix = "3i";
                      break;
                    case GL_INT_VEC3:
                      infix = "3i";
                      break;
                    case GL_BOOL_VEC4:
                      infix = "4i";
                      break;
                    case GL_INT_VEC4:
                      infix = "4i";
                      break;
                  }
                  scope(
                    GL,
                    ".uniform",
                    infix,
                    "(",
                    LOCATION,
                    ",",
                    isArrayLike(value) ? Array.prototype.slice.call(value) : value,
                    ");"
                  );
                }
                continue;
              } else {
                VALUE = arg.append(env, scope);
              }
            } else {
              if (!filter(SCOPE_DECL)) {
                continue;
              }
              VALUE = scope.def(shared.uniforms, "[", stringStore.id(name), "]");
            }
            if (type === GL_SAMPLER_2D) {
              scope(
                "if(",
                VALUE,
                "&&",
                VALUE,
                '._reglType==="framebuffer"){',
                VALUE,
                "=",
                VALUE,
                ".color[0];",
                "}"
              );
            } else if (type === GL_SAMPLER_CUBE) {
              scope(
                "if(",
                VALUE,
                "&&",
                VALUE,
                '._reglType==="framebufferCube"){',
                VALUE,
                "=",
                VALUE,
                ".color[0];",
                "}"
              );
            }
            var unroll = 1;
            switch (type) {
              case GL_SAMPLER_2D:
              case GL_SAMPLER_CUBE:
                var TEX = scope.def(VALUE, "._texture");
                scope(GL, ".uniform1i(", LOCATION, ",", TEX, ".bind());");
                scope.exit(TEX, ".unbind();");
                continue;
              case GL_INT$2:
              case GL_BOOL:
                infix = "1i";
                break;
              case GL_INT_VEC2:
              case GL_BOOL_VEC2:
                infix = "2i";
                unroll = 2;
                break;
              case GL_INT_VEC3:
              case GL_BOOL_VEC3:
                infix = "3i";
                unroll = 3;
                break;
              case GL_INT_VEC4:
              case GL_BOOL_VEC4:
                infix = "4i";
                unroll = 4;
                break;
              case GL_FLOAT$7:
                infix = "1f";
                break;
              case GL_FLOAT_VEC2:
                infix = "2f";
                unroll = 2;
                break;
              case GL_FLOAT_VEC3:
                infix = "3f";
                unroll = 3;
                break;
              case GL_FLOAT_VEC4:
                infix = "4f";
                unroll = 4;
                break;
              case GL_FLOAT_MAT2:
                infix = "Matrix2fv";
                break;
              case GL_FLOAT_MAT3:
                infix = "Matrix3fv";
                break;
              case GL_FLOAT_MAT4:
                infix = "Matrix4fv";
                break;
            }
            if (infix.charAt(0) === "M") {
              scope(GL, ".uniform", infix, "(", LOCATION, ",");
              var matSize = Math.pow(type - GL_FLOAT_MAT2 + 2, 2);
              var STORAGE = env.global.def("new Float32Array(", matSize, ")");
              if (Array.isArray(VALUE)) {
                scope(
                  "false,(",
                  loop(matSize, function(i2) {
                    return STORAGE + "[" + i2 + "]=" + VALUE[i2];
                  }),
                  ",",
                  STORAGE,
                  ")"
                );
              } else {
                scope(
                  "false,(Array.isArray(",
                  VALUE,
                  ")||",
                  VALUE,
                  " instanceof Float32Array)?",
                  VALUE,
                  ":(",
                  loop(matSize, function(i2) {
                    return STORAGE + "[" + i2 + "]=" + VALUE + "[" + i2 + "]";
                  }),
                  ",",
                  STORAGE,
                  ")"
                );
              }
              scope(");");
            } else if (unroll > 1) {
              var prev = [];
              var cur = [];
              for (var j = 0; j < unroll; ++j) {
                if (Array.isArray(VALUE)) {
                  cur.push(VALUE[j]);
                } else {
                  cur.push(scope.def(VALUE + "[" + j + "]"));
                }
                if (isBatchInnerLoop) {
                  prev.push(scope.def());
                }
              }
              if (isBatchInnerLoop) {
                scope("if(!", env.batchId, "||", prev.map(function(p, i2) {
                  return p + "!==" + cur[i2];
                }).join("||"), "){", prev.map(function(p, i2) {
                  return p + "=" + cur[i2] + ";";
                }).join(""));
              }
              scope(GL, ".uniform", infix, "(", LOCATION, ",", cur.join(","), ");");
              if (isBatchInnerLoop) {
                scope("}");
              }
            } else {
              if (isBatchInnerLoop) {
                var prevS = scope.def();
                scope(
                  "if(!",
                  env.batchId,
                  "||",
                  prevS,
                  "!==",
                  VALUE,
                  "){",
                  prevS,
                  "=",
                  VALUE,
                  ";"
                );
              }
              scope(GL, ".uniform", infix, "(", LOCATION, ",", VALUE, ");");
              if (isBatchInnerLoop) {
                scope("}");
              }
            }
          }
        }
        function emitDraw(env, outer, inner, args) {
          var shared = env.shared;
          var GL = shared.gl;
          var DRAW_STATE = shared.draw;
          var drawOptions = args.draw;
          function emitElements() {
            var defn = drawOptions.elements;
            var ELEMENTS2;
            var scope = outer;
            if (defn) {
              if (defn.contextDep && args.contextDynamic || defn.propDep) {
                scope = inner;
              }
              ELEMENTS2 = defn.append(env, scope);
              if (drawOptions.elementsActive) {
                scope(
                  "if(" + ELEMENTS2 + ")" + GL + ".bindBuffer(" + GL_ELEMENT_ARRAY_BUFFER$2 + "," + ELEMENTS2 + ".buffer.buffer);"
                );
              }
            } else {
              ELEMENTS2 = scope.def();
              scope(
                ELEMENTS2,
                "=",
                DRAW_STATE,
                ".",
                S_ELEMENTS,
                ";",
                "if(",
                ELEMENTS2,
                "){",
                GL,
                ".bindBuffer(",
                GL_ELEMENT_ARRAY_BUFFER$2,
                ",",
                ELEMENTS2,
                ".buffer.buffer);}",
                "else if(",
                shared.vao,
                ".currentVAO){",
                ELEMENTS2,
                "=",
                env.shared.elements + ".getElements(" + shared.vao,
                ".currentVAO.elements);",
                !extVertexArrays ? "if(" + ELEMENTS2 + ")" + GL + ".bindBuffer(" + GL_ELEMENT_ARRAY_BUFFER$2 + "," + ELEMENTS2 + ".buffer.buffer);" : "",
                "}"
              );
            }
            return ELEMENTS2;
          }
          function emitCount() {
            var defn = drawOptions.count;
            var COUNT2;
            var scope = outer;
            if (defn) {
              if (defn.contextDep && args.contextDynamic || defn.propDep) {
                scope = inner;
              }
              COUNT2 = defn.append(env, scope);
            } else {
              COUNT2 = scope.def(DRAW_STATE, ".", S_COUNT);
            }
            return COUNT2;
          }
          var ELEMENTS = emitElements();
          function emitValue(name) {
            var defn = drawOptions[name];
            if (defn) {
              if (defn.contextDep && args.contextDynamic || defn.propDep) {
                return defn.append(env, inner);
              } else {
                return defn.append(env, outer);
              }
            } else {
              return outer.def(DRAW_STATE, ".", name);
            }
          }
          var PRIMITIVE = emitValue(S_PRIMITIVE);
          var OFFSET = emitValue(S_OFFSET);
          var COUNT = emitCount();
          if (typeof COUNT === "number") {
            if (COUNT === 0) {
              return;
            }
          } else {
            inner("if(", COUNT, "){");
            inner.exit("}");
          }
          var INSTANCES, EXT_INSTANCING;
          if (extInstancing) {
            INSTANCES = emitValue(S_INSTANCES);
            EXT_INSTANCING = env.instancing;
          }
          var ELEMENT_TYPE = ELEMENTS + ".type";
          var elementsStatic = drawOptions.elements && isStatic(drawOptions.elements) && !drawOptions.vaoActive;
          function emitInstancing() {
            function drawElements() {
              inner(EXT_INSTANCING, ".drawElementsInstancedANGLE(", [
                PRIMITIVE,
                COUNT,
                ELEMENT_TYPE,
                OFFSET + "<<((" + ELEMENT_TYPE + "-" + GL_UNSIGNED_BYTE$7 + ")>>1)",
                INSTANCES
              ], ");");
            }
            function drawArrays() {
              inner(
                EXT_INSTANCING,
                ".drawArraysInstancedANGLE(",
                [PRIMITIVE, OFFSET, COUNT, INSTANCES],
                ");"
              );
            }
            if (ELEMENTS && ELEMENTS !== "null") {
              if (!elementsStatic) {
                inner("if(", ELEMENTS, "){");
                drawElements();
                inner("}else{");
                drawArrays();
                inner("}");
              } else {
                drawElements();
              }
            } else {
              drawArrays();
            }
          }
          function emitRegular() {
            function drawElements() {
              inner(GL + ".drawElements(" + [
                PRIMITIVE,
                COUNT,
                ELEMENT_TYPE,
                OFFSET + "<<((" + ELEMENT_TYPE + "-" + GL_UNSIGNED_BYTE$7 + ")>>1)"
              ] + ");");
            }
            function drawArrays() {
              inner(GL + ".drawArrays(" + [PRIMITIVE, OFFSET, COUNT] + ");");
            }
            if (ELEMENTS && ELEMENTS !== "null") {
              if (!elementsStatic) {
                inner("if(", ELEMENTS, "){");
                drawElements();
                inner("}else{");
                drawArrays();
                inner("}");
              } else {
                drawElements();
              }
            } else {
              drawArrays();
            }
          }
          if (extInstancing && (typeof INSTANCES !== "number" || INSTANCES >= 0)) {
            if (typeof INSTANCES === "string") {
              inner("if(", INSTANCES, ">0){");
              emitInstancing();
              inner("}else if(", INSTANCES, "<0){");
              emitRegular();
              inner("}");
            } else {
              emitInstancing();
            }
          } else {
            emitRegular();
          }
        }
        function createBody(emitBody, parentEnv, args, program, count) {
          var env = createREGLEnvironment();
          var scope = env.proc("body", count);
          if (extInstancing) {
            env.instancing = scope.def(
              env.shared.extensions,
              ".angle_instanced_arrays"
            );
          }
          emitBody(env, scope, args, program);
          return env.compile().body;
        }
        function emitDrawBody(env, draw, args, program) {
          injectExtensions(env, draw);
          if (args.useVAO) {
            if (args.drawVAO) {
              draw(env.shared.vao, ".setVAO(", args.drawVAO.append(env, draw), ");");
            } else {
              draw(env.shared.vao, ".setVAO(", env.shared.vao, ".targetVAO);");
            }
          } else {
            draw(env.shared.vao, ".setVAO(null);");
            emitAttributes(env, draw, args, program.attributes, function() {
              return true;
            });
          }
          emitUniforms(env, draw, args, program.uniforms, function() {
            return true;
          }, false);
          emitDraw(env, draw, draw, args);
        }
        function emitDrawProc(env, args) {
          var draw = env.proc("draw", 1);
          injectExtensions(env, draw);
          emitContext(env, draw, args.context);
          emitPollFramebuffer(env, draw, args.framebuffer);
          emitPollState(env, draw, args);
          emitSetOptions(env, draw, args.state);
          emitProfile(env, draw, args, false, true);
          var program = args.shader.progVar.append(env, draw);
          draw(env.shared.gl, ".useProgram(", program, ".program);");
          if (args.shader.program) {
            emitDrawBody(env, draw, args, args.shader.program);
          } else {
            draw(env.shared.vao, ".setVAO(null);");
            var drawCache = env.global.def("{}");
            var PROG_ID = draw.def(program, ".id");
            var CACHED_PROC = draw.def(drawCache, "[", PROG_ID, "]");
            draw(
              env.cond(CACHED_PROC).then(CACHED_PROC, ".call(this,a0);").else(
                CACHED_PROC,
                "=",
                drawCache,
                "[",
                PROG_ID,
                "]=",
                env.link(function(program2) {
                  return createBody(emitDrawBody, env, args, program2, 1);
                }),
                "(",
                program,
                ");",
                CACHED_PROC,
                ".call(this,a0);"
              )
            );
          }
          if (Object.keys(args.state).length > 0) {
            draw(env.shared.current, ".dirty=true;");
          }
          if (env.shared.vao) {
            draw(env.shared.vao, ".setVAO(null);");
          }
        }
        function emitBatchDynamicShaderBody(env, scope, args, program) {
          env.batchId = "a1";
          injectExtensions(env, scope);
          function all() {
            return true;
          }
          emitAttributes(env, scope, args, program.attributes, all);
          emitUniforms(env, scope, args, program.uniforms, all, false);
          emitDraw(env, scope, scope, args);
        }
        function emitBatchBody(env, scope, args, program) {
          injectExtensions(env, scope);
          var contextDynamic = args.contextDep;
          var BATCH_ID = scope.def();
          var PROP_LIST = "a0";
          var NUM_PROPS = "a1";
          var PROPS = scope.def();
          env.shared.props = PROPS;
          env.batchId = BATCH_ID;
          var outer = env.scope();
          var inner = env.scope();
          scope(
            outer.entry,
            "for(",
            BATCH_ID,
            "=0;",
            BATCH_ID,
            "<",
            NUM_PROPS,
            ";++",
            BATCH_ID,
            "){",
            PROPS,
            "=",
            PROP_LIST,
            "[",
            BATCH_ID,
            "];",
            inner,
            "}",
            outer.exit
          );
          function isInnerDefn(defn) {
            return defn.contextDep && contextDynamic || defn.propDep;
          }
          function isOuterDefn(defn) {
            return !isInnerDefn(defn);
          }
          if (args.needsContext) {
            emitContext(env, inner, args.context);
          }
          if (args.needsFramebuffer) {
            emitPollFramebuffer(env, inner, args.framebuffer);
          }
          emitSetOptions(env, inner, args.state, isInnerDefn);
          if (args.profile && isInnerDefn(args.profile)) {
            emitProfile(env, inner, args, false, true);
          }
          if (!program) {
            var progCache = env.global.def("{}");
            var PROGRAM = args.shader.progVar.append(env, inner);
            var PROG_ID = inner.def(PROGRAM, ".id");
            var CACHED_PROC = inner.def(progCache, "[", PROG_ID, "]");
            inner(
              env.shared.gl,
              ".useProgram(",
              PROGRAM,
              ".program);",
              "if(!",
              CACHED_PROC,
              "){",
              CACHED_PROC,
              "=",
              progCache,
              "[",
              PROG_ID,
              "]=",
              env.link(function(program2) {
                return createBody(
                  emitBatchDynamicShaderBody,
                  env,
                  args,
                  program2,
                  2
                );
              }),
              "(",
              PROGRAM,
              ");}",
              CACHED_PROC,
              ".call(this,a0[",
              BATCH_ID,
              "],",
              BATCH_ID,
              ");"
            );
          } else {
            if (args.useVAO) {
              if (args.drawVAO) {
                if (isInnerDefn(args.drawVAO)) {
                  inner(env.shared.vao, ".setVAO(", args.drawVAO.append(env, inner), ");");
                } else {
                  outer(env.shared.vao, ".setVAO(", args.drawVAO.append(env, outer), ");");
                }
              } else {
                outer(env.shared.vao, ".setVAO(", env.shared.vao, ".targetVAO);");
              }
            } else {
              outer(env.shared.vao, ".setVAO(null);");
              emitAttributes(env, outer, args, program.attributes, isOuterDefn);
              emitAttributes(env, inner, args, program.attributes, isInnerDefn);
            }
            emitUniforms(env, outer, args, program.uniforms, isOuterDefn, false);
            emitUniforms(env, inner, args, program.uniforms, isInnerDefn, true);
            emitDraw(env, outer, inner, args);
          }
        }
        function emitBatchProc(env, args) {
          var batch = env.proc("batch", 2);
          env.batchId = "0";
          injectExtensions(env, batch);
          var contextDynamic = false;
          var needsContext = true;
          Object.keys(args.context).forEach(function(name) {
            contextDynamic = contextDynamic || args.context[name].propDep;
          });
          if (!contextDynamic) {
            emitContext(env, batch, args.context);
            needsContext = false;
          }
          var framebuffer = args.framebuffer;
          var needsFramebuffer = false;
          if (framebuffer) {
            if (framebuffer.propDep) {
              contextDynamic = needsFramebuffer = true;
            } else if (framebuffer.contextDep && contextDynamic) {
              needsFramebuffer = true;
            }
            if (!needsFramebuffer) {
              emitPollFramebuffer(env, batch, framebuffer);
            }
          } else {
            emitPollFramebuffer(env, batch, null);
          }
          if (args.state.viewport && args.state.viewport.propDep) {
            contextDynamic = true;
          }
          function isInnerDefn(defn) {
            return defn.contextDep && contextDynamic || defn.propDep;
          }
          emitPollState(env, batch, args);
          emitSetOptions(env, batch, args.state, function(defn) {
            return !isInnerDefn(defn);
          });
          if (!args.profile || !isInnerDefn(args.profile)) {
            emitProfile(env, batch, args, false, "a1");
          }
          args.contextDep = contextDynamic;
          args.needsContext = needsContext;
          args.needsFramebuffer = needsFramebuffer;
          var progDefn = args.shader.progVar;
          if (progDefn.contextDep && contextDynamic || progDefn.propDep) {
            emitBatchBody(
              env,
              batch,
              args,
              null
            );
          } else {
            var PROGRAM = progDefn.append(env, batch);
            batch(env.shared.gl, ".useProgram(", PROGRAM, ".program);");
            if (args.shader.program) {
              emitBatchBody(
                env,
                batch,
                args,
                args.shader.program
              );
            } else {
              batch(env.shared.vao, ".setVAO(null);");
              var batchCache = env.global.def("{}");
              var PROG_ID = batch.def(PROGRAM, ".id");
              var CACHED_PROC = batch.def(batchCache, "[", PROG_ID, "]");
              batch(
                env.cond(CACHED_PROC).then(CACHED_PROC, ".call(this,a0,a1);").else(
                  CACHED_PROC,
                  "=",
                  batchCache,
                  "[",
                  PROG_ID,
                  "]=",
                  env.link(function(program) {
                    return createBody(emitBatchBody, env, args, program, 2);
                  }),
                  "(",
                  PROGRAM,
                  ");",
                  CACHED_PROC,
                  ".call(this,a0,a1);"
                )
              );
            }
          }
          if (Object.keys(args.state).length > 0) {
            batch(env.shared.current, ".dirty=true;");
          }
          if (env.shared.vao) {
            batch(env.shared.vao, ".setVAO(null);");
          }
        }
        function emitScopeProc(env, args) {
          var scope = env.proc("scope", 3);
          env.batchId = "a2";
          var shared = env.shared;
          var CURRENT_STATE = shared.current;
          emitContext(env, scope, args.context);
          if (args.framebuffer) {
            args.framebuffer.append(env, scope);
          }
          sortState(Object.keys(args.state)).forEach(function(name) {
            var defn = args.state[name];
            var value = defn.append(env, scope);
            if (isArrayLike(value)) {
              value.forEach(function(v, i) {
                if (hasVariableReference(v)) {
                  scope.set(env.next[name], "[" + i + "]", v);
                } else {
                  scope.set(env.next[name], "[" + i + "]", env.link(v, { stable: true }));
                }
              });
            } else {
              if (isStatic(defn)) {
                scope.set(shared.next, "." + name, env.link(value, { stable: true }));
              } else {
                scope.set(shared.next, "." + name, value);
              }
            }
          });
          emitProfile(env, scope, args, true, true);
          [S_ELEMENTS, S_OFFSET, S_COUNT, S_INSTANCES, S_PRIMITIVE].forEach(
            function(opt) {
              var variable = args.draw[opt];
              if (!variable) {
                return;
              }
              var VARIABLE2 = variable.append(env, scope);
              if (hasVariableReference(VARIABLE2)) {
                scope.set(shared.draw, "." + opt, VARIABLE2);
              } else {
                scope.set(shared.draw, "." + opt, env.link(VARIABLE2), { stable: true });
              }
            }
          );
          Object.keys(args.uniforms).forEach(function(opt) {
            var value = args.uniforms[opt].append(env, scope);
            if (Array.isArray(value)) {
              value = "[" + value.map(function(v) {
                if (hasVariableReference(v)) {
                  return v;
                } else {
                  return env.link(v, { stable: true });
                }
              }) + "]";
            }
            scope.set(
              shared.uniforms,
              "[" + env.link(stringStore.id(opt), { stable: true }) + "]",
              value
            );
          });
          Object.keys(args.attributes).forEach(function(name) {
            var record = args.attributes[name].append(env, scope);
            var scopeAttrib = env.scopeAttrib(name);
            Object.keys(new AttributeRecord2()).forEach(function(prop) {
              scope.set(scopeAttrib, "." + prop, record[prop]);
            });
          });
          if (args.scopeVAO) {
            var VARIABLE = args.scopeVAO.append(env, scope);
            if (hasVariableReference(VARIABLE)) {
              scope.set(shared.vao, ".targetVAO", VARIABLE);
            } else {
              scope.set(shared.vao, ".targetVAO", env.link(VARIABLE, { stable: true }));
            }
          }
          function saveShader(name) {
            var shader = args.shader[name];
            if (shader) {
              var VARIABLE2 = shader.append(env, scope);
              if (hasVariableReference(VARIABLE2)) {
                scope.set(shared.shader, "." + name, VARIABLE2);
              } else {
                scope.set(shared.shader, "." + name, env.link(VARIABLE2, { stable: true }));
              }
            }
          }
          saveShader(S_VERT);
          saveShader(S_FRAG);
          if (Object.keys(args.state).length > 0) {
            scope(CURRENT_STATE, ".dirty=true;");
            scope.exit(CURRENT_STATE, ".dirty=true;");
          }
          scope("a1(", env.shared.context, ",a0,", env.batchId, ");");
        }
        function isDynamicObject(object) {
          if (typeof object !== "object" || isArrayLike(object)) {
            return;
          }
          var props = Object.keys(object);
          for (var i = 0; i < props.length; ++i) {
            if (dynamic.isDynamic(object[props[i]])) {
              return true;
            }
          }
          return false;
        }
        function splatObject(env, options, name) {
          var object = options.static[name];
          if (!object || !isDynamicObject(object)) {
            return;
          }
          var globals = env.global;
          var keys = Object.keys(object);
          var thisDep = false;
          var contextDep = false;
          var propDep = false;
          var objectRef = env.global.def("{}");
          keys.forEach(function(key) {
            var value = object[key];
            if (dynamic.isDynamic(value)) {
              if (typeof value === "function") {
                value = object[key] = dynamic.unbox(value);
              }
              var deps = createDynamicDecl(value, null);
              thisDep = thisDep || deps.thisDep;
              propDep = propDep || deps.propDep;
              contextDep = contextDep || deps.contextDep;
            } else {
              globals(objectRef, ".", key, "=");
              switch (typeof value) {
                case "number":
                  globals(value);
                  break;
                case "string":
                  globals('"', value, '"');
                  break;
                case "object":
                  if (Array.isArray(value)) {
                    globals("[", value.join(), "]");
                  }
                  break;
                default:
                  globals(env.link(value));
                  break;
              }
              globals(";");
            }
          });
          function appendBlock(env2, block) {
            keys.forEach(function(key) {
              var value = object[key];
              if (!dynamic.isDynamic(value)) {
                return;
              }
              var ref = env2.invoke(block, value);
              block(objectRef, ".", key, "=", ref, ";");
            });
          }
          options.dynamic[name] = new dynamic.DynamicVariable(DYN_THUNK, {
            thisDep,
            contextDep,
            propDep,
            ref: objectRef,
            append: appendBlock
          });
          delete options.static[name];
        }
        function compileCommand(options, attributes, uniforms, context, stats2) {
          var env = createREGLEnvironment();
          env.stats = env.link(stats2);
          Object.keys(attributes.static).forEach(function(key) {
            splatObject(env, attributes, key);
          });
          NESTED_OPTIONS.forEach(function(name) {
            splatObject(env, options, name);
          });
          var args = parseArguments(options, attributes, uniforms, context, env);
          if (args.shader.program) {
            args.shader.program.attributes.sort(function(a, b) {
              return a.name < b.name ? -1 : 1;
            });
            args.shader.program.uniforms.sort(function(a, b) {
              return a.name < b.name ? -1 : 1;
            });
          }
          emitDrawProc(env, args);
          emitScopeProc(env, args);
          emitBatchProc(env, args);
          return extend(env.compile(), {
            destroy: function() {
              args.shader.program.destroy();
            }
          });
        }
        return {
          next: nextState,
          current: currentState,
          procs: (function() {
            var env = createREGLEnvironment();
            var poll = env.proc("poll");
            var refresh = env.proc("refresh");
            var common = env.block();
            poll(common);
            refresh(common);
            var shared = env.shared;
            var GL = shared.gl;
            var NEXT_STATE = shared.next;
            var CURRENT_STATE = shared.current;
            common(CURRENT_STATE, ".dirty=false;");
            emitPollFramebuffer(env, poll);
            emitPollFramebuffer(env, refresh, null, true);
            var INSTANCING;
            if (extInstancing) {
              INSTANCING = env.link(extInstancing);
            }
            if (extensions.oes_vertex_array_object) {
              refresh(env.link(extensions.oes_vertex_array_object), ".bindVertexArrayOES(null);");
            }
            var BINDING = refresh.def(shared.attributes);
            var TEMP_BINDING = refresh.def(0);
            var ifte = env.cond(TEMP_BINDING, ".buffer");
            ifte.then(
              GL,
              ".enableVertexAttribArray(i);",
              GL,
              ".bindBuffer(",
              GL_ARRAY_BUFFER$2,
              ",",
              TEMP_BINDING,
              ".buffer.buffer);",
              GL,
              ".vertexAttribPointer(i,",
              TEMP_BINDING,
              ".size,",
              TEMP_BINDING,
              ".type,",
              TEMP_BINDING,
              ".normalized,",
              TEMP_BINDING,
              ".stride,",
              TEMP_BINDING,
              ".offset);"
            ).else(
              GL,
              ".disableVertexAttribArray(i);",
              GL,
              ".vertexAttrib4f(i,",
              TEMP_BINDING,
              ".x,",
              TEMP_BINDING,
              ".y,",
              TEMP_BINDING,
              ".z,",
              TEMP_BINDING,
              ".w);",
              TEMP_BINDING,
              ".buffer=null;"
            );
            var MAX_ATTRIBUTES = env.link(limits.maxAttributes, { stable: true });
            refresh(
              "for(var i=0;i<",
              MAX_ATTRIBUTES,
              ";++i){",
              TEMP_BINDING,
              "=",
              BINDING,
              "[i];",
              ifte,
              "}"
            );
            if (extInstancing) {
              refresh(
                "for(var i=0;i<",
                MAX_ATTRIBUTES,
                ";++i){",
                INSTANCING,
                ".vertexAttribDivisorANGLE(i,",
                BINDING,
                "[i].divisor);",
                "}"
              );
            }
            refresh(
              env.shared.vao,
              ".currentVAO=null;",
              env.shared.vao,
              ".setVAO(",
              env.shared.vao,
              ".targetVAO);"
            );
            Object.keys(GL_FLAGS).forEach(function(flag) {
              var cap = GL_FLAGS[flag];
              var NEXT = common.def(NEXT_STATE, ".", flag);
              var block = env.block();
              block(
                "if(",
                NEXT,
                "){",
                GL,
                ".enable(",
                cap,
                ")}else{",
                GL,
                ".disable(",
                cap,
                ")}",
                CURRENT_STATE,
                ".",
                flag,
                "=",
                NEXT,
                ";"
              );
              refresh(block);
              poll(
                "if(",
                NEXT,
                "!==",
                CURRENT_STATE,
                ".",
                flag,
                "){",
                block,
                "}"
              );
            });
            Object.keys(GL_VARIABLES).forEach(function(name) {
              var func = GL_VARIABLES[name];
              var init = currentState[name];
              var NEXT, CURRENT;
              var block = env.block();
              block(GL, ".", func, "(");
              if (isArrayLike(init)) {
                var n = init.length;
                NEXT = env.global.def(NEXT_STATE, ".", name);
                CURRENT = env.global.def(CURRENT_STATE, ".", name);
                block(
                  loop(n, function(i) {
                    return NEXT + "[" + i + "]";
                  }),
                  ");",
                  loop(n, function(i) {
                    return CURRENT + "[" + i + "]=" + NEXT + "[" + i + "];";
                  }).join("")
                );
                poll(
                  "if(",
                  loop(n, function(i) {
                    return NEXT + "[" + i + "]!==" + CURRENT + "[" + i + "]";
                  }).join("||"),
                  "){",
                  block,
                  "}"
                );
              } else {
                NEXT = common.def(NEXT_STATE, ".", name);
                CURRENT = common.def(CURRENT_STATE, ".", name);
                block(
                  NEXT,
                  ");",
                  CURRENT_STATE,
                  ".",
                  name,
                  "=",
                  NEXT,
                  ";"
                );
                poll(
                  "if(",
                  NEXT,
                  "!==",
                  CURRENT,
                  "){",
                  block,
                  "}"
                );
              }
              refresh(block);
            });
            return env.compile();
          })(),
          compile: compileCommand
        };
      }
      function stats() {
        return {
          vaoCount: 0,
          bufferCount: 0,
          elementsCount: 0,
          framebufferCount: 0,
          shaderCount: 0,
          textureCount: 0,
          cubeCount: 0,
          renderbufferCount: 0,
          maxTextureUnits: 0
        };
      }
      var GL_QUERY_RESULT_EXT = 34918;
      var GL_QUERY_RESULT_AVAILABLE_EXT = 34919;
      var GL_TIME_ELAPSED_EXT = 35007;
      var createTimer = function(gl, extensions) {
        if (!extensions.ext_disjoint_timer_query) {
          return null;
        }
        var queryPool = [];
        function allocQuery() {
          return queryPool.pop() || extensions.ext_disjoint_timer_query.createQueryEXT();
        }
        function freeQuery(query) {
          queryPool.push(query);
        }
        var pendingQueries = [];
        function beginQuery(stats2) {
          var query = allocQuery();
          extensions.ext_disjoint_timer_query.beginQueryEXT(GL_TIME_ELAPSED_EXT, query);
          pendingQueries.push(query);
          pushScopeStats(pendingQueries.length - 1, pendingQueries.length, stats2);
        }
        function endQuery() {
          extensions.ext_disjoint_timer_query.endQueryEXT(GL_TIME_ELAPSED_EXT);
        }
        function PendingStats() {
          this.startQueryIndex = -1;
          this.endQueryIndex = -1;
          this.sum = 0;
          this.stats = null;
        }
        var pendingStatsPool = [];
        function allocPendingStats() {
          return pendingStatsPool.pop() || new PendingStats();
        }
        function freePendingStats(pendingStats2) {
          pendingStatsPool.push(pendingStats2);
        }
        var pendingStats = [];
        function pushScopeStats(start, end, stats2) {
          var ps = allocPendingStats();
          ps.startQueryIndex = start;
          ps.endQueryIndex = end;
          ps.sum = 0;
          ps.stats = stats2;
          pendingStats.push(ps);
        }
        var timeSum = [];
        var queryPtr = [];
        function update() {
          var ptr, i;
          var n = pendingQueries.length;
          if (n === 0) {
            return;
          }
          queryPtr.length = Math.max(queryPtr.length, n + 1);
          timeSum.length = Math.max(timeSum.length, n + 1);
          timeSum[0] = 0;
          queryPtr[0] = 0;
          var queryTime = 0;
          ptr = 0;
          for (i = 0; i < pendingQueries.length; ++i) {
            var query = pendingQueries[i];
            if (extensions.ext_disjoint_timer_query.getQueryObjectEXT(query, GL_QUERY_RESULT_AVAILABLE_EXT)) {
              queryTime += extensions.ext_disjoint_timer_query.getQueryObjectEXT(query, GL_QUERY_RESULT_EXT);
              freeQuery(query);
            } else {
              pendingQueries[ptr++] = query;
            }
            timeSum[i + 1] = queryTime;
            queryPtr[i + 1] = ptr;
          }
          pendingQueries.length = ptr;
          ptr = 0;
          for (i = 0; i < pendingStats.length; ++i) {
            var stats2 = pendingStats[i];
            var start = stats2.startQueryIndex;
            var end = stats2.endQueryIndex;
            stats2.sum += timeSum[end] - timeSum[start];
            var startPtr = queryPtr[start];
            var endPtr = queryPtr[end];
            if (endPtr === startPtr) {
              stats2.stats.gpuTime += stats2.sum / 1e6;
              freePendingStats(stats2);
            } else {
              stats2.startQueryIndex = startPtr;
              stats2.endQueryIndex = endPtr;
              pendingStats[ptr++] = stats2;
            }
          }
          pendingStats.length = ptr;
        }
        return {
          beginQuery,
          endQuery,
          pushScopeStats,
          update,
          getNumPendingQueries: function() {
            return pendingQueries.length;
          },
          clear: function() {
            queryPool.push.apply(queryPool, pendingQueries);
            for (var i = 0; i < queryPool.length; i++) {
              extensions.ext_disjoint_timer_query.deleteQueryEXT(queryPool[i]);
            }
            pendingQueries.length = 0;
            queryPool.length = 0;
          },
          restore: function() {
            pendingQueries.length = 0;
            queryPool.length = 0;
          }
        };
      };
      var GL_COLOR_BUFFER_BIT = 16384;
      var GL_DEPTH_BUFFER_BIT = 256;
      var GL_STENCIL_BUFFER_BIT = 1024;
      var GL_ARRAY_BUFFER = 34962;
      var CONTEXT_LOST_EVENT = "webglcontextlost";
      var CONTEXT_RESTORED_EVENT = "webglcontextrestored";
      var DYN_PROP = 1;
      var DYN_CONTEXT = 2;
      var DYN_STATE = 3;
      function find(haystack, needle) {
        for (var i = 0; i < haystack.length; ++i) {
          if (haystack[i] === needle) {
            return i;
          }
        }
        return -1;
      }
      function wrapREGL(args) {
        var config = parseArgs(args);
        if (!config) {
          return null;
        }
        var gl = config.gl;
        var glAttributes = gl.getContextAttributes();
        var contextLost = gl.isContextLost();
        var extensionState = createExtensionCache(gl, config);
        if (!extensionState) {
          return null;
        }
        var stringStore = createStringStore();
        var stats$$1 = stats();
        var cachedCode = config.cachedCode || {};
        var extensions = extensionState.extensions;
        var timer = createTimer(gl, extensions);
        var START_TIME = clock();
        var WIDTH = gl.drawingBufferWidth;
        var HEIGHT = gl.drawingBufferHeight;
        var contextState = {
          tick: 0,
          time: 0,
          viewportWidth: WIDTH,
          viewportHeight: HEIGHT,
          framebufferWidth: WIDTH,
          framebufferHeight: HEIGHT,
          drawingBufferWidth: WIDTH,
          drawingBufferHeight: HEIGHT,
          pixelRatio: config.pixelRatio
        };
        var uniformState = {};
        var drawState = {
          elements: null,
          primitive: 4,
          // GL_TRIANGLES
          count: -1,
          offset: 0,
          instances: -1
        };
        var limits = wrapLimits(gl, extensions);
        var bufferState = wrapBufferState(
          gl,
          stats$$1,
          config,
          destroyBuffer2
        );
        var elementState = wrapElementsState(gl, extensions, bufferState, stats$$1);
        var attributeState = wrapAttributeState(
          gl,
          extensions,
          limits,
          stats$$1,
          bufferState,
          elementState,
          drawState
        );
        function destroyBuffer2(buffer) {
          return attributeState.destroyBuffer(buffer);
        }
        var shaderState = wrapShaderState(gl, stringStore, stats$$1, config);
        var textureState = createTextureSet(
          gl,
          extensions,
          limits,
          function() {
            core.procs.poll();
          },
          contextState,
          stats$$1,
          config
        );
        var renderbufferState = wrapRenderbuffers(gl, extensions, limits, stats$$1, config);
        var framebufferState = wrapFBOState(
          gl,
          extensions,
          limits,
          textureState,
          renderbufferState,
          stats$$1
        );
        var core = reglCore(
          gl,
          stringStore,
          extensions,
          limits,
          bufferState,
          elementState,
          textureState,
          framebufferState,
          uniformState,
          attributeState,
          shaderState,
          drawState,
          contextState,
          timer,
          cachedCode,
          config
        );
        var readPixels2 = wrapReadPixels(
          gl,
          framebufferState,
          core.procs.poll,
          contextState,
          glAttributes,
          extensions,
          limits
        );
        var nextState = core.next;
        var canvas = gl.canvas;
        var rafCallbacks = [];
        var lossCallbacks = [];
        var restoreCallbacks = [];
        var destroyCallbacks = [config.onDestroy];
        var activeRAF = null;
        function handleRAF() {
          if (rafCallbacks.length === 0) {
            if (timer) {
              timer.update();
            }
            activeRAF = null;
            return;
          }
          activeRAF = raf.next(handleRAF);
          poll();
          for (var i = rafCallbacks.length - 1; i >= 0; --i) {
            var cb = rafCallbacks[i];
            if (cb) {
              cb(contextState, null, 0);
            }
          }
          gl.flush();
          if (timer) {
            timer.update();
          }
        }
        function startRAF() {
          if (!activeRAF && rafCallbacks.length > 0) {
            activeRAF = raf.next(handleRAF);
          }
        }
        function stopRAF() {
          if (activeRAF) {
            raf.cancel(handleRAF);
            activeRAF = null;
          }
        }
        function handleContextLoss(event) {
          event.preventDefault();
          contextLost = true;
          stopRAF();
          lossCallbacks.forEach(function(cb) {
            cb();
          });
        }
        function handleContextRestored(event) {
          gl.getError();
          contextLost = false;
          extensionState.restore();
          shaderState.restore();
          bufferState.restore();
          textureState.restore();
          renderbufferState.restore();
          framebufferState.restore();
          attributeState.restore();
          if (timer) {
            timer.restore();
          }
          core.procs.refresh();
          startRAF();
          restoreCallbacks.forEach(function(cb) {
            cb();
          });
        }
        if (canvas) {
          canvas.addEventListener(CONTEXT_LOST_EVENT, handleContextLoss, false);
          canvas.addEventListener(CONTEXT_RESTORED_EVENT, handleContextRestored, false);
        }
        function destroy() {
          rafCallbacks.length = 0;
          stopRAF();
          if (canvas) {
            canvas.removeEventListener(CONTEXT_LOST_EVENT, handleContextLoss);
            canvas.removeEventListener(CONTEXT_RESTORED_EVENT, handleContextRestored);
          }
          shaderState.clear();
          framebufferState.clear();
          renderbufferState.clear();
          attributeState.clear();
          textureState.clear();
          elementState.clear();
          bufferState.clear();
          if (timer) {
            timer.clear();
          }
          destroyCallbacks.forEach(function(cb) {
            cb();
          });
        }
        function compileProcedure(options) {
          function flattenNestedOptions(options2) {
            var result = extend({}, options2);
            delete result.uniforms;
            delete result.attributes;
            delete result.context;
            delete result.vao;
            if ("stencil" in result && result.stencil.op) {
              result.stencil.opBack = result.stencil.opFront = result.stencil.op;
              delete result.stencil.op;
            }
            function merge(name) {
              if (name in result) {
                var child = result[name];
                delete result[name];
                Object.keys(child).forEach(function(prop) {
                  result[name + "." + prop] = child[prop];
                });
              }
            }
            merge("blend");
            merge("depth");
            merge("cull");
            merge("stencil");
            merge("polygonOffset");
            merge("scissor");
            merge("sample");
            if ("vao" in options2) {
              result.vao = options2.vao;
            }
            return result;
          }
          function separateDynamic(object, useArrays) {
            var staticItems = {};
            var dynamicItems = {};
            Object.keys(object).forEach(function(option) {
              var value = object[option];
              if (dynamic.isDynamic(value)) {
                dynamicItems[option] = dynamic.unbox(value, option);
                return;
              } else if (useArrays && Array.isArray(value)) {
                for (var i = 0; i < value.length; ++i) {
                  if (dynamic.isDynamic(value[i])) {
                    dynamicItems[option] = dynamic.unbox(value, option);
                    return;
                  }
                }
              }
              staticItems[option] = value;
            });
            return {
              dynamic: dynamicItems,
              static: staticItems
            };
          }
          var context = separateDynamic(options.context || {}, true);
          var uniforms = separateDynamic(options.uniforms || {}, true);
          var attributes = separateDynamic(options.attributes || {}, false);
          var opts = separateDynamic(flattenNestedOptions(options), false);
          var stats$$12 = {
            gpuTime: 0,
            cpuTime: 0,
            count: 0
          };
          var compiled = core.compile(opts, attributes, uniforms, context, stats$$12);
          var draw = compiled.draw;
          var batch = compiled.batch;
          var scope = compiled.scope;
          var EMPTY_ARRAY = [];
          function reserve(count) {
            while (EMPTY_ARRAY.length < count) {
              EMPTY_ARRAY.push(null);
            }
            return EMPTY_ARRAY;
          }
          function REGLCommand(args2, body) {
            var i;
            if (contextLost) {
            }
            if (typeof args2 === "function") {
              return scope.call(this, null, args2, 0);
            } else if (typeof body === "function") {
              if (typeof args2 === "number") {
                for (i = 0; i < args2; ++i) {
                  scope.call(this, null, body, i);
                }
              } else if (Array.isArray(args2)) {
                for (i = 0; i < args2.length; ++i) {
                  scope.call(this, args2[i], body, i);
                }
              } else {
                return scope.call(this, args2, body, 0);
              }
            } else if (typeof args2 === "number") {
              if (args2 > 0) {
                return batch.call(this, reserve(args2 | 0), args2 | 0);
              }
            } else if (Array.isArray(args2)) {
              if (args2.length) {
                return batch.call(this, args2, args2.length);
              }
            } else {
              return draw.call(this, args2);
            }
          }
          return extend(REGLCommand, {
            stats: stats$$12,
            destroy: function() {
              compiled.destroy();
            }
          });
        }
        var setFBO = framebufferState.setFBO = compileProcedure({
          framebuffer: dynamic.define.call(null, DYN_PROP, "framebuffer")
        });
        function clearImpl(_, options) {
          var clearFlags = 0;
          core.procs.poll();
          var c = options.color;
          if (c) {
            gl.clearColor(+c[0] || 0, +c[1] || 0, +c[2] || 0, +c[3] || 0);
            clearFlags |= GL_COLOR_BUFFER_BIT;
          }
          if ("depth" in options) {
            gl.clearDepth(+options.depth);
            clearFlags |= GL_DEPTH_BUFFER_BIT;
          }
          if ("stencil" in options) {
            gl.clearStencil(options.stencil | 0);
            clearFlags |= GL_STENCIL_BUFFER_BIT;
          }
          gl.clear(clearFlags);
        }
        function clear(options) {
          if ("framebuffer" in options) {
            if (options.framebuffer && options.framebuffer_reglType === "framebufferCube") {
              for (var i = 0; i < 6; ++i) {
                setFBO(extend({
                  framebuffer: options.framebuffer.faces[i]
                }, options), clearImpl);
              }
            } else {
              setFBO(options, clearImpl);
            }
          } else {
            clearImpl(null, options);
          }
        }
        function frame(cb) {
          rafCallbacks.push(cb);
          function cancel() {
            var i = find(rafCallbacks, cb);
            function pendingCancel() {
              var index = find(rafCallbacks, pendingCancel);
              rafCallbacks[index] = rafCallbacks[rafCallbacks.length - 1];
              rafCallbacks.length -= 1;
              if (rafCallbacks.length <= 0) {
                stopRAF();
              }
            }
            rafCallbacks[i] = pendingCancel;
          }
          startRAF();
          return {
            cancel
          };
        }
        function pollViewport() {
          var viewport = nextState.viewport;
          var scissorBox = nextState.scissor_box;
          viewport[0] = viewport[1] = scissorBox[0] = scissorBox[1] = 0;
          contextState.viewportWidth = contextState.framebufferWidth = contextState.drawingBufferWidth = viewport[2] = scissorBox[2] = gl.drawingBufferWidth;
          contextState.viewportHeight = contextState.framebufferHeight = contextState.drawingBufferHeight = viewport[3] = scissorBox[3] = gl.drawingBufferHeight;
        }
        function poll() {
          contextState.tick += 1;
          contextState.time = now();
          pollViewport();
          core.procs.poll();
        }
        function refresh() {
          textureState.refresh();
          pollViewport();
          core.procs.refresh();
          if (timer) {
            timer.update();
          }
        }
        function now() {
          return (clock() - START_TIME) / 1e3;
        }
        refresh();
        function addListener(event, callback) {
          var callbacks;
          switch (event) {
            case "frame":
              return frame(callback);
            case "lost":
              callbacks = lossCallbacks;
              break;
            case "restore":
              callbacks = restoreCallbacks;
              break;
            case "destroy":
              callbacks = destroyCallbacks;
              break;
            default:
          }
          callbacks.push(callback);
          return {
            cancel: function() {
              for (var i = 0; i < callbacks.length; ++i) {
                if (callbacks[i] === callback) {
                  callbacks[i] = callbacks[callbacks.length - 1];
                  callbacks.pop();
                  return;
                }
              }
            }
          };
        }
        function getCachedCode() {
          return cachedCode;
        }
        function preloadCachedCode(moreCache) {
          Object.entries(moreCache).forEach(function(kv) {
            cachedCode[kv[0]] = kv[1];
          });
        }
        var regl2 = extend(compileProcedure, {
          // Clear current FBO
          clear,
          // Short cuts for dynamic variables
          prop: dynamic.define.bind(null, DYN_PROP),
          context: dynamic.define.bind(null, DYN_CONTEXT),
          this: dynamic.define.bind(null, DYN_STATE),
          // executes an empty draw command
          draw: compileProcedure({}),
          // Resources
          buffer: function(options) {
            return bufferState.create(options, GL_ARRAY_BUFFER, false, false);
          },
          elements: function(options) {
            return elementState.create(options, false);
          },
          texture: textureState.create2D,
          cube: textureState.createCube,
          renderbuffer: renderbufferState.create,
          framebuffer: framebufferState.create,
          framebufferCube: framebufferState.createCube,
          vao: attributeState.createVAO,
          // Expose context attributes
          attributes: glAttributes,
          // Frame rendering
          frame,
          on: addListener,
          // System limits
          limits,
          hasExtension: function(name) {
            return limits.extensions.indexOf(name.toLowerCase()) >= 0;
          },
          // Read pixels
          read: readPixels2,
          // Destroy regl and all associated resources
          destroy,
          // Direct GL state manipulation
          _gl: gl,
          _refresh: refresh,
          poll: function() {
            poll();
            if (timer) {
              timer.update();
            }
          },
          // Current time
          now,
          // regl Statistics Information
          stats: stats$$1,
          // cache generated code
          getCachedCode,
          preloadCachedCode
        });
        config.onDone(null, regl2);
        return regl2;
      }
      return wrapREGL;
    }));
  }
});

// node_modules/seedrandom/lib/alea.js
var require_alea = __commonJS({
  "node_modules/seedrandom/lib/alea.js"(exports, module) {
    (function(global2, module2, define2) {
      function Alea(seed) {
        var me = this, mash = Mash();
        me.next = function() {
          var t = 2091639 * me.s0 + me.c * 23283064365386963e-26;
          me.s0 = me.s1;
          me.s1 = me.s2;
          return me.s2 = t - (me.c = t | 0);
        };
        me.c = 1;
        me.s0 = mash(" ");
        me.s1 = mash(" ");
        me.s2 = mash(" ");
        me.s0 -= mash(seed);
        if (me.s0 < 0) {
          me.s0 += 1;
        }
        me.s1 -= mash(seed);
        if (me.s1 < 0) {
          me.s1 += 1;
        }
        me.s2 -= mash(seed);
        if (me.s2 < 0) {
          me.s2 += 1;
        }
        mash = null;
      }
      function copy4(f, t) {
        t.c = f.c;
        t.s0 = f.s0;
        t.s1 = f.s1;
        t.s2 = f.s2;
        return t;
      }
      function impl(seed, opts) {
        var xg = new Alea(seed), state = opts && opts.state, prng = xg.next;
        prng.int32 = function() {
          return xg.next() * 4294967296 | 0;
        };
        prng.double = function() {
          return prng() + (prng() * 2097152 | 0) * 11102230246251565e-32;
        };
        prng.quick = prng;
        if (state) {
          if (typeof state == "object") copy4(state, xg);
          prng.state = function() {
            return copy4(xg, {});
          };
        }
        return prng;
      }
      function Mash() {
        var n = 4022871197;
        var mash = function(data) {
          data = String(data);
          for (var i = 0; i < data.length; i++) {
            n += data.charCodeAt(i);
            var h = 0.02519603282416938 * n;
            n = h >>> 0;
            h -= n;
            h *= n;
            n = h >>> 0;
            h -= n;
            n += h * 4294967296;
          }
          return (n >>> 0) * 23283064365386963e-26;
        };
        return mash;
      }
      if (module2 && module2.exports) {
        module2.exports = impl;
      } else if (define2 && define2.amd) {
        define2(function() {
          return impl;
        });
      } else {
        this.alea = impl;
      }
    })(
      exports,
      typeof module == "object" && module,
      // present in node.js
      typeof define == "function" && define
      // present with an AMD loader
    );
  }
});

// node_modules/seedrandom/lib/xor128.js
var require_xor128 = __commonJS({
  "node_modules/seedrandom/lib/xor128.js"(exports, module) {
    (function(global2, module2, define2) {
      function XorGen(seed) {
        var me = this, strseed = "";
        me.x = 0;
        me.y = 0;
        me.z = 0;
        me.w = 0;
        me.next = function() {
          var t = me.x ^ me.x << 11;
          me.x = me.y;
          me.y = me.z;
          me.z = me.w;
          return me.w ^= me.w >>> 19 ^ t ^ t >>> 8;
        };
        if (seed === (seed | 0)) {
          me.x = seed;
        } else {
          strseed += seed;
        }
        for (var k = 0; k < strseed.length + 64; k++) {
          me.x ^= strseed.charCodeAt(k) | 0;
          me.next();
        }
      }
      function copy4(f, t) {
        t.x = f.x;
        t.y = f.y;
        t.z = f.z;
        t.w = f.w;
        return t;
      }
      function impl(seed, opts) {
        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
          return (xg.next() >>> 0) / 4294967296;
        };
        prng.double = function() {
          do {
            var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);
          } while (result === 0);
          return result;
        };
        prng.int32 = xg.next;
        prng.quick = prng;
        if (state) {
          if (typeof state == "object") copy4(state, xg);
          prng.state = function() {
            return copy4(xg, {});
          };
        }
        return prng;
      }
      if (module2 && module2.exports) {
        module2.exports = impl;
      } else if (define2 && define2.amd) {
        define2(function() {
          return impl;
        });
      } else {
        this.xor128 = impl;
      }
    })(
      exports,
      typeof module == "object" && module,
      // present in node.js
      typeof define == "function" && define
      // present with an AMD loader
    );
  }
});

// node_modules/seedrandom/lib/xorwow.js
var require_xorwow = __commonJS({
  "node_modules/seedrandom/lib/xorwow.js"(exports, module) {
    (function(global2, module2, define2) {
      function XorGen(seed) {
        var me = this, strseed = "";
        me.next = function() {
          var t = me.x ^ me.x >>> 2;
          me.x = me.y;
          me.y = me.z;
          me.z = me.w;
          me.w = me.v;
          return (me.d = me.d + 362437 | 0) + (me.v = me.v ^ me.v << 4 ^ (t ^ t << 1)) | 0;
        };
        me.x = 0;
        me.y = 0;
        me.z = 0;
        me.w = 0;
        me.v = 0;
        if (seed === (seed | 0)) {
          me.x = seed;
        } else {
          strseed += seed;
        }
        for (var k = 0; k < strseed.length + 64; k++) {
          me.x ^= strseed.charCodeAt(k) | 0;
          if (k == strseed.length) {
            me.d = me.x << 10 ^ me.x >>> 4;
          }
          me.next();
        }
      }
      function copy4(f, t) {
        t.x = f.x;
        t.y = f.y;
        t.z = f.z;
        t.w = f.w;
        t.v = f.v;
        t.d = f.d;
        return t;
      }
      function impl(seed, opts) {
        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
          return (xg.next() >>> 0) / 4294967296;
        };
        prng.double = function() {
          do {
            var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);
          } while (result === 0);
          return result;
        };
        prng.int32 = xg.next;
        prng.quick = prng;
        if (state) {
          if (typeof state == "object") copy4(state, xg);
          prng.state = function() {
            return copy4(xg, {});
          };
        }
        return prng;
      }
      if (module2 && module2.exports) {
        module2.exports = impl;
      } else if (define2 && define2.amd) {
        define2(function() {
          return impl;
        });
      } else {
        this.xorwow = impl;
      }
    })(
      exports,
      typeof module == "object" && module,
      // present in node.js
      typeof define == "function" && define
      // present with an AMD loader
    );
  }
});

// node_modules/seedrandom/lib/xorshift7.js
var require_xorshift7 = __commonJS({
  "node_modules/seedrandom/lib/xorshift7.js"(exports, module) {
    (function(global2, module2, define2) {
      function XorGen(seed) {
        var me = this;
        me.next = function() {
          var X = me.x, i = me.i, t, v, w;
          t = X[i];
          t ^= t >>> 7;
          v = t ^ t << 24;
          t = X[i + 1 & 7];
          v ^= t ^ t >>> 10;
          t = X[i + 3 & 7];
          v ^= t ^ t >>> 3;
          t = X[i + 4 & 7];
          v ^= t ^ t << 7;
          t = X[i + 7 & 7];
          t = t ^ t << 13;
          v ^= t ^ t << 9;
          X[i] = v;
          me.i = i + 1 & 7;
          return v;
        };
        function init(me2, seed2) {
          var j, w, X = [];
          if (seed2 === (seed2 | 0)) {
            w = X[0] = seed2;
          } else {
            seed2 = "" + seed2;
            for (j = 0; j < seed2.length; ++j) {
              X[j & 7] = X[j & 7] << 15 ^ seed2.charCodeAt(j) + X[j + 1 & 7] << 13;
            }
          }
          while (X.length < 8) X.push(0);
          for (j = 0; j < 8 && X[j] === 0; ++j) ;
          if (j == 8) w = X[7] = -1;
          else w = X[j];
          me2.x = X;
          me2.i = 0;
          for (j = 256; j > 0; --j) {
            me2.next();
          }
        }
        init(me, seed);
      }
      function copy4(f, t) {
        t.x = f.x.slice();
        t.i = f.i;
        return t;
      }
      function impl(seed, opts) {
        if (seed == null) seed = +/* @__PURE__ */ new Date();
        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
          return (xg.next() >>> 0) / 4294967296;
        };
        prng.double = function() {
          do {
            var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);
          } while (result === 0);
          return result;
        };
        prng.int32 = xg.next;
        prng.quick = prng;
        if (state) {
          if (state.x) copy4(state, xg);
          prng.state = function() {
            return copy4(xg, {});
          };
        }
        return prng;
      }
      if (module2 && module2.exports) {
        module2.exports = impl;
      } else if (define2 && define2.amd) {
        define2(function() {
          return impl;
        });
      } else {
        this.xorshift7 = impl;
      }
    })(
      exports,
      typeof module == "object" && module,
      // present in node.js
      typeof define == "function" && define
      // present with an AMD loader
    );
  }
});

// node_modules/seedrandom/lib/xor4096.js
var require_xor4096 = __commonJS({
  "node_modules/seedrandom/lib/xor4096.js"(exports, module) {
    (function(global2, module2, define2) {
      function XorGen(seed) {
        var me = this;
        me.next = function() {
          var w = me.w, X = me.X, i = me.i, t, v;
          me.w = w = w + 1640531527 | 0;
          v = X[i + 34 & 127];
          t = X[i = i + 1 & 127];
          v ^= v << 13;
          t ^= t << 17;
          v ^= v >>> 15;
          t ^= t >>> 12;
          v = X[i] = v ^ t;
          me.i = i;
          return v + (w ^ w >>> 16) | 0;
        };
        function init(me2, seed2) {
          var t, v, i, j, w, X = [], limit = 128;
          if (seed2 === (seed2 | 0)) {
            v = seed2;
            seed2 = null;
          } else {
            seed2 = seed2 + "\0";
            v = 0;
            limit = Math.max(limit, seed2.length);
          }
          for (i = 0, j = -32; j < limit; ++j) {
            if (seed2) v ^= seed2.charCodeAt((j + 32) % seed2.length);
            if (j === 0) w = v;
            v ^= v << 10;
            v ^= v >>> 15;
            v ^= v << 4;
            v ^= v >>> 13;
            if (j >= 0) {
              w = w + 1640531527 | 0;
              t = X[j & 127] ^= v + w;
              i = 0 == t ? i + 1 : 0;
            }
          }
          if (i >= 128) {
            X[(seed2 && seed2.length || 0) & 127] = -1;
          }
          i = 127;
          for (j = 4 * 128; j > 0; --j) {
            v = X[i + 34 & 127];
            t = X[i = i + 1 & 127];
            v ^= v << 13;
            t ^= t << 17;
            v ^= v >>> 15;
            t ^= t >>> 12;
            X[i] = v ^ t;
          }
          me2.w = w;
          me2.X = X;
          me2.i = i;
        }
        init(me, seed);
      }
      function copy4(f, t) {
        t.i = f.i;
        t.w = f.w;
        t.X = f.X.slice();
        return t;
      }
      ;
      function impl(seed, opts) {
        if (seed == null) seed = +/* @__PURE__ */ new Date();
        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
          return (xg.next() >>> 0) / 4294967296;
        };
        prng.double = function() {
          do {
            var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);
          } while (result === 0);
          return result;
        };
        prng.int32 = xg.next;
        prng.quick = prng;
        if (state) {
          if (state.X) copy4(state, xg);
          prng.state = function() {
            return copy4(xg, {});
          };
        }
        return prng;
      }
      if (module2 && module2.exports) {
        module2.exports = impl;
      } else if (define2 && define2.amd) {
        define2(function() {
          return impl;
        });
      } else {
        this.xor4096 = impl;
      }
    })(
      exports,
      // window object or global
      typeof module == "object" && module,
      // present in node.js
      typeof define == "function" && define
      // present with an AMD loader
    );
  }
});

// node_modules/seedrandom/lib/tychei.js
var require_tychei = __commonJS({
  "node_modules/seedrandom/lib/tychei.js"(exports, module) {
    (function(global2, module2, define2) {
      function XorGen(seed) {
        var me = this, strseed = "";
        me.next = function() {
          var b = me.b, c = me.c, d = me.d, a = me.a;
          b = b << 25 ^ b >>> 7 ^ c;
          c = c - d | 0;
          d = d << 24 ^ d >>> 8 ^ a;
          a = a - b | 0;
          me.b = b = b << 20 ^ b >>> 12 ^ c;
          me.c = c = c - d | 0;
          me.d = d << 16 ^ c >>> 16 ^ a;
          return me.a = a - b | 0;
        };
        me.a = 0;
        me.b = 0;
        me.c = 2654435769 | 0;
        me.d = 1367130551;
        if (seed === Math.floor(seed)) {
          me.a = seed / 4294967296 | 0;
          me.b = seed | 0;
        } else {
          strseed += seed;
        }
        for (var k = 0; k < strseed.length + 20; k++) {
          me.b ^= strseed.charCodeAt(k) | 0;
          me.next();
        }
      }
      function copy4(f, t) {
        t.a = f.a;
        t.b = f.b;
        t.c = f.c;
        t.d = f.d;
        return t;
      }
      ;
      function impl(seed, opts) {
        var xg = new XorGen(seed), state = opts && opts.state, prng = function() {
          return (xg.next() >>> 0) / 4294967296;
        };
        prng.double = function() {
          do {
            var top = xg.next() >>> 11, bot = (xg.next() >>> 0) / 4294967296, result = (top + bot) / (1 << 21);
          } while (result === 0);
          return result;
        };
        prng.int32 = xg.next;
        prng.quick = prng;
        if (state) {
          if (typeof state == "object") copy4(state, xg);
          prng.state = function() {
            return copy4(xg, {});
          };
        }
        return prng;
      }
      if (module2 && module2.exports) {
        module2.exports = impl;
      } else if (define2 && define2.amd) {
        define2(function() {
          return impl;
        });
      } else {
        this.tychei = impl;
      }
    })(
      exports,
      typeof module == "object" && module,
      // present in node.js
      typeof define == "function" && define
      // present with an AMD loader
    );
  }
});

// browser-external:crypto
var require_crypto = __commonJS({
  "browser-external:crypto"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "crypto" has been externalized for browser compatibility. Cannot access "crypto.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/seedrandom/seedrandom.js
var require_seedrandom = __commonJS({
  "node_modules/seedrandom/seedrandom.js"(exports, module) {
    (function(global2, pool, math) {
      var width = 256, chunks = 6, digits = 52, rngname = "random", startdenom = math.pow(width, chunks), significance = math.pow(2, digits), overflow = significance * 2, mask = width - 1, nodecrypto;
      function seedrandom2(seed, options, callback) {
        var key = [];
        options = options == true ? { entropy: true } : options || {};
        var shortseed = mixkey(flatten(
          options.entropy ? [seed, tostring(pool)] : seed == null ? autoseed() : seed,
          3
        ), key);
        var arc4 = new ARC4(key);
        var prng = function() {
          var n = arc4.g(chunks), d = startdenom, x = 0;
          while (n < significance) {
            n = (n + x) * width;
            d *= width;
            x = arc4.g(1);
          }
          while (n >= overflow) {
            n /= 2;
            d /= 2;
            x >>>= 1;
          }
          return (n + x) / d;
        };
        prng.int32 = function() {
          return arc4.g(4) | 0;
        };
        prng.quick = function() {
          return arc4.g(4) / 4294967296;
        };
        prng.double = prng;
        mixkey(tostring(arc4.S), pool);
        return (options.pass || callback || function(prng2, seed2, is_math_call, state) {
          if (state) {
            if (state.S) {
              copy4(state, arc4);
            }
            prng2.state = function() {
              return copy4(arc4, {});
            };
          }
          if (is_math_call) {
            math[rngname] = prng2;
            return seed2;
          } else return prng2;
        })(
          prng,
          shortseed,
          "global" in options ? options.global : this == math,
          options.state
        );
      }
      function ARC4(key) {
        var t, keylen = key.length, me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];
        if (!keylen) {
          key = [keylen++];
        }
        while (i < width) {
          s[i] = i++;
        }
        for (i = 0; i < width; i++) {
          s[i] = s[j = mask & j + key[i % keylen] + (t = s[i])];
          s[j] = t;
        }
        (me.g = function(count) {
          var t2, r = 0, i2 = me.i, j2 = me.j, s2 = me.S;
          while (count--) {
            t2 = s2[i2 = mask & i2 + 1];
            r = r * width + s2[mask & (s2[i2] = s2[j2 = mask & j2 + t2]) + (s2[j2] = t2)];
          }
          me.i = i2;
          me.j = j2;
          return r;
        })(width);
      }
      function copy4(f, t) {
        t.i = f.i;
        t.j = f.j;
        t.S = f.S.slice();
        return t;
      }
      ;
      function flatten(obj, depth) {
        var result = [], typ = typeof obj, prop;
        if (depth && typ == "object") {
          for (prop in obj) {
            try {
              result.push(flatten(obj[prop], depth - 1));
            } catch (e) {
            }
          }
        }
        return result.length ? result : typ == "string" ? obj : obj + "\0";
      }
      function mixkey(seed, key) {
        var stringseed = seed + "", smear, j = 0;
        while (j < stringseed.length) {
          key[mask & j] = mask & (smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++);
        }
        return tostring(key);
      }
      function autoseed() {
        try {
          var out;
          if (nodecrypto && (out = nodecrypto.randomBytes)) {
            out = out(width);
          } else {
            out = new Uint8Array(width);
            (global2.crypto || global2.msCrypto).getRandomValues(out);
          }
          return tostring(out);
        } catch (e) {
          var browser = global2.navigator, plugins = browser && browser.plugins;
          return [+/* @__PURE__ */ new Date(), global2, plugins, global2.screen, tostring(pool)];
        }
      }
      function tostring(a) {
        return String.fromCharCode.apply(0, a);
      }
      mixkey(math.random(), pool);
      if (typeof module == "object" && module.exports) {
        module.exports = seedrandom2;
        try {
          nodecrypto = require_crypto();
        } catch (ex) {
        }
      } else if (typeof define == "function" && define.amd) {
        define(function() {
          return seedrandom2;
        });
      } else {
        math["seed" + rngname] = seedrandom2;
      }
    })(
      // global: `self` in browsers (including strict mode and web workers),
      // otherwise `this` in Node and other environments
      typeof self !== "undefined" ? self : exports,
      [],
      // pool: entropy pool starts empty
      Math
      // math: package containing random, pow, and seedrandom
    );
  }
});

// node_modules/seedrandom/index.js
var require_seedrandom2 = __commonJS({
  "node_modules/seedrandom/index.js"(exports, module) {
    var alea = require_alea();
    var xor128 = require_xor128();
    var xorwow = require_xorwow();
    var xorshift7 = require_xorshift7();
    var xor4096 = require_xor4096();
    var tychei = require_tychei();
    var sr = require_seedrandom();
    sr.alea = alea;
    sr.xor128 = xor128;
    sr.xorwow = xorwow;
    sr.xorshift7 = xorshift7;
    sr.xor4096 = xor4096;
    sr.tychei = tychei;
    module.exports = sr;
  }
});

// node_modules/@cosmograph/cosmos/dist/index.js
var import_regl = __toESM(require_regl_unchecked());

// node_modules/gl-matrix/esm/common.js
var EPSILON = 1e-6;
var ARRAY_TYPE = typeof Float32Array !== "undefined" ? Float32Array : Array;
var degree = Math.PI / 180;
var radian = 180 / Math.PI;

// node_modules/gl-matrix/esm/mat3.js
var mat3_exports = {};
__export(mat3_exports, {
  add: () => add,
  adjoint: () => adjoint,
  clone: () => clone,
  copy: () => copy,
  create: () => create,
  determinant: () => determinant,
  equals: () => equals,
  exactEquals: () => exactEquals,
  frob: () => frob,
  fromMat2d: () => fromMat2d,
  fromMat4: () => fromMat4,
  fromQuat: () => fromQuat,
  fromRotation: () => fromRotation,
  fromScaling: () => fromScaling,
  fromTranslation: () => fromTranslation,
  fromValues: () => fromValues,
  identity: () => identity,
  invert: () => invert,
  mul: () => mul,
  multiply: () => multiply,
  multiplyScalar: () => multiplyScalar,
  multiplyScalarAndAdd: () => multiplyScalarAndAdd,
  normalFromMat4: () => normalFromMat4,
  projection: () => projection,
  rotate: () => rotate,
  scale: () => scale,
  set: () => set,
  str: () => str,
  sub: () => sub,
  subtract: () => subtract,
  translate: () => translate,
  transpose: () => transpose
});
function create() {
  var out = new ARRAY_TYPE(9);
  if (ARRAY_TYPE != Float32Array) {
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
  }
  out[0] = 1;
  out[4] = 1;
  out[8] = 1;
  return out;
}
function fromMat4(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[4];
  out[4] = a[5];
  out[5] = a[6];
  out[6] = a[8];
  out[7] = a[9];
  out[8] = a[10];
  return out;
}
function clone(a) {
  var out = new ARRAY_TYPE(9);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}
function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}
function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
  var out = new ARRAY_TYPE(9);
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m10;
  out[4] = m11;
  out[5] = m12;
  out[6] = m20;
  out[7] = m21;
  out[8] = m22;
  return out;
}
function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m10;
  out[4] = m11;
  out[5] = m12;
  out[6] = m20;
  out[7] = m21;
  out[8] = m22;
  return out;
}
function identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 1;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}
function transpose(out, a) {
  if (out === a) {
    var a01 = a[1], a02 = a[2], a12 = a[5];
    out[1] = a[3];
    out[2] = a[6];
    out[3] = a01;
    out[5] = a[7];
    out[6] = a02;
    out[7] = a12;
  } else {
    out[0] = a[0];
    out[1] = a[3];
    out[2] = a[6];
    out[3] = a[1];
    out[4] = a[4];
    out[5] = a[7];
    out[6] = a[2];
    out[7] = a[5];
    out[8] = a[8];
  }
  return out;
}
function invert(out, a) {
  var a00 = a[0], a01 = a[1], a02 = a[2];
  var a10 = a[3], a11 = a[4], a12 = a[5];
  var a20 = a[6], a21 = a[7], a22 = a[8];
  var b01 = a22 * a11 - a12 * a21;
  var b11 = -a22 * a10 + a12 * a20;
  var b21 = a21 * a10 - a11 * a20;
  var det = a00 * b01 + a01 * b11 + a02 * b21;
  if (!det) {
    return null;
  }
  det = 1 / det;
  out[0] = b01 * det;
  out[1] = (-a22 * a01 + a02 * a21) * det;
  out[2] = (a12 * a01 - a02 * a11) * det;
  out[3] = b11 * det;
  out[4] = (a22 * a00 - a02 * a20) * det;
  out[5] = (-a12 * a00 + a02 * a10) * det;
  out[6] = b21 * det;
  out[7] = (-a21 * a00 + a01 * a20) * det;
  out[8] = (a11 * a00 - a01 * a10) * det;
  return out;
}
function adjoint(out, a) {
  var a00 = a[0], a01 = a[1], a02 = a[2];
  var a10 = a[3], a11 = a[4], a12 = a[5];
  var a20 = a[6], a21 = a[7], a22 = a[8];
  out[0] = a11 * a22 - a12 * a21;
  out[1] = a02 * a21 - a01 * a22;
  out[2] = a01 * a12 - a02 * a11;
  out[3] = a12 * a20 - a10 * a22;
  out[4] = a00 * a22 - a02 * a20;
  out[5] = a02 * a10 - a00 * a12;
  out[6] = a10 * a21 - a11 * a20;
  out[7] = a01 * a20 - a00 * a21;
  out[8] = a00 * a11 - a01 * a10;
  return out;
}
function determinant(a) {
  var a00 = a[0], a01 = a[1], a02 = a[2];
  var a10 = a[3], a11 = a[4], a12 = a[5];
  var a20 = a[6], a21 = a[7], a22 = a[8];
  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
}
function multiply(out, a, b) {
  var a00 = a[0], a01 = a[1], a02 = a[2];
  var a10 = a[3], a11 = a[4], a12 = a[5];
  var a20 = a[6], a21 = a[7], a22 = a[8];
  var b00 = b[0], b01 = b[1], b02 = b[2];
  var b10 = b[3], b11 = b[4], b12 = b[5];
  var b20 = b[6], b21 = b[7], b22 = b[8];
  out[0] = b00 * a00 + b01 * a10 + b02 * a20;
  out[1] = b00 * a01 + b01 * a11 + b02 * a21;
  out[2] = b00 * a02 + b01 * a12 + b02 * a22;
  out[3] = b10 * a00 + b11 * a10 + b12 * a20;
  out[4] = b10 * a01 + b11 * a11 + b12 * a21;
  out[5] = b10 * a02 + b11 * a12 + b12 * a22;
  out[6] = b20 * a00 + b21 * a10 + b22 * a20;
  out[7] = b20 * a01 + b21 * a11 + b22 * a21;
  out[8] = b20 * a02 + b21 * a12 + b22 * a22;
  return out;
}
function translate(out, a, v) {
  var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], x = v[0], y = v[1];
  out[0] = a00;
  out[1] = a01;
  out[2] = a02;
  out[3] = a10;
  out[4] = a11;
  out[5] = a12;
  out[6] = x * a00 + y * a10 + a20;
  out[7] = x * a01 + y * a11 + a21;
  out[8] = x * a02 + y * a12 + a22;
  return out;
}
function rotate(out, a, rad) {
  var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], s = Math.sin(rad), c = Math.cos(rad);
  out[0] = c * a00 + s * a10;
  out[1] = c * a01 + s * a11;
  out[2] = c * a02 + s * a12;
  out[3] = c * a10 - s * a00;
  out[4] = c * a11 - s * a01;
  out[5] = c * a12 - s * a02;
  out[6] = a20;
  out[7] = a21;
  out[8] = a22;
  return out;
}
function scale(out, a, v) {
  var x = v[0], y = v[1];
  out[0] = x * a[0];
  out[1] = x * a[1];
  out[2] = x * a[2];
  out[3] = y * a[3];
  out[4] = y * a[4];
  out[5] = y * a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}
function fromTranslation(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 1;
  out[5] = 0;
  out[6] = v[0];
  out[7] = v[1];
  out[8] = 1;
  return out;
}
function fromRotation(out, rad) {
  var s = Math.sin(rad), c = Math.cos(rad);
  out[0] = c;
  out[1] = s;
  out[2] = 0;
  out[3] = -s;
  out[4] = c;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}
function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = v[1];
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}
function fromMat2d(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = 0;
  out[3] = a[2];
  out[4] = a[3];
  out[5] = 0;
  out[6] = a[4];
  out[7] = a[5];
  out[8] = 1;
  return out;
}
function fromQuat(out, q) {
  var x = q[0], y = q[1], z = q[2], w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var yx = y * x2;
  var yy = y * y2;
  var zx = z * x2;
  var zy = z * y2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  out[0] = 1 - yy - zz;
  out[3] = yx - wz;
  out[6] = zx + wy;
  out[1] = yx + wz;
  out[4] = 1 - xx - zz;
  out[7] = zy - wx;
  out[2] = zx - wy;
  out[5] = zy + wx;
  out[8] = 1 - xx - yy;
  return out;
}
function normalFromMat4(out, a) {
  var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
  var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
  var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
  var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32;
  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
  if (!det) {
    return null;
  }
  det = 1 / det;
  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
  return out;
}
function projection(out, width, height) {
  out[0] = 2 / width;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = -2 / height;
  out[5] = 0;
  out[6] = -1;
  out[7] = 1;
  out[8] = 1;
  return out;
}
function str(a) {
  return "mat3(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ")";
}
function frob(a) {
  return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2] + a[3] * a[3] + a[4] * a[4] + a[5] * a[5] + a[6] * a[6] + a[7] * a[7] + a[8] * a[8]);
}
function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  out[6] = a[6] + b[6];
  out[7] = a[7] + b[7];
  out[8] = a[8] + b[8];
  return out;
}
function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  out[6] = a[6] - b[6];
  out[7] = a[7] - b[7];
  out[8] = a[8] - b[8];
  return out;
}
function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  out[6] = a[6] * b;
  out[7] = a[7] * b;
  out[8] = a[8] * b;
  return out;
}
function multiplyScalarAndAdd(out, a, b, scale3) {
  out[0] = a[0] + b[0] * scale3;
  out[1] = a[1] + b[1] * scale3;
  out[2] = a[2] + b[2] * scale3;
  out[3] = a[3] + b[3] * scale3;
  out[4] = a[4] + b[4] * scale3;
  out[5] = a[5] + b[5] * scale3;
  out[6] = a[6] + b[6] * scale3;
  out[7] = a[7] + b[7] * scale3;
  out[8] = a[8] + b[8] * scale3;
  return out;
}
function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];
}
function equals(a, b) {
  var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];
  var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON * Math.max(1, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON * Math.max(1, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= EPSILON * Math.max(1, Math.abs(a8), Math.abs(b8));
}
var mul = multiply;
var sub = subtract;

// node_modules/gl-matrix/esm/vec3.js
function create2() {
  var out = new ARRAY_TYPE(3);
  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
  }
  return out;
}
function length(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  return Math.sqrt(x * x + y * y + z * z);
}
function fromValues2(x, y, z) {
  var out = new ARRAY_TYPE(3);
  out[0] = x;
  out[1] = y;
  out[2] = z;
  return out;
}
function normalize(out, a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var len2 = x * x + y * y + z * z;
  if (len2 > 0) {
    len2 = 1 / Math.sqrt(len2);
  }
  out[0] = a[0] * len2;
  out[1] = a[1] * len2;
  out[2] = a[2] * len2;
  return out;
}
function dot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}
function cross(out, a, b) {
  var ax = a[0], ay = a[1], az = a[2];
  var bx = b[0], by = b[1], bz = b[2];
  out[0] = ay * bz - az * by;
  out[1] = az * bx - ax * bz;
  out[2] = ax * by - ay * bx;
  return out;
}
var len = length;
var forEach = (function() {
  var vec = create2();
  return function(a, stride, offset, count, fn, arg) {
    var i, l;
    if (!stride) {
      stride = 3;
    }
    if (!offset) {
      offset = 0;
    }
    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }
    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      vec[2] = a[i + 2];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
      a[i + 2] = vec[2];
    }
    return a;
  };
})();

// node_modules/gl-matrix/esm/vec4.js
function create3() {
  var out = new ARRAY_TYPE(4);
  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
  }
  return out;
}
function normalize2(out, a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  var len2 = x * x + y * y + z * z + w * w;
  if (len2 > 0) {
    len2 = 1 / Math.sqrt(len2);
  }
  out[0] = x * len2;
  out[1] = y * len2;
  out[2] = z * len2;
  out[3] = w * len2;
  return out;
}
var forEach2 = (function() {
  var vec = create3();
  return function(a, stride, offset, count, fn, arg) {
    var i, l;
    if (!stride) {
      stride = 4;
    }
    if (!offset) {
      offset = 0;
    }
    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }
    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      vec[2] = a[i + 2];
      vec[3] = a[i + 3];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
      a[i + 2] = vec[2];
      a[i + 3] = vec[3];
    }
    return a;
  };
})();

// node_modules/gl-matrix/esm/quat.js
function create4() {
  var out = new ARRAY_TYPE(4);
  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
  }
  out[3] = 1;
  return out;
}
function setAxisAngle(out, axis, rad) {
  rad = rad * 0.5;
  var s = Math.sin(rad);
  out[0] = s * axis[0];
  out[1] = s * axis[1];
  out[2] = s * axis[2];
  out[3] = Math.cos(rad);
  return out;
}
function slerp(out, a, b, t) {
  var ax = a[0], ay = a[1], az = a[2], aw = a[3];
  var bx = b[0], by = b[1], bz = b[2], bw = b[3];
  var omega, cosom, sinom, scale0, scale1;
  cosom = ax * bx + ay * by + az * bz + aw * bw;
  if (cosom < 0) {
    cosom = -cosom;
    bx = -bx;
    by = -by;
    bz = -bz;
    bw = -bw;
  }
  if (1 - cosom > EPSILON) {
    omega = Math.acos(cosom);
    sinom = Math.sin(omega);
    scale0 = Math.sin((1 - t) * omega) / sinom;
    scale1 = Math.sin(t * omega) / sinom;
  } else {
    scale0 = 1 - t;
    scale1 = t;
  }
  out[0] = scale0 * ax + scale1 * bx;
  out[1] = scale0 * ay + scale1 * by;
  out[2] = scale0 * az + scale1 * bz;
  out[3] = scale0 * aw + scale1 * bw;
  return out;
}
function fromMat3(out, m) {
  var fTrace = m[0] + m[4] + m[8];
  var fRoot;
  if (fTrace > 0) {
    fRoot = Math.sqrt(fTrace + 1);
    out[3] = 0.5 * fRoot;
    fRoot = 0.5 / fRoot;
    out[0] = (m[5] - m[7]) * fRoot;
    out[1] = (m[6] - m[2]) * fRoot;
    out[2] = (m[1] - m[3]) * fRoot;
  } else {
    var i = 0;
    if (m[4] > m[0]) i = 1;
    if (m[8] > m[i * 3 + i]) i = 2;
    var j = (i + 1) % 3;
    var k = (i + 2) % 3;
    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1);
    out[i] = 0.5 * fRoot;
    fRoot = 0.5 / fRoot;
    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
  }
  return out;
}
var normalize3 = normalize2;
var rotationTo = (function() {
  var tmpvec3 = create2();
  var xUnitVec3 = fromValues2(1, 0, 0);
  var yUnitVec3 = fromValues2(0, 1, 0);
  return function(out, a, b) {
    var dot4 = dot(a, b);
    if (dot4 < -0.999999) {
      cross(tmpvec3, xUnitVec3, a);
      if (len(tmpvec3) < 1e-6) cross(tmpvec3, yUnitVec3, a);
      normalize(tmpvec3, tmpvec3);
      setAxisAngle(out, tmpvec3, Math.PI);
      return out;
    } else if (dot4 > 0.999999) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
      out[3] = 1;
      return out;
    } else {
      cross(tmpvec3, a, b);
      out[0] = tmpvec3[0];
      out[1] = tmpvec3[1];
      out[2] = tmpvec3[2];
      out[3] = 1 + dot4;
      return normalize3(out, out);
    }
  };
})();
var sqlerp = (function() {
  var temp1 = create4();
  var temp2 = create4();
  return function(out, a, b, c, d, t) {
    slerp(temp1, a, d, t);
    slerp(temp2, b, c, t);
    slerp(out, temp1, temp2, 2 * t * (1 - t));
    return out;
  };
})();
var setAxes = (function() {
  var matr = create();
  return function(out, view, right, up) {
    matr[0] = right[0];
    matr[3] = right[1];
    matr[6] = right[2];
    matr[1] = up[0];
    matr[4] = up[1];
    matr[7] = up[2];
    matr[2] = -view[0];
    matr[5] = -view[1];
    matr[8] = -view[2];
    return normalize3(out, fromMat3(out, matr));
  };
})();

// node_modules/gl-matrix/esm/vec2.js
function create5() {
  var out = new ARRAY_TYPE(2);
  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
  }
  return out;
}
var forEach3 = (function() {
  var vec = create5();
  return function(a, stride, offset, count, fn, arg) {
    var i, l;
    if (!stride) {
      stride = 2;
    }
    if (!offset) {
      offset = 0;
    }
    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }
    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
    }
    return a;
  };
})();

// node_modules/random/dist/random.module.js
var import_seedrandom = __toESM(require_seedrandom2());
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
var RNG = (function() {
  function RNG2() {
  }
  var _proto = RNG2.prototype;
  _proto._seed = function _seed(seed, _opts) {
    if (seed === (seed || 0)) {
      return seed;
    } else {
      var strSeed = "" + seed;
      var s = 0;
      for (var k = 0; k < strSeed.length; ++k) {
        s ^= strSeed.charCodeAt(k) | 0;
      }
      return s;
    }
  };
  return RNG2;
})();
var RNGFunction = (function(_RNG) {
  _inheritsLoose(RNGFunction2, _RNG);
  function RNGFunction2(thunk, opts) {
    var _this;
    _this = _RNG.call(this) || this;
    _this._rng = void 0;
    _this.seed(thunk, opts);
    return _this;
  }
  var _proto = RNGFunction2.prototype;
  _proto.next = function next() {
    return this._rng();
  };
  _proto.seed = function seed(thunk, _opts) {
    this._rng = thunk;
  };
  _proto.clone = function clone3(_, opts) {
    return new RNGFunction2(this._rng, opts);
  };
  _createClass(RNGFunction2, [{
    key: "name",
    get: function get() {
      return "function";
    }
  }]);
  return RNGFunction2;
})(RNG);
var RNGFactory = (function() {
  var args = [].slice.call(arguments);
  var _args = args, _args$ = _args[0], arg0 = _args$ === void 0 ? "default" : _args$;
  switch (typeof arg0) {
    case "object":
      if (arg0 instanceof RNG) {
        return arg0;
      }
      break;
    case "function":
      return new RNGFunction(arg0);
    case "number":
    case "string":
    default:
      return new RNGFunction(import_seedrandom.default.apply(void 0, args));
  }
  throw new Error('invalid RNG "' + arg0 + '"');
});
var uniform = (function(random2, min, max) {
  if (min === void 0) {
    min = 0;
  }
  if (max === void 0) {
    max = 1;
  }
  return function() {
    return random2.next() * (max - min) + min;
  };
});
function numberValidator(num) {
  return new NumberValidator(num);
}
var NumberValidator = function NumberValidator2(num) {
  var _this = this;
  this.n = void 0;
  this.isInt = function() {
    if (Number.isInteger(_this.n)) {
      return _this;
    }
    throw new Error("Expected number to be an integer, got " + _this.n);
  };
  this.isPositive = function() {
    if (_this.n > 0) {
      return _this;
    }
    throw new Error("Expected number to be positive, got " + _this.n);
  };
  this.lessThan = function(v) {
    if (_this.n < v) {
      return _this;
    }
    throw new Error("Expected number to be less than " + v + ", got " + _this.n);
  };
  this.greaterThanOrEqual = function(v) {
    if (_this.n >= v) {
      return _this;
    }
    throw new Error("Expected number to be greater than or equal to " + v + ", got " + _this.n);
  };
  this.greaterThan = function(v) {
    if (_this.n > v) {
      return _this;
    }
    throw new Error("Expected number to be greater than " + v + ", got " + _this.n);
  };
  this.n = num;
};
var uniformInt = (function(random2, min, max) {
  if (min === void 0) {
    min = 0;
  }
  if (max === void 0) {
    max = 1;
  }
  if (max === void 0) {
    max = min === void 0 ? 1 : min;
    min = 0;
  }
  numberValidator(min).isInt();
  numberValidator(max).isInt();
  return function() {
    return Math.floor(random2.next() * (max - min + 1) + min);
  };
});
var uniformBoolean = (function(random2) {
  return function() {
    return random2.next() >= 0.5;
  };
});
var normal = (function(random2, mu, sigma) {
  if (mu === void 0) {
    mu = 0;
  }
  if (sigma === void 0) {
    sigma = 1;
  }
  return function() {
    var x, y, r;
    do {
      x = random2.next() * 2 - 1;
      y = random2.next() * 2 - 1;
      r = x * x + y * y;
    } while (!r || r > 1);
    return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);
  };
});
var logNormal = (function(random2, mu, sigma) {
  if (mu === void 0) {
    mu = 0;
  }
  if (sigma === void 0) {
    sigma = 1;
  }
  var normal2 = random2.normal(mu, sigma);
  return function() {
    return Math.exp(normal2());
  };
});
var bernoulli = (function(random2, p) {
  if (p === void 0) {
    p = 0.5;
  }
  numberValidator(p).greaterThanOrEqual(0).lessThan(1);
  return function() {
    return Math.floor(random2.next() + p);
  };
});
var binomial = (function(random2, n, p) {
  if (n === void 0) {
    n = 1;
  }
  if (p === void 0) {
    p = 0.5;
  }
  numberValidator(n).isInt().isPositive();
  numberValidator(p).greaterThanOrEqual(0).lessThan(1);
  return function() {
    var i = 0;
    var x = 0;
    while (i++ < n) {
      if (random2.next() < p) {
        x++;
      }
    }
    return x;
  };
});
var geometric = (function(random2, p) {
  if (p === void 0) {
    p = 0.5;
  }
  numberValidator(p).greaterThan(0).lessThan(1);
  var invLogP = 1 / Math.log(1 - p);
  return function() {
    return Math.floor(1 + Math.log(random2.next()) * invLogP);
  };
});
var logFactorialTable = [0, 0, 0.6931471805599453, 1.791759469228055, 3.1780538303479458, 4.787491742782046, 6.579251212010101, 8.525161361065415, 10.60460290274525, 12.801827480081469];
var logFactorial = function logFactorial2(k) {
  return logFactorialTable[k];
};
var logSqrt2PI = 0.9189385332046727;
var poisson = (function(random2, lambda) {
  if (lambda === void 0) {
    lambda = 1;
  }
  numberValidator(lambda).isPositive();
  if (lambda < 10) {
    var expMean = Math.exp(-lambda);
    return function() {
      var p = expMean;
      var x = 0;
      var u = random2.next();
      while (u > p) {
        u = u - p;
        p = lambda * p / ++x;
      }
      return x;
    };
  } else {
    var smu = Math.sqrt(lambda);
    var b = 0.931 + 2.53 * smu;
    var a = -0.059 + 0.02483 * b;
    var invAlpha = 1.1239 + 1.1328 / (b - 3.4);
    var vR = 0.9277 - 3.6224 / (b - 2);
    return function() {
      while (true) {
        var u = void 0;
        var v = random2.next();
        if (v <= 0.86 * vR) {
          u = v / vR - 0.43;
          return Math.floor((2 * a / (0.5 - Math.abs(u)) + b) * u + lambda + 0.445);
        }
        if (v >= vR) {
          u = random2.next() - 0.5;
        } else {
          u = v / vR - 0.93;
          u = (u < 0 ? -0.5 : 0.5) - u;
          v = random2.next() * vR;
        }
        var us = 0.5 - Math.abs(u);
        if (us < 0.013 && v > us) {
          continue;
        }
        var k = Math.floor((2 * a / us + b) * u + lambda + 0.445);
        v = v * invAlpha / (a / (us * us) + b);
        if (k >= 10) {
          var t = (k + 0.5) * Math.log(lambda / k) - lambda - logSqrt2PI + k - (1 / 12 - (1 / 360 - 1 / (1260 * k * k)) / (k * k)) / k;
          if (Math.log(v * smu) <= t) {
            return k;
          }
        } else if (k >= 0) {
          var _logFactorial;
          var f = (_logFactorial = logFactorial(k)) != null ? _logFactorial : 0;
          if (Math.log(v) <= k * Math.log(lambda) - lambda - f) {
            return k;
          }
        }
      }
    };
  }
});
var exponential = (function(random2, lambda) {
  if (lambda === void 0) {
    lambda = 1;
  }
  numberValidator(lambda).isPositive();
  return function() {
    return -Math.log(1 - random2.next()) / lambda;
  };
});
var irwinHall = (function(random2, n) {
  if (n === void 0) {
    n = 1;
  }
  numberValidator(n).isInt().greaterThanOrEqual(0);
  return function() {
    var sum = 0;
    for (var i = 0; i < n; ++i) {
      sum += random2.next();
    }
    return sum;
  };
});
var bates = (function(random2, n) {
  if (n === void 0) {
    n = 1;
  }
  numberValidator(n).isInt().isPositive();
  var irwinHall2 = random2.irwinHall(n);
  return function() {
    return irwinHall2() / n;
  };
});
var pareto = (function(random2, alpha) {
  if (alpha === void 0) {
    alpha = 1;
  }
  numberValidator(alpha).greaterThanOrEqual(0);
  var invAlpha = 1 / alpha;
  return function() {
    return 1 / Math.pow(1 - random2.next(), invAlpha);
  };
});
var RNGMathRandom = (function(_RNG) {
  _inheritsLoose(RNGMathRandom2, _RNG);
  function RNGMathRandom2() {
    return _RNG.apply(this, arguments) || this;
  }
  var _proto = RNGMathRandom2.prototype;
  _proto.next = function next() {
    return Math.random();
  };
  _proto.seed = function seed(_seed, _opts) {
  };
  _proto.clone = function clone3() {
    return new RNGMathRandom2();
  };
  _createClass(RNGMathRandom2, [{
    key: "name",
    get: function get() {
      return "default";
    }
  }]);
  return RNGMathRandom2;
})(RNG);
var Random = (function() {
  function Random2(rng) {
    var _this = this;
    this._rng = void 0;
    this._patch = void 0;
    this._cache = {};
    this.next = function() {
      return _this._rng.next();
    };
    this["float"] = function(min, max) {
      return _this.uniform(min, max)();
    };
    this["int"] = function(min, max) {
      return _this.uniformInt(min, max)();
    };
    this.integer = function(min, max) {
      return _this.uniformInt(min, max)();
    };
    this.bool = function() {
      return _this.uniformBoolean()();
    };
    this["boolean"] = function() {
      return _this.uniformBoolean()();
    };
    this.uniform = function(min, max) {
      return _this._memoize("uniform", uniform, min, max);
    };
    this.uniformInt = function(min, max) {
      return _this._memoize("uniformInt", uniformInt, min, max);
    };
    this.uniformBoolean = function() {
      return _this._memoize("uniformBoolean", uniformBoolean);
    };
    this.normal = function(mu, sigma) {
      return normal(_this, mu, sigma);
    };
    this.logNormal = function(mu, sigma) {
      return logNormal(_this, mu, sigma);
    };
    this.bernoulli = function(p) {
      return bernoulli(_this, p);
    };
    this.binomial = function(n, p) {
      return binomial(_this, n, p);
    };
    this.geometric = function(p) {
      return geometric(_this, p);
    };
    this.poisson = function(lambda) {
      return poisson(_this, lambda);
    };
    this.exponential = function(lambda) {
      return exponential(_this, lambda);
    };
    this.irwinHall = function(n) {
      return irwinHall(_this, n);
    };
    this.bates = function(n) {
      return bates(_this, n);
    };
    this.pareto = function(alpha) {
      return pareto(_this, alpha);
    };
    if (rng && rng instanceof RNG) {
      this.use(rng);
    } else {
      this.use(new RNGMathRandom());
    }
    this._cache = {};
  }
  var _proto = Random2.prototype;
  _proto.clone = function clone3() {
    var args = [].slice.call(arguments);
    if (args.length) {
      return new Random2(RNGFactory.apply(void 0, args));
    } else {
      return new Random2(this.rng.clone());
    }
  };
  _proto.use = function use() {
    this._rng = RNGFactory.apply(void 0, [].slice.call(arguments));
  };
  _proto.patch = function patch() {
    if (this._patch) {
      throw new Error("Math.random already patched");
    }
    this._patch = Math.random;
    Math.random = this.uniform();
  };
  _proto.unpatch = function unpatch() {
    if (this._patch) {
      Math.random = this._patch;
      delete this._patch;
    }
  };
  _proto.choice = function choice(array) {
    if (!Array.isArray(array)) {
      throw new Error("Random.choice expected input to be an array, got " + typeof array);
    }
    var length4 = array == null ? void 0 : array.length;
    if (length4 > 0) {
      var index = this.uniformInt(0, length4 - 1)();
      return array[index];
    } else {
      return void 0;
    }
  };
  _proto._memoize = function _memoize(label, getter) {
    var args = [].slice.call(arguments, 2);
    var key = "" + args.join(";");
    var value = this._cache[label];
    if (value === void 0 || value.key !== key) {
      value = {
        key,
        distribution: getter.apply(void 0, [this].concat(args))
      };
      this._cache[label] = value;
    }
    return value.distribution;
  };
  _createClass(Random2, [{
    key: "rng",
    get: function get() {
      return this._rng;
    }
  }]);
  return Random2;
})();
var random = new Random();

// node_modules/d3-zoom/src/constant.js
var constant_default = (x) => () => x;

// node_modules/d3-zoom/src/event.js
function ZoomEvent(type, {
  sourceEvent,
  target,
  transform: transform2,
  dispatch
}) {
  Object.defineProperties(this, {
    type: { value: type, enumerable: true, configurable: true },
    sourceEvent: { value: sourceEvent, enumerable: true, configurable: true },
    target: { value: target, enumerable: true, configurable: true },
    transform: { value: transform2, enumerable: true, configurable: true },
    _: { value: dispatch }
  });
}

// node_modules/d3-zoom/src/transform.js
function Transform(k, x, y) {
  this.k = k;
  this.x = x;
  this.y = y;
}
Transform.prototype = {
  constructor: Transform,
  scale: function(k) {
    return k === 1 ? this : new Transform(this.k * k, this.x, this.y);
  },
  translate: function(x, y) {
    return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);
  },
  apply: function(point) {
    return [point[0] * this.k + this.x, point[1] * this.k + this.y];
  },
  applyX: function(x) {
    return x * this.k + this.x;
  },
  applyY: function(y) {
    return y * this.k + this.y;
  },
  invert: function(location) {
    return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
  },
  invertX: function(x) {
    return (x - this.x) / this.k;
  },
  invertY: function(y) {
    return (y - this.y) / this.k;
  },
  rescaleX: function(x) {
    return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));
  },
  rescaleY: function(y) {
    return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));
  },
  toString: function() {
    return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
  }
};
var identity2 = new Transform(1, 0, 0);
transform.prototype = Transform.prototype;
function transform(node) {
  while (!node.__zoom) if (!(node = node.parentNode)) return identity2;
  return node.__zoom;
}

// node_modules/d3-zoom/src/noevent.js
function nopropagation(event) {
  event.stopImmediatePropagation();
}
function noevent_default(event) {
  event.preventDefault();
  event.stopImmediatePropagation();
}

// node_modules/d3-zoom/src/zoom.js
function defaultFilter(event) {
  return (!event.ctrlKey || event.type === "wheel") && !event.button;
}
function defaultExtent() {
  var e = this;
  if (e instanceof SVGElement) {
    e = e.ownerSVGElement || e;
    if (e.hasAttribute("viewBox")) {
      e = e.viewBox.baseVal;
      return [[e.x, e.y], [e.x + e.width, e.y + e.height]];
    }
    return [[0, 0], [e.width.baseVal.value, e.height.baseVal.value]];
  }
  return [[0, 0], [e.clientWidth, e.clientHeight]];
}
function defaultTransform() {
  return this.__zoom || identity2;
}
function defaultWheelDelta(event) {
  return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 2e-3) * (event.ctrlKey ? 10 : 1);
}
function defaultTouchable() {
  return navigator.maxTouchPoints || "ontouchstart" in this;
}
function defaultConstrain(transform2, extent2, translateExtent) {
  var dx0 = transform2.invertX(extent2[0][0]) - translateExtent[0][0], dx1 = transform2.invertX(extent2[1][0]) - translateExtent[1][0], dy0 = transform2.invertY(extent2[0][1]) - translateExtent[0][1], dy1 = transform2.invertY(extent2[1][1]) - translateExtent[1][1];
  return transform2.translate(
    dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),
    dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)
  );
}
function zoom_default2() {
  var filter = defaultFilter, extent2 = defaultExtent, constrain = defaultConstrain, wheelDelta = defaultWheelDelta, touchable = defaultTouchable, scaleExtent = [0, Infinity], translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]], duration = 250, interpolate = zoom_default, listeners = dispatch_default("start", "zoom", "end"), touchstarting, touchfirst, touchending, touchDelay = 500, wheelDelay = 150, clickDistance2 = 0, tapDistance = 10;
  function zoom(selection) {
    selection.property("__zoom", defaultTransform).on("wheel.zoom", wheeled, { passive: false }).on("mousedown.zoom", mousedowned).on("dblclick.zoom", dblclicked).filter(touchable).on("touchstart.zoom", touchstarted).on("touchmove.zoom", touchmoved).on("touchend.zoom touchcancel.zoom", touchended).style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }
  zoom.transform = function(collection, transform2, point, event) {
    var selection = collection.selection ? collection.selection() : collection;
    selection.property("__zoom", defaultTransform);
    if (collection !== selection) {
      schedule(collection, transform2, point, event);
    } else {
      selection.interrupt().each(function() {
        gesture(this, arguments).event(event).start().zoom(null, typeof transform2 === "function" ? transform2.apply(this, arguments) : transform2).end();
      });
    }
  };
  zoom.scaleBy = function(selection, k, p, event) {
    zoom.scaleTo(selection, function() {
      var k0 = this.__zoom.k, k1 = typeof k === "function" ? k.apply(this, arguments) : k;
      return k0 * k1;
    }, p, event);
  };
  zoom.scaleTo = function(selection, k, p, event) {
    zoom.transform(selection, function() {
      var e = extent2.apply(this, arguments), t0 = this.__zoom, p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p, p1 = t0.invert(p0), k1 = typeof k === "function" ? k.apply(this, arguments) : k;
      return constrain(translate2(scale3(t0, k1), p0, p1), e, translateExtent);
    }, p, event);
  };
  zoom.translateBy = function(selection, x, y, event) {
    zoom.transform(selection, function() {
      return constrain(this.__zoom.translate(
        typeof x === "function" ? x.apply(this, arguments) : x,
        typeof y === "function" ? y.apply(this, arguments) : y
      ), extent2.apply(this, arguments), translateExtent);
    }, null, event);
  };
  zoom.translateTo = function(selection, x, y, p, event) {
    zoom.transform(selection, function() {
      var e = extent2.apply(this, arguments), t = this.__zoom, p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p;
      return constrain(identity2.translate(p0[0], p0[1]).scale(t.k).translate(
        typeof x === "function" ? -x.apply(this, arguments) : -x,
        typeof y === "function" ? -y.apply(this, arguments) : -y
      ), e, translateExtent);
    }, p, event);
  };
  function scale3(transform2, k) {
    k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k));
    return k === transform2.k ? transform2 : new Transform(k, transform2.x, transform2.y);
  }
  function translate2(transform2, p0, p1) {
    var x = p0[0] - p1[0] * transform2.k, y = p0[1] - p1[1] * transform2.k;
    return x === transform2.x && y === transform2.y ? transform2 : new Transform(transform2.k, x, y);
  }
  function centroid(extent3) {
    return [(+extent3[0][0] + +extent3[1][0]) / 2, (+extent3[0][1] + +extent3[1][1]) / 2];
  }
  function schedule(transition, transform2, point, event) {
    transition.on("start.zoom", function() {
      gesture(this, arguments).event(event).start();
    }).on("interrupt.zoom end.zoom", function() {
      gesture(this, arguments).event(event).end();
    }).tween("zoom", function() {
      var that = this, args = arguments, g = gesture(that, args).event(event), e = extent2.apply(that, args), p = point == null ? centroid(e) : typeof point === "function" ? point.apply(that, args) : point, w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]), a = that.__zoom, b = typeof transform2 === "function" ? transform2.apply(that, args) : transform2, i = interpolate(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));
      return function(t) {
        if (t === 1) t = b;
        else {
          var l = i(t), k = w / l[2];
          t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k);
        }
        g.zoom(null, t);
      };
    });
  }
  function gesture(that, args, clean) {
    return !clean && that.__zooming || new Gesture(that, args);
  }
  function Gesture(that, args) {
    this.that = that;
    this.args = args;
    this.active = 0;
    this.sourceEvent = null;
    this.extent = extent2.apply(that, args);
    this.taps = 0;
  }
  Gesture.prototype = {
    event: function(event) {
      if (event) this.sourceEvent = event;
      return this;
    },
    start: function() {
      if (++this.active === 1) {
        this.that.__zooming = this;
        this.emit("start");
      }
      return this;
    },
    zoom: function(key, transform2) {
      if (this.mouse && key !== "mouse") this.mouse[1] = transform2.invert(this.mouse[0]);
      if (this.touch0 && key !== "touch") this.touch0[1] = transform2.invert(this.touch0[0]);
      if (this.touch1 && key !== "touch") this.touch1[1] = transform2.invert(this.touch1[0]);
      this.that.__zoom = transform2;
      this.emit("zoom");
      return this;
    },
    end: function() {
      if (--this.active === 0) {
        delete this.that.__zooming;
        this.emit("end");
      }
      return this;
    },
    emit: function(type) {
      var d = select_default(this.that).datum();
      listeners.call(
        type,
        this.that,
        new ZoomEvent(type, {
          sourceEvent: this.sourceEvent,
          target: zoom,
          type,
          transform: this.that.__zoom,
          dispatch: listeners
        }),
        d
      );
    }
  };
  function wheeled(event, ...args) {
    if (!filter.apply(this, arguments)) return;
    var g = gesture(this, args).event(event), t = this.__zoom, k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))), p = pointer_default(event);
    if (g.wheel) {
      if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {
        g.mouse[1] = t.invert(g.mouse[0] = p);
      }
      clearTimeout(g.wheel);
    } else if (t.k === k) return;
    else {
      g.mouse = [p, t.invert(p)];
      interrupt_default(this);
      g.start();
    }
    noevent_default(event);
    g.wheel = setTimeout(wheelidled, wheelDelay);
    g.zoom("mouse", constrain(translate2(scale3(t, k), g.mouse[0], g.mouse[1]), g.extent, translateExtent));
    function wheelidled() {
      g.wheel = null;
      g.end();
    }
  }
  function mousedowned(event, ...args) {
    if (touchending || !filter.apply(this, arguments)) return;
    var currentTarget = event.currentTarget, g = gesture(this, args, true).event(event), v = select_default(event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true), p = pointer_default(event, currentTarget), x0 = event.clientX, y0 = event.clientY;
    nodrag_default(event.view);
    nopropagation(event);
    g.mouse = [p, this.__zoom.invert(p)];
    interrupt_default(this);
    g.start();
    function mousemoved(event2) {
      noevent_default(event2);
      if (!g.moved) {
        var dx = event2.clientX - x0, dy = event2.clientY - y0;
        g.moved = dx * dx + dy * dy > clickDistance2;
      }
      g.event(event2).zoom("mouse", constrain(translate2(g.that.__zoom, g.mouse[0] = pointer_default(event2, currentTarget), g.mouse[1]), g.extent, translateExtent));
    }
    function mouseupped(event2) {
      v.on("mousemove.zoom mouseup.zoom", null);
      yesdrag(event2.view, g.moved);
      noevent_default(event2);
      g.event(event2).end();
    }
  }
  function dblclicked(event, ...args) {
    if (!filter.apply(this, arguments)) return;
    var t0 = this.__zoom, p0 = pointer_default(event.changedTouches ? event.changedTouches[0] : event, this), p1 = t0.invert(p0), k1 = t0.k * (event.shiftKey ? 0.5 : 2), t1 = constrain(translate2(scale3(t0, k1), p0, p1), extent2.apply(this, args), translateExtent);
    noevent_default(event);
    if (duration > 0) select_default(this).transition().duration(duration).call(schedule, t1, p0, event);
    else select_default(this).call(zoom.transform, t1, p0, event);
  }
  function touchstarted(event, ...args) {
    if (!filter.apply(this, arguments)) return;
    var touches = event.touches, n = touches.length, g = gesture(this, args, event.changedTouches.length === n).event(event), started, i, t, p;
    nopropagation(event);
    for (i = 0; i < n; ++i) {
      t = touches[i], p = pointer_default(t, this);
      p = [p, this.__zoom.invert(p), t.identifier];
      if (!g.touch0) g.touch0 = p, started = true, g.taps = 1 + !!touchstarting;
      else if (!g.touch1 && g.touch0[2] !== p[2]) g.touch1 = p, g.taps = 0;
    }
    if (touchstarting) touchstarting = clearTimeout(touchstarting);
    if (started) {
      if (g.taps < 2) touchfirst = p[0], touchstarting = setTimeout(function() {
        touchstarting = null;
      }, touchDelay);
      interrupt_default(this);
      g.start();
    }
  }
  function touchmoved(event, ...args) {
    if (!this.__zooming) return;
    var g = gesture(this, args).event(event), touches = event.changedTouches, n = touches.length, i, t, p, l;
    noevent_default(event);
    for (i = 0; i < n; ++i) {
      t = touches[i], p = pointer_default(t, this);
      if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;
      else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;
    }
    t = g.that.__zoom;
    if (g.touch1) {
      var p0 = g.touch0[0], l0 = g.touch0[1], p1 = g.touch1[0], l1 = g.touch1[1], dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp, dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
      t = scale3(t, Math.sqrt(dp / dl));
      p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
      l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
    } else if (g.touch0) p = g.touch0[0], l = g.touch0[1];
    else return;
    g.zoom("touch", constrain(translate2(t, p, l), g.extent, translateExtent));
  }
  function touchended(event, ...args) {
    if (!this.__zooming) return;
    var g = gesture(this, args).event(event), touches = event.changedTouches, n = touches.length, i, t;
    nopropagation(event);
    if (touchending) clearTimeout(touchending);
    touchending = setTimeout(function() {
      touchending = null;
    }, touchDelay);
    for (i = 0; i < n; ++i) {
      t = touches[i];
      if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;
      else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;
    }
    if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;
    if (g.touch0) g.touch0[1] = this.__zoom.invert(g.touch0[0]);
    else {
      g.end();
      if (g.taps === 2) {
        t = pointer_default(t, this);
        if (Math.hypot(touchfirst[0] - t[0], touchfirst[1] - t[1]) < tapDistance) {
          var p = select_default(this).on("dblclick.zoom");
          if (p) p.apply(this, arguments);
        }
      }
    }
  }
  zoom.wheelDelta = function(_) {
    return arguments.length ? (wheelDelta = typeof _ === "function" ? _ : constant_default(+_), zoom) : wheelDelta;
  };
  zoom.filter = function(_) {
    return arguments.length ? (filter = typeof _ === "function" ? _ : constant_default(!!_), zoom) : filter;
  };
  zoom.touchable = function(_) {
    return arguments.length ? (touchable = typeof _ === "function" ? _ : constant_default(!!_), zoom) : touchable;
  };
  zoom.extent = function(_) {
    return arguments.length ? (extent2 = typeof _ === "function" ? _ : constant_default([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent2;
  };
  zoom.scaleExtent = function(_) {
    return arguments.length ? (scaleExtent[0] = +_[0], scaleExtent[1] = +_[1], zoom) : [scaleExtent[0], scaleExtent[1]];
  };
  zoom.translateExtent = function(_) {
    return arguments.length ? (translateExtent[0][0] = +_[0][0], translateExtent[1][0] = +_[1][0], translateExtent[0][1] = +_[0][1], translateExtent[1][1] = +_[1][1], zoom) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];
  };
  zoom.constrain = function(_) {
    return arguments.length ? (constrain = _, zoom) : constrain;
  };
  zoom.duration = function(_) {
    return arguments.length ? (duration = +_, zoom) : duration;
  };
  zoom.interpolate = function(_) {
    return arguments.length ? (interpolate = _, zoom) : interpolate;
  };
  zoom.on = function() {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? zoom : value;
  };
  zoom.clickDistance = function(_) {
    return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom) : Math.sqrt(clickDistance2);
  };
  zoom.tapDistance = function(_) {
    return arguments.length ? (tapDistance = +_, zoom) : tapDistance;
  };
  return zoom;
}

// node_modules/@cosmograph/cosmos/dist/index.js
var defaultNodeColor = "#b3b3b3";
var defaultGreyoutNodeOpacity = 0.1;
var defaultNodeSize = 4;
var defaultLinkColor = "#666666";
var defaultGreyoutLinkOpacity = 0.1;
var defaultLinkWidth = 1;
var defaultBackgroundColor = "#222222";
var defaultConfigValues = {
  disableSimulation: false,
  spaceSize: 4096,
  nodeSizeScale: 1,
  linkWidthScale: 1,
  arrowSizeScale: 1,
  renderLinks: true,
  curvedLinks: false,
  curvedLinkSegments: 19,
  curvedLinkWeight: 0.8,
  curvedLinkControlPointDistance: 0.5,
  arrowLinks: true,
  linkVisibilityDistanceRange: [50, 150],
  linkVisibilityMinTransparency: 0.25,
  hoveredNodeRingColor: "white",
  focusedNodeRingColor: "white",
  useQuadtree: false,
  simulation: {
    decay: 1e3,
    gravity: 0,
    center: 0,
    repulsion: 0.1,
    repulsionTheta: 1.7,
    repulsionQuadtreeLevels: 12,
    linkSpring: 1,
    linkDistance: 2,
    linkDistRandomVariationRange: [1, 1.2],
    repulsionFromMouse: 2,
    friction: 0.85
  },
  showFPSMonitor: false,
  pixelRatio: 2,
  scaleNodesOnZoom: true,
  disableZoom: false,
  fitViewOnInit: true,
  fitViewDelay: 250,
  nodeSamplingDistance: 150
};
var hoveredNodeRingOpacity = 0.7;
var focusedNodeRingOpacity = 0.95;
var defaultScaleToZoom = 3;
var isFunction = (a) => typeof a === "function";
var isArray = (a) => Array.isArray(a);
var isObject = (a) => a instanceof Object;
var isAClassInstance = (a) => {
  if (a instanceof Object) {
    return a.constructor.name !== "Function" && a.constructor.name !== "Object";
  } else
    return false;
};
var isPlainObject = (a) => isObject(a) && !isArray(a) && !isFunction(a) && !isAClassInstance(a);
function getValue(d, accessor, index) {
  if (isFunction(accessor))
    return accessor(d, index);
  else
    return accessor;
}
function getRgbaColor(value) {
  var _a;
  let rgba;
  if (isArray(value)) {
    rgba = value;
  } else {
    const color$1 = color(value);
    const rgb = color$1 === null || color$1 === void 0 ? void 0 : color$1.rgb();
    rgba = [(rgb === null || rgb === void 0 ? void 0 : rgb.r) || 0, (rgb === null || rgb === void 0 ? void 0 : rgb.g) || 0, (rgb === null || rgb === void 0 ? void 0 : rgb.b) || 0, (_a = color$1 === null || color$1 === void 0 ? void 0 : color$1.opacity) !== null && _a !== void 0 ? _a : 1];
  }
  return [
    rgba[0] / 255,
    rgba[1] / 255,
    rgba[2] / 255,
    rgba[3]
  ];
}
function readPixels(reglInstance, fbo) {
  let resultPixels = new Float32Array();
  reglInstance({ framebuffer: fbo })(() => {
    resultPixels = reglInstance.read();
  });
  return resultPixels;
}
function clamp(num, min, max) {
  return Math.min(Math.max(num, min), max);
}
var GraphConfig = class {
  constructor() {
    this.disableSimulation = defaultConfigValues.disableSimulation;
    this.backgroundColor = defaultBackgroundColor;
    this.spaceSize = defaultConfigValues.spaceSize;
    this.nodeColor = defaultNodeColor;
    this.nodeGreyoutOpacity = defaultGreyoutNodeOpacity;
    this.nodeSize = defaultNodeSize;
    this.nodeSizeScale = defaultConfigValues.nodeSizeScale;
    this.renderHighlightedNodeRing = true;
    this.highlightedNodeRingColor = void 0;
    this.renderHoveredNodeRing = true;
    this.hoveredNodeRingColor = defaultConfigValues.hoveredNodeRingColor;
    this.focusedNodeRingColor = defaultConfigValues.focusedNodeRingColor;
    this.linkColor = defaultLinkColor;
    this.linkGreyoutOpacity = defaultGreyoutLinkOpacity;
    this.linkWidth = defaultLinkWidth;
    this.linkWidthScale = defaultConfigValues.linkWidthScale;
    this.renderLinks = defaultConfigValues.renderLinks;
    this.curvedLinks = defaultConfigValues.curvedLinks;
    this.curvedLinkSegments = defaultConfigValues.curvedLinkSegments;
    this.curvedLinkWeight = defaultConfigValues.curvedLinkWeight;
    this.curvedLinkControlPointDistance = defaultConfigValues.curvedLinkControlPointDistance;
    this.linkArrows = defaultConfigValues.arrowLinks;
    this.linkArrowsSizeScale = defaultConfigValues.arrowSizeScale;
    this.linkVisibilityDistanceRange = defaultConfigValues.linkVisibilityDistanceRange;
    this.linkVisibilityMinTransparency = defaultConfigValues.linkVisibilityMinTransparency;
    this.useQuadtree = defaultConfigValues.useQuadtree;
    this.simulation = {
      decay: defaultConfigValues.simulation.decay,
      gravity: defaultConfigValues.simulation.gravity,
      center: defaultConfigValues.simulation.center,
      repulsion: defaultConfigValues.simulation.repulsion,
      repulsionTheta: defaultConfigValues.simulation.repulsionTheta,
      repulsionQuadtreeLevels: defaultConfigValues.simulation.repulsionQuadtreeLevels,
      linkSpring: defaultConfigValues.simulation.linkSpring,
      linkDistance: defaultConfigValues.simulation.linkDistance,
      linkDistRandomVariationRange: defaultConfigValues.simulation.linkDistRandomVariationRange,
      repulsionFromMouse: defaultConfigValues.simulation.repulsionFromMouse,
      friction: defaultConfigValues.simulation.friction,
      onStart: void 0,
      onTick: void 0,
      onEnd: void 0,
      onPause: void 0,
      onRestart: void 0
    };
    this.events = {
      onClick: void 0,
      onMouseMove: void 0,
      onNodeMouseOver: void 0,
      onNodeMouseOut: void 0,
      onZoomStart: void 0,
      onZoom: void 0,
      onZoomEnd: void 0
    };
    this.showFPSMonitor = defaultConfigValues.showFPSMonitor;
    this.pixelRatio = defaultConfigValues.pixelRatio;
    this.scaleNodesOnZoom = defaultConfigValues.scaleNodesOnZoom;
    this.initialZoomLevel = void 0;
    this.disableZoom = defaultConfigValues.disableZoom;
    this.fitViewOnInit = defaultConfigValues.fitViewOnInit;
    this.fitViewDelay = defaultConfigValues.fitViewDelay;
    this.fitViewByNodesInRect = void 0;
    this.randomSeed = void 0;
    this.nodeSamplingDistance = defaultConfigValues.nodeSamplingDistance;
  }
  init(config) {
    Object.keys(config).forEach((configParameter) => {
      this.deepMergeConfig(this.getConfig(), config, configParameter);
    });
  }
  deepMergeConfig(current, next, key) {
    if (isPlainObject(current[key]) && isPlainObject(next[key])) {
      Object.keys(next[key]).forEach((configParameter) => {
        this.deepMergeConfig(current[key], next[key], configParameter);
      });
    } else
      current[key] = next[key];
  }
  getConfig() {
    return this;
  }
};
var CoreModule = class {
  constructor(reglInstance, config, store, data, points) {
    this.reglInstance = reglInstance;
    this.config = config;
    this.store = store;
    this.data = data;
    if (points)
      this.points = points;
  }
};
var calculateCentermassFrag = "#ifdef GL_ES\nprecision highp float;\n#define GLSLIFY 1\n#endif\nvarying vec4 rgba;void main(){gl_FragColor=rgba;}";
var calculateCentermassVert = "#ifdef GL_ES\nprecision highp float;\n#define GLSLIFY 1\n#endif\nuniform sampler2D position;uniform float pointsTextureSize;attribute vec2 indexes;varying vec4 rgba;void main(){vec4 pointPosition=texture2D(position,indexes/pointsTextureSize);rgba=vec4(pointPosition.xy,1.0,0.0);gl_Position=vec4(0.0,0.0,0.0,1.0);gl_PointSize=1.0;}";
var forceFrag$5 = "#ifdef GL_ES\nprecision highp float;\n#define GLSLIFY 1\n#endif\nuniform sampler2D position;uniform sampler2D centermass;uniform float center;uniform float alpha;varying vec2 index;void main(){vec4 pointPosition=texture2D(position,index);vec4 velocity=vec4(0.0);vec4 centermassValues=texture2D(centermass,vec2(0.0));vec2 centermassPosition=centermassValues.xy/centermassValues.b;vec2 distVector=centermassPosition-pointPosition.xy;float dist=sqrt(dot(distVector,distVector));if(dist>0.0){float angle=atan(distVector.y,distVector.x);float addV=alpha*center*dist*0.01;velocity.rg+=addV*vec2(cos(angle),sin(angle));}gl_FragColor=velocity;}";
function createQuadBuffer(reglInstance) {
  const quadBuffer = reglInstance.buffer(new Float32Array([-1, -1, 1, -1, -1, 1, 1, 1]));
  return {
    buffer: quadBuffer,
    size: 2
  };
}
function createIndexesBuffer(reglInstance, textureSize) {
  const indexes = new Float32Array(textureSize * textureSize * 2);
  for (let y = 0; y < textureSize; y++) {
    for (let x = 0; x < textureSize; x++) {
      const i = y * textureSize * 2 + x * 2;
      indexes[i + 0] = x;
      indexes[i + 1] = y;
    }
  }
  const indexBuffer = reglInstance.buffer(indexes);
  return {
    buffer: indexBuffer,
    size: 2
  };
}
function destroyFramebuffer(fbo) {
  var _a;
  if (!fbo)
    return;
  if ((_a = fbo === null || fbo === void 0 ? void 0 : fbo._framebuffer) === null || _a === void 0 ? void 0 : _a.framebuffer) {
    fbo.destroy();
  }
}
function destroyBuffer(fbo) {
  var _a;
  if (!fbo)
    return;
  if ((_a = fbo === null || fbo === void 0 ? void 0 : fbo._buffer) === null || _a === void 0 ? void 0 : _a.buffer) {
    fbo.destroy();
  }
}
var clearFrag = "#ifdef GL_ES\nprecision highp float;\n#define GLSLIFY 1\n#endif\nvarying vec2 index;void main(){gl_FragColor=vec4(0.0);}";
var updateVert = "#ifdef GL_ES\nprecision highp float;\n#define GLSLIFY 1\n#endif\nattribute vec2 quad;varying vec2 index;void main(){index=(quad+1.0)/2.0;gl_Position=vec4(quad,0,1);}";
var ForceCenter = class extends CoreModule {
  create() {
    const { reglInstance } = this;
    this.centermassFbo = reglInstance.framebuffer({
      color: reglInstance.texture({
        data: new Float32Array(4).fill(0),
        shape: [1, 1, 4],
        type: "float"
      }),
      depth: false,
      stencil: false
    });
  }
  initPrograms() {
    const { reglInstance, config, store, data, points } = this;
    this.clearCentermassCommand = reglInstance({
      frag: clearFrag,
      vert: updateVert,
      framebuffer: this.centermassFbo,
      primitive: "triangle strip",
      count: 4,
      attributes: { quad: createQuadBuffer(reglInstance) }
    });
    this.calculateCentermassCommand = reglInstance({
      frag: calculateCentermassFrag,
      vert: calculateCentermassVert,
      framebuffer: () => this.centermassFbo,
      primitive: "points",
      count: () => data.nodes.length,
      attributes: { indexes: createIndexesBuffer(reglInstance, store.pointsTextureSize) },
      uniforms: {
        position: () => points === null || points === void 0 ? void 0 : points.previousPositionFbo,
        pointsTextureSize: () => store.pointsTextureSize
      },
      blend: {
        enable: true,
        func: {
          src: "one",
          dst: "one"
        },
        equation: {
          rgb: "add",
          alpha: "add"
        }
      },
      depth: { enable: false, mask: false },
      stencil: { enable: false }
    });
    this.runCommand = reglInstance({
      frag: forceFrag$5,
      vert: updateVert,
      framebuffer: () => points === null || points === void 0 ? void 0 : points.velocityFbo,
      primitive: "triangle strip",
      count: 4,
      attributes: { quad: createQuadBuffer(reglInstance) },
      uniforms: {
        position: () => points === null || points === void 0 ? void 0 : points.previousPositionFbo,
        centermass: () => this.centermassFbo,
        center: () => {
          var _a;
          return (_a = config.simulation) === null || _a === void 0 ? void 0 : _a.center;
        },
        alpha: () => store.alpha
      }
    });
  }
  run() {
    var _a, _b, _c;
    (_a = this.clearCentermassCommand) === null || _a === void 0 ? void 0 : _a.call(this);
    (_b = this.calculateCentermassCommand) === null || _b === void 0 ? void 0 : _b.call(this);
    (_c = this.runCommand) === null || _c === void 0 ? void 0 : _c.call(this);
  }
  destroy() {
    destroyFramebuffer(this.centermassFbo);
  }
};
var forceFrag$4 = "#ifdef GL_ES\nprecision highp float;\n#define GLSLIFY 1\n#endif\nuniform sampler2D position;uniform float gravity;uniform float spaceSize;uniform float alpha;varying vec2 index;void main(){vec4 pointPosition=texture2D(position,index);vec4 velocity=vec4(0.0);vec2 centerPosition=vec2(spaceSize/2.0);vec2 distVector=centerPosition-pointPosition.rg;float dist=sqrt(dot(distVector,distVector));if(dist>0.0){float angle=atan(distVector.y,distVector.x);float addV=alpha*gravity*dist*0.1;velocity.rg+=addV*vec2(cos(angle),sin(angle));}gl_FragColor=velocity;}";
var ForceGravity = class extends CoreModule {
  initPrograms() {
    const { reglInstance, config, store, points } = this;
    this.runCommand = reglInstance({
      frag: forceFrag$4,
      vert: updateVert,
      framebuffer: () => points === null || points === void 0 ? void 0 : points.velocityFbo,
      primitive: "triangle strip",
      count: 4,
      attributes: { quad: createQuadBuffer(reglInstance) },
      uniforms: {
        position: () => points === null || points === void 0 ? void 0 : points.previousPositionFbo,
        gravity: () => {
          var _a;
          return (_a = config.simulation) === null || _a === void 0 ? void 0 : _a.gravity;
        },
        spaceSize: () => store.adjustedSpaceSize,
        alpha: () => store.alpha
      }
    });
  }
  run() {
    var _a;
    (_a = this.runCommand) === null || _a === void 0 ? void 0 : _a.call(this);
  }
};
function forceFrag$3(maxLinks) {
  return `
#ifdef GL_ES
precision highp float;
#endif

uniform sampler2D position;
uniform float linkSpring;
uniform float linkDistance;
uniform vec2 linkDistRandomVariationRange;

uniform sampler2D linkFirstIndicesAndAmount;
uniform sampler2D linkIndices;
uniform sampler2D linkBiasAndStrength;
uniform sampler2D linkRandomDistanceFbo;

uniform float pointsTextureSize;
uniform float linksTextureSize;
uniform float alpha;

varying vec2 index;

const float MAX_LINKS = ${maxLinks}.0;

void main() {
  vec4 pointPosition = texture2D(position, index);
  vec4 velocity = vec4(0.0);

  vec4 linkFirstIJAndAmount = texture2D(linkFirstIndicesAndAmount, index);
  float iCount = linkFirstIJAndAmount.r;
  float jCount = linkFirstIJAndAmount.g;
  float linkAmount = linkFirstIJAndAmount.b;
  if (linkAmount > 0.0) {
    for (float i = 0.0; i < MAX_LINKS; i += 1.0) {
      if (i < linkAmount) {
        if (iCount >= linksTextureSize) {
          iCount = 0.0;
          jCount += 1.0;
        }
        vec2 linkTextureIndex = (vec2(iCount, jCount) + 0.5) / linksTextureSize;
        vec4 connectedPointIndex = texture2D(linkIndices, linkTextureIndex);
        vec4 biasAndStrength = texture2D(linkBiasAndStrength, linkTextureIndex);
        vec4 randomMinDistance = texture2D(linkRandomDistanceFbo, linkTextureIndex);
        float bias = biasAndStrength.r;
        float strength = biasAndStrength.g;
        float randomMinLinkDist = randomMinDistance.r * (linkDistRandomVariationRange.g - linkDistRandomVariationRange.r) + linkDistRandomVariationRange.r;
        randomMinLinkDist *= linkDistance;

        iCount += 1.0;

        vec4 connectedPointPosition = texture2D(position, (connectedPointIndex.rg + 0.5) / pointsTextureSize);
        float x = connectedPointPosition.x - (pointPosition.x + velocity.x);
        float y = connectedPointPosition.y - (pointPosition.y + velocity.y);
        float l = sqrt(x * x + y * y);
        l = max(l, randomMinLinkDist * 0.99);
        l = (l - randomMinLinkDist) / l;
        l *= linkSpring * alpha;
        l *= strength;
        l *= bias;
        x *= l;
        y *= l;
        velocity.x += x;
        velocity.y += y;
      }
    }
  }

  gl_FragColor = vec4(velocity.rg, 0.0, 0.0);
}
  `;
}
var LinkDirection;
(function(LinkDirection2) {
  LinkDirection2["OUTGOING"] = "outgoing";
  LinkDirection2["INCOMING"] = "incoming";
})(LinkDirection || (LinkDirection = {}));
var ForceLink = class extends CoreModule {
  constructor() {
    super(...arguments);
    this.linkFirstIndicesAndAmount = new Float32Array();
    this.indices = new Float32Array();
    this.maxPointDegree = 0;
  }
  create(direction) {
    const { reglInstance, store: { pointsTextureSize, linksTextureSize }, data } = this;
    if (!pointsTextureSize || !linksTextureSize)
      return;
    this.linkFirstIndicesAndAmount = new Float32Array(pointsTextureSize * pointsTextureSize * 4);
    this.indices = new Float32Array(linksTextureSize * linksTextureSize * 4);
    const linkBiasAndStrengthState = new Float32Array(linksTextureSize * linksTextureSize * 4);
    const linkDistanceState = new Float32Array(linksTextureSize * linksTextureSize * 4);
    const grouped = direction === LinkDirection.INCOMING ? data.groupedSourceToTargetLinks : data.groupedTargetToSourceLinks;
    this.maxPointDegree = 0;
    let linkIndex = 0;
    grouped.forEach((connectedNodeIndices, nodeIndex) => {
      this.linkFirstIndicesAndAmount[nodeIndex * 4 + 0] = linkIndex % linksTextureSize;
      this.linkFirstIndicesAndAmount[nodeIndex * 4 + 1] = Math.floor(linkIndex / linksTextureSize);
      this.linkFirstIndicesAndAmount[nodeIndex * 4 + 2] = connectedNodeIndices.size;
      connectedNodeIndices.forEach((connectedNodeIndex) => {
        var _a, _b;
        this.indices[linkIndex * 4 + 0] = connectedNodeIndex % pointsTextureSize;
        this.indices[linkIndex * 4 + 1] = Math.floor(connectedNodeIndex / pointsTextureSize);
        const degree2 = (_a = data.degree[data.getInputIndexBySortedIndex(connectedNodeIndex)]) !== null && _a !== void 0 ? _a : 0;
        const connectedDegree = (_b = data.degree[data.getInputIndexBySortedIndex(nodeIndex)]) !== null && _b !== void 0 ? _b : 0;
        const bias = degree2 / (degree2 + connectedDegree);
        let strength = 1 / Math.min(degree2, connectedDegree);
        strength = Math.sqrt(strength);
        linkBiasAndStrengthState[linkIndex * 4 + 0] = bias;
        linkBiasAndStrengthState[linkIndex * 4 + 1] = strength;
        linkDistanceState[linkIndex * 4] = this.store.getRandomFloat(0, 1);
        linkIndex += 1;
      });
      this.maxPointDegree = Math.max(this.maxPointDegree, connectedNodeIndices.size);
    });
    this.linkFirstIndicesAndAmountFbo = reglInstance.framebuffer({
      color: reglInstance.texture({
        data: this.linkFirstIndicesAndAmount,
        shape: [pointsTextureSize, pointsTextureSize, 4],
        type: "float"
      }),
      depth: false,
      stencil: false
    });
    this.indicesFbo = reglInstance.framebuffer({
      color: reglInstance.texture({
        data: this.indices,
        shape: [linksTextureSize, linksTextureSize, 4],
        type: "float"
      }),
      depth: false,
      stencil: false
    });
    this.biasAndStrengthFbo = reglInstance.framebuffer({
      color: reglInstance.texture({
        data: linkBiasAndStrengthState,
        shape: [linksTextureSize, linksTextureSize, 4],
        type: "float"
      }),
      depth: false,
      stencil: false
    });
    this.randomDistanceFbo = reglInstance.framebuffer({
      color: reglInstance.texture({
        data: linkDistanceState,
        shape: [linksTextureSize, linksTextureSize, 4],
        type: "float"
      }),
      depth: false,
      stencil: false
    });
  }
  initPrograms() {
    const { reglInstance, config, store, points } = this;
    this.runCommand = reglInstance({
      frag: () => forceFrag$3(this.maxPointDegree),
      vert: updateVert,
      framebuffer: () => points === null || points === void 0 ? void 0 : points.velocityFbo,
      primitive: "triangle strip",
      count: 4,
      attributes: { quad: createQuadBuffer(reglInstance) },
      uniforms: {
        position: () => points === null || points === void 0 ? void 0 : points.previousPositionFbo,
        linkSpring: () => {
          var _a;
          return (_a = config.simulation) === null || _a === void 0 ? void 0 : _a.linkSpring;
        },
        linkDistance: () => {
          var _a;
          return (_a = config.simulation) === null || _a === void 0 ? void 0 : _a.linkDistance;
        },
        linkDistRandomVariationRange: () => {
          var _a;
          return (_a = config.simulation) === null || _a === void 0 ? void 0 : _a.linkDistRandomVariationRange;
        },
        linkFirstIndicesAndAmount: () => this.linkFirstIndicesAndAmountFbo,
        linkIndices: () => this.indicesFbo,
        linkBiasAndStrength: () => this.biasAndStrengthFbo,
        linkRandomDistanceFbo: () => this.randomDistanceFbo,
        pointsTextureSize: () => store.pointsTextureSize,
        linksTextureSize: () => store.linksTextureSize,
        alpha: () => store.alpha
      }
    });
  }
  run() {
    var _a;
    (_a = this.runCommand) === null || _a === void 0 ? void 0 : _a.call(this);
  }
  destroy() {
    destroyFramebuffer(this.linkFirstIndicesAndAmountFbo);
    destroyFramebuffer(this.indicesFbo);
    destroyFramebuffer(this.biasAndStrengthFbo);
    destroyFramebuffer(this.randomDistanceFbo);
  }
};
var calculateLevelFrag = "#ifdef GL_ES\nprecision highp float;\n#define GLSLIFY 1\n#endif\nvarying vec4 rgba;void main(){gl_FragColor=rgba;}";
var calculateLevelVert = "#ifdef GL_ES\nprecision highp float;\n#define GLSLIFY 1\n#endif\nuniform sampler2D position;uniform float pointsTextureSize;uniform float levelTextureSize;uniform float cellSize;attribute vec2 indexes;varying vec4 rgba;void main(){vec4 pointPosition=texture2D(position,indexes/pointsTextureSize);rgba=vec4(pointPosition.rg,1.0,0.0);float n=floor(pointPosition.x/cellSize);float m=floor(pointPosition.y/cellSize);vec2 levelPosition=2.0*(vec2(n,m)+0.5)/levelTextureSize-1.0;gl_Position=vec4(levelPosition,0.0,1.0);gl_PointSize=1.0;}";
var forceFrag$2 = "#ifdef GL_ES\nprecision highp float;\n#define GLSLIFY 1\n#endif\nuniform sampler2D position;uniform sampler2D levelFbo;uniform float level;uniform float levels;uniform float levelTextureSize;uniform float repulsion;uniform float alpha;uniform float spaceSize;uniform float theta;varying vec2 index;const float MAX_LEVELS_NUM=14.0;vec2 calcAdd(vec2 ij,vec2 pp){vec2 add=vec2(0.0);vec4 centermass=texture2D(levelFbo,ij);if(centermass.r>0.0&&centermass.g>0.0&&centermass.b>0.0){vec2 centermassPosition=vec2(centermass.rg/centermass.b);vec2 distVector=pp-centermassPosition;float l=dot(distVector,distVector);float dist=sqrt(l);if(l>0.0){float angle=atan(distVector.y,distVector.x);float c=alpha*repulsion*centermass.b;float distanceMin2=1.0;if(l<distanceMin2)l=sqrt(distanceMin2*l);float addV=c/sqrt(l);add=addV*vec2(cos(angle),sin(angle));}}return add;}void main(){vec4 pointPosition=texture2D(position,index);float x=pointPosition.x;float y=pointPosition.y;float left=0.0;float top=0.0;float right=spaceSize;float bottom=spaceSize;float n_left=0.0;float n_top=0.0;float n_right=0.0;float n_bottom=0.0;float cellSize=0.0;for(float i=0.0;i<MAX_LEVELS_NUM;i+=1.0){if(i<=level){left+=cellSize*n_left;top+=cellSize*n_top;right-=cellSize*n_right;bottom-=cellSize*n_bottom;cellSize=pow(2.0,levels-i-1.0);float dist_left=x-left;n_left=max(0.0,floor(dist_left/cellSize-theta));float dist_top=y-top;n_top=max(0.0,floor(dist_top/cellSize-theta));float dist_right=right-x;n_right=max(0.0,floor(dist_right/cellSize-theta));float dist_bottom=bottom-y;n_bottom=max(0.0,floor(dist_bottom/cellSize-theta));}}vec4 velocity=vec4(vec2(0.0),1.0,0.0);for(float i=0.0;i<12.0;i+=1.0){for(float j=0.0;j<4.0;j+=1.0){float n=left+cellSize*j;float m=top+cellSize*n_top+cellSize*i;if(n<(left+n_left*cellSize)&&m<bottom){velocity.xy+=calcAdd(vec2(n/cellSize,m/cellSize)/levelTextureSize,pointPosition.xy);}n=left+cellSize*i;m=top+cellSize*j;if(n<(right-n_right*cellSize)&&m<(top+n_top*cellSize)){velocity.xy+=calcAdd(vec2(n/cellSize,m/cellSize)/levelTextureSize,pointPosition.xy);}n=right-n_right*cellSize+cellSize*j;m=top+cellSize*i;if(n<right&&m<(bottom-n_bottom*cellSize)){velocity.xy+=calcAdd(vec2(n/cellSize,m/cellSize)/levelTextureSize,pointPosition.xy);}n=left+n_left*cellSize+cellSize*i;m=bottom-n_bottom*cellSize+cellSize*j;if(n<right&&m<bottom){velocity.xy+=calcAdd(vec2(n/cellSize,m/cellSize)/levelTextureSize,pointPosition.xy);}}}gl_FragColor=velocity;}";
var forceCenterFrag = "#ifdef GL_ES\nprecision highp float;\n#define GLSLIFY 1\n#endif\nuniform sampler2D position;uniform sampler2D levelFbo;uniform sampler2D randomValues;uniform float levelTextureSize;uniform float repulsion;uniform float alpha;varying vec2 index;vec2 calcAdd(vec2 ij,vec2 pp){vec2 add=vec2(0.0);vec4 centermass=texture2D(levelFbo,ij);if(centermass.r>0.0&&centermass.g>0.0&&centermass.b>0.0){vec2 centermassPosition=vec2(centermass.rg/centermass.b);vec2 distVector=pp-centermassPosition;float l=dot(distVector,distVector);float dist=sqrt(l);if(l>0.0){float angle=atan(distVector.y,distVector.x);float c=alpha*repulsion*centermass.b;float distanceMin2=1.0;if(l<distanceMin2)l=sqrt(distanceMin2*l);float addV=c/sqrt(l);add=addV*vec2(cos(angle),sin(angle));}}return add;}void main(){vec4 pointPosition=texture2D(position,index);vec4 random=texture2D(randomValues,index);vec4 velocity=vec4(0.0);velocity.xy+=calcAdd(pointPosition.xy/levelTextureSize,pointPosition.xy);velocity.xy+=velocity.xy*random.rg;gl_FragColor=velocity;}";
var ForceManyBody = class extends CoreModule {
  constructor() {
    super(...arguments);
    this.levelsFbos = /* @__PURE__ */ new Map();
    this.quadtreeLevels = 0;
  }
  create() {
    const { reglInstance, store } = this;
    if (!store.pointsTextureSize)
      return;
    this.quadtreeLevels = Math.log2(store.adjustedSpaceSize);
    for (let i = 0; i < this.quadtreeLevels; i += 1) {
      const levelTextureSize = Math.pow(2, i + 1);
      this.levelsFbos.set(`level[${i}]`, reglInstance.framebuffer({
        shape: [levelTextureSize, levelTextureSize],
        colorType: "float",
        depth: false,
        stencil: false
      }));
    }
    const randomValuesState = new Float32Array(store.pointsTextureSize * store.pointsTextureSize * 4);
    for (let i = 0; i < store.pointsTextureSize * store.pointsTextureSize; ++i) {
      randomValuesState[i * 4] = store.getRandomFloat(-1, 1) * 1e-5;
      randomValuesState[i * 4 + 1] = store.getRandomFloat(-1, 1) * 1e-5;
    }
    this.randomValuesFbo = reglInstance.framebuffer({
      color: reglInstance.texture({
        data: randomValuesState,
        shape: [store.pointsTextureSize, store.pointsTextureSize, 4],
        type: "float"
      }),
      depth: false,
      stencil: false
    });
  }
  initPrograms() {
    const { reglInstance, config, store, data, points } = this;
    this.clearLevelsCommand = reglInstance({
      frag: clearFrag,
      vert: updateVert,
      framebuffer: (_, props) => props.levelFbo,
      primitive: "triangle strip",
      count: 4,
      attributes: { quad: createQuadBuffer(reglInstance) }
    });
    this.calculateLevelsCommand = reglInstance({
      frag: calculateLevelFrag,
      vert: calculateLevelVert,
      framebuffer: (_, props) => props.levelFbo,
      primitive: "points",
      count: () => data.nodes.length,
      attributes: { indexes: createIndexesBuffer(reglInstance, store.pointsTextureSize) },
      uniforms: {
        position: () => points === null || points === void 0 ? void 0 : points.previousPositionFbo,
        pointsTextureSize: () => store.pointsTextureSize,
        levelTextureSize: (_, props) => props.levelTextureSize,
        cellSize: (_, props) => props.cellSize
      },
      blend: {
        enable: true,
        func: {
          src: "one",
          dst: "one"
        },
        equation: {
          rgb: "add",
          alpha: "add"
        }
      },
      depth: { enable: false, mask: false },
      stencil: { enable: false }
    });
    this.forceCommand = reglInstance({
      frag: forceFrag$2,
      vert: updateVert,
      framebuffer: () => points === null || points === void 0 ? void 0 : points.velocityFbo,
      primitive: "triangle strip",
      count: 4,
      attributes: { quad: createQuadBuffer(reglInstance) },
      uniforms: {
        position: () => points === null || points === void 0 ? void 0 : points.previousPositionFbo,
        level: (_, props) => props.level,
        levels: this.quadtreeLevels,
        levelFbo: (_, props) => props.levelFbo,
        levelTextureSize: (_, props) => props.levelTextureSize,
        alpha: () => store.alpha,
        repulsion: () => {
          var _a;
          return (_a = config.simulation) === null || _a === void 0 ? void 0 : _a.repulsion;
        },
        spaceSize: () => store.adjustedSpaceSize,
        theta: () => {
          var _a;
          return (_a = config.simulation) === null || _a === void 0 ? void 0 : _a.repulsionTheta;
        }
      },
      blend: {
        enable: true,
        func: {
          src: "one",
          dst: "one"
        },
        equation: {
          rgb: "add",
          alpha: "add"
        }
      },
      depth: { enable: false, mask: false },
      stencil: { enable: false }
    });
    this.forceFromItsOwnCentermassCommand = reglInstance({
      frag: forceCenterFrag,
      vert: updateVert,
      framebuffer: () => points === null || points === void 0 ? void 0 : points.velocityFbo,
      primitive: "triangle strip",
      count: 4,
      attributes: { quad: createQuadBuffer(reglInstance) },
      uniforms: {
        position: () => points === null || points === void 0 ? void 0 : points.previousPositionFbo,
        randomValues: () => this.randomValuesFbo,
        levelFbo: (_, props) => props.levelFbo,
        levelTextureSize: (_, props) => props.levelTextureSize,
        alpha: () => store.alpha,
        repulsion: () => {
          var _a;
          return (_a = config.simulation) === null || _a === void 0 ? void 0 : _a.repulsion;
        },
        spaceSize: () => store.adjustedSpaceSize
      },
      blend: {
        enable: true,
        func: {
          src: "one",
          dst: "one"
        },
        equation: {
          rgb: "add",
          alpha: "add"
        }
      },
      depth: { enable: false, mask: false },
      stencil: { enable: false }
    });
    this.clearVelocityCommand = reglInstance({
      frag: clearFrag,
      vert: updateVert,
      framebuffer: () => points === null || points === void 0 ? void 0 : points.velocityFbo,
      primitive: "triangle strip",
      count: 4,
      attributes: { quad: createQuadBuffer(reglInstance) }
    });
  }
  run() {
    var _a, _b, _c, _d, _e;
    const { store } = this;
    for (let i = 0; i < this.quadtreeLevels; i += 1) {
      (_a = this.clearLevelsCommand) === null || _a === void 0 ? void 0 : _a.call(this, { levelFbo: this.levelsFbos.get(`level[${i}]`) });
      const levelTextureSize = Math.pow(2, i + 1);
      const cellSize = store.adjustedSpaceSize / levelTextureSize;
      (_b = this.calculateLevelsCommand) === null || _b === void 0 ? void 0 : _b.call(this, {
        levelFbo: this.levelsFbos.get(`level[${i}]`),
        levelTextureSize,
        cellSize
      });
    }
    (_c = this.clearVelocityCommand) === null || _c === void 0 ? void 0 : _c.call(this);
    for (let i = 0; i < this.quadtreeLevels; i += 1) {
      const levelTextureSize = Math.pow(2, i + 1);
      (_d = this.forceCommand) === null || _d === void 0 ? void 0 : _d.call(this, {
        levelFbo: this.levelsFbos.get(`level[${i}]`),
        levelTextureSize,
        level: i
      });
      if (i === this.quadtreeLevels - 1) {
        (_e = this.forceFromItsOwnCentermassCommand) === null || _e === void 0 ? void 0 : _e.call(this, {
          levelFbo: this.levelsFbos.get(`level[${i}]`),
          levelTextureSize,
          level: i
        });
      }
    }
  }
  destroy() {
    destroyFramebuffer(this.randomValuesFbo);
    this.levelsFbos.forEach((fbo) => {
      destroyFramebuffer(fbo);
    });
    this.levelsFbos.clear();
  }
};
function forceFrag$1(startLevel, maxLevels) {
  startLevel = Math.min(startLevel, maxLevels);
  const delta = maxLevels - startLevel;
  const calcAdd = `
    float dist = sqrt(l);
    if (dist > 0.0) {
      float c = alpha * repulsion * centermass.b;
      addVelocity += calcAdd(vec2(x, y), l, c);
      addVelocity += addVelocity * random.rg;
    }
  `;
  function quad(level) {
    if (level >= maxLevels) {
      return calcAdd;
    } else {
      const groupSize = Math.pow(2, level + 1);
      const iEnding = new Array(level + 1 - delta).fill(0).map((_, l) => `pow(2.0, ${level - (l + delta)}.0) * i${l + delta}`).join("+");
      const jEnding = new Array(level + 1 - delta).fill(0).map((_, l) => `pow(2.0, ${level - (l + delta)}.0) * j${l + delta}`).join("+");
      return `
      for (float ij${level} = 0.0; ij${level} < 4.0; ij${level} += 1.0) {
        float i${level} = 0.0;
        float j${level} = 0.0;
        if (ij${level} == 1.0 || ij${level} == 3.0) i${level} = 1.0;
        if (ij${level} == 2.0 || ij${level} == 3.0) j${level} = 1.0;
        float i = pow(2.0, ${startLevel}.0) * n / width${level + 1} + ${iEnding};
        float j = pow(2.0, ${startLevel}.0) * m / width${level + 1} + ${jEnding};
        float groupPosX = (i + 0.5) / ${groupSize}.0;
        float groupPosY = (j + 0.5) / ${groupSize}.0;
        
        vec4 centermass = texture2D(level[${level}], vec2(groupPosX, groupPosY));
        if (centermass.r > 0.0 && centermass.g > 0.0 && centermass.b > 0.0) {
          float x = centermass.r / centermass.b - pointPosition.r;
          float y = centermass.g / centermass.b - pointPosition.g;
          float l = x * x + y * y;
          if ((width${level + 1} * width${level + 1}) / theta < l) {
            ${calcAdd}
          } else {
            ${quad(level + 1)}
          }
        }
      }
      `;
    }
  }
  return `
#ifdef GL_ES
precision highp float;
#endif

uniform sampler2D position;
uniform sampler2D randomValues;
uniform float spaceSize;
uniform float repulsion;
uniform float theta;
uniform float alpha;
uniform sampler2D level[${maxLevels}];
varying vec2 index;

vec2 calcAdd(vec2 xy, float l, float c) {
  float distanceMin2 = 1.0;
  if (l < distanceMin2) l = sqrt(distanceMin2 * l);
  float add = c / l;
  return add * xy;
}

void main() {
  vec4 pointPosition = texture2D(position, index);
  vec4 random = texture2D(randomValues, index);

  float width0 = spaceSize;

  vec2 velocity = vec2(0.0);
  vec2 addVelocity = vec2(0.0);

  ${new Array(maxLevels).fill(0).map((_, i) => `float width${i + 1} = width${i} / 2.0;`).join("\n")}

  for (float n = 0.0; n < pow(2.0, ${delta}.0); n += 1.0) {
    for (float m = 0.0; m < pow(2.0, ${delta}.0); m += 1.0) {
      ${quad(delta)}
    }
  }

  velocity -= addVelocity;

  gl_FragColor = vec4(velocity, 0.0, 0.0);
}
`;
}
var ForceManyBodyQuadtree = class extends CoreModule {
  constructor() {
    super(...arguments);
    this.levelsFbos = /* @__PURE__ */ new Map();
    this.quadtreeLevels = 0;
  }
  create() {
    const { reglInstance, store } = this;
    if (!store.pointsTextureSize)
      return;
    this.quadtreeLevels = Math.log2(store.adjustedSpaceSize);
    for (let i = 0; i < this.quadtreeLevels; i += 1) {
      const levelTextureSize = Math.pow(2, i + 1);
      this.levelsFbos.set(`level[${i}]`, reglInstance.framebuffer({
        color: reglInstance.texture({
          data: new Float32Array(levelTextureSize * levelTextureSize * 4),
          shape: [levelTextureSize, levelTextureSize, 4],
          type: "float"
        }),
        depth: false,
        stencil: false
      }));
    }
    const randomValuesState = new Float32Array(store.pointsTextureSize * store.pointsTextureSize * 4);
    for (let i = 0; i < store.pointsTextureSize * store.pointsTextureSize; ++i) {
      randomValuesState[i * 4] = store.getRandomFloat(-1, 1) * 1e-5;
      randomValuesState[i * 4 + 1] = store.getRandomFloat(-1, 1) * 1e-5;
    }
    this.randomValuesFbo = reglInstance.framebuffer({
      color: reglInstance.texture({
        data: randomValuesState,
        shape: [store.pointsTextureSize, store.pointsTextureSize, 4],
        type: "float"
      }),
      depth: false,
      stencil: false
    });
  }
  initPrograms() {
    var _a, _b;
    const { reglInstance, config, store, data, points } = this;
    this.clearLevelsCommand = reglInstance({
      frag: clearFrag,
      vert: updateVert,
      framebuffer: (_, props) => props.levelFbo,
      primitive: "triangle strip",
      count: 4,
      attributes: { quad: createQuadBuffer(reglInstance) }
    });
    this.calculateLevelsCommand = reglInstance({
      frag: calculateLevelFrag,
      vert: calculateLevelVert,
      framebuffer: (_, props) => props.levelFbo,
      primitive: "points",
      count: () => data.nodes.length,
      attributes: { indexes: createIndexesBuffer(reglInstance, store.pointsTextureSize) },
      uniforms: {
        position: () => points === null || points === void 0 ? void 0 : points.previousPositionFbo,
        pointsTextureSize: () => store.pointsTextureSize,
        levelTextureSize: (_, props) => props.levelTextureSize,
        cellSize: (_, props) => props.cellSize
      },
      blend: {
        enable: true,
        func: {
          src: "one",
          dst: "one"
        },
        equation: {
          rgb: "add",
          alpha: "add"
        }
      },
      depth: { enable: false, mask: false },
      stencil: { enable: false }
    });
    this.quadtreeCommand = reglInstance({
      frag: forceFrag$1((_b = (_a = config.simulation) === null || _a === void 0 ? void 0 : _a.repulsionQuadtreeLevels) !== null && _b !== void 0 ? _b : this.quadtreeLevels, this.quadtreeLevels),
      vert: updateVert,
      framebuffer: () => points === null || points === void 0 ? void 0 : points.velocityFbo,
      primitive: "triangle strip",
      count: 4,
      attributes: { quad: createQuadBuffer(reglInstance) },
      uniforms: {
        position: () => points === null || points === void 0 ? void 0 : points.previousPositionFbo,
        randomValues: () => this.randomValuesFbo,
        spaceSize: () => store.adjustedSpaceSize,
        repulsion: () => {
          var _a2;
          return (_a2 = config.simulation) === null || _a2 === void 0 ? void 0 : _a2.repulsion;
        },
        theta: () => {
          var _a2;
          return (_a2 = config.simulation) === null || _a2 === void 0 ? void 0 : _a2.repulsionTheta;
        },
        alpha: () => store.alpha,
        ...Object.fromEntries(this.levelsFbos)
      }
    });
  }
  run() {
    var _a, _b, _c;
    const { store } = this;
    for (let i = 0; i < this.quadtreeLevels; i += 1) {
      (_a = this.clearLevelsCommand) === null || _a === void 0 ? void 0 : _a.call(this, { levelFbo: this.levelsFbos.get(`level[${i}]`) });
      const levelTextureSize = Math.pow(2, i + 1);
      const cellSize = store.adjustedSpaceSize / levelTextureSize;
      (_b = this.calculateLevelsCommand) === null || _b === void 0 ? void 0 : _b.call(this, {
        levelFbo: this.levelsFbos.get(`level[${i}]`),
        levelTextureSize,
        cellSize
      });
    }
    (_c = this.quadtreeCommand) === null || _c === void 0 ? void 0 : _c.call(this);
  }
  destroy() {
    destroyFramebuffer(this.randomValuesFbo);
    this.levelsFbos.forEach((fbo) => {
      destroyFramebuffer(fbo);
    });
    this.levelsFbos.clear();
  }
};
var forceFrag = "#ifdef GL_ES\nprecision highp float;\n#define GLSLIFY 1\n#endif\nuniform sampler2D position;uniform float repulsion;uniform vec2 mousePos;varying vec2 index;void main(){vec4 pointPosition=texture2D(position,index);vec4 velocity=vec4(0.0);vec2 mouse=mousePos;vec2 distVector=mouse-pointPosition.rg;float dist=sqrt(dot(distVector,distVector));dist=max(dist,10.0);float angle=atan(distVector.y,distVector.x);float addV=100.0*repulsion/(dist*dist);velocity.rg-=addV*vec2(cos(angle),sin(angle));gl_FragColor=velocity;}";
var ForceMouse = class extends CoreModule {
  initPrograms() {
    const { reglInstance, config, store, points } = this;
    this.runCommand = reglInstance({
      frag: forceFrag,
      vert: updateVert,
      framebuffer: () => points === null || points === void 0 ? void 0 : points.velocityFbo,
      primitive: "triangle strip",
      count: 4,
      attributes: { quad: createQuadBuffer(reglInstance) },
      uniforms: {
        position: () => points === null || points === void 0 ? void 0 : points.previousPositionFbo,
        mousePos: () => store.mousePosition,
        repulsion: () => {
          var _a;
          return (_a = config.simulation) === null || _a === void 0 ? void 0 : _a.repulsionFromMouse;
        }
      }
    });
  }
  run() {
    var _a;
    (_a = this.runCommand) === null || _a === void 0 ? void 0 : _a.call(this);
  }
};
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
var glBench = { exports: {} };
(function(module, exports) {
  (function(global2, factory) {
    module.exports = factory();
  })(commonjsGlobal, (function() {
    var UISVG = '<div class="gl-box">\n  <svg viewBox="0 0 55 60">\n    <text x="27" y="56" class="gl-fps">00 FPS</text>\n    <text x="28" y="8" class="gl-mem"></text>\n    <rect x="0" y="14" rx="4" ry="4" width="55" height="32"></rect>\n    <polyline class="gl-chart"></polyline>\n  </svg>\n  <svg viewBox="0 0 14 60" class="gl-cpu-svg">\n    <line x1="7" y1="38" x2="7" y2="11" class="opacity"/>\n    <line x1="7" y1="38" x2="7" y2="11" class="gl-cpu" stroke-dasharray="0 27"/>\n    <path d="M5.35 43c-.464 0-.812.377-.812.812v1.16c-.783.1972-1.421.812-1.595 1.624h-1.16c-.435 0-.812.348-.812.812s.348.812.812.812h1.102v1.653H1.812c-.464 0-.812.377-.812.812 0 .464.377.812.812.812h1.131c.1943.783.812 1.392 1.595 1.595v1.131c0 .464.377.812.812.812.464 0 .812-.377.812-.812V53.15h1.653v1.073c0 .464.377.812.812.812.464 0 .812-.377.812-.812v-1.131c.783-.1943 1.392-.812 1.595-1.595h1.131c.464 0 .812-.377.812-.812 0-.464-.377-.812-.812-.812h-1.073V48.22h1.102c.435 0 .812-.348.812-.812s-.348-.812-.812-.812h-1.16c-.1885-.783-.812-1.421-1.595-1.624v-1.131c0-.464-.377-.812-.812-.812-.464 0-.812.377-.812.812v1.073H6.162v-1.073c0-.464-.377-.812-.812-.812zm.58 3.48h2.088c.754 0 1.363.609 1.363 1.363v2.088c0 .754-.609 1.363-1.363 1.363H5.93c-.754 0-1.363-.609-1.363-1.363v-2.088c0-.754.609-1.363 1.363-1.363z"/>\n  </svg>\n  <svg viewBox="0 0 14 60" class="gl-gpu-svg">\n    <line x1="7" y1="38" x2="7" y2="11" class="opacity"/>\n    <line x1="7" y1="38" x2="7" y2="11" class="gl-gpu" stroke-dasharray="0 27"/>\n    <path d="M1.94775 43.3772a.736.736 0 10-.00416 1.472c.58535.00231.56465.1288.6348.3197.07015.18975.04933.43585.04933.43585l-.00653.05405v8.671a.736.736 0 101.472 0v-1.4145c.253.09522.52785.1495.81765.1495h5.267c1.2535 0 2.254-.9752 2.254-2.185v-3.105c0-1.2075-1.00625-2.185-2.254-2.185h-5.267c-.28865 0-.5635.05405-.8165.1495.01806-.16445.04209-.598-.1357-1.0787-.22425-.6072-.9499-1.2765-2.0125-1.2765zm2.9095 3.6455c.42435 0 .7659.36225.7659.8119v2.9785c0 .44965-.34155.8119-.7659.8119s-.7659-.36225-.7659-.8119v-2.9785c0-.44965.34155-.8119.7659-.8119zm4.117 0a2.3 2.3 0 012.3 2.3 2.3 2.3 0 01-2.3 2.3 2.3 2.3 0 01-2.3-2.3 2.3 2.3 0 012.3-2.3z"/>\n  </svg>\n</div>';
    var UICSS = "#gl-bench {\n  position:absolute;\n  left:0;\n  top:0;\n  z-index:1000;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  user-select: none;\n}\n\n#gl-bench div {\n  position: relative;\n  display: block;\n  margin: 4px;\n  padding: 0 7px 0 10px;\n  background: #6c6;\n  border-radius: 15px;\n  cursor: pointer;\n  opacity: 0.9;\n}\n\n#gl-bench svg {\n  height: 60px;\n  margin: 0 -1px;\n}\n\n#gl-bench text {\n  font-size: 12px;\n  font-family: Helvetica,Arial,sans-serif;\n  font-weight: 700;\n  dominant-baseline: middle;\n  text-anchor: middle;\n}\n\n#gl-bench .gl-mem {\n  font-size: 9px;\n}\n\n#gl-bench line {\n  stroke-width: 5;\n  stroke: #112211;\n  stroke-linecap: round;\n}\n\n#gl-bench polyline {\n  fill: none;\n  stroke: #112211;\n  stroke-linecap: round;\n  stroke-linejoin: round;\n  stroke-width: 3.5;\n}\n\n#gl-bench rect {\n  fill: #448844;\n}\n\n#gl-bench .opacity {\n  stroke: #448844;\n}\n";
    class GLBench2 {
      /** GLBench constructor
       * @param { WebGLRenderingContext | WebGL2RenderingContext } gl context
       * @param { Object | undefined } settings additional settings
       */
      constructor(gl, settings = {}) {
        this.css = UICSS;
        this.svg = UISVG;
        this.paramLogger = () => {
        };
        this.chartLogger = () => {
        };
        this.chartLen = 20;
        this.chartHz = 20;
        this.names = [];
        this.cpuAccums = [];
        this.gpuAccums = [];
        this.activeAccums = [];
        this.chart = new Array(this.chartLen);
        this.now = () => performance && performance.now ? performance.now() : Date.now();
        this.updateUI = () => {
          [].forEach.call(this.nodes["gl-gpu-svg"], (node) => {
            node.style.display = this.trackGPU ? "inline" : "none";
          });
        };
        Object.assign(this, settings);
        this.detected = 0;
        this.finished = [];
        this.isFramebuffer = 0;
        this.frameId = 0;
        let rafId, n = 0, t0;
        let loop = (t) => {
          if (++n < 20) {
            rafId = requestAnimationFrame(loop);
          } else {
            this.detected = Math.ceil(1e3 * n / (t - t0) / 70);
            cancelAnimationFrame(rafId);
          }
          if (!t0) t0 = t;
        };
        requestAnimationFrame(loop);
        if (gl) {
          const glFinish = async (t, activeAccums) => Promise.resolve(setTimeout(() => {
            gl.getError();
            const dt = this.now() - t;
            activeAccums.forEach((active, i) => {
              if (active) this.gpuAccums[i] += dt;
            });
          }, 0));
          const addProfiler = (fn, self2, target) => function() {
            const t = self2.now();
            fn.apply(target, arguments);
            if (self2.trackGPU) self2.finished.push(glFinish(t, self2.activeAccums.slice(0)));
          };
          [
            "drawArrays",
            "drawElements",
            "drawArraysInstanced",
            "drawBuffers",
            "drawElementsInstanced",
            "drawRangeElements"
          ].forEach((fn) => {
            if (gl[fn]) gl[fn] = addProfiler(gl[fn], this, gl);
          });
          gl.getExtension = /* @__PURE__ */ ((fn, self2) => function() {
            let ext = fn.apply(gl, arguments);
            if (ext) {
              ["drawElementsInstancedANGLE", "drawBuffersWEBGL"].forEach((fn2) => {
                if (ext[fn2]) ext[fn2] = addProfiler(ext[fn2], self2, ext);
              });
            }
            return ext;
          })(gl.getExtension, this);
        }
        if (!this.withoutUI) {
          if (!this.dom) this.dom = document.body;
          let elm = document.createElement("div");
          elm.id = "gl-bench";
          this.dom.appendChild(elm);
          this.dom.insertAdjacentHTML("afterbegin", '<style id="gl-bench-style">' + this.css + "</style>");
          this.dom = elm;
          this.dom.addEventListener("click", () => {
            this.trackGPU = !this.trackGPU;
            this.updateUI();
          });
          this.paramLogger = ((logger, dom, names) => {
            const classes = ["gl-cpu", "gl-gpu", "gl-mem", "gl-fps", "gl-gpu-svg", "gl-chart"];
            const nodes = Object.assign({}, classes);
            classes.forEach((c) => nodes[c] = dom.getElementsByClassName(c));
            this.nodes = nodes;
            return (i, cpu, gpu, mem, fps, totalTime, frameId) => {
              nodes["gl-cpu"][i].style.strokeDasharray = (cpu * 0.27).toFixed(0) + " 100";
              nodes["gl-gpu"][i].style.strokeDasharray = (gpu * 0.27).toFixed(0) + " 100";
              nodes["gl-mem"][i].innerHTML = names[i] ? names[i] : mem ? "mem: " + mem.toFixed(0) + "mb" : "";
              nodes["gl-fps"][i].innerHTML = fps.toFixed(0) + " FPS";
              logger(names[i], cpu, gpu, mem, fps, totalTime, frameId);
            };
          })(this.paramLogger, this.dom, this.names);
          this.chartLogger = ((logger, dom) => {
            let nodes = { "gl-chart": dom.getElementsByClassName("gl-chart") };
            return (i, chart, circularId) => {
              let points = "";
              let len2 = chart.length;
              for (let i2 = 0; i2 < len2; i2++) {
                let id = (circularId + i2 + 1) % len2;
                if (chart[id] != void 0) {
                  points = points + " " + (55 * i2 / (len2 - 1)).toFixed(1) + "," + (45 - chart[id] * 22 / 60 / this.detected).toFixed(1);
                }
              }
              nodes["gl-chart"][i].setAttribute("points", points);
              logger(this.names[i], chart, circularId);
            };
          })(this.chartLogger, this.dom);
        }
      }
      /**
       * Explicit UI add
       * @param { string | undefined } name 
       */
      addUI(name) {
        if (this.names.indexOf(name) == -1) {
          this.names.push(name);
          if (this.dom) {
            this.dom.insertAdjacentHTML("beforeend", this.svg);
            this.updateUI();
          }
          this.cpuAccums.push(0);
          this.gpuAccums.push(0);
          this.activeAccums.push(false);
        }
      }
      /**
       * Increase frameID
       * @param { number | undefined } now
       */
      nextFrame(now) {
        this.frameId++;
        const t = now ? now : this.now();
        if (this.frameId <= 1) {
          this.paramFrame = this.frameId;
          this.paramTime = t;
        } else {
          let duration = t - this.paramTime;
          if (duration >= 1e3) {
            const frameCount = this.frameId - this.paramFrame;
            const fps = frameCount / duration * 1e3;
            for (let i = 0; i < this.names.length; i++) {
              const cpu = this.cpuAccums[i] / duration * 100, gpu = this.gpuAccums[i] / duration * 100, mem = performance && performance.memory ? performance.memory.usedJSHeapSize / (1 << 20) : 0;
              this.paramLogger(i, cpu, gpu, mem, fps, duration, frameCount);
              this.cpuAccums[i] = 0;
              Promise.all(this.finished).then(() => {
                this.gpuAccums[i] = 0;
                this.finished = [];
              });
            }
            this.paramFrame = this.frameId;
            this.paramTime = t;
          }
        }
        if (!this.detected || !this.chartFrame) {
          this.chartFrame = this.frameId;
          this.chartTime = t;
          this.circularId = 0;
        } else {
          let timespan = t - this.chartTime;
          let hz = this.chartHz * timespan / 1e3;
          while (--hz > 0 && this.detected) {
            const frameCount = this.frameId - this.chartFrame;
            const fps = frameCount / timespan * 1e3;
            this.chart[this.circularId % this.chartLen] = fps;
            for (let i = 0; i < this.names.length; i++) {
              this.chartLogger(i, this.chart, this.circularId);
            }
            this.circularId++;
            this.chartFrame = this.frameId;
            this.chartTime = t;
          }
        }
      }
      /**
       * Begin named measurement
       * @param { string | undefined } name
       */
      begin(name) {
        this.updateAccums(name);
      }
      /**
       * End named measure
       * @param { string | undefined } name
       */
      end(name) {
        this.updateAccums(name);
      }
      updateAccums(name) {
        let nameId = this.names.indexOf(name);
        if (nameId == -1) {
          nameId = this.names.length;
          this.addUI(name);
        }
        const t = this.now();
        const dt = t - this.t0;
        for (let i = 0; i < nameId + 1; i++) {
          if (this.activeAccums[i]) {
            this.cpuAccums[i] += dt;
          }
        }
        this.activeAccums[nameId] = !this.activeAccums[nameId];
        this.t0 = t;
      }
    }
    return GLBench2;
  }));
})(glBench);
var GLBench = glBench.exports;
var benchCSS = `
  #gl-bench {
    position:absolute;
    right:0;
    top:0;
    z-index:1000;
    -webkit-user-select: none;
    -moz-user-select: none;
    user-select: none;
  }
  #gl-bench div {
    position: relative;
    display: block;
    margin: 4px;
    padding: 0 7px 0 10px;
    background: #5f69de;
    border-radius: 15px;
    cursor: pointer;
    opacity: 0.9;
  }
  #gl-bench svg {
    height: 60px;
    margin: 0 -1px;
  }
  #gl-bench text {
    font-size: 12px;
    font-family: Helvetica,Arial,sans-serif;
    font-weight: 700;
    dominant-baseline: middle;
    text-anchor: middle;
  }
  #gl-bench .gl-mem {
    font-size: 9px;
  }
  #gl-bench line {
    stroke-width: 5;
    stroke: #112211;
    stroke-linecap: round;
  }
  #gl-bench polyline {
    fill: none;
    stroke: #112211;
    stroke-linecap: round;
    stroke-linejoin: round;
    stroke-width: 3.5;
  }
  #gl-bench rect {
    fill: #8288e4;
  }
  #gl-bench .opacity {
    stroke: #8288e4;
  }
`;
var FPSMonitor = class {
  constructor(canvas) {
    this.destroy();
    const gl = canvas.getContext("webgl") || canvas.getContext("experimental-webgl");
    this.bench = new GLBench(gl, { css: benchCSS });
  }
  begin() {
    var _a;
    (_a = this.bench) === null || _a === void 0 ? void 0 : _a.begin("frame");
  }
  end(now) {
    var _a, _b;
    (_a = this.bench) === null || _a === void 0 ? void 0 : _a.end("frame");
    (_b = this.bench) === null || _b === void 0 ? void 0 : _b.nextFrame(now);
  }
  destroy() {
    this.bench = void 0;
    select_default("#gl-bench").remove();
  }
};
var GraphData = class {
  constructor() {
    this.completeLinks = /* @__PURE__ */ new Set();
    this.degree = [];
    this.groupedSourceToTargetLinks = /* @__PURE__ */ new Map();
    this.groupedTargetToSourceLinks = /* @__PURE__ */ new Map();
    this._nodes = [];
    this._links = [];
    this.idToNodeMap = /* @__PURE__ */ new Map();
    this.sortedIndexToInputIndexMap = /* @__PURE__ */ new Map();
    this.inputIndexToSortedIndexMap = /* @__PURE__ */ new Map();
    this.idToSortedIndexMap = /* @__PURE__ */ new Map();
    this.inputIndexToIdMap = /* @__PURE__ */ new Map();
    this.idToIndegreeMap = /* @__PURE__ */ new Map();
    this.idToOutdegreeMap = /* @__PURE__ */ new Map();
  }
  get nodes() {
    return this._nodes;
  }
  get links() {
    return this._links;
  }
  get linksNumber() {
    return this.completeLinks.size;
  }
  setData(inputNodes, inputLinks) {
    this.idToNodeMap.clear();
    this.idToSortedIndexMap.clear();
    this.inputIndexToIdMap.clear();
    this.idToIndegreeMap.clear();
    this.idToOutdegreeMap.clear();
    inputNodes.forEach((n, i) => {
      this.idToNodeMap.set(n.id, n);
      this.inputIndexToIdMap.set(i, n.id);
      this.idToIndegreeMap.set(n.id, 0);
      this.idToOutdegreeMap.set(n.id, 0);
    });
    this.completeLinks.clear();
    inputLinks.forEach((l) => {
      const sourceNode = this.idToNodeMap.get(l.source);
      const targetNode = this.idToNodeMap.get(l.target);
      if (sourceNode !== void 0 && targetNode !== void 0) {
        this.completeLinks.add(l);
        const outdegree = this.idToOutdegreeMap.get(sourceNode.id);
        if (outdegree !== void 0)
          this.idToOutdegreeMap.set(sourceNode.id, outdegree + 1);
        const indegree = this.idToIndegreeMap.get(targetNode.id);
        if (indegree !== void 0)
          this.idToIndegreeMap.set(targetNode.id, indegree + 1);
      }
    });
    this.degree = new Array(inputNodes.length);
    inputNodes.forEach((n, i) => {
      const outdegree = this.idToOutdegreeMap.get(n.id);
      const indegree = this.idToIndegreeMap.get(n.id);
      this.degree[i] = (outdegree !== null && outdegree !== void 0 ? outdegree : 0) + (indegree !== null && indegree !== void 0 ? indegree : 0);
    });
    this.sortedIndexToInputIndexMap.clear();
    this.inputIndexToSortedIndexMap.clear();
    const sortedDegrees = Object.entries(this.degree).sort((a, b) => a[1] - b[1]);
    sortedDegrees.forEach(([inputStringedIndex], sortedIndex) => {
      const inputIndex = +inputStringedIndex;
      this.sortedIndexToInputIndexMap.set(sortedIndex, inputIndex);
      this.inputIndexToSortedIndexMap.set(inputIndex, sortedIndex);
      this.idToSortedIndexMap.set(this.inputIndexToIdMap.get(inputIndex), sortedIndex);
    });
    this.groupedSourceToTargetLinks.clear();
    this.groupedTargetToSourceLinks.clear();
    inputLinks.forEach((l) => {
      const sourceIndex = this.idToSortedIndexMap.get(l.source);
      const targetIndex = this.idToSortedIndexMap.get(l.target);
      if (sourceIndex !== void 0 && targetIndex !== void 0) {
        if (this.groupedSourceToTargetLinks.get(sourceIndex) === void 0)
          this.groupedSourceToTargetLinks.set(sourceIndex, /* @__PURE__ */ new Set());
        const targets = this.groupedSourceToTargetLinks.get(sourceIndex);
        targets === null || targets === void 0 ? void 0 : targets.add(targetIndex);
        if (this.groupedTargetToSourceLinks.get(targetIndex) === void 0)
          this.groupedTargetToSourceLinks.set(targetIndex, /* @__PURE__ */ new Set());
        const sources = this.groupedTargetToSourceLinks.get(targetIndex);
        sources === null || sources === void 0 ? void 0 : sources.add(sourceIndex);
      }
    });
    this._nodes = inputNodes;
    this._links = inputLinks;
  }
  getNodeById(id) {
    return this.idToNodeMap.get(id);
  }
  getNodeByIndex(index) {
    return this._nodes[index];
  }
  getSortedIndexByInputIndex(index) {
    return this.inputIndexToSortedIndexMap.get(index);
  }
  getInputIndexBySortedIndex(index) {
    return this.sortedIndexToInputIndexMap.get(index);
  }
  getSortedIndexById(id) {
    return id !== void 0 ? this.idToSortedIndexMap.get(id) : void 0;
  }
  getInputIndexById(id) {
    if (id === void 0)
      return void 0;
    const sortedIndex = this.getSortedIndexById(id);
    if (sortedIndex === void 0)
      return void 0;
    return this.getInputIndexBySortedIndex(sortedIndex);
  }
  getAdjacentNodes(id) {
    var _a, _b;
    const index = this.getSortedIndexById(id);
    if (index === void 0)
      return void 0;
    const outgoingSet = (_a = this.groupedSourceToTargetLinks.get(index)) !== null && _a !== void 0 ? _a : [];
    const incomingSet = (_b = this.groupedTargetToSourceLinks.get(index)) !== null && _b !== void 0 ? _b : [];
    return [.../* @__PURE__ */ new Set([...outgoingSet, ...incomingSet])].map((index2) => this.getNodeByIndex(this.getInputIndexBySortedIndex(index2)));
  }
};
var drawLineFrag = "precision highp float;\n#define GLSLIFY 1\nvarying vec4 rgbaColor;varying vec2 pos;varying float arrowLength;varying float linkWidthArrowWidthRatio;varying float smoothWidthRatio;varying float useArrow;float map(float value,float min1,float max1,float min2,float max2){return min2+(value-min1)*(max2-min2)/(max1-min1);}void main(){float opacity=1.0;vec3 color=rgbaColor.rgb;float smoothDelta=smoothWidthRatio/2.0;if(useArrow>0.5){float end_arrow=0.5+arrowLength/2.0;float start_arrow=end_arrow-arrowLength;float arrowWidthDelta=linkWidthArrowWidthRatio/2.0;float linkOpacity=rgbaColor.a*smoothstep(0.5-arrowWidthDelta,0.5-arrowWidthDelta-smoothDelta,abs(pos.y));float arrowOpacity=1.0;if(pos.x>start_arrow&&pos.x<start_arrow+arrowLength){float xmapped=map(pos.x,start_arrow,end_arrow,0.0,1.0);arrowOpacity=rgbaColor.a*smoothstep(xmapped-smoothDelta,xmapped,map(abs(pos.y),0.5,0.0,0.0,1.0));if(linkOpacity!=arrowOpacity){linkOpacity+=arrowOpacity;}}opacity=linkOpacity;}else opacity=rgbaColor.a*smoothstep(0.5,0.5-smoothDelta,abs(pos.y));gl_FragColor=vec4(color,opacity);}";
var drawLineVert = "precision highp float;\n#define GLSLIFY 1\nattribute vec2 position,pointA,pointB;attribute vec4 color;attribute float width;attribute float arrow;uniform sampler2D positions;uniform sampler2D particleGreyoutStatus;uniform mat3 transform;uniform float pointsTextureSize;uniform float widthScale;uniform float nodeSizeScale;uniform float arrowSizeScale;uniform float spaceSize;uniform vec2 screenSize;uniform float ratio;uniform vec2 linkVisibilityDistanceRange;uniform float linkVisibilityMinTransparency;uniform float greyoutOpacity;uniform bool scaleNodesOnZoom;uniform float curvedWeight;uniform float curvedLinkControlPointDistance;uniform float curvedLinkSegments;varying vec4 rgbaColor;varying vec2 pos;varying float arrowLength;varying float linkWidthArrowWidthRatio;varying float smoothWidthRatio;varying float useArrow;float map(float value,float min1,float max1,float min2,float max2){return min2+(value-min1)*(max2-min2)/(max1-min1);}vec2 conicParametricCurve(vec2 A,vec2 B,vec2 ControlPoint,float t,float w){vec2 divident=(1.0-t)*(1.0-t)*A+2.0*(1.0-t)*t*w*ControlPoint+t*t*B;float divisor=(1.0-t)*(1.0-t)+2.0*(1.0-t)*t*w+t*t;return divident/divisor;}void main(){pos=position;vec2 pointTexturePosA=(pointA+0.5)/pointsTextureSize;vec2 pointTexturePosB=(pointB+0.5)/pointsTextureSize;vec4 greyoutStatusA=texture2D(particleGreyoutStatus,pointTexturePosA);vec4 greyoutStatusB=texture2D(particleGreyoutStatus,pointTexturePosB);vec4 pointPositionA=texture2D(positions,pointTexturePosA);vec4 pointPositionB=texture2D(positions,pointTexturePosB);vec2 a=pointPositionA.xy;vec2 b=pointPositionB.xy;vec2 xBasis=b-a;vec2 yBasis=normalize(vec2(-xBasis.y,xBasis.x));float linkDist=length(xBasis);float h=curvedLinkControlPointDistance;vec2 controlPoint=(a+b)/2.0+yBasis*linkDist*h;float linkDistPx=linkDist*transform[0][0];float linkWidth=width*widthScale;float k=2.0;float arrowWidth=max(5.0,linkWidth*k);arrowWidth*=arrowSizeScale;float arrowWidthPx=arrowWidth/transform[0][0];arrowLength=min(0.3,(0.866*arrowWidthPx*2.0)/linkDist);float smoothWidth=2.0;float arrowExtraWidth=arrowWidth-linkWidth;linkWidth+=smoothWidth/2.0;useArrow=arrow;if(useArrow>0.5){linkWidth+=arrowExtraWidth;}smoothWidthRatio=smoothWidth/linkWidth;linkWidthArrowWidthRatio=arrowExtraWidth/linkWidth;float linkWidthPx=linkWidth/transform[0][0];vec3 rgbColor=color.rgb;float opacity=color.a*max(linkVisibilityMinTransparency,map(linkDistPx,linkVisibilityDistanceRange.g,linkVisibilityDistanceRange.r,0.0,1.0));if(greyoutStatusA.r>0.0||greyoutStatusB.r>0.0){opacity*=greyoutOpacity;}rgbaColor=vec4(rgbColor,opacity);float t=position.x;float w=curvedWeight;float tPrev=t-1.0/curvedLinkSegments;float tNext=t+1.0/curvedLinkSegments;vec2 pointCurr=conicParametricCurve(a,b,controlPoint,t,w);vec2 pointPrev=conicParametricCurve(a,b,controlPoint,max(0.0,tPrev),w);vec2 pointNext=conicParametricCurve(a,b,controlPoint,min(tNext,1.0),w);vec2 xBasisCurved=pointNext-pointPrev;vec2 yBasisCurved=normalize(vec2(-xBasisCurved.y,xBasisCurved.x));pointCurr+=yBasisCurved*linkWidthPx*position.y;vec2 p=2.0*pointCurr/spaceSize-1.0;p*=spaceSize/screenSize;vec3 final=transform*vec3(p,1);gl_Position=vec4(final.rg,0,1);}";
var getCurveLineGeometry = (segments) => {
  const scale3 = pow().exponent(2).range([0, 1]).domain([-1, 1]);
  const hodographValues = range(0, segments).map((d) => -0.5 + d / segments);
  hodographValues.push(0.5);
  const result = new Array(hodographValues.length * 2);
  hodographValues.forEach((d, i) => {
    result[i * 2] = [scale3(d * 2), 0.5];
    result[i * 2 + 1] = [scale3(d * 2), -0.5];
  });
  return result;
};
var Lines = class extends CoreModule {
  create() {
    this.updateColor();
    this.updateWidth();
    this.updateArrow();
    this.updateCurveLineGeometry();
  }
  initPrograms() {
    const { reglInstance, config, store, data, points } = this;
    const { pointsTextureSize } = store;
    const instancePoints = [];
    data.completeLinks.forEach((l) => {
      const toIndex = data.getSortedIndexById(l.target);
      const fromIndex = data.getSortedIndexById(l.source);
      const fromX = fromIndex % pointsTextureSize;
      const fromY = Math.floor(fromIndex / pointsTextureSize);
      const toX = toIndex % pointsTextureSize;
      const toY = Math.floor(toIndex / pointsTextureSize);
      instancePoints.push([fromX, fromY]);
      instancePoints.push([toX, toY]);
    });
    const pointsBuffer = reglInstance.buffer(instancePoints);
    this.drawCurveCommand = reglInstance({
      vert: drawLineVert,
      frag: drawLineFrag,
      attributes: {
        position: {
          buffer: () => this.curveLineBuffer,
          divisor: 0
        },
        pointA: {
          buffer: () => pointsBuffer,
          divisor: 1,
          offset: Float32Array.BYTES_PER_ELEMENT * 0,
          stride: Float32Array.BYTES_PER_ELEMENT * 4
        },
        pointB: {
          buffer: () => pointsBuffer,
          divisor: 1,
          offset: Float32Array.BYTES_PER_ELEMENT * 2,
          stride: Float32Array.BYTES_PER_ELEMENT * 4
        },
        color: {
          buffer: () => this.colorBuffer,
          divisor: 1,
          offset: Float32Array.BYTES_PER_ELEMENT * 0,
          stride: Float32Array.BYTES_PER_ELEMENT * 4
        },
        width: {
          buffer: () => this.widthBuffer,
          divisor: 1,
          offset: Float32Array.BYTES_PER_ELEMENT * 0,
          stride: Float32Array.BYTES_PER_ELEMENT * 1
        },
        arrow: {
          buffer: () => this.arrowBuffer,
          divisor: 1,
          offset: Float32Array.BYTES_PER_ELEMENT * 0,
          stride: Float32Array.BYTES_PER_ELEMENT * 1
        }
      },
      uniforms: {
        positions: () => points === null || points === void 0 ? void 0 : points.currentPositionFbo,
        particleGreyoutStatus: () => points === null || points === void 0 ? void 0 : points.greyoutStatusFbo,
        transform: () => store.transform,
        pointsTextureSize: () => store.pointsTextureSize,
        nodeSizeScale: () => config.nodeSizeScale,
        widthScale: () => config.linkWidthScale,
        arrowSizeScale: () => config.linkArrowsSizeScale,
        spaceSize: () => store.adjustedSpaceSize,
        screenSize: () => store.screenSize,
        ratio: () => config.pixelRatio,
        linkVisibilityDistanceRange: () => config.linkVisibilityDistanceRange,
        linkVisibilityMinTransparency: () => config.linkVisibilityMinTransparency,
        greyoutOpacity: () => config.linkGreyoutOpacity,
        scaleNodesOnZoom: () => config.scaleNodesOnZoom,
        curvedWeight: () => config.curvedLinkWeight,
        curvedLinkControlPointDistance: () => config.curvedLinkControlPointDistance,
        curvedLinkSegments: () => {
          var _a;
          return config.curvedLinks ? (_a = config.curvedLinkSegments) !== null && _a !== void 0 ? _a : defaultConfigValues.curvedLinkSegments : 1;
        }
      },
      cull: {
        enable: true,
        face: "back"
      },
      blend: {
        enable: true,
        func: {
          dstRGB: "one minus src alpha",
          srcRGB: "src alpha",
          dstAlpha: "one minus src alpha",
          srcAlpha: "one"
        },
        equation: {
          rgb: "add",
          alpha: "add"
        }
      },
      depth: {
        enable: false,
        mask: false
      },
      count: () => {
        var _a, _b;
        return (_b = (_a = this.curveLineGeometry) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0;
      },
      instances: () => data.linksNumber,
      primitive: "triangle strip"
    });
  }
  draw() {
    var _a;
    if (!this.colorBuffer || !this.widthBuffer || !this.curveLineBuffer)
      return;
    (_a = this.drawCurveCommand) === null || _a === void 0 ? void 0 : _a.call(this);
  }
  updateColor() {
    const { reglInstance, config, data } = this;
    const instancePoints = [];
    data.completeLinks.forEach((l) => {
      var _a;
      const c = (_a = getValue(l, config.linkColor)) !== null && _a !== void 0 ? _a : defaultLinkColor;
      const rgba = getRgbaColor(c);
      instancePoints.push(rgba);
    });
    this.colorBuffer = reglInstance.buffer(instancePoints);
  }
  updateWidth() {
    const { reglInstance, config, data } = this;
    const instancePoints = [];
    data.completeLinks.forEach((l) => {
      const linkWidth = getValue(l, config.linkWidth);
      instancePoints.push([linkWidth !== null && linkWidth !== void 0 ? linkWidth : defaultLinkWidth]);
    });
    this.widthBuffer = reglInstance.buffer(instancePoints);
  }
  updateArrow() {
    const { reglInstance, config, data } = this;
    const instancePoints = [];
    data.completeLinks.forEach((l) => {
      var _a;
      const useArrow = (_a = getValue(l, config.linkArrows)) !== null && _a !== void 0 ? _a : defaultConfigValues.arrowLinks;
      instancePoints.push([useArrow ? 1 : 0]);
    });
    this.arrowBuffer = reglInstance.buffer(instancePoints);
  }
  updateCurveLineGeometry() {
    const { reglInstance, config: { curvedLinks, curvedLinkSegments } } = this;
    this.curveLineGeometry = getCurveLineGeometry(curvedLinks ? curvedLinkSegments !== null && curvedLinkSegments !== void 0 ? curvedLinkSegments : defaultConfigValues.curvedLinkSegments : 1);
    this.curveLineBuffer = reglInstance.buffer(this.curveLineGeometry);
  }
  destroy() {
    destroyBuffer(this.colorBuffer);
    destroyBuffer(this.widthBuffer);
    destroyBuffer(this.arrowBuffer);
    destroyBuffer(this.curveLineBuffer);
  }
};
function createColorBuffer(data, reglInstance, textureSize, colorAccessor) {
  var _a;
  if (textureSize === 0)
    return void 0;
  const initialState = new Float32Array(textureSize * textureSize * 4);
  for (let i = 0; i < data.nodes.length; ++i) {
    const sortedIndex = data.getSortedIndexByInputIndex(i);
    const node = data.nodes[i];
    if (node && sortedIndex !== void 0) {
      const c = (_a = getValue(node, colorAccessor, i)) !== null && _a !== void 0 ? _a : defaultNodeColor;
      const rgba = getRgbaColor(c);
      initialState[sortedIndex * 4 + 0] = rgba[0];
      initialState[sortedIndex * 4 + 1] = rgba[1];
      initialState[sortedIndex * 4 + 2] = rgba[2];
      initialState[sortedIndex * 4 + 3] = rgba[3];
    }
  }
  const initialTexture = reglInstance.texture({
    data: initialState,
    width: textureSize,
    height: textureSize,
    type: "float"
  });
  return reglInstance.framebuffer({
    color: initialTexture,
    depth: false,
    stencil: false
  });
}
function createGreyoutStatusBuffer(selectedIndices, reglInstance, textureSize) {
  if (textureSize === 0)
    return void 0;
  const initialState = new Float32Array(textureSize * textureSize * 4).fill(selectedIndices ? 1 : 0);
  if (selectedIndices) {
    for (const selectedIndex of selectedIndices) {
      initialState[selectedIndex * 4] = 0;
    }
  }
  const initialTexture = reglInstance.texture({
    data: initialState,
    width: textureSize,
    height: textureSize,
    type: "float"
  });
  return reglInstance.framebuffer({
    color: initialTexture,
    depth: false,
    stencil: false
  });
}
var drawPointsFrag = "#ifdef GL_ES\nprecision highp float;\n#define GLSLIFY 1\n#endif\nvarying vec2 index;varying vec3 rgbColor;varying float alpha;const float smoothing=0.9;void main(){if(alpha==0.0){discard;}float r=0.0;float delta=0.0;vec2 cxy=2.0*gl_PointCoord-1.0;r=dot(cxy,cxy);float opacity=alpha*(1.0-smoothstep(smoothing,1.0,r));gl_FragColor=vec4(rgbColor,opacity);}";
var drawPointsVert = "#ifdef GL_ES\nprecision highp float;\n#define GLSLIFY 1\n#endif\nattribute vec2 indexes;uniform sampler2D positions;uniform sampler2D particleColor;uniform sampler2D particleGreyoutStatus;uniform sampler2D particleSize;uniform float ratio;uniform mat3 transform;uniform float pointsTextureSize;uniform float sizeScale;uniform float spaceSize;uniform vec2 screenSize;uniform float greyoutOpacity;uniform bool scaleNodesOnZoom;uniform float maxPointSize;varying vec2 index;varying vec3 rgbColor;varying float alpha;float pointSize(float size){float pSize;if(scaleNodesOnZoom){pSize=size*ratio*transform[0][0];}else{pSize=size*ratio*min(5.0,max(1.0,transform[0][0]*0.01));}return min(pSize,maxPointSize*ratio);}void main(){index=indexes;vec4 pointPosition=texture2D(positions,(index+0.5)/pointsTextureSize);vec2 point=pointPosition.rg;vec2 p=2.0*point/spaceSize-1.0;p*=spaceSize/screenSize;vec3 final=transform*vec3(p,1);gl_Position=vec4(final.rg,0,1);vec4 pSize=texture2D(particleSize,(index+0.5)/pointsTextureSize);float size=pSize.r*sizeScale;vec4 pColor=texture2D(particleColor,(index+0.5)/pointsTextureSize);rgbColor=pColor.rgb;gl_PointSize=pointSize(size);alpha=pColor.a;vec4 greyoutStatus=texture2D(particleGreyoutStatus,(index+0.5)/pointsTextureSize);if(greyoutStatus.r>0.0){alpha*=greyoutOpacity;}}";
var findPointsOnAreaSelectionFrag = "#ifdef GL_ES\nprecision highp float;\n#define GLSLIFY 1\n#endif\nuniform sampler2D position;uniform sampler2D particleSize;uniform float sizeScale;uniform float spaceSize;uniform vec2 screenSize;uniform float ratio;uniform mat3 transform;uniform vec2 selection[2];uniform bool scaleNodesOnZoom;uniform float maxPointSize;varying vec2 index;float pointSize(float size){float pSize;if(scaleNodesOnZoom){pSize=size*ratio*transform[0][0];}else{pSize=size*ratio*min(5.0,max(1.0,transform[0][0]*0.01));}return min(pSize,maxPointSize*ratio);}void main(){vec4 pointPosition=texture2D(position,index);vec2 p=2.0*pointPosition.rg/spaceSize-1.0;p*=spaceSize/screenSize;vec3 final=transform*vec3(p,1);vec4 pSize=texture2D(particleSize,index);float size=pSize.r*sizeScale;float left=2.0*(selection[0].x-0.5*pointSize(size))/screenSize.x-1.0;float right=2.0*(selection[1].x+0.5*pointSize(size))/screenSize.x-1.0;float top=2.0*(selection[0].y-0.5*pointSize(size))/screenSize.y-1.0;float bottom=2.0*(selection[1].y+0.5*pointSize(size))/screenSize.y-1.0;gl_FragColor=vec4(0.0,0.0,pointPosition.rg);if(final.x>=left&&final.x<=right&&final.y>=top&&final.y<=bottom){gl_FragColor.r=1.0;}}";
var drawHighlightedFrag = "precision mediump float;\n#define GLSLIFY 1\nuniform vec4 color;uniform float width;varying vec2 pos;varying float particleOpacity;const float smoothing=1.05;void main(){vec2 cxy=pos;float r=dot(cxy,cxy);float opacity=smoothstep(r,r*smoothing,1.0);float stroke=smoothstep(width,width*smoothing,r);gl_FragColor=vec4(color.rgb,opacity*stroke*color.a*particleOpacity);}";
var drawHighlightedVert = "precision mediump float;\n#define GLSLIFY 1\nattribute vec2 quad;uniform sampler2D positions;uniform sampler2D particleColor;uniform sampler2D particleGreyoutStatus;uniform sampler2D particleSize;uniform mat3 transform;uniform float pointsTextureSize;uniform float sizeScale;uniform float spaceSize;uniform vec2 screenSize;uniform bool scaleNodesOnZoom;uniform float pointIndex;uniform float maxPointSize;uniform vec4 color;uniform float greyoutOpacity;varying vec2 pos;varying float particleOpacity;float pointSize(float size){float pSize;if(scaleNodesOnZoom){pSize=size*transform[0][0];}else{pSize=size*min(5.0,max(1.0,transform[0][0]*0.01));}return min(pSize,maxPointSize);}const float relativeRingRadius=1.3;void main(){pos=quad;vec2 ij=vec2(mod(pointIndex,pointsTextureSize),floor(pointIndex/pointsTextureSize))+0.5;vec4 pointPosition=texture2D(positions,ij/pointsTextureSize);vec4 pSize=texture2D(particleSize,ij/pointsTextureSize);vec4 pColor=texture2D(particleColor,ij/pointsTextureSize);particleOpacity=pColor.a;vec4 greyoutStatus=texture2D(particleGreyoutStatus,ij/pointsTextureSize);if(greyoutStatus.r>0.0){particleOpacity*=greyoutOpacity;}float size=(pointSize(pSize.r*sizeScale)*relativeRingRadius)/transform[0][0];float radius=size*0.5;vec2 a=pointPosition.xy;vec2 b=pointPosition.xy+vec2(0.0,radius);vec2 xBasis=b-a;vec2 yBasis=normalize(vec2(-xBasis.y,xBasis.x));vec2 point=a+xBasis*quad.x+yBasis*radius*quad.y;vec2 p=2.0*point/spaceSize-1.0;p*=spaceSize/screenSize;vec3 final=transform*vec3(p,1);gl_Position=vec4(final.rg,0,1);}";
var findHoveredPointFrag = "#ifdef GL_ES\nprecision highp float;\n#define GLSLIFY 1\n#endif\nvarying vec4 rgba;void main(){gl_FragColor=rgba;}";
var findHoveredPointVert = "#ifdef GL_ES\nprecision highp float;\n#define GLSLIFY 1\n#endif\nuniform sampler2D position;uniform float pointsTextureSize;uniform sampler2D particleSize;uniform float sizeScale;uniform float spaceSize;uniform vec2 screenSize;uniform float ratio;uniform mat3 transform;uniform vec2 mousePosition;uniform bool scaleNodesOnZoom;uniform float maxPointSize;attribute vec2 indexes;varying vec4 rgba;float pointSize(float size){float pSize;if(scaleNodesOnZoom){pSize=size*ratio*transform[0][0];}else{pSize=size*ratio*min(5.0,max(1.0,transform[0][0]*0.01));}return min(pSize,maxPointSize*ratio);}float euclideanDistance(float x1,float x2,float y1,float y2){return sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1));}void main(){vec4 pointPosition=texture2D(position,(indexes+0.5)/pointsTextureSize);vec2 p=2.0*pointPosition.rg/spaceSize-1.0;p*=spaceSize/screenSize;vec3 final=transform*vec3(p,1);vec4 pSize=texture2D(particleSize,indexes/pointsTextureSize);float size=pSize.r*sizeScale;float pointRadius=0.5*pointSize(size);vec2 pointScreenPosition=(final.xy+1.0)*screenSize/2.0;rgba=vec4(0.0);gl_Position=vec4(0.5,0.5,0.0,1.0);if(euclideanDistance(pointScreenPosition.x,mousePosition.x,pointScreenPosition.y,mousePosition.y)<pointRadius/ratio){float index=indexes.g*pointsTextureSize+indexes.r;rgba=vec4(index,pSize.r,pointPosition.xy);gl_Position=vec4(-0.5,-0.5,0.0,1.0);}gl_PointSize=1.0;}";
var fillGridWithSampledNodesFrag = "#ifdef GL_ES\nprecision highp float;\n#define GLSLIFY 1\n#endif\nvarying vec4 rgba;void main(){gl_FragColor=rgba;}";
var fillGridWithSampledNodesVert = "#ifdef GL_ES\nprecision highp float;\n#define GLSLIFY 1\n#endif\nuniform sampler2D position;uniform float pointsTextureSize;uniform float spaceSize;uniform vec2 screenSize;uniform mat3 transform;attribute vec2 indexes;varying vec4 rgba;void main(){vec4 pointPosition=texture2D(position,(indexes+0.5)/pointsTextureSize);vec2 p=2.0*pointPosition.rg/spaceSize-1.0;p*=spaceSize/screenSize;vec3 final=transform*vec3(p,1);vec2 pointScreenPosition=(final.xy+1.0)*screenSize/2.0;float index=indexes.g*pointsTextureSize+indexes.r;rgba=vec4(index,1.0,pointPosition.xy);float i=(pointScreenPosition.x+0.5)/screenSize.x;float j=(pointScreenPosition.y+0.5)/screenSize.y;gl_Position=vec4(2.0*vec2(i,j)-1.0,0.0,1.0);gl_PointSize=1.0;}";
function getNodeSize(node, sizeAccessor, index) {
  const size = getValue(node, sizeAccessor, index);
  return size !== null && size !== void 0 ? size : defaultNodeSize;
}
function createSizeBufferAndFillSizeStore(data, reglInstance, pointTextureSize, sizeAccessor, sizeStore) {
  if (pointTextureSize === 0)
    return void 0;
  const numParticles = data.nodes.length;
  const initialState = new Float32Array(pointTextureSize * pointTextureSize * 4);
  for (let i = 0; i < numParticles; ++i) {
    const sortedIndex = data.getSortedIndexByInputIndex(i);
    const node = data.nodes[i];
    if (node && sortedIndex !== void 0) {
      const nodeSize = getNodeSize(node, sizeAccessor, i);
      initialState[sortedIndex * 4] = nodeSize;
      sizeStore[i] = nodeSize;
    }
  }
  const initialTexture = reglInstance.texture({
    data: initialState,
    width: pointTextureSize,
    height: pointTextureSize,
    type: "float"
  });
  return reglInstance.framebuffer({
    color: initialTexture,
    depth: false,
    stencil: false
  });
}
var updatePositionFrag = "#ifdef GL_ES\nprecision highp float;\n#define GLSLIFY 1\n#endif\nuniform sampler2D position;uniform sampler2D velocity;uniform float friction;uniform float spaceSize;varying vec2 index;void main(){vec4 pointPosition=texture2D(position,index);vec4 pointVelocity=texture2D(velocity,index);pointVelocity.rg*=friction;pointPosition.rg+=pointVelocity.rg;pointPosition.r=clamp(pointPosition.r,0.0,spaceSize);pointPosition.g=clamp(pointPosition.g,0.0,spaceSize);gl_FragColor=pointPosition;}";
function createTrackedPositionsBuffer(indices, reglInstance) {
  const size = Math.ceil(Math.sqrt(indices.length));
  return reglInstance.framebuffer({
    shape: [size, size],
    depth: false,
    stencil: false,
    colorType: "float"
  });
}
function createTrackedIndicesBuffer(indices, pointsTextureSize, reglInstance) {
  const size = Math.ceil(Math.sqrt(indices.length));
  if (size === 0)
    return void 0;
  const initialState = new Float32Array(size * size * 4).fill(-1);
  for (const [i, sortedIndex] of indices.entries()) {
    if (sortedIndex !== void 0) {
      initialState[i * 4] = sortedIndex % pointsTextureSize;
      initialState[i * 4 + 1] = Math.floor(sortedIndex / pointsTextureSize);
      initialState[i * 4 + 2] = 0;
      initialState[i * 4 + 3] = 0;
    }
  }
  const initialTexture = reglInstance.texture({
    data: initialState,
    width: size,
    height: size,
    type: "float"
  });
  return reglInstance.framebuffer({
    color: initialTexture,
    depth: false,
    stencil: false
  });
}
var trackPositionsFrag = "#ifdef GL_ES\nprecision highp float;\n#define GLSLIFY 1\n#endif\nuniform sampler2D position;uniform sampler2D trackedIndices;uniform float pointsTextureSize;varying vec2 index;void main(){vec4 trackedPointIndicies=texture2D(trackedIndices,index);if(trackedPointIndicies.r<0.0)discard;vec4 pointPosition=texture2D(position,(trackedPointIndicies.rg+0.5)/pointsTextureSize);gl_FragColor=vec4(pointPosition.rg,1.0,1.0);}";
var Points = class extends CoreModule {
  constructor() {
    super(...arguments);
    this.trackedPositionsById = /* @__PURE__ */ new Map();
  }
  create() {
    var _a, _b;
    const { reglInstance, store, data, config } = this;
    const { pointsTextureSize, adjustedSpaceSize } = store;
    if (!pointsTextureSize)
      return;
    const numParticles = data.nodes.length;
    const initialState = new Float32Array(pointsTextureSize * pointsTextureSize * 4);
    if (!config.disableSimulation)
      this.rescaleInitialNodePositions();
    for (let i = 0; i < numParticles; ++i) {
      const sortedIndex = this.data.getSortedIndexByInputIndex(i);
      const node = data.nodes[i];
      if (node && sortedIndex !== void 0) {
        initialState[sortedIndex * 4 + 0] = (_a = node.x) !== null && _a !== void 0 ? _a : adjustedSpaceSize * store.getRandomFloat(0.495, 0.505);
        initialState[sortedIndex * 4 + 1] = (_b = node.y) !== null && _b !== void 0 ? _b : adjustedSpaceSize * store.getRandomFloat(0.495, 0.505);
      }
    }
    this.currentPositionFbo = reglInstance.framebuffer({
      color: reglInstance.texture({
        data: initialState,
        shape: [pointsTextureSize, pointsTextureSize, 4],
        type: "float"
      }),
      depth: false,
      stencil: false
    });
    if (!this.config.disableSimulation) {
      this.previousPositionFbo = reglInstance.framebuffer({
        color: reglInstance.texture({
          data: initialState,
          shape: [pointsTextureSize, pointsTextureSize, 4],
          type: "float"
        }),
        depth: false,
        stencil: false
      });
      this.velocityFbo = reglInstance.framebuffer({
        color: reglInstance.texture({
          data: new Float32Array(pointsTextureSize * pointsTextureSize * 4).fill(0),
          shape: [pointsTextureSize, pointsTextureSize, 4],
          type: "float"
        }),
        depth: false,
        stencil: false
      });
    }
    this.selectedFbo = reglInstance.framebuffer({
      color: reglInstance.texture({
        data: initialState,
        shape: [pointsTextureSize, pointsTextureSize, 4],
        type: "float"
      }),
      depth: false,
      stencil: false
    });
    this.hoveredFbo = reglInstance.framebuffer({
      shape: [2, 2],
      colorType: "float",
      depth: false,
      stencil: false
    });
    this.updateSize();
    this.updateColor();
    this.updateGreyoutStatus();
    this.updateSampledNodesGrid();
  }
  initPrograms() {
    const { reglInstance, config, store, data } = this;
    if (!config.disableSimulation) {
      this.updatePositionCommand = reglInstance({
        frag: updatePositionFrag,
        vert: updateVert,
        framebuffer: () => this.currentPositionFbo,
        primitive: "triangle strip",
        count: 4,
        attributes: { quad: createQuadBuffer(reglInstance) },
        uniforms: {
          position: () => this.previousPositionFbo,
          velocity: () => this.velocityFbo,
          friction: () => {
            var _a;
            return (_a = config.simulation) === null || _a === void 0 ? void 0 : _a.friction;
          },
          spaceSize: () => store.adjustedSpaceSize
        }
      });
    }
    this.drawCommand = reglInstance({
      frag: drawPointsFrag,
      vert: drawPointsVert,
      primitive: "points",
      count: () => data.nodes.length,
      attributes: { indexes: createIndexesBuffer(reglInstance, store.pointsTextureSize) },
      uniforms: {
        positions: () => this.currentPositionFbo,
        particleColor: () => this.colorFbo,
        particleGreyoutStatus: () => this.greyoutStatusFbo,
        particleSize: () => this.sizeFbo,
        ratio: () => config.pixelRatio,
        sizeScale: () => config.nodeSizeScale,
        pointsTextureSize: () => store.pointsTextureSize,
        transform: () => store.transform,
        spaceSize: () => store.adjustedSpaceSize,
        screenSize: () => store.screenSize,
        greyoutOpacity: () => config.nodeGreyoutOpacity,
        scaleNodesOnZoom: () => config.scaleNodesOnZoom,
        maxPointSize: () => store.maxPointSize
      },
      blend: {
        enable: true,
        func: {
          dstRGB: "one minus src alpha",
          srcRGB: "src alpha",
          dstAlpha: "one minus src alpha",
          srcAlpha: "one"
        },
        equation: {
          rgb: "add",
          alpha: "add"
        }
      },
      depth: {
        enable: false,
        mask: false
      }
    });
    this.findPointsOnAreaSelectionCommand = reglInstance({
      frag: findPointsOnAreaSelectionFrag,
      vert: updateVert,
      framebuffer: () => this.selectedFbo,
      primitive: "triangle strip",
      count: 4,
      attributes: { quad: createQuadBuffer(reglInstance) },
      uniforms: {
        position: () => this.currentPositionFbo,
        particleSize: () => this.sizeFbo,
        spaceSize: () => store.adjustedSpaceSize,
        screenSize: () => store.screenSize,
        sizeScale: () => config.nodeSizeScale,
        transform: () => store.transform,
        ratio: () => config.pixelRatio,
        "selection[0]": () => store.selectedArea[0],
        "selection[1]": () => store.selectedArea[1],
        scaleNodesOnZoom: () => config.scaleNodesOnZoom,
        maxPointSize: () => store.maxPointSize
      }
    });
    this.clearHoveredFboCommand = reglInstance({
      frag: clearFrag,
      vert: updateVert,
      framebuffer: this.hoveredFbo,
      primitive: "triangle strip",
      count: 4,
      attributes: { quad: createQuadBuffer(reglInstance) }
    });
    this.findHoveredPointCommand = reglInstance({
      frag: findHoveredPointFrag,
      vert: findHoveredPointVert,
      primitive: "points",
      count: () => data.nodes.length,
      framebuffer: () => this.hoveredFbo,
      attributes: { indexes: createIndexesBuffer(reglInstance, store.pointsTextureSize) },
      uniforms: {
        position: () => this.currentPositionFbo,
        particleSize: () => this.sizeFbo,
        ratio: () => config.pixelRatio,
        sizeScale: () => config.nodeSizeScale,
        pointsTextureSize: () => store.pointsTextureSize,
        transform: () => store.transform,
        spaceSize: () => store.adjustedSpaceSize,
        screenSize: () => store.screenSize,
        scaleNodesOnZoom: () => config.scaleNodesOnZoom,
        mousePosition: () => store.screenMousePosition,
        maxPointSize: () => store.maxPointSize
      },
      depth: {
        enable: false,
        mask: false
      }
    });
    this.clearSampledNodesFboCommand = reglInstance({
      frag: clearFrag,
      vert: updateVert,
      framebuffer: () => this.sampledNodesFbo,
      primitive: "triangle strip",
      count: 4,
      attributes: { quad: createQuadBuffer(reglInstance) }
    });
    this.fillSampledNodesFboCommand = reglInstance({
      frag: fillGridWithSampledNodesFrag,
      vert: fillGridWithSampledNodesVert,
      primitive: "points",
      count: () => data.nodes.length,
      framebuffer: () => this.sampledNodesFbo,
      attributes: { indexes: createIndexesBuffer(reglInstance, store.pointsTextureSize) },
      uniforms: {
        position: () => this.currentPositionFbo,
        pointsTextureSize: () => store.pointsTextureSize,
        transform: () => store.transform,
        spaceSize: () => store.adjustedSpaceSize,
        screenSize: () => store.screenSize
      },
      depth: {
        enable: false,
        mask: false
      }
    });
    this.drawHighlightedCommand = reglInstance({
      frag: drawHighlightedFrag,
      vert: drawHighlightedVert,
      attributes: { quad: createQuadBuffer(reglInstance) },
      primitive: "triangle strip",
      count: 4,
      uniforms: {
        color: reglInstance.prop("color"),
        width: reglInstance.prop("width"),
        pointIndex: reglInstance.prop("pointIndex"),
        positions: () => this.currentPositionFbo,
        particleColor: () => this.colorFbo,
        particleSize: () => this.sizeFbo,
        sizeScale: () => config.nodeSizeScale,
        pointsTextureSize: () => store.pointsTextureSize,
        transform: () => store.transform,
        spaceSize: () => store.adjustedSpaceSize,
        screenSize: () => store.screenSize,
        scaleNodesOnZoom: () => config.scaleNodesOnZoom,
        maxPointSize: () => store.maxPointSize,
        particleGreyoutStatus: () => this.greyoutStatusFbo,
        greyoutOpacity: () => config.nodeGreyoutOpacity
      },
      blend: {
        enable: true,
        func: {
          dstRGB: "one minus src alpha",
          srcRGB: "src alpha",
          dstAlpha: "one minus src alpha",
          srcAlpha: "one"
        },
        equation: {
          rgb: "add",
          alpha: "add"
        }
      },
      depth: {
        enable: false,
        mask: false
      }
    });
    this.trackPointsCommand = reglInstance({
      frag: trackPositionsFrag,
      vert: updateVert,
      framebuffer: () => this.trackedPositionsFbo,
      primitive: "triangle strip",
      count: 4,
      attributes: { quad: createQuadBuffer(reglInstance) },
      uniforms: {
        position: () => this.currentPositionFbo,
        trackedIndices: () => this.trackedIndicesFbo,
        pointsTextureSize: () => store.pointsTextureSize
      }
    });
  }
  updateColor() {
    const { reglInstance, config, store: { pointsTextureSize }, data } = this;
    if (!pointsTextureSize)
      return;
    this.colorFbo = createColorBuffer(data, reglInstance, pointsTextureSize, config.nodeColor);
  }
  updateGreyoutStatus() {
    const { reglInstance, store } = this;
    this.greyoutStatusFbo = createGreyoutStatusBuffer(store.selectedIndices, reglInstance, store.pointsTextureSize);
  }
  updateSize() {
    const { reglInstance, config, store: { pointsTextureSize }, data } = this;
    if (!pointsTextureSize)
      return;
    this.sizeByIndex = new Float32Array(data.nodes.length);
    this.sizeFbo = createSizeBufferAndFillSizeStore(data, reglInstance, pointsTextureSize, config.nodeSize, this.sizeByIndex);
  }
  updateSampledNodesGrid() {
    const { store: { screenSize }, config: { nodeSamplingDistance }, reglInstance } = this;
    const dist = nodeSamplingDistance !== null && nodeSamplingDistance !== void 0 ? nodeSamplingDistance : Math.min(...screenSize) / 2;
    const w = Math.ceil(screenSize[0] / dist);
    const h = Math.ceil(screenSize[1] / dist);
    destroyFramebuffer(this.sampledNodesFbo);
    this.sampledNodesFbo = reglInstance.framebuffer({
      shape: [w, h],
      depth: false,
      stencil: false,
      colorType: "float"
    });
  }
  trackPoints() {
    var _a;
    if (!this.trackedIndicesFbo || !this.trackedPositionsFbo)
      return;
    (_a = this.trackPointsCommand) === null || _a === void 0 ? void 0 : _a.call(this);
  }
  draw() {
    var _a, _b, _c;
    const { config: { renderHoveredNodeRing, renderHighlightedNodeRing }, store } = this;
    (_a = this.drawCommand) === null || _a === void 0 ? void 0 : _a.call(this);
    if ((renderHoveredNodeRing !== null && renderHoveredNodeRing !== void 0 ? renderHoveredNodeRing : renderHighlightedNodeRing) && store.hoveredNode) {
      (_b = this.drawHighlightedCommand) === null || _b === void 0 ? void 0 : _b.call(this, {
        width: 0.85,
        color: store.hoveredNodeRingColor,
        pointIndex: store.hoveredNode.index
      });
    }
    if (store.focusedNode) {
      (_c = this.drawHighlightedCommand) === null || _c === void 0 ? void 0 : _c.call(this, {
        width: 0.75,
        color: store.focusedNodeRingColor,
        pointIndex: store.focusedNode.index
      });
    }
  }
  updatePosition() {
    var _a;
    (_a = this.updatePositionCommand) === null || _a === void 0 ? void 0 : _a.call(this);
    this.swapFbo();
  }
  findPointsOnAreaSelection() {
    var _a;
    (_a = this.findPointsOnAreaSelectionCommand) === null || _a === void 0 ? void 0 : _a.call(this);
  }
  findHoveredPoint() {
    var _a, _b;
    (_a = this.clearHoveredFboCommand) === null || _a === void 0 ? void 0 : _a.call(this);
    (_b = this.findHoveredPointCommand) === null || _b === void 0 ? void 0 : _b.call(this);
  }
  getNodeRadiusByIndex(index) {
    var _a;
    return (_a = this.sizeByIndex) === null || _a === void 0 ? void 0 : _a[index];
  }
  trackNodesByIds(ids) {
    this.trackedIds = ids.length ? ids : void 0;
    this.trackedPositionsById.clear();
    const indices = ids.map((id) => this.data.getSortedIndexById(id)).filter((d) => d !== void 0);
    destroyFramebuffer(this.trackedIndicesFbo);
    this.trackedIndicesFbo = void 0;
    destroyFramebuffer(this.trackedPositionsFbo);
    this.trackedPositionsFbo = void 0;
    if (indices.length) {
      this.trackedIndicesFbo = createTrackedIndicesBuffer(indices, this.store.pointsTextureSize, this.reglInstance);
      this.trackedPositionsFbo = createTrackedPositionsBuffer(indices, this.reglInstance);
    }
    this.trackPoints();
  }
  getTrackedPositions() {
    if (!this.trackedIds)
      return this.trackedPositionsById;
    const pixels = readPixels(this.reglInstance, this.trackedPositionsFbo);
    this.trackedIds.forEach((id, i) => {
      const x = pixels[i * 4];
      const y = pixels[i * 4 + 1];
      if (x !== void 0 && y !== void 0)
        this.trackedPositionsById.set(id, [x, y]);
    });
    return this.trackedPositionsById;
  }
  getSampledNodePositionsMap() {
    var _a, _b, _c;
    const positions = /* @__PURE__ */ new Map();
    if (!this.sampledNodesFbo)
      return positions;
    (_a = this.clearSampledNodesFboCommand) === null || _a === void 0 ? void 0 : _a.call(this);
    (_b = this.fillSampledNodesFboCommand) === null || _b === void 0 ? void 0 : _b.call(this);
    const pixels = readPixels(this.reglInstance, this.sampledNodesFbo);
    for (let i = 0; i < pixels.length / 4; i++) {
      const index = pixels[i * 4];
      const isNotEmpty = !!pixels[i * 4 + 1];
      const x = pixels[i * 4 + 2];
      const y = pixels[i * 4 + 3];
      if (isNotEmpty && index !== void 0 && x !== void 0 && y !== void 0) {
        const inputIndex = this.data.getInputIndexBySortedIndex(index);
        if (inputIndex !== void 0) {
          const id = (_c = this.data.getNodeByIndex(inputIndex)) === null || _c === void 0 ? void 0 : _c.id;
          if (id !== void 0)
            positions.set(id, [x, y]);
        }
      }
    }
    return positions;
  }
  destroy() {
    destroyFramebuffer(this.currentPositionFbo);
    destroyFramebuffer(this.previousPositionFbo);
    destroyFramebuffer(this.velocityFbo);
    destroyFramebuffer(this.selectedFbo);
    destroyFramebuffer(this.colorFbo);
    destroyFramebuffer(this.sizeFbo);
    destroyFramebuffer(this.greyoutStatusFbo);
    destroyFramebuffer(this.hoveredFbo);
    destroyFramebuffer(this.trackedIndicesFbo);
    destroyFramebuffer(this.trackedPositionsFbo);
  }
  swapFbo() {
    const temp = this.previousPositionFbo;
    this.previousPositionFbo = this.currentPositionFbo;
    this.currentPositionFbo = temp;
  }
  rescaleInitialNodePositions() {
    const { nodes } = this.data;
    const { spaceSize } = this.config;
    if (nodes.length === 0)
      return;
    const xs = nodes.map((n) => n.x).filter((n) => n !== void 0);
    if (xs.length === 0)
      return;
    const ys = nodes.map((n) => n.y).filter((n) => n !== void 0);
    if (ys.length === 0)
      return;
    const [minX, maxX] = extent(xs);
    if (minX === void 0 || maxX === void 0)
      return;
    const [minY, maxY] = extent(ys);
    if (minY === void 0 || maxY === void 0)
      return;
    const w = maxX - minX;
    const h = maxY - minY;
    const size = Math.max(w, h);
    const dw = (size - w) / 2;
    const dh = (size - h) / 2;
    const scaleX = linear().range([0, spaceSize !== null && spaceSize !== void 0 ? spaceSize : defaultConfigValues.spaceSize]).domain([minX - dw, maxX + dw]);
    const scaleY = linear().range([0, spaceSize !== null && spaceSize !== void 0 ? spaceSize : defaultConfigValues.spaceSize]).domain([minY - dh, maxY + dh]);
    nodes.forEach((n) => {
      n.x = scaleX(n.x);
      n.y = scaleY(n.y);
    });
  }
};
var ALPHA_MIN = 1e-3;
var MAX_POINT_SIZE = 64;
var Store = class {
  constructor() {
    this.pointsTextureSize = 0;
    this.linksTextureSize = 0;
    this.alpha = 1;
    this.transform = mat3_exports.create();
    this.backgroundColor = [0, 0, 0, 0];
    this.screenSize = [0, 0];
    this.mousePosition = [0, 0];
    this.screenMousePosition = [0, 0];
    this.selectedArea = [[0, 0], [0, 0]];
    this.isSimulationRunning = false;
    this.simulationProgress = 0;
    this.selectedIndices = null;
    this.maxPointSize = MAX_POINT_SIZE;
    this.hoveredNode = void 0;
    this.focusedNode = void 0;
    this.adjustedSpaceSize = defaultConfigValues.spaceSize;
    this.hoveredNodeRingColor = [1, 1, 1, hoveredNodeRingOpacity];
    this.focusedNodeRingColor = [1, 1, 1, focusedNodeRingOpacity];
    this.alphaTarget = 0;
    this.scaleNodeX = linear();
    this.scaleNodeY = linear();
    this.random = new Random();
    this.alphaDecay = (decay) => 1 - Math.pow(ALPHA_MIN, 1 / decay);
  }
  addRandomSeed(seed) {
    this.random = this.random.clone(seed);
  }
  getRandomFloat(min, max) {
    return this.random.float(min, max);
  }
  /**
   * If the config parameter `spaceSize` exceeds the limits of WebGL,
   * it reduces the space size without changing the config parameter.
   */
  adjustSpaceSize(configSpaceSize, webglMaxTextureSize) {
    if (configSpaceSize >= webglMaxTextureSize) {
      this.adjustedSpaceSize = webglMaxTextureSize / 2;
      console.warn(`The \`spaceSize\` has been reduced to ${this.adjustedSpaceSize} due to WebGL limits`);
    } else
      this.adjustedSpaceSize = configSpaceSize;
  }
  updateScreenSize(width, height) {
    const { adjustedSpaceSize } = this;
    this.screenSize = [width, height];
    this.scaleNodeX.domain([0, adjustedSpaceSize]).range([(width - adjustedSpaceSize) / 2, (width + adjustedSpaceSize) / 2]);
    this.scaleNodeY.domain([adjustedSpaceSize, 0]).range([(height - adjustedSpaceSize) / 2, (height + adjustedSpaceSize) / 2]);
  }
  scaleX(x) {
    return this.scaleNodeX(x);
  }
  scaleY(y) {
    return this.scaleNodeY(y);
  }
  setHoveredNodeRingColor(color2) {
    const convertedRgba = getRgbaColor(color2);
    this.hoveredNodeRingColor[0] = convertedRgba[0];
    this.hoveredNodeRingColor[1] = convertedRgba[1];
    this.hoveredNodeRingColor[2] = convertedRgba[2];
  }
  setFocusedNodeRingColor(color2) {
    const convertedRgba = getRgbaColor(color2);
    this.focusedNodeRingColor[0] = convertedRgba[0];
    this.focusedNodeRingColor[1] = convertedRgba[1];
    this.focusedNodeRingColor[2] = convertedRgba[2];
  }
  setFocusedNode(node, index) {
    if (node && index !== void 0) {
      this.focusedNode = { node, index };
    } else
      this.focusedNode = void 0;
  }
  addAlpha(decay) {
    return (this.alphaTarget - this.alpha) * this.alphaDecay(decay);
  }
};
var Zoom = class {
  constructor(store, config) {
    this.eventTransform = identity2;
    this.behavior = zoom_default2().scaleExtent([1e-3, Infinity]).on("start", (e) => {
      var _a, _b, _c;
      this.isRunning = true;
      const userDriven = !!e.sourceEvent;
      (_c = (_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.events) === null || _b === void 0 ? void 0 : _b.onZoomStart) === null || _c === void 0 ? void 0 : _c.call(_b, e, userDriven);
    }).on("zoom", (e) => {
      var _a, _b, _c;
      this.eventTransform = e.transform;
      const { eventTransform: { x, y, k }, store: { transform: transform2, screenSize } } = this;
      const w = screenSize[0];
      const h = screenSize[1];
      mat3_exports.projection(transform2, w, h);
      mat3_exports.translate(transform2, transform2, [x, y]);
      mat3_exports.scale(transform2, transform2, [k, k]);
      mat3_exports.translate(transform2, transform2, [w / 2, h / 2]);
      mat3_exports.scale(transform2, transform2, [w / 2, h / 2]);
      mat3_exports.scale(transform2, transform2, [1, -1]);
      const userDriven = !!e.sourceEvent;
      (_c = (_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.events) === null || _b === void 0 ? void 0 : _b.onZoom) === null || _c === void 0 ? void 0 : _c.call(_b, e, userDriven);
    }).on("end", (e) => {
      var _a, _b, _c;
      this.isRunning = false;
      const userDriven = !!e.sourceEvent;
      (_c = (_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.events) === null || _b === void 0 ? void 0 : _b.onZoomEnd) === null || _c === void 0 ? void 0 : _c.call(_b, e, userDriven);
    });
    this.isRunning = false;
    this.store = store;
    this.config = config;
  }
  /**
   * Get the zoom transform that will fit the given node positions into the viewport
   *
   * @param positions An array of node positions in the form `[x, y]`
   * @param scale An optional scale factor to apply to the transform
   * @param padding Padding around the viewport in percentage
   */
  getTransform(positions, scale3, padding = 0.1) {
    if (positions.length === 0)
      return this.eventTransform;
    const { store: { screenSize } } = this;
    const width = screenSize[0];
    const height = screenSize[1];
    const xExtent = extent(positions.map((d) => d[0]));
    const yExtent = extent(positions.map((d) => d[1]));
    xExtent[0] = this.store.scaleX(xExtent[0]);
    xExtent[1] = this.store.scaleX(xExtent[1]);
    yExtent[0] = this.store.scaleY(yExtent[0]);
    yExtent[1] = this.store.scaleY(yExtent[1]);
    const xScale = width * (1 - padding * 2) / (xExtent[1] - xExtent[0]);
    const yScale = height * (1 - padding * 2) / (yExtent[0] - yExtent[1]);
    const clampedScale = clamp(scale3 !== null && scale3 !== void 0 ? scale3 : Math.min(xScale, yScale), ...this.behavior.scaleExtent());
    const xCenter = (xExtent[1] + xExtent[0]) / 2;
    const yCenter = (yExtent[1] + yExtent[0]) / 2;
    const translateX = width / 2 - xCenter * clampedScale;
    const translateY = height / 2 - yCenter * clampedScale;
    const transform2 = identity2.translate(translateX, translateY).scale(clampedScale);
    return transform2;
  }
  getDistanceToPoint(position) {
    const { x, y, k } = this.eventTransform;
    const point = this.getTransform([position], k);
    const dx = x - point.x;
    const dy = y - point.y;
    return Math.sqrt(dx * dx + dy * dy);
  }
  getMiddlePointTransform(position) {
    const { store: { screenSize }, eventTransform: { x, y, k } } = this;
    const width = screenSize[0];
    const height = screenSize[1];
    const currX = (width / 2 - x) / k;
    const currY = (height / 2 - y) / k;
    const pointX = this.store.scaleX(position[0]);
    const pointY = this.store.scaleY(position[1]);
    const centerX = (currX + pointX) / 2;
    const centerY = (currY + pointY) / 2;
    const scale3 = 1;
    const translateX = width / 2 - centerX * scale3;
    const translateY = height / 2 - centerY * scale3;
    return identity2.translate(translateX, translateY).scale(scale3);
  }
  convertScreenToSpacePosition(screenPosition) {
    const { eventTransform: { x, y, k }, store: { screenSize } } = this;
    const w = screenSize[0];
    const h = screenSize[1];
    const invertedX = (screenPosition[0] - x) / k;
    const invertedY = (screenPosition[1] - y) / k;
    const spacePosition = [invertedX, h - invertedY];
    spacePosition[0] -= (w - this.store.adjustedSpaceSize) / 2;
    spacePosition[1] -= (h - this.store.adjustedSpaceSize) / 2;
    return spacePosition;
  }
  convertSpaceToScreenPosition(spacePosition) {
    const screenPointX = this.eventTransform.applyX(this.store.scaleX(spacePosition[0]));
    const screenPointY = this.eventTransform.applyY(this.store.scaleY(spacePosition[1]));
    return [screenPointX, screenPointY];
  }
  convertSpaceToScreenRadius(spaceRadius) {
    const { config: { scaleNodesOnZoom }, store: { maxPointSize }, eventTransform: { k } } = this;
    let size = spaceRadius * 2;
    if (scaleNodesOnZoom) {
      size *= k;
    } else {
      size *= Math.min(5, Math.max(1, k * 0.01));
    }
    return Math.min(size, maxPointSize) / 2;
  }
};
var reglCachedCode = {
  "3e771157d23b4793771f65d83e6387262ed73d488209157f19a7fa027bddd71b": function anonymous(g0, g50, g53) {
    var v1, v4, v5, v10, v11, v13, v63, v64, v65, v66, v67, v68, v71, v72, v75, v76, v83, v84, v85, v86, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98;
    v1 = g0.gl;
    g0.context;
    g0.strings;
    v4 = g0.next;
    v5 = g0.current;
    g0.draw;
    g0.elements;
    g0.buffer;
    g0.shader;
    v10 = g0.attributes;
    v11 = g0.vao;
    g0.uniforms;
    v13 = g0.framebuffer;
    g0.extensions;
    g0.timer;
    g0.isBufferArgs;
    v4.blend_color;
    v5.blend_color;
    v4.blend_equation;
    v5.blend_equation;
    v4.blend_func;
    v5.blend_func;
    v4.depth_range;
    v5.depth_range;
    v4.colorMask;
    v5.colorMask;
    v4.polygonOffset_offset;
    v5.polygonOffset_offset;
    v4.sample_coverage;
    v5.sample_coverage;
    v4.stencil_func;
    v5.stencil_func;
    v4.stencil_opFront;
    v5.stencil_opFront;
    v4.stencil_opBack;
    v5.stencil_opBack;
    v4.scissor_box;
    v5.scissor_box;
    v4.viewport;
    v5.viewport;
    v63 = v4.blend_color;
    v64 = v5.blend_color;
    v65 = v4.blend_equation;
    v66 = v5.blend_equation;
    v67 = v4.blend_func;
    v68 = v5.blend_func;
    v71 = v4.depth_range;
    v72 = v5.depth_range;
    v75 = v4.colorMask;
    v76 = v5.colorMask;
    v83 = v4.polygonOffset_offset;
    v84 = v5.polygonOffset_offset;
    v85 = v4.sample_coverage;
    v86 = v5.sample_coverage;
    v89 = v4.stencil_func;
    v90 = v5.stencil_func;
    v91 = v4.stencil_opFront;
    v92 = v5.stencil_opFront;
    v93 = v4.stencil_opBack;
    v94 = v5.stencil_opBack;
    v95 = v4.scissor_box;
    v96 = v5.scissor_box;
    v97 = v4.viewport;
    v98 = v5.viewport;
    return {
      "poll": function() {
        var v48;
        var v54, v55, v56, v57, v58, v59, v60, v61, v62, v69, v70, v73, v74, v77, v78, v79, v80, v81, v82, v87, v88;
        v5.dirty = false;
        v54 = v4.dither;
        v55 = v4.blend_enable;
        v56 = v4.depth_enable;
        v57 = v4.cull_enable;
        v58 = v4.polygonOffset_enable;
        v59 = v4.sample_alpha;
        v60 = v4.sample_enable;
        v61 = v4.stencil_enable;
        v62 = v4.scissor_enable;
        v69 = v4.depth_func;
        v70 = v5.depth_func;
        v73 = v4.depth_mask;
        v74 = v5.depth_mask;
        v77 = v4.cull_face;
        v78 = v5.cull_face;
        v79 = v4.frontFace;
        v80 = v5.frontFace;
        v81 = v4.lineWidth;
        v82 = v5.lineWidth;
        v87 = v4.stencil_mask;
        v88 = v5.stencil_mask;
        v48 = v13.next;
        if (v48 !== v13.cur) {
          if (v48) {
            v1.bindFramebuffer(36160, v48.framebuffer);
          } else {
            v1.bindFramebuffer(36160, null);
          }
          v13.cur = v48;
        }
        if (v54 !== v5.dither) {
          if (v54) {
            v1.enable(3024);
          } else {
            v1.disable(3024);
          }
          v5.dither = v54;
        }
        if (v55 !== v5.blend_enable) {
          if (v55) {
            v1.enable(3042);
          } else {
            v1.disable(3042);
          }
          v5.blend_enable = v55;
        }
        if (v56 !== v5.depth_enable) {
          if (v56) {
            v1.enable(2929);
          } else {
            v1.disable(2929);
          }
          v5.depth_enable = v56;
        }
        if (v57 !== v5.cull_enable) {
          if (v57) {
            v1.enable(2884);
          } else {
            v1.disable(2884);
          }
          v5.cull_enable = v57;
        }
        if (v58 !== v5.polygonOffset_enable) {
          if (v58) {
            v1.enable(32823);
          } else {
            v1.disable(32823);
          }
          v5.polygonOffset_enable = v58;
        }
        if (v59 !== v5.sample_alpha) {
          if (v59) {
            v1.enable(32926);
          } else {
            v1.disable(32926);
          }
          v5.sample_alpha = v59;
        }
        if (v60 !== v5.sample_enable) {
          if (v60) {
            v1.enable(32928);
          } else {
            v1.disable(32928);
          }
          v5.sample_enable = v60;
        }
        if (v61 !== v5.stencil_enable) {
          if (v61) {
            v1.enable(2960);
          } else {
            v1.disable(2960);
          }
          v5.stencil_enable = v61;
        }
        if (v62 !== v5.scissor_enable) {
          if (v62) {
            v1.enable(3089);
          } else {
            v1.disable(3089);
          }
          v5.scissor_enable = v62;
        }
        if (v63[0] !== v64[0] || v63[1] !== v64[1] || v63[2] !== v64[2] || v63[3] !== v64[3]) {
          v1.blendColor(v63[0], v63[1], v63[2], v63[3]);
          v64[0] = v63[0];
          v64[1] = v63[1];
          v64[2] = v63[2];
          v64[3] = v63[3];
        }
        if (v65[0] !== v66[0] || v65[1] !== v66[1]) {
          v1.blendEquationSeparate(v65[0], v65[1]);
          v66[0] = v65[0];
          v66[1] = v65[1];
        }
        if (v67[0] !== v68[0] || v67[1] !== v68[1] || v67[2] !== v68[2] || v67[3] !== v68[3]) {
          v1.blendFuncSeparate(v67[0], v67[1], v67[2], v67[3]);
          v68[0] = v67[0];
          v68[1] = v67[1];
          v68[2] = v67[2];
          v68[3] = v67[3];
        }
        if (v69 !== v70) {
          v1.depthFunc(v69);
          v5.depth_func = v69;
        }
        if (v71[0] !== v72[0] || v71[1] !== v72[1]) {
          v1.depthRange(v71[0], v71[1]);
          v72[0] = v71[0];
          v72[1] = v71[1];
        }
        if (v73 !== v74) {
          v1.depthMask(v73);
          v5.depth_mask = v73;
        }
        if (v75[0] !== v76[0] || v75[1] !== v76[1] || v75[2] !== v76[2] || v75[3] !== v76[3]) {
          v1.colorMask(v75[0], v75[1], v75[2], v75[3]);
          v76[0] = v75[0];
          v76[1] = v75[1];
          v76[2] = v75[2];
          v76[3] = v75[3];
        }
        if (v77 !== v78) {
          v1.cullFace(v77);
          v5.cull_face = v77;
        }
        if (v79 !== v80) {
          v1.frontFace(v79);
          v5.frontFace = v79;
        }
        if (v81 !== v82) {
          v1.lineWidth(v81);
          v5.lineWidth = v81;
        }
        if (v83[0] !== v84[0] || v83[1] !== v84[1]) {
          v1.polygonOffset(v83[0], v83[1]);
          v84[0] = v83[0];
          v84[1] = v83[1];
        }
        if (v85[0] !== v86[0] || v85[1] !== v86[1]) {
          v1.sampleCoverage(v85[0], v85[1]);
          v86[0] = v85[0];
          v86[1] = v85[1];
        }
        if (v87 !== v88) {
          v1.stencilMask(v87);
          v5.stencil_mask = v87;
        }
        if (v89[0] !== v90[0] || v89[1] !== v90[1] || v89[2] !== v90[2]) {
          v1.stencilFunc(v89[0], v89[1], v89[2]);
          v90[0] = v89[0];
          v90[1] = v89[1];
          v90[2] = v89[2];
        }
        if (v91[0] !== v92[0] || v91[1] !== v92[1] || v91[2] !== v92[2] || v91[3] !== v92[3]) {
          v1.stencilOpSeparate(v91[0], v91[1], v91[2], v91[3]);
          v92[0] = v91[0];
          v92[1] = v91[1];
          v92[2] = v91[2];
          v92[3] = v91[3];
        }
        if (v93[0] !== v94[0] || v93[1] !== v94[1] || v93[2] !== v94[2] || v93[3] !== v94[3]) {
          v1.stencilOpSeparate(v93[0], v93[1], v93[2], v93[3]);
          v94[0] = v93[0];
          v94[1] = v93[1];
          v94[2] = v93[2];
          v94[3] = v93[3];
        }
        if (v95[0] !== v96[0] || v95[1] !== v96[1] || v95[2] !== v96[2] || v95[3] !== v96[3]) {
          v1.scissor(v95[0], v95[1], v95[2], v95[3]);
          v96[0] = v95[0];
          v96[1] = v95[1];
          v96[2] = v95[2];
          v96[3] = v95[3];
        }
        if (v97[0] !== v98[0] || v97[1] !== v98[1] || v97[2] !== v98[2] || v97[3] !== v98[3]) {
          v1.viewport(v97[0], v97[1], v97[2], v97[3]);
          v98[0] = v97[0];
          v98[1] = v97[1];
          v98[2] = v97[2];
          v98[3] = v97[3];
        }
      },
      "refresh": function() {
        var v49, v51, v52;
        var v54, v55, v56, v57, v58, v59, v60, v61, v62, v69, v73, v77, v79, v81, v87;
        v5.dirty = false;
        v54 = v4.dither;
        v55 = v4.blend_enable;
        v56 = v4.depth_enable;
        v57 = v4.cull_enable;
        v58 = v4.polygonOffset_enable;
        v59 = v4.sample_alpha;
        v60 = v4.sample_enable;
        v61 = v4.stencil_enable;
        v62 = v4.scissor_enable;
        v69 = v4.depth_func;
        v5.depth_func;
        v73 = v4.depth_mask;
        v5.depth_mask;
        v77 = v4.cull_face;
        v5.cull_face;
        v79 = v4.frontFace;
        v5.frontFace;
        v81 = v4.lineWidth;
        v5.lineWidth;
        v87 = v4.stencil_mask;
        v5.stencil_mask;
        v49 = v13.next;
        if (v49) {
          v1.bindFramebuffer(36160, v49.framebuffer);
        } else {
          v1.bindFramebuffer(36160, null);
        }
        v13.cur = v49;
        v51 = v10;
        v52 = 0;
        for (var i = 0; i < g53; ++i) {
          v52 = v51[i];
          if (v52.buffer) {
            v1.enableVertexAttribArray(i);
            v1.bindBuffer(34962, v52.buffer.buffer);
            v1.vertexAttribPointer(i, v52.size, v52.type, v52.normalized, v52.stride, v52.offset);
          } else {
            v1.disableVertexAttribArray(i);
            v1.vertexAttrib4f(i, v52.x, v52.y, v52.z, v52.w);
            v52.buffer = null;
          }
        }
        for (var i = 0; i < g53; ++i) {
          g50.vertexAttribDivisorANGLE(i, v51[i].divisor);
        }
        v11.currentVAO = null;
        v11.setVAO(v11.targetVAO);
        if (v54) {
          v1.enable(3024);
        } else {
          v1.disable(3024);
        }
        v5.dither = v54;
        if (v55) {
          v1.enable(3042);
        } else {
          v1.disable(3042);
        }
        v5.blend_enable = v55;
        if (v56) {
          v1.enable(2929);
        } else {
          v1.disable(2929);
        }
        v5.depth_enable = v56;
        if (v57) {
          v1.enable(2884);
        } else {
          v1.disable(2884);
        }
        v5.cull_enable = v57;
        if (v58) {
          v1.enable(32823);
        } else {
          v1.disable(32823);
        }
        v5.polygonOffset_enable = v58;
        if (v59) {
          v1.enable(32926);
        } else {
          v1.disable(32926);
        }
        v5.sample_alpha = v59;
        if (v60) {
          v1.enable(32928);
        } else {
          v1.disable(32928);
        }
        v5.sample_enable = v60;
        if (v61) {
          v1.enable(2960);
        } else {
          v1.disable(2960);
        }
        v5.stencil_enable = v61;
        if (v62) {
          v1.enable(3089);
        } else {
          v1.disable(3089);
        }
        v5.scissor_enable = v62;
        v1.blendColor(v63[0], v63[1], v63[2], v63[3]);
        v64[0] = v63[0];
        v64[1] = v63[1];
        v64[2] = v63[2];
        v64[3] = v63[3];
        v1.blendEquationSeparate(v65[0], v65[1]);
        v66[0] = v65[0];
        v66[1] = v65[1];
        v1.blendFuncSeparate(v67[0], v67[1], v67[2], v67[3]);
        v68[0] = v67[0];
        v68[1] = v67[1];
        v68[2] = v67[2];
        v68[3] = v67[3];
        v1.depthFunc(v69);
        v5.depth_func = v69;
        v1.depthRange(v71[0], v71[1]);
        v72[0] = v71[0];
        v72[1] = v71[1];
        v1.depthMask(v73);
        v5.depth_mask = v73;
        v1.colorMask(v75[0], v75[1], v75[2], v75[3]);
        v76[0] = v75[0];
        v76[1] = v75[1];
        v76[2] = v75[2];
        v76[3] = v75[3];
        v1.cullFace(v77);
        v5.cull_face = v77;
        v1.frontFace(v79);
        v5.frontFace = v79;
        v1.lineWidth(v81);
        v5.lineWidth = v81;
        v1.polygonOffset(v83[0], v83[1]);
        v84[0] = v83[0];
        v84[1] = v83[1];
        v1.sampleCoverage(v85[0], v85[1]);
        v86[0] = v85[0];
        v86[1] = v85[1];
        v1.stencilMask(v87);
        v5.stencil_mask = v87;
        v1.stencilFunc(v89[0], v89[1], v89[2]);
        v90[0] = v89[0];
        v90[1] = v89[1];
        v90[2] = v89[2];
        v1.stencilOpSeparate(v91[0], v91[1], v91[2], v91[3]);
        v92[0] = v91[0];
        v92[1] = v91[1];
        v92[2] = v91[2];
        v92[3] = v91[3];
        v1.stencilOpSeparate(v93[0], v93[1], v93[2], v93[3]);
        v94[0] = v93[0];
        v94[1] = v93[1];
        v94[2] = v93[2];
        v94[3] = v93[3];
        v1.scissor(v95[0], v95[1], v95[2], v95[3]);
        v96[0] = v95[0];
        v96[1] = v95[1];
        v96[2] = v95[2];
        v96[3] = v95[3];
        v1.viewport(v97[0], v97[1], v97[2], v97[3]);
        v98[0] = v97[0];
        v98[1] = v97[1];
        v98[2] = v97[2];
        v98[3] = v97[3];
      }
    };
  },
  "cbf700f001fff25b649fba9c37fa0dc6631c1cdee318ad49473d28ec10dcee81": function anonymous2(g0, g48, g115, g125, g127, g133, g135, g196) {
    var v1, v2, v4, v5, v9, v11, v13, v14, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v112, v193;
    v1 = g0.gl;
    v2 = g0.context;
    g0.strings;
    v4 = g0.next;
    v5 = g0.current;
    g0.draw;
    g0.elements;
    g0.buffer;
    v9 = g0.shader;
    g0.attributes;
    v11 = g0.vao;
    g0.uniforms;
    v13 = g0.framebuffer;
    v14 = g0.extensions;
    g0.timer;
    g0.isBufferArgs;
    v17 = v4.blend_color;
    v18 = v5.blend_color;
    v19 = v4.blend_equation;
    v20 = v5.blend_equation;
    v21 = v4.blend_func;
    v22 = v5.blend_func;
    v23 = v4.depth_range;
    v24 = v5.depth_range;
    v25 = v4.colorMask;
    v26 = v5.colorMask;
    v27 = v4.polygonOffset_offset;
    v28 = v5.polygonOffset_offset;
    v29 = v4.sample_coverage;
    v30 = v5.sample_coverage;
    v31 = v4.stencil_func;
    v32 = v5.stencil_func;
    v33 = v4.stencil_opFront;
    v34 = v5.stencil_opFront;
    v35 = v4.stencil_opBack;
    v36 = v5.stencil_opBack;
    v37 = v4.scissor_box;
    v38 = v5.scissor_box;
    v39 = v4.viewport;
    v40 = v5.viewport;
    v112 = {};
    v193 = {};
    return {
      "draw": function(a0) {
        var v50, v51, v52, v53, v54, v101, v102, v103, v104, v105, v106, v107, v108, v109, v110, v111, v113, v114;
        v14.angle_instanced_arrays;
        v50 = a0["framebuffer"];
        v51 = v13.getFramebuffer(v50);
        v52 = v13.next;
        v13.next = v51;
        v53 = v2.framebufferWidth;
        v2.framebufferWidth = v51 ? v51.width : v2.drawingBufferWidth;
        v54 = v2.framebufferHeight;
        v2.framebufferHeight = v51 ? v51.height : v2.drawingBufferHeight;
        if (v51 !== v13.cur) {
          if (v51) {
            v1.bindFramebuffer(36160, v51.framebuffer);
          } else {
            v1.bindFramebuffer(36160, null);
          }
          v13.cur = v51;
        }
        if (v5.dirty) {
          var v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, v100;
          v55 = v4.dither;
          if (v55 !== v5.dither) {
            if (v55) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v55;
          }
          v56 = v4.blend_enable;
          if (v56 !== v5.blend_enable) {
            if (v56) {
              v1.enable(3042);
            } else {
              v1.disable(3042);
            }
            v5.blend_enable = v56;
          }
          v57 = v17[0];
          v58 = v17[1];
          v59 = v17[2];
          v60 = v17[3];
          if (v57 !== v18[0] || v58 !== v18[1] || v59 !== v18[2] || v60 !== v18[3]) {
            v1.blendColor(v57, v58, v59, v60);
            v18[0] = v57;
            v18[1] = v58;
            v18[2] = v59;
            v18[3] = v60;
          }
          v61 = v19[0];
          v62 = v19[1];
          if (v61 !== v20[0] || v62 !== v20[1]) {
            v1.blendEquationSeparate(v61, v62);
            v20[0] = v61;
            v20[1] = v62;
          }
          v63 = v21[0];
          v64 = v21[1];
          v65 = v21[2];
          v66 = v21[3];
          if (v63 !== v22[0] || v64 !== v22[1] || v65 !== v22[2] || v66 !== v22[3]) {
            v1.blendFuncSeparate(v63, v64, v65, v66);
            v22[0] = v63;
            v22[1] = v64;
            v22[2] = v65;
            v22[3] = v66;
          }
          v67 = v4.depth_enable;
          if (v67 !== v5.depth_enable) {
            if (v67) {
              v1.enable(2929);
            } else {
              v1.disable(2929);
            }
            v5.depth_enable = v67;
          }
          v68 = v4.depth_func;
          if (v68 !== v5.depth_func) {
            v1.depthFunc(v68);
            v5.depth_func = v68;
          }
          v69 = v23[0];
          v70 = v23[1];
          if (v69 !== v24[0] || v70 !== v24[1]) {
            v1.depthRange(v69, v70);
            v24[0] = v69;
            v24[1] = v70;
          }
          v71 = v4.depth_mask;
          if (v71 !== v5.depth_mask) {
            v1.depthMask(v71);
            v5.depth_mask = v71;
          }
          v72 = v25[0];
          v73 = v25[1];
          v74 = v25[2];
          v75 = v25[3];
          if (v72 !== v26[0] || v73 !== v26[1] || v74 !== v26[2] || v75 !== v26[3]) {
            v1.colorMask(v72, v73, v74, v75);
            v26[0] = v72;
            v26[1] = v73;
            v26[2] = v74;
            v26[3] = v75;
          }
          v76 = v4.cull_enable;
          if (v76 !== v5.cull_enable) {
            if (v76) {
              v1.enable(2884);
            } else {
              v1.disable(2884);
            }
            v5.cull_enable = v76;
          }
          v77 = v4.cull_face;
          if (v77 !== v5.cull_face) {
            v1.cullFace(v77);
            v5.cull_face = v77;
          }
          v78 = v4.frontFace;
          if (v78 !== v5.frontFace) {
            v1.frontFace(v78);
            v5.frontFace = v78;
          }
          v79 = v4.lineWidth;
          if (v79 !== v5.lineWidth) {
            v1.lineWidth(v79);
            v5.lineWidth = v79;
          }
          v80 = v4.polygonOffset_enable;
          if (v80 !== v5.polygonOffset_enable) {
            if (v80) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v80;
          }
          v81 = v27[0];
          v82 = v27[1];
          if (v81 !== v28[0] || v82 !== v28[1]) {
            v1.polygonOffset(v81, v82);
            v28[0] = v81;
            v28[1] = v82;
          }
          v83 = v4.sample_alpha;
          if (v83 !== v5.sample_alpha) {
            if (v83) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v83;
          }
          v84 = v4.sample_enable;
          if (v84 !== v5.sample_enable) {
            if (v84) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v84;
          }
          v85 = v29[0];
          v86 = v29[1];
          if (v85 !== v30[0] || v86 !== v30[1]) {
            v1.sampleCoverage(v85, v86);
            v30[0] = v85;
            v30[1] = v86;
          }
          v87 = v4.stencil_enable;
          if (v87 !== v5.stencil_enable) {
            if (v87) {
              v1.enable(2960);
            } else {
              v1.disable(2960);
            }
            v5.stencil_enable = v87;
          }
          v88 = v4.stencil_mask;
          if (v88 !== v5.stencil_mask) {
            v1.stencilMask(v88);
            v5.stencil_mask = v88;
          }
          v89 = v31[0];
          v90 = v31[1];
          v91 = v31[2];
          if (v89 !== v32[0] || v90 !== v32[1] || v91 !== v32[2]) {
            v1.stencilFunc(v89, v90, v91);
            v32[0] = v89;
            v32[1] = v90;
            v32[2] = v91;
          }
          v92 = v33[0];
          v93 = v33[1];
          v94 = v33[2];
          v95 = v33[3];
          if (v92 !== v34[0] || v93 !== v34[1] || v94 !== v34[2] || v95 !== v34[3]) {
            v1.stencilOpSeparate(v92, v93, v94, v95);
            v34[0] = v92;
            v34[1] = v93;
            v34[2] = v94;
            v34[3] = v95;
          }
          v96 = v35[0];
          v97 = v35[1];
          v98 = v35[2];
          v99 = v35[3];
          if (v96 !== v36[0] || v97 !== v36[1] || v98 !== v36[2] || v99 !== v36[3]) {
            v1.stencilOpSeparate(v96, v97, v98, v99);
            v36[0] = v96;
            v36[1] = v97;
            v36[2] = v98;
            v36[3] = v99;
          }
          v100 = v4.scissor_enable;
          if (v100 !== v5.scissor_enable) {
            if (v100) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v100;
          }
        }
        v101 = v2.framebufferWidth;
        v102 = v2.framebufferHeight;
        v103 = v2.viewportWidth;
        v2.viewportWidth = v101;
        v104 = v2.viewportHeight;
        v2.viewportHeight = v102;
        v1.viewport(0, 0, v101, v102);
        v40[0] = 0;
        v40[1] = 0;
        v40[2] = v101;
        v40[3] = v102;
        v105 = v2.framebufferWidth;
        v106 = v2.framebufferHeight;
        v1.scissor(0, 0, v105, v106);
        v38[0] = 0;
        v38[1] = 0;
        v38[2] = v105;
        v38[3] = v106;
        v107 = v5.profile;
        if (v107) {
          v108 = performance.now();
          g48.count++;
        }
        v109 = v9.frag;
        v110 = v9.vert;
        v111 = v9.program(v110, v109);
        v1.useProgram(v111.program);
        v11.setVAO(null);
        v113 = v111.id;
        v114 = v112[v113];
        if (v114) {
          v114.call(this, a0);
        } else {
          v114 = v112[v113] = g115(v111);
          v114.call(this, a0);
        }
        v5.dirty = true;
        v11.setVAO(null);
        v13.next = v52;
        v2.framebufferWidth = v53;
        v2.framebufferHeight = v54;
        v2.viewportWidth = v103;
        v2.viewportHeight = v104;
        if (v107) {
          g48.cpuTime += performance.now() - v108;
        }
      },
      "scope": function(a0, a1, a2) {
        var v116, v117, v118, v119, v120, v121, v122, v123, v124, v126, v128, v129, v130, v131, v132, v134, v136, v137, v138, v139, v140;
        v116 = a0["framebuffer"];
        v117 = v13.getFramebuffer(v116);
        v118 = v13.next;
        v13.next = v117;
        v119 = v2.framebufferWidth;
        v2.framebufferWidth = v117 ? v117.width : v2.drawingBufferWidth;
        v120 = v2.framebufferHeight;
        v2.framebufferHeight = v117 ? v117.height : v2.drawingBufferHeight;
        v121 = v2.framebufferWidth;
        v122 = v2.framebufferHeight;
        v123 = v2.viewportWidth;
        v2.viewportWidth = v121;
        v124 = v2.viewportHeight;
        v2.viewportHeight = v122;
        v126 = v39[0];
        v39[0] = g125;
        v128 = v39[1];
        v39[1] = g127;
        v129 = v39[2];
        v39[2] = v121;
        v130 = v39[3];
        v39[3] = v122;
        v131 = v2.framebufferWidth;
        v132 = v2.framebufferHeight;
        v134 = v37[0];
        v37[0] = g133;
        v136 = v37[1];
        v37[1] = g135;
        v137 = v37[2];
        v37[2] = v131;
        v138 = v37[3];
        v37[3] = v132;
        v139 = v5.profile;
        if (v139) {
          v140 = performance.now();
          g48.count++;
        }
        v5.dirty = true;
        a1(v2, a0, a2);
        v13.next = v118;
        v2.framebufferWidth = v119;
        v2.framebufferHeight = v120;
        v2.viewportWidth = v123;
        v2.viewportHeight = v124;
        v39[0] = v126;
        v39[1] = v128;
        v39[2] = v129;
        v39[3] = v130;
        v37[0] = v134;
        v37[1] = v136;
        v37[2] = v137;
        v37[3] = v138;
        if (v139) {
          g48.cpuTime += performance.now() - v140;
        }
        v5.dirty = true;
      },
      "batch": function(a0, a1) {
        var v188, v189, v190, v191, v192, v194, v195;
        v14.angle_instanced_arrays;
        if (v5.dirty) {
          var v142, v143, v144, v145, v146, v147, v148, v149, v150, v151, v152, v153, v154, v155, v156, v157, v158, v159, v160, v161, v162, v163, v164, v165, v166, v167, v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, v184, v185, v186, v187;
          v142 = v4.dither;
          if (v142 !== v5.dither) {
            if (v142) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v142;
          }
          v143 = v4.blend_enable;
          if (v143 !== v5.blend_enable) {
            if (v143) {
              v1.enable(3042);
            } else {
              v1.disable(3042);
            }
            v5.blend_enable = v143;
          }
          v144 = v17[0];
          v145 = v17[1];
          v146 = v17[2];
          v147 = v17[3];
          if (v144 !== v18[0] || v145 !== v18[1] || v146 !== v18[2] || v147 !== v18[3]) {
            v1.blendColor(v144, v145, v146, v147);
            v18[0] = v144;
            v18[1] = v145;
            v18[2] = v146;
            v18[3] = v147;
          }
          v148 = v19[0];
          v149 = v19[1];
          if (v148 !== v20[0] || v149 !== v20[1]) {
            v1.blendEquationSeparate(v148, v149);
            v20[0] = v148;
            v20[1] = v149;
          }
          v150 = v21[0];
          v151 = v21[1];
          v152 = v21[2];
          v153 = v21[3];
          if (v150 !== v22[0] || v151 !== v22[1] || v152 !== v22[2] || v153 !== v22[3]) {
            v1.blendFuncSeparate(v150, v151, v152, v153);
            v22[0] = v150;
            v22[1] = v151;
            v22[2] = v152;
            v22[3] = v153;
          }
          v154 = v4.depth_enable;
          if (v154 !== v5.depth_enable) {
            if (v154) {
              v1.enable(2929);
            } else {
              v1.disable(2929);
            }
            v5.depth_enable = v154;
          }
          v155 = v4.depth_func;
          if (v155 !== v5.depth_func) {
            v1.depthFunc(v155);
            v5.depth_func = v155;
          }
          v156 = v23[0];
          v157 = v23[1];
          if (v156 !== v24[0] || v157 !== v24[1]) {
            v1.depthRange(v156, v157);
            v24[0] = v156;
            v24[1] = v157;
          }
          v158 = v4.depth_mask;
          if (v158 !== v5.depth_mask) {
            v1.depthMask(v158);
            v5.depth_mask = v158;
          }
          v159 = v25[0];
          v160 = v25[1];
          v161 = v25[2];
          v162 = v25[3];
          if (v159 !== v26[0] || v160 !== v26[1] || v161 !== v26[2] || v162 !== v26[3]) {
            v1.colorMask(v159, v160, v161, v162);
            v26[0] = v159;
            v26[1] = v160;
            v26[2] = v161;
            v26[3] = v162;
          }
          v163 = v4.cull_enable;
          if (v163 !== v5.cull_enable) {
            if (v163) {
              v1.enable(2884);
            } else {
              v1.disable(2884);
            }
            v5.cull_enable = v163;
          }
          v164 = v4.cull_face;
          if (v164 !== v5.cull_face) {
            v1.cullFace(v164);
            v5.cull_face = v164;
          }
          v165 = v4.frontFace;
          if (v165 !== v5.frontFace) {
            v1.frontFace(v165);
            v5.frontFace = v165;
          }
          v166 = v4.lineWidth;
          if (v166 !== v5.lineWidth) {
            v1.lineWidth(v166);
            v5.lineWidth = v166;
          }
          v167 = v4.polygonOffset_enable;
          if (v167 !== v5.polygonOffset_enable) {
            if (v167) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v167;
          }
          v168 = v27[0];
          v169 = v27[1];
          if (v168 !== v28[0] || v169 !== v28[1]) {
            v1.polygonOffset(v168, v169);
            v28[0] = v168;
            v28[1] = v169;
          }
          v170 = v4.sample_alpha;
          if (v170 !== v5.sample_alpha) {
            if (v170) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v170;
          }
          v171 = v4.sample_enable;
          if (v171 !== v5.sample_enable) {
            if (v171) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v171;
          }
          v172 = v29[0];
          v173 = v29[1];
          if (v172 !== v30[0] || v173 !== v30[1]) {
            v1.sampleCoverage(v172, v173);
            v30[0] = v172;
            v30[1] = v173;
          }
          v174 = v4.stencil_enable;
          if (v174 !== v5.stencil_enable) {
            if (v174) {
              v1.enable(2960);
            } else {
              v1.disable(2960);
            }
            v5.stencil_enable = v174;
          }
          v175 = v4.stencil_mask;
          if (v175 !== v5.stencil_mask) {
            v1.stencilMask(v175);
            v5.stencil_mask = v175;
          }
          v176 = v31[0];
          v177 = v31[1];
          v178 = v31[2];
          if (v176 !== v32[0] || v177 !== v32[1] || v178 !== v32[2]) {
            v1.stencilFunc(v176, v177, v178);
            v32[0] = v176;
            v32[1] = v177;
            v32[2] = v178;
          }
          v179 = v33[0];
          v180 = v33[1];
          v181 = v33[2];
          v182 = v33[3];
          if (v179 !== v34[0] || v180 !== v34[1] || v181 !== v34[2] || v182 !== v34[3]) {
            v1.stencilOpSeparate(v179, v180, v181, v182);
            v34[0] = v179;
            v34[1] = v180;
            v34[2] = v181;
            v34[3] = v182;
          }
          v183 = v35[0];
          v184 = v35[1];
          v185 = v35[2];
          v186 = v35[3];
          if (v183 !== v36[0] || v184 !== v36[1] || v185 !== v36[2] || v186 !== v36[3]) {
            v1.stencilOpSeparate(v183, v184, v185, v186);
            v36[0] = v183;
            v36[1] = v184;
            v36[2] = v185;
            v36[3] = v186;
          }
          v187 = v4.scissor_enable;
          if (v187 !== v5.scissor_enable) {
            if (v187) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v187;
          }
        }
        v188 = v5.profile;
        if (v188) {
          v189 = performance.now();
          g48.count += a1;
        }
        v190 = v9.frag;
        v191 = v9.vert;
        v192 = v9.program(v191, v190);
        v1.useProgram(v192.program);
        v11.setVAO(null);
        v194 = v192.id;
        v195 = v193[v194];
        if (v195) {
          v195.call(this, a0, a1);
        } else {
          v195 = v193[v194] = g196(v192);
          v195.call(this, a0, a1);
        }
        v5.dirty = true;
        v11.setVAO(null);
        if (v188) {
          g48.cpuTime += performance.now() - v189;
        }
      }
    };
  },
  "8fad2284703471df7c0e0d0a7b96d983e8c53f6d707dd55d5921c1eab71f6623": function anonymous3(g0, g48, g113, g180) {
    var v1, v2, v4, v5, v9, v11, v13, v14, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v110, v177;
    v1 = g0.gl;
    v2 = g0.context;
    g0.strings;
    v4 = g0.next;
    v5 = g0.current;
    g0.draw;
    g0.elements;
    g0.buffer;
    v9 = g0.shader;
    g0.attributes;
    v11 = g0.vao;
    g0.uniforms;
    v13 = g0.framebuffer;
    v14 = g0.extensions;
    g0.timer;
    g0.isBufferArgs;
    v17 = v4.blend_color;
    v18 = v5.blend_color;
    v19 = v4.blend_equation;
    v20 = v5.blend_equation;
    v21 = v4.blend_func;
    v22 = v5.blend_func;
    v23 = v4.depth_range;
    v24 = v5.depth_range;
    v25 = v4.colorMask;
    v26 = v5.colorMask;
    v27 = v4.polygonOffset_offset;
    v28 = v5.polygonOffset_offset;
    v29 = v4.sample_coverage;
    v30 = v5.sample_coverage;
    v31 = v4.stencil_func;
    v32 = v5.stencil_func;
    v33 = v4.stencil_opFront;
    v34 = v5.stencil_opFront;
    v35 = v4.stencil_opBack;
    v36 = v5.stencil_opBack;
    v37 = v4.scissor_box;
    v38 = v5.scissor_box;
    v39 = v4.viewport;
    v40 = v5.viewport;
    v110 = {};
    v177 = {};
    return {
      "draw": function(a0) {
        var v50, v105, v106, v107, v108, v109, v111, v112;
        v14.angle_instanced_arrays;
        v50 = v13.next;
        if (v50 !== v13.cur) {
          if (v50) {
            v1.bindFramebuffer(36160, v50.framebuffer);
          } else {
            v1.bindFramebuffer(36160, null);
          }
          v13.cur = v50;
        }
        if (v5.dirty) {
          var v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, v100, v101, v102, v103, v104;
          v51 = v4.dither;
          if (v51 !== v5.dither) {
            if (v51) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v51;
          }
          v52 = v4.blend_enable;
          if (v52 !== v5.blend_enable) {
            if (v52) {
              v1.enable(3042);
            } else {
              v1.disable(3042);
            }
            v5.blend_enable = v52;
          }
          v53 = v17[0];
          v54 = v17[1];
          v55 = v17[2];
          v56 = v17[3];
          if (v53 !== v18[0] || v54 !== v18[1] || v55 !== v18[2] || v56 !== v18[3]) {
            v1.blendColor(v53, v54, v55, v56);
            v18[0] = v53;
            v18[1] = v54;
            v18[2] = v55;
            v18[3] = v56;
          }
          v57 = v19[0];
          v58 = v19[1];
          if (v57 !== v20[0] || v58 !== v20[1]) {
            v1.blendEquationSeparate(v57, v58);
            v20[0] = v57;
            v20[1] = v58;
          }
          v59 = v21[0];
          v60 = v21[1];
          v61 = v21[2];
          v62 = v21[3];
          if (v59 !== v22[0] || v60 !== v22[1] || v61 !== v22[2] || v62 !== v22[3]) {
            v1.blendFuncSeparate(v59, v60, v61, v62);
            v22[0] = v59;
            v22[1] = v60;
            v22[2] = v61;
            v22[3] = v62;
          }
          v63 = v4.depth_enable;
          if (v63 !== v5.depth_enable) {
            if (v63) {
              v1.enable(2929);
            } else {
              v1.disable(2929);
            }
            v5.depth_enable = v63;
          }
          v64 = v4.depth_func;
          if (v64 !== v5.depth_func) {
            v1.depthFunc(v64);
            v5.depth_func = v64;
          }
          v65 = v23[0];
          v66 = v23[1];
          if (v65 !== v24[0] || v66 !== v24[1]) {
            v1.depthRange(v65, v66);
            v24[0] = v65;
            v24[1] = v66;
          }
          v67 = v4.depth_mask;
          if (v67 !== v5.depth_mask) {
            v1.depthMask(v67);
            v5.depth_mask = v67;
          }
          v68 = v25[0];
          v69 = v25[1];
          v70 = v25[2];
          v71 = v25[3];
          if (v68 !== v26[0] || v69 !== v26[1] || v70 !== v26[2] || v71 !== v26[3]) {
            v1.colorMask(v68, v69, v70, v71);
            v26[0] = v68;
            v26[1] = v69;
            v26[2] = v70;
            v26[3] = v71;
          }
          v72 = v4.cull_enable;
          if (v72 !== v5.cull_enable) {
            if (v72) {
              v1.enable(2884);
            } else {
              v1.disable(2884);
            }
            v5.cull_enable = v72;
          }
          v73 = v4.cull_face;
          if (v73 !== v5.cull_face) {
            v1.cullFace(v73);
            v5.cull_face = v73;
          }
          v74 = v4.frontFace;
          if (v74 !== v5.frontFace) {
            v1.frontFace(v74);
            v5.frontFace = v74;
          }
          v75 = v4.lineWidth;
          if (v75 !== v5.lineWidth) {
            v1.lineWidth(v75);
            v5.lineWidth = v75;
          }
          v76 = v4.polygonOffset_enable;
          if (v76 !== v5.polygonOffset_enable) {
            if (v76) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v76;
          }
          v77 = v27[0];
          v78 = v27[1];
          if (v77 !== v28[0] || v78 !== v28[1]) {
            v1.polygonOffset(v77, v78);
            v28[0] = v77;
            v28[1] = v78;
          }
          v79 = v4.sample_alpha;
          if (v79 !== v5.sample_alpha) {
            if (v79) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v79;
          }
          v80 = v4.sample_enable;
          if (v80 !== v5.sample_enable) {
            if (v80) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v80;
          }
          v81 = v29[0];
          v82 = v29[1];
          if (v81 !== v30[0] || v82 !== v30[1]) {
            v1.sampleCoverage(v81, v82);
            v30[0] = v81;
            v30[1] = v82;
          }
          v83 = v4.stencil_enable;
          if (v83 !== v5.stencil_enable) {
            if (v83) {
              v1.enable(2960);
            } else {
              v1.disable(2960);
            }
            v5.stencil_enable = v83;
          }
          v84 = v4.stencil_mask;
          if (v84 !== v5.stencil_mask) {
            v1.stencilMask(v84);
            v5.stencil_mask = v84;
          }
          v85 = v31[0];
          v86 = v31[1];
          v87 = v31[2];
          if (v85 !== v32[0] || v86 !== v32[1] || v87 !== v32[2]) {
            v1.stencilFunc(v85, v86, v87);
            v32[0] = v85;
            v32[1] = v86;
            v32[2] = v87;
          }
          v88 = v33[0];
          v89 = v33[1];
          v90 = v33[2];
          v91 = v33[3];
          if (v88 !== v34[0] || v89 !== v34[1] || v90 !== v34[2] || v91 !== v34[3]) {
            v1.stencilOpSeparate(v88, v89, v90, v91);
            v34[0] = v88;
            v34[1] = v89;
            v34[2] = v90;
            v34[3] = v91;
          }
          v92 = v35[0];
          v93 = v35[1];
          v94 = v35[2];
          v95 = v35[3];
          if (v92 !== v36[0] || v93 !== v36[1] || v94 !== v36[2] || v95 !== v36[3]) {
            v1.stencilOpSeparate(v92, v93, v94, v95);
            v36[0] = v92;
            v36[1] = v93;
            v36[2] = v94;
            v36[3] = v95;
          }
          v96 = v4.scissor_enable;
          if (v96 !== v5.scissor_enable) {
            if (v96) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v96;
          }
          v97 = v37[0];
          v98 = v37[1];
          v99 = v37[2];
          v100 = v37[3];
          if (v97 !== v38[0] || v98 !== v38[1] || v99 !== v38[2] || v100 !== v38[3]) {
            v1.scissor(v97, v98, v99, v100);
            v38[0] = v97;
            v38[1] = v98;
            v38[2] = v99;
            v38[3] = v100;
          }
          v101 = v39[0];
          v102 = v39[1];
          v103 = v39[2];
          v104 = v39[3];
          if (v101 !== v40[0] || v102 !== v40[1] || v103 !== v40[2] || v104 !== v40[3]) {
            v1.viewport(v101, v102, v103, v104);
            v40[0] = v101;
            v40[1] = v102;
            v40[2] = v103;
            v40[3] = v104;
          }
          v5.dirty = false;
        }
        v105 = v5.profile;
        if (v105) {
          v106 = performance.now();
          g48.count++;
        }
        v107 = v9.frag;
        v108 = v9.vert;
        v109 = v9.program(v108, v107);
        v1.useProgram(v109.program);
        v11.setVAO(null);
        v111 = v109.id;
        v112 = v110[v111];
        if (v112) {
          v112.call(this, a0);
        } else {
          v112 = v110[v111] = g113(v109);
          v112.call(this, a0);
        }
        v11.setVAO(null);
        if (v105) {
          g48.cpuTime += performance.now() - v106;
        }
      },
      "scope": function(a0, a1, a2) {
        var v114, v115;
        v114 = v5.profile;
        if (v114) {
          v115 = performance.now();
          g48.count++;
        }
        a1(v2, a0, a2);
        if (v114) {
          g48.cpuTime += performance.now() - v115;
        }
      },
      "batch": function(a0, a1) {
        var v117, v172, v173, v174, v175, v176, v178, v179;
        v14.angle_instanced_arrays;
        v117 = v13.next;
        if (v117 !== v13.cur) {
          if (v117) {
            v1.bindFramebuffer(36160, v117.framebuffer);
          } else {
            v1.bindFramebuffer(36160, null);
          }
          v13.cur = v117;
        }
        if (v5.dirty) {
          var v118, v119, v120, v121, v122, v123, v124, v125, v126, v127, v128, v129, v130, v131, v132, v133, v134, v135, v136, v137, v138, v139, v140, v141, v142, v143, v144, v145, v146, v147, v148, v149, v150, v151, v152, v153, v154, v155, v156, v157, v158, v159, v160, v161, v162, v163, v164, v165, v166, v167, v168, v169, v170, v171;
          v118 = v4.dither;
          if (v118 !== v5.dither) {
            if (v118) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v118;
          }
          v119 = v4.blend_enable;
          if (v119 !== v5.blend_enable) {
            if (v119) {
              v1.enable(3042);
            } else {
              v1.disable(3042);
            }
            v5.blend_enable = v119;
          }
          v120 = v17[0];
          v121 = v17[1];
          v122 = v17[2];
          v123 = v17[3];
          if (v120 !== v18[0] || v121 !== v18[1] || v122 !== v18[2] || v123 !== v18[3]) {
            v1.blendColor(v120, v121, v122, v123);
            v18[0] = v120;
            v18[1] = v121;
            v18[2] = v122;
            v18[3] = v123;
          }
          v124 = v19[0];
          v125 = v19[1];
          if (v124 !== v20[0] || v125 !== v20[1]) {
            v1.blendEquationSeparate(v124, v125);
            v20[0] = v124;
            v20[1] = v125;
          }
          v126 = v21[0];
          v127 = v21[1];
          v128 = v21[2];
          v129 = v21[3];
          if (v126 !== v22[0] || v127 !== v22[1] || v128 !== v22[2] || v129 !== v22[3]) {
            v1.blendFuncSeparate(v126, v127, v128, v129);
            v22[0] = v126;
            v22[1] = v127;
            v22[2] = v128;
            v22[3] = v129;
          }
          v130 = v4.depth_enable;
          if (v130 !== v5.depth_enable) {
            if (v130) {
              v1.enable(2929);
            } else {
              v1.disable(2929);
            }
            v5.depth_enable = v130;
          }
          v131 = v4.depth_func;
          if (v131 !== v5.depth_func) {
            v1.depthFunc(v131);
            v5.depth_func = v131;
          }
          v132 = v23[0];
          v133 = v23[1];
          if (v132 !== v24[0] || v133 !== v24[1]) {
            v1.depthRange(v132, v133);
            v24[0] = v132;
            v24[1] = v133;
          }
          v134 = v4.depth_mask;
          if (v134 !== v5.depth_mask) {
            v1.depthMask(v134);
            v5.depth_mask = v134;
          }
          v135 = v25[0];
          v136 = v25[1];
          v137 = v25[2];
          v138 = v25[3];
          if (v135 !== v26[0] || v136 !== v26[1] || v137 !== v26[2] || v138 !== v26[3]) {
            v1.colorMask(v135, v136, v137, v138);
            v26[0] = v135;
            v26[1] = v136;
            v26[2] = v137;
            v26[3] = v138;
          }
          v139 = v4.cull_enable;
          if (v139 !== v5.cull_enable) {
            if (v139) {
              v1.enable(2884);
            } else {
              v1.disable(2884);
            }
            v5.cull_enable = v139;
          }
          v140 = v4.cull_face;
          if (v140 !== v5.cull_face) {
            v1.cullFace(v140);
            v5.cull_face = v140;
          }
          v141 = v4.frontFace;
          if (v141 !== v5.frontFace) {
            v1.frontFace(v141);
            v5.frontFace = v141;
          }
          v142 = v4.lineWidth;
          if (v142 !== v5.lineWidth) {
            v1.lineWidth(v142);
            v5.lineWidth = v142;
          }
          v143 = v4.polygonOffset_enable;
          if (v143 !== v5.polygonOffset_enable) {
            if (v143) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v143;
          }
          v144 = v27[0];
          v145 = v27[1];
          if (v144 !== v28[0] || v145 !== v28[1]) {
            v1.polygonOffset(v144, v145);
            v28[0] = v144;
            v28[1] = v145;
          }
          v146 = v4.sample_alpha;
          if (v146 !== v5.sample_alpha) {
            if (v146) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v146;
          }
          v147 = v4.sample_enable;
          if (v147 !== v5.sample_enable) {
            if (v147) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v147;
          }
          v148 = v29[0];
          v149 = v29[1];
          if (v148 !== v30[0] || v149 !== v30[1]) {
            v1.sampleCoverage(v148, v149);
            v30[0] = v148;
            v30[1] = v149;
          }
          v150 = v4.stencil_enable;
          if (v150 !== v5.stencil_enable) {
            if (v150) {
              v1.enable(2960);
            } else {
              v1.disable(2960);
            }
            v5.stencil_enable = v150;
          }
          v151 = v4.stencil_mask;
          if (v151 !== v5.stencil_mask) {
            v1.stencilMask(v151);
            v5.stencil_mask = v151;
          }
          v152 = v31[0];
          v153 = v31[1];
          v154 = v31[2];
          if (v152 !== v32[0] || v153 !== v32[1] || v154 !== v32[2]) {
            v1.stencilFunc(v152, v153, v154);
            v32[0] = v152;
            v32[1] = v153;
            v32[2] = v154;
          }
          v155 = v33[0];
          v156 = v33[1];
          v157 = v33[2];
          v158 = v33[3];
          if (v155 !== v34[0] || v156 !== v34[1] || v157 !== v34[2] || v158 !== v34[3]) {
            v1.stencilOpSeparate(v155, v156, v157, v158);
            v34[0] = v155;
            v34[1] = v156;
            v34[2] = v157;
            v34[3] = v158;
          }
          v159 = v35[0];
          v160 = v35[1];
          v161 = v35[2];
          v162 = v35[3];
          if (v159 !== v36[0] || v160 !== v36[1] || v161 !== v36[2] || v162 !== v36[3]) {
            v1.stencilOpSeparate(v159, v160, v161, v162);
            v36[0] = v159;
            v36[1] = v160;
            v36[2] = v161;
            v36[3] = v162;
          }
          v163 = v4.scissor_enable;
          if (v163 !== v5.scissor_enable) {
            if (v163) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v163;
          }
          v164 = v37[0];
          v165 = v37[1];
          v166 = v37[2];
          v167 = v37[3];
          if (v164 !== v38[0] || v165 !== v38[1] || v166 !== v38[2] || v167 !== v38[3]) {
            v1.scissor(v164, v165, v166, v167);
            v38[0] = v164;
            v38[1] = v165;
            v38[2] = v166;
            v38[3] = v167;
          }
          v168 = v39[0];
          v169 = v39[1];
          v170 = v39[2];
          v171 = v39[3];
          if (v168 !== v40[0] || v169 !== v40[1] || v170 !== v40[2] || v171 !== v40[3]) {
            v1.viewport(v168, v169, v170, v171);
            v40[0] = v168;
            v40[1] = v169;
            v40[2] = v170;
            v40[3] = v171;
          }
          v5.dirty = false;
        }
        v172 = v5.profile;
        if (v172) {
          v173 = performance.now();
          g48.count += a1;
        }
        v174 = v9.frag;
        v175 = v9.vert;
        v176 = v9.program(v175, v174);
        v1.useProgram(v176.program);
        v11.setVAO(null);
        v178 = v176.id;
        v179 = v177[v178];
        if (v179) {
          v179.call(this, a0, a1);
        } else {
          v179 = v177[v178] = g180(v176);
          v179.call(this, a0, a1);
        }
        v11.setVAO(null);
        if (v172) {
          g48.cpuTime += performance.now() - v173;
        }
      }
    };
  },
  "4324c38222f7aa6bd758c48eca3adf24490a6794a7ca19259ad8654aba832843": function anonymous4(g0, g48, g50, g110, g112, g113, g117, g118, g120, g121, g124, g125, g127, g128, g143, g145, g151, g153, g159, g161, g164, g167, g170, g173, g175, g188, g190) {
    var v1, v2, v4, v5, v6, v7, v9, v10, v11, v12, v13, v14, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40;
    v1 = g0.gl;
    v2 = g0.context;
    g0.strings;
    v4 = g0.next;
    v5 = g0.current;
    v6 = g0.draw;
    v7 = g0.elements;
    g0.buffer;
    v9 = g0.shader;
    v10 = g0.attributes;
    v11 = g0.vao;
    v12 = g0.uniforms;
    v13 = g0.framebuffer;
    v14 = g0.extensions;
    g0.timer;
    g0.isBufferArgs;
    v17 = v4.blend_color;
    v18 = v5.blend_color;
    v19 = v4.blend_equation;
    v20 = v5.blend_equation;
    v21 = v4.blend_func;
    v22 = v5.blend_func;
    v23 = v4.depth_range;
    v24 = v5.depth_range;
    v25 = v4.colorMask;
    v26 = v5.colorMask;
    v27 = v4.polygonOffset_offset;
    v28 = v5.polygonOffset_offset;
    v29 = v4.sample_coverage;
    v30 = v5.sample_coverage;
    v31 = v4.stencil_func;
    v32 = v5.stencil_func;
    v33 = v4.stencil_opFront;
    v34 = v5.stencil_opFront;
    v35 = v4.stencil_opBack;
    v36 = v5.stencil_opBack;
    v37 = v4.scissor_box;
    v38 = v5.scissor_box;
    v39 = v4.viewport;
    v40 = v5.viewport;
    return {
      "draw": function(a0) {
        var v51, v52, v53, v54, v55, v102, v103, v104, v105, v106, v107, v108, v109, v111, v114, v115, v116, v119, v122, v123, v126, v129, v130, v131, v132, v133;
        v14.angle_instanced_arrays;
        v51 = g50.call(this, v2, a0, 0);
        v52 = v13.getFramebuffer(v51);
        v53 = v13.next;
        v13.next = v52;
        v54 = v2.framebufferWidth;
        v2.framebufferWidth = v52 ? v52.width : v2.drawingBufferWidth;
        v55 = v2.framebufferHeight;
        v2.framebufferHeight = v52 ? v52.height : v2.drawingBufferHeight;
        if (v52 !== v13.cur) {
          if (v52) {
            v1.bindFramebuffer(36160, v52.framebuffer);
          } else {
            v1.bindFramebuffer(36160, null);
          }
          v13.cur = v52;
        }
        if (v5.dirty) {
          var v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, v100, v101;
          v56 = v4.dither;
          if (v56 !== v5.dither) {
            if (v56) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v56;
          }
          v57 = v4.blend_enable;
          if (v57 !== v5.blend_enable) {
            if (v57) {
              v1.enable(3042);
            } else {
              v1.disable(3042);
            }
            v5.blend_enable = v57;
          }
          v58 = v17[0];
          v59 = v17[1];
          v60 = v17[2];
          v61 = v17[3];
          if (v58 !== v18[0] || v59 !== v18[1] || v60 !== v18[2] || v61 !== v18[3]) {
            v1.blendColor(v58, v59, v60, v61);
            v18[0] = v58;
            v18[1] = v59;
            v18[2] = v60;
            v18[3] = v61;
          }
          v62 = v19[0];
          v63 = v19[1];
          if (v62 !== v20[0] || v63 !== v20[1]) {
            v1.blendEquationSeparate(v62, v63);
            v20[0] = v62;
            v20[1] = v63;
          }
          v64 = v21[0];
          v65 = v21[1];
          v66 = v21[2];
          v67 = v21[3];
          if (v64 !== v22[0] || v65 !== v22[1] || v66 !== v22[2] || v67 !== v22[3]) {
            v1.blendFuncSeparate(v64, v65, v66, v67);
            v22[0] = v64;
            v22[1] = v65;
            v22[2] = v66;
            v22[3] = v67;
          }
          v68 = v4.depth_enable;
          if (v68 !== v5.depth_enable) {
            if (v68) {
              v1.enable(2929);
            } else {
              v1.disable(2929);
            }
            v5.depth_enable = v68;
          }
          v69 = v4.depth_func;
          if (v69 !== v5.depth_func) {
            v1.depthFunc(v69);
            v5.depth_func = v69;
          }
          v70 = v23[0];
          v71 = v23[1];
          if (v70 !== v24[0] || v71 !== v24[1]) {
            v1.depthRange(v70, v71);
            v24[0] = v70;
            v24[1] = v71;
          }
          v72 = v4.depth_mask;
          if (v72 !== v5.depth_mask) {
            v1.depthMask(v72);
            v5.depth_mask = v72;
          }
          v73 = v25[0];
          v74 = v25[1];
          v75 = v25[2];
          v76 = v25[3];
          if (v73 !== v26[0] || v74 !== v26[1] || v75 !== v26[2] || v76 !== v26[3]) {
            v1.colorMask(v73, v74, v75, v76);
            v26[0] = v73;
            v26[1] = v74;
            v26[2] = v75;
            v26[3] = v76;
          }
          v77 = v4.cull_enable;
          if (v77 !== v5.cull_enable) {
            if (v77) {
              v1.enable(2884);
            } else {
              v1.disable(2884);
            }
            v5.cull_enable = v77;
          }
          v78 = v4.cull_face;
          if (v78 !== v5.cull_face) {
            v1.cullFace(v78);
            v5.cull_face = v78;
          }
          v79 = v4.frontFace;
          if (v79 !== v5.frontFace) {
            v1.frontFace(v79);
            v5.frontFace = v79;
          }
          v80 = v4.lineWidth;
          if (v80 !== v5.lineWidth) {
            v1.lineWidth(v80);
            v5.lineWidth = v80;
          }
          v81 = v4.polygonOffset_enable;
          if (v81 !== v5.polygonOffset_enable) {
            if (v81) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v81;
          }
          v82 = v27[0];
          v83 = v27[1];
          if (v82 !== v28[0] || v83 !== v28[1]) {
            v1.polygonOffset(v82, v83);
            v28[0] = v82;
            v28[1] = v83;
          }
          v84 = v4.sample_alpha;
          if (v84 !== v5.sample_alpha) {
            if (v84) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v84;
          }
          v85 = v4.sample_enable;
          if (v85 !== v5.sample_enable) {
            if (v85) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v85;
          }
          v86 = v29[0];
          v87 = v29[1];
          if (v86 !== v30[0] || v87 !== v30[1]) {
            v1.sampleCoverage(v86, v87);
            v30[0] = v86;
            v30[1] = v87;
          }
          v88 = v4.stencil_enable;
          if (v88 !== v5.stencil_enable) {
            if (v88) {
              v1.enable(2960);
            } else {
              v1.disable(2960);
            }
            v5.stencil_enable = v88;
          }
          v89 = v4.stencil_mask;
          if (v89 !== v5.stencil_mask) {
            v1.stencilMask(v89);
            v5.stencil_mask = v89;
          }
          v90 = v31[0];
          v91 = v31[1];
          v92 = v31[2];
          if (v90 !== v32[0] || v91 !== v32[1] || v92 !== v32[2]) {
            v1.stencilFunc(v90, v91, v92);
            v32[0] = v90;
            v32[1] = v91;
            v32[2] = v92;
          }
          v93 = v33[0];
          v94 = v33[1];
          v95 = v33[2];
          v96 = v33[3];
          if (v93 !== v34[0] || v94 !== v34[1] || v95 !== v34[2] || v96 !== v34[3]) {
            v1.stencilOpSeparate(v93, v94, v95, v96);
            v34[0] = v93;
            v34[1] = v94;
            v34[2] = v95;
            v34[3] = v96;
          }
          v97 = v35[0];
          v98 = v35[1];
          v99 = v35[2];
          v100 = v35[3];
          if (v97 !== v36[0] || v98 !== v36[1] || v99 !== v36[2] || v100 !== v36[3]) {
            v1.stencilOpSeparate(v97, v98, v99, v100);
            v36[0] = v97;
            v36[1] = v98;
            v36[2] = v99;
            v36[3] = v100;
          }
          v101 = v4.scissor_enable;
          if (v101 !== v5.scissor_enable) {
            if (v101) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v101;
          }
        }
        v102 = v2.framebufferWidth;
        v103 = v2.framebufferHeight;
        v104 = v2.viewportWidth;
        v2.viewportWidth = v102;
        v105 = v2.viewportHeight;
        v2.viewportHeight = v103;
        v1.viewport(0, 0, v102, v103);
        v40[0] = 0;
        v40[1] = 0;
        v40[2] = v102;
        v40[3] = v103;
        v106 = v2.framebufferWidth;
        v107 = v2.framebufferHeight;
        v1.scissor(0, 0, v106, v107);
        v38[0] = 0;
        v38[1] = 0;
        v38[2] = v106;
        v38[3] = v107;
        v108 = v5.profile;
        if (v108) {
          v109 = performance.now();
          g48.count++;
        }
        v1.useProgram(g110.program);
        v111 = v14.angle_instanced_arrays;
        v11.setVAO(null);
        v114 = g113.location;
        v115 = v10[v114];
        if (!v115.buffer) {
          v1.enableVertexAttribArray(v114);
        }
        v116 = 2;
        if (v115.type !== 5126 || v115.size !== v116 || v115.buffer !== g112 || v115.normalized !== false || v115.offset !== 0 || v115.stride !== 0) {
          v1.bindBuffer(34962, g112.buffer);
          v1.vertexAttribPointer(v114, v116, 5126, false, 0, 0);
          v115.type = 5126;
          v115.size = v116;
          v115.buffer = g112;
          v115.normalized = false;
          v115.offset = 0;
          v115.stride = 0;
        }
        if (v115.divisor !== 0) {
          v111.vertexAttribDivisorANGLE(v114, 0);
          v115.divisor = 0;
        }
        v119 = g118.call(this, v2, a0, 0);
        v1.uniform1f(g117.location, v119);
        v122 = g121.call(this, v2, a0, 0);
        if (v122 && v122._reglType === "framebuffer") {
          v122 = v122.color[0];
        }
        v123 = v122._texture;
        v1.uniform1i(g120.location, v123.bind());
        v126 = g125.call(this, v2, a0, 0);
        v1.uniform1f(g124.location, v126);
        v129 = g128.call(this, v2, a0, 0);
        if (v129 && v129._reglType === "framebuffer") {
          v129 = v129.color[0];
        }
        v130 = v129._texture;
        v1.uniform1i(g127.location, v130.bind());
        v131 = v6.elements;
        if (v131) {
          v1.bindBuffer(34963, v131.buffer.buffer);
        } else if (v11.currentVAO) {
          v131 = v7.getElements(v11.currentVAO.elements);
          if (v131)
            v1.bindBuffer(34963, v131.buffer.buffer);
        }
        v132 = v6.offset;
        v133 = v6.instances;
        if (v133 > 0) {
          if (v131) {
            v111.drawElementsInstancedANGLE(5, 4, v131.type, v132 << (v131.type - 5121 >> 1), v133);
          } else {
            v111.drawArraysInstancedANGLE(5, v132, 4, v133);
          }
        } else if (v133 < 0) {
          if (v131) {
            v1.drawElements(5, 4, v131.type, v132 << (v131.type - 5121 >> 1));
          } else {
            v1.drawArrays(5, v132, 4);
          }
        }
        v5.dirty = true;
        v11.setVAO(null);
        v13.next = v53;
        v2.framebufferWidth = v54;
        v2.framebufferHeight = v55;
        v2.viewportWidth = v104;
        v2.viewportHeight = v105;
        if (v108) {
          g48.cpuTime += performance.now() - v109;
        }
        v123.unbind();
        v130.unbind();
      },
      "scope": function(a0, a1, a2) {
        var v134, v135, v136, v137, v138, v139, v140, v141, v142, v144, v146, v147, v148, v149, v150, v152, v154, v155, v156, v157, v158, v160, v162, v163, v165, v166, v168, v169, v171, v172, v174, v176, v177, v178, v179, v180, v181, v182, v183, v184, v185, v186, v187, v189, v191;
        v134 = g50.call(this, v2, a0, a2);
        v135 = v13.getFramebuffer(v134);
        v136 = v13.next;
        v13.next = v135;
        v137 = v2.framebufferWidth;
        v2.framebufferWidth = v135 ? v135.width : v2.drawingBufferWidth;
        v138 = v2.framebufferHeight;
        v2.framebufferHeight = v135 ? v135.height : v2.drawingBufferHeight;
        v139 = v2.framebufferWidth;
        v140 = v2.framebufferHeight;
        v141 = v2.viewportWidth;
        v2.viewportWidth = v139;
        v142 = v2.viewportHeight;
        v2.viewportHeight = v140;
        v144 = v39[0];
        v39[0] = g143;
        v146 = v39[1];
        v39[1] = g145;
        v147 = v39[2];
        v39[2] = v139;
        v148 = v39[3];
        v39[3] = v140;
        v149 = v2.framebufferWidth;
        v150 = v2.framebufferHeight;
        v152 = v37[0];
        v37[0] = g151;
        v154 = v37[1];
        v37[1] = g153;
        v155 = v37[2];
        v37[2] = v149;
        v156 = v37[3];
        v37[3] = v150;
        v157 = v5.profile;
        if (v157) {
          v158 = performance.now();
          g48.count++;
        }
        v160 = v6.count;
        v6.count = g159;
        v162 = v6.primitive;
        v6.primitive = g161;
        v163 = g121.call(this, v2, a0, a2);
        v165 = v12[g164];
        v12[g164] = v163;
        v166 = g128.call(this, v2, a0, a2);
        v168 = v12[g167];
        v12[g167] = v166;
        v169 = g118.call(this, v2, a0, a2);
        v171 = v12[g170];
        v12[g170] = v169;
        v172 = g125.call(this, v2, a0, a2);
        v174 = v12[g173];
        v12[g173] = v172;
        v176 = g175.state;
        g175.state = 1;
        v177 = g175.x;
        g175.x = 0;
        v178 = g175.y;
        g175.y = 0;
        v179 = g175.z;
        g175.z = 0;
        v180 = g175.w;
        g175.w = 0;
        v181 = g175.buffer;
        g175.buffer = g112;
        v182 = g175.size;
        g175.size = 2;
        v183 = g175.normalized;
        g175.normalized = false;
        v184 = g175.type;
        g175.type = 5126;
        v185 = g175.offset;
        g175.offset = 0;
        v186 = g175.stride;
        g175.stride = 0;
        v187 = g175.divisor;
        g175.divisor = 0;
        v189 = v9.vert;
        v9.vert = g188;
        v191 = v9.frag;
        v9.frag = g190;
        v5.dirty = true;
        a1(v2, a0, a2);
        v13.next = v136;
        v2.framebufferWidth = v137;
        v2.framebufferHeight = v138;
        v2.viewportWidth = v141;
        v2.viewportHeight = v142;
        v39[0] = v144;
        v39[1] = v146;
        v39[2] = v147;
        v39[3] = v148;
        v37[0] = v152;
        v37[1] = v154;
        v37[2] = v155;
        v37[3] = v156;
        if (v157) {
          g48.cpuTime += performance.now() - v158;
        }
        v6.count = v160;
        v6.primitive = v162;
        v12[g164] = v165;
        v12[g167] = v168;
        v12[g170] = v171;
        v12[g173] = v174;
        g175.state = v176;
        g175.x = v177;
        g175.y = v178;
        g175.z = v179;
        g175.w = v180;
        g175.buffer = v181;
        g175.size = v182;
        g175.normalized = v183;
        g175.type = v184;
        g175.offset = v185;
        g175.stride = v186;
        g175.divisor = v187;
        v9.vert = v189;
        v9.frag = v191;
        v5.dirty = true;
      },
      "batch": function(a0, a1) {
        var v193, v194, v195, v196, v197, v244, v245, v246, v247, v248, v249, v250, v251, v252, v253, v254;
        v14.angle_instanced_arrays;
        v193 = g50.call(this, v2, a0, 0);
        v194 = v13.getFramebuffer(v193);
        v195 = v13.next;
        v13.next = v194;
        v196 = v2.framebufferWidth;
        v2.framebufferWidth = v194 ? v194.width : v2.drawingBufferWidth;
        v197 = v2.framebufferHeight;
        v2.framebufferHeight = v194 ? v194.height : v2.drawingBufferHeight;
        if (v194 !== v13.cur) {
          if (v194) {
            v1.bindFramebuffer(36160, v194.framebuffer);
          } else {
            v1.bindFramebuffer(36160, null);
          }
          v13.cur = v194;
        }
        if (v5.dirty) {
          var v198, v199, v200, v201, v202, v203, v204, v205, v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, v220, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, v235, v236, v237, v238, v239, v240, v241, v242, v243;
          v198 = v4.dither;
          if (v198 !== v5.dither) {
            if (v198) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v198;
          }
          v199 = v4.blend_enable;
          if (v199 !== v5.blend_enable) {
            if (v199) {
              v1.enable(3042);
            } else {
              v1.disable(3042);
            }
            v5.blend_enable = v199;
          }
          v200 = v17[0];
          v201 = v17[1];
          v202 = v17[2];
          v203 = v17[3];
          if (v200 !== v18[0] || v201 !== v18[1] || v202 !== v18[2] || v203 !== v18[3]) {
            v1.blendColor(v200, v201, v202, v203);
            v18[0] = v200;
            v18[1] = v201;
            v18[2] = v202;
            v18[3] = v203;
          }
          v204 = v19[0];
          v205 = v19[1];
          if (v204 !== v20[0] || v205 !== v20[1]) {
            v1.blendEquationSeparate(v204, v205);
            v20[0] = v204;
            v20[1] = v205;
          }
          v206 = v21[0];
          v207 = v21[1];
          v208 = v21[2];
          v209 = v21[3];
          if (v206 !== v22[0] || v207 !== v22[1] || v208 !== v22[2] || v209 !== v22[3]) {
            v1.blendFuncSeparate(v206, v207, v208, v209);
            v22[0] = v206;
            v22[1] = v207;
            v22[2] = v208;
            v22[3] = v209;
          }
          v210 = v4.depth_enable;
          if (v210 !== v5.depth_enable) {
            if (v210) {
              v1.enable(2929);
            } else {
              v1.disable(2929);
            }
            v5.depth_enable = v210;
          }
          v211 = v4.depth_func;
          if (v211 !== v5.depth_func) {
            v1.depthFunc(v211);
            v5.depth_func = v211;
          }
          v212 = v23[0];
          v213 = v23[1];
          if (v212 !== v24[0] || v213 !== v24[1]) {
            v1.depthRange(v212, v213);
            v24[0] = v212;
            v24[1] = v213;
          }
          v214 = v4.depth_mask;
          if (v214 !== v5.depth_mask) {
            v1.depthMask(v214);
            v5.depth_mask = v214;
          }
          v215 = v25[0];
          v216 = v25[1];
          v217 = v25[2];
          v218 = v25[3];
          if (v215 !== v26[0] || v216 !== v26[1] || v217 !== v26[2] || v218 !== v26[3]) {
            v1.colorMask(v215, v216, v217, v218);
            v26[0] = v215;
            v26[1] = v216;
            v26[2] = v217;
            v26[3] = v218;
          }
          v219 = v4.cull_enable;
          if (v219 !== v5.cull_enable) {
            if (v219) {
              v1.enable(2884);
            } else {
              v1.disable(2884);
            }
            v5.cull_enable = v219;
          }
          v220 = v4.cull_face;
          if (v220 !== v5.cull_face) {
            v1.cullFace(v220);
            v5.cull_face = v220;
          }
          v221 = v4.frontFace;
          if (v221 !== v5.frontFace) {
            v1.frontFace(v221);
            v5.frontFace = v221;
          }
          v222 = v4.lineWidth;
          if (v222 !== v5.lineWidth) {
            v1.lineWidth(v222);
            v5.lineWidth = v222;
          }
          v223 = v4.polygonOffset_enable;
          if (v223 !== v5.polygonOffset_enable) {
            if (v223) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v223;
          }
          v224 = v27[0];
          v225 = v27[1];
          if (v224 !== v28[0] || v225 !== v28[1]) {
            v1.polygonOffset(v224, v225);
            v28[0] = v224;
            v28[1] = v225;
          }
          v226 = v4.sample_alpha;
          if (v226 !== v5.sample_alpha) {
            if (v226) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v226;
          }
          v227 = v4.sample_enable;
          if (v227 !== v5.sample_enable) {
            if (v227) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v227;
          }
          v228 = v29[0];
          v229 = v29[1];
          if (v228 !== v30[0] || v229 !== v30[1]) {
            v1.sampleCoverage(v228, v229);
            v30[0] = v228;
            v30[1] = v229;
          }
          v230 = v4.stencil_enable;
          if (v230 !== v5.stencil_enable) {
            if (v230) {
              v1.enable(2960);
            } else {
              v1.disable(2960);
            }
            v5.stencil_enable = v230;
          }
          v231 = v4.stencil_mask;
          if (v231 !== v5.stencil_mask) {
            v1.stencilMask(v231);
            v5.stencil_mask = v231;
          }
          v232 = v31[0];
          v233 = v31[1];
          v234 = v31[2];
          if (v232 !== v32[0] || v233 !== v32[1] || v234 !== v32[2]) {
            v1.stencilFunc(v232, v233, v234);
            v32[0] = v232;
            v32[1] = v233;
            v32[2] = v234;
          }
          v235 = v33[0];
          v236 = v33[1];
          v237 = v33[2];
          v238 = v33[3];
          if (v235 !== v34[0] || v236 !== v34[1] || v237 !== v34[2] || v238 !== v34[3]) {
            v1.stencilOpSeparate(v235, v236, v237, v238);
            v34[0] = v235;
            v34[1] = v236;
            v34[2] = v237;
            v34[3] = v238;
          }
          v239 = v35[0];
          v240 = v35[1];
          v241 = v35[2];
          v242 = v35[3];
          if (v239 !== v36[0] || v240 !== v36[1] || v241 !== v36[2] || v242 !== v36[3]) {
            v1.stencilOpSeparate(v239, v240, v241, v242);
            v36[0] = v239;
            v36[1] = v240;
            v36[2] = v241;
            v36[3] = v242;
          }
          v243 = v4.scissor_enable;
          if (v243 !== v5.scissor_enable) {
            if (v243) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v243;
          }
        }
        v244 = v2.framebufferWidth;
        v245 = v2.framebufferHeight;
        v246 = v2.viewportWidth;
        v2.viewportWidth = v244;
        v247 = v2.viewportHeight;
        v2.viewportHeight = v245;
        v1.viewport(0, 0, v244, v245);
        v40[0] = 0;
        v40[1] = 0;
        v40[2] = v244;
        v40[3] = v245;
        v248 = v2.framebufferWidth;
        v249 = v2.framebufferHeight;
        v1.scissor(0, 0, v248, v249);
        v38[0] = 0;
        v38[1] = 0;
        v38[2] = v248;
        v38[3] = v249;
        v250 = v5.profile;
        if (v250) {
          v251 = performance.now();
          g48.count += a1;
        }
        v1.useProgram(g110.program);
        v252 = v14.angle_instanced_arrays;
        var v255, v256, v257, v258, v259, v260, v261, v262, v263, v264, v265, v266;
        v11.setVAO(null);
        v255 = g113.location;
        v256 = v10[v255];
        if (!v256.buffer) {
          v1.enableVertexAttribArray(v255);
        }
        v257 = 2;
        if (v256.type !== 5126 || v256.size !== v257 || v256.buffer !== g112 || v256.normalized !== false || v256.offset !== 0 || v256.stride !== 0) {
          v1.bindBuffer(34962, g112.buffer);
          v1.vertexAttribPointer(v255, v257, 5126, false, 0, 0);
          v256.type = 5126;
          v256.size = v257;
          v256.buffer = g112;
          v256.normalized = false;
          v256.offset = 0;
          v256.stride = 0;
        }
        if (v256.divisor !== 0) {
          v252.vertexAttribDivisorANGLE(v255, 0);
          v256.divisor = 0;
        }
        v258 = g118.call(this, v2, v254, v253);
        v1.uniform1f(g117.location, v258);
        v259 = g121.call(this, v2, v254, v253);
        if (v259 && v259._reglType === "framebuffer") {
          v259 = v259.color[0];
        }
        v260 = v259._texture;
        v1.uniform1i(g120.location, v260.bind());
        v261 = g125.call(this, v2, v254, v253);
        v1.uniform1f(g124.location, v261);
        v262 = g128.call(this, v2, v254, v253);
        if (v262 && v262._reglType === "framebuffer") {
          v262 = v262.color[0];
        }
        v263 = v262._texture;
        v1.uniform1i(g127.location, v263.bind());
        v264 = v6.elements;
        if (v264) {
          v1.bindBuffer(34963, v264.buffer.buffer);
        } else if (v11.currentVAO) {
          v264 = v7.getElements(v11.currentVAO.elements);
          if (v264)
            v1.bindBuffer(34963, v264.buffer.buffer);
        }
        v265 = v6.offset;
        v266 = v6.instances;
        for (v253 = 0; v253 < a1; ++v253) {
          v254 = a0[v253];
          if (v266 > 0) {
            if (v264) {
              v252.drawElementsInstancedANGLE(5, 4, v264.type, v265 << (v264.type - 5121 >> 1), v266);
            } else {
              v252.drawArraysInstancedANGLE(5, v265, 4, v266);
            }
          } else if (v266 < 0) {
            if (v264) {
              v1.drawElements(5, 4, v264.type, v265 << (v264.type - 5121 >> 1));
            } else {
              v1.drawArrays(5, v265, 4);
            }
          }
        }
        v260.unbind();
        v263.unbind();
        v5.dirty = true;
        v11.setVAO(null);
        v13.next = v195;
        v2.framebufferWidth = v196;
        v2.framebufferHeight = v197;
        v2.viewportWidth = v246;
        v2.viewportHeight = v247;
        if (v250) {
          g48.cpuTime += performance.now() - v251;
        }
      }
    };
  },
  "938b883103cfb116eacc46c77dd09ff2ea4342f4f2480e4fa8393a27b4dad686": function anonymous5(g0, g48, g96, g97, g98, g101, g103, g104, g108, g109, g111, g112, g114, g115, g118, g119, g122, g123, g126, g127, g129, g130, g133, g134, g136, g137, g139, g140, g144, g145, g147, g148, g150, g151, g156, g159, g161, g163, g165, g167, g169, g171, g173, g175, g181, g184, g187, g190, g193, g196, g199, g202, g205, g208, g211, g214, g217, g220, g222, g235, g237, g286, g287, g288) {
    var v1, v2, v4, v5, v6, v7, v9, v10, v11, v12, v13, v14, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v153, v316;
    v1 = g0.gl;
    v2 = g0.context;
    g0.strings;
    v4 = g0.next;
    v5 = g0.current;
    v6 = g0.draw;
    v7 = g0.elements;
    g0.buffer;
    v9 = g0.shader;
    v10 = g0.attributes;
    v11 = g0.vao;
    v12 = g0.uniforms;
    v13 = g0.framebuffer;
    v14 = g0.extensions;
    g0.timer;
    g0.isBufferArgs;
    v17 = v4.blend_color;
    v18 = v5.blend_color;
    v19 = v4.blend_equation;
    v20 = v5.blend_equation;
    v21 = v4.blend_func;
    v22 = v5.blend_func;
    v23 = v4.depth_range;
    v24 = v5.depth_range;
    v25 = v4.colorMask;
    v26 = v5.colorMask;
    v27 = v4.polygonOffset_offset;
    v28 = v5.polygonOffset_offset;
    v29 = v4.sample_coverage;
    v30 = v5.sample_coverage;
    v31 = v4.stencil_func;
    v32 = v5.stencil_func;
    v33 = v4.stencil_opFront;
    v34 = v5.stencil_opFront;
    v35 = v4.stencil_opBack;
    v36 = v5.stencil_opBack;
    v37 = v4.scissor_box;
    v38 = v5.scissor_box;
    v39 = v4.viewport;
    v40 = v5.viewport;
    v153 = new Float32Array(9);
    v316 = new Float32Array(9);
    return {
      "draw": function(a0) {
        var v50, v99, v100, v102, v105, v106, v107, v110, v113, v116, v117, v120, v121, v124, v125, v128, v131, v132, v135, v138, v141, v142, v143, v146, v149, v152, v154, v155, v157, v158;
        v14.angle_instanced_arrays;
        v50 = v13.next;
        if (v50 !== v13.cur) {
          if (v50) {
            v1.bindFramebuffer(36160, v50.framebuffer);
          } else {
            v1.bindFramebuffer(36160, null);
          }
          v13.cur = v50;
        }
        if (v5.dirty) {
          var v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90, v91, v92, v93, v94, v95;
          v51 = v4.dither;
          if (v51 !== v5.dither) {
            if (v51) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v51;
          }
          v52 = v17[0];
          v53 = v17[1];
          v54 = v17[2];
          v55 = v17[3];
          if (v52 !== v18[0] || v53 !== v18[1] || v54 !== v18[2] || v55 !== v18[3]) {
            v1.blendColor(v52, v53, v54, v55);
            v18[0] = v52;
            v18[1] = v53;
            v18[2] = v54;
            v18[3] = v55;
          }
          v56 = v4.depth_func;
          if (v56 !== v5.depth_func) {
            v1.depthFunc(v56);
            v5.depth_func = v56;
          }
          v57 = v23[0];
          v58 = v23[1];
          if (v57 !== v24[0] || v58 !== v24[1]) {
            v1.depthRange(v57, v58);
            v24[0] = v57;
            v24[1] = v58;
          }
          v59 = v25[0];
          v60 = v25[1];
          v61 = v25[2];
          v62 = v25[3];
          if (v59 !== v26[0] || v60 !== v26[1] || v61 !== v26[2] || v62 !== v26[3]) {
            v1.colorMask(v59, v60, v61, v62);
            v26[0] = v59;
            v26[1] = v60;
            v26[2] = v61;
            v26[3] = v62;
          }
          v63 = v4.cull_enable;
          if (v63 !== v5.cull_enable) {
            if (v63) {
              v1.enable(2884);
            } else {
              v1.disable(2884);
            }
            v5.cull_enable = v63;
          }
          v64 = v4.cull_face;
          if (v64 !== v5.cull_face) {
            v1.cullFace(v64);
            v5.cull_face = v64;
          }
          v65 = v4.frontFace;
          if (v65 !== v5.frontFace) {
            v1.frontFace(v65);
            v5.frontFace = v65;
          }
          v66 = v4.lineWidth;
          if (v66 !== v5.lineWidth) {
            v1.lineWidth(v66);
            v5.lineWidth = v66;
          }
          v67 = v4.polygonOffset_enable;
          if (v67 !== v5.polygonOffset_enable) {
            if (v67) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v67;
          }
          v68 = v27[0];
          v69 = v27[1];
          if (v68 !== v28[0] || v69 !== v28[1]) {
            v1.polygonOffset(v68, v69);
            v28[0] = v68;
            v28[1] = v69;
          }
          v70 = v4.sample_alpha;
          if (v70 !== v5.sample_alpha) {
            if (v70) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v70;
          }
          v71 = v4.sample_enable;
          if (v71 !== v5.sample_enable) {
            if (v71) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v71;
          }
          v72 = v29[0];
          v73 = v29[1];
          if (v72 !== v30[0] || v73 !== v30[1]) {
            v1.sampleCoverage(v72, v73);
            v30[0] = v72;
            v30[1] = v73;
          }
          v74 = v4.stencil_enable;
          if (v74 !== v5.stencil_enable) {
            if (v74) {
              v1.enable(2960);
            } else {
              v1.disable(2960);
            }
            v5.stencil_enable = v74;
          }
          v75 = v4.stencil_mask;
          if (v75 !== v5.stencil_mask) {
            v1.stencilMask(v75);
            v5.stencil_mask = v75;
          }
          v76 = v31[0];
          v77 = v31[1];
          v78 = v31[2];
          if (v76 !== v32[0] || v77 !== v32[1] || v78 !== v32[2]) {
            v1.stencilFunc(v76, v77, v78);
            v32[0] = v76;
            v32[1] = v77;
            v32[2] = v78;
          }
          v79 = v33[0];
          v80 = v33[1];
          v81 = v33[2];
          v82 = v33[3];
          if (v79 !== v34[0] || v80 !== v34[1] || v81 !== v34[2] || v82 !== v34[3]) {
            v1.stencilOpSeparate(v79, v80, v81, v82);
            v34[0] = v79;
            v34[1] = v80;
            v34[2] = v81;
            v34[3] = v82;
          }
          v83 = v35[0];
          v84 = v35[1];
          v85 = v35[2];
          v86 = v35[3];
          if (v83 !== v36[0] || v84 !== v36[1] || v85 !== v36[2] || v86 !== v36[3]) {
            v1.stencilOpSeparate(v83, v84, v85, v86);
            v36[0] = v83;
            v36[1] = v84;
            v36[2] = v85;
            v36[3] = v86;
          }
          v87 = v4.scissor_enable;
          if (v87 !== v5.scissor_enable) {
            if (v87) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v87;
          }
          v88 = v37[0];
          v89 = v37[1];
          v90 = v37[2];
          v91 = v37[3];
          if (v88 !== v38[0] || v89 !== v38[1] || v90 !== v38[2] || v91 !== v38[3]) {
            v1.scissor(v88, v89, v90, v91);
            v38[0] = v88;
            v38[1] = v89;
            v38[2] = v90;
            v38[3] = v91;
          }
          v92 = v39[0];
          v93 = v39[1];
          v94 = v39[2];
          v95 = v39[3];
          if (v92 !== v40[0] || v93 !== v40[1] || v94 !== v40[2] || v95 !== v40[3]) {
            v1.viewport(v92, v93, v94, v95);
            v40[0] = v92;
            v40[1] = v93;
            v40[2] = v94;
            v40[3] = v95;
          }
        }
        if (g96) {
          v1.enable(3042);
        } else {
          v1.disable(3042);
        }
        v5.blend_enable = g96;
        v1.blendEquationSeparate(32774, 32774);
        v20[0] = 32774;
        v20[1] = 32774;
        v1.blendFuncSeparate(770, 771, 1, 771);
        v22[0] = 770;
        v22[1] = 771;
        v22[2] = 1;
        v22[3] = 771;
        if (g97) {
          v1.enable(2929);
        } else {
          v1.disable(2929);
        }
        v5.depth_enable = g97;
        v1.depthMask(g98);
        v5.depth_mask = g98;
        v99 = v5.profile;
        if (v99) {
          v100 = performance.now();
          g48.count++;
        }
        v1.useProgram(g101.program);
        v102 = v14.angle_instanced_arrays;
        v11.setVAO(null);
        v105 = g104.location;
        v106 = v10[v105];
        if (!v106.buffer) {
          v1.enableVertexAttribArray(v105);
        }
        v107 = 2;
        if (v106.type !== 5126 || v106.size !== v107 || v106.buffer !== g103 || v106.normalized !== false || v106.offset !== 0 || v106.stride !== 0) {
          v1.bindBuffer(34962, g103.buffer);
          v1.vertexAttribPointer(v105, v107, 5126, false, 0, 0);
          v106.type = 5126;
          v106.size = v107;
          v106.buffer = g103;
          v106.normalized = false;
          v106.offset = 0;
          v106.stride = 0;
        }
        if (v106.divisor !== 0) {
          v102.vertexAttribDivisorANGLE(v105, 0);
          v106.divisor = 0;
        }
        v110 = g109.call(this, v2, a0, 0);
        v1.uniform1f(g108.location, v110);
        v113 = g112.call(this, v2, a0, 0);
        v1.uniform1f(g111.location, v113);
        v116 = g115.call(this, v2, a0, 0);
        if (v116 && v116._reglType === "framebuffer") {
          v116 = v116.color[0];
        }
        v117 = v116._texture;
        v1.uniform1i(g114.location, v117.bind());
        v120 = g119.call(this, v2, a0, 0);
        if (v120 && v120._reglType === "framebuffer") {
          v120 = v120.color[0];
        }
        v121 = v120._texture;
        v1.uniform1i(g118.location, v121.bind());
        v124 = g123.call(this, v2, a0, 0);
        if (v124 && v124._reglType === "framebuffer") {
          v124 = v124.color[0];
        }
        v125 = v124._texture;
        v1.uniform1i(g122.location, v125.bind());
        v128 = g127.call(this, v2, a0, 0);
        v1.uniform1f(g126.location, v128);
        v131 = g130.call(this, v2, a0, 0);
        if (v131 && v131._reglType === "framebuffer") {
          v131 = v131.color[0];
        }
        v132 = v131._texture;
        v1.uniform1i(g129.location, v132.bind());
        v135 = g134.call(this, v2, a0, 0);
        v1.uniform1f(g133.location, v135);
        v138 = g137.call(this, v2, a0, 0);
        v1.uniform1i(g136.location, v138);
        v141 = g140.call(this, v2, a0, 0);
        v142 = v141[0];
        v143 = v141[1];
        v1.uniform2f(g139.location, v142, v143);
        v146 = g145.call(this, v2, a0, 0);
        v1.uniform1f(g144.location, v146);
        v149 = g148.call(this, v2, a0, 0);
        v1.uniform1f(g147.location, v149);
        v152 = g151.call(this, v2, a0, 0);
        v1.uniformMatrix3fv(g150.location, false, Array.isArray(v152) || v152 instanceof Float32Array ? v152 : (v153[0] = v152[0], v153[1] = v152[1], v153[2] = v152[2], v153[3] = v152[3], v153[4] = v152[4], v153[5] = v152[5], v153[6] = v152[6], v153[7] = v152[7], v153[8] = v152[8], v153));
        v154 = v6.elements;
        if (v154) {
          v1.bindBuffer(34963, v154.buffer.buffer);
        } else if (v11.currentVAO) {
          v154 = v7.getElements(v11.currentVAO.elements);
          if (v154)
            v1.bindBuffer(34963, v154.buffer.buffer);
        }
        v155 = v6.offset;
        v157 = g156.call(this, v2, a0, 0);
        if (v157) {
          v158 = v6.instances;
          if (v158 > 0) {
            if (v154) {
              v102.drawElementsInstancedANGLE(0, v157, v154.type, v155 << (v154.type - 5121 >> 1), v158);
            } else {
              v102.drawArraysInstancedANGLE(0, v155, v157, v158);
            }
          } else if (v158 < 0) {
            if (v154) {
              v1.drawElements(0, v157, v154.type, v155 << (v154.type - 5121 >> 1));
            } else {
              v1.drawArrays(0, v155, v157);
            }
          }
          v5.dirty = true;
          v11.setVAO(null);
          if (v99) {
            g48.cpuTime += performance.now() - v100;
          }
          v117.unbind();
          v121.unbind();
          v125.unbind();
          v132.unbind();
        }
      },
      "scope": function(a0, a1, a2) {
        var v160, v162, v164, v166, v168, v170, v172, v174, v176, v177, v178, v179, v180, v182, v183, v185, v186, v188, v189, v191, v192, v194, v195, v197, v198, v200, v201, v203, v204, v206, v207, v209, v210, v212, v213, v215, v216, v218, v219, v221, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, v236, v238;
        v160 = v4.blend_enable;
        v4.blend_enable = g159;
        v162 = v19[0];
        v19[0] = g161;
        v164 = v19[1];
        v19[1] = g163;
        v166 = v21[0];
        v21[0] = g165;
        v168 = v21[1];
        v21[1] = g167;
        v170 = v21[2];
        v21[2] = g169;
        v172 = v21[3];
        v21[3] = g171;
        v174 = v4.depth_enable;
        v4.depth_enable = g173;
        v176 = v4.depth_mask;
        v4.depth_mask = g175;
        v177 = v5.profile;
        if (v177) {
          v178 = performance.now();
          g48.count++;
        }
        v179 = g156.call(this, v2, a0, a2);
        v180 = v6.count;
        v6.count = v179;
        v182 = v6.primitive;
        v6.primitive = g181;
        v183 = g130.call(this, v2, a0, a2);
        v185 = v12[g184];
        v12[g184] = v183;
        v186 = g115.call(this, v2, a0, a2);
        v188 = v12[g187];
        v12[g187] = v186;
        v189 = g119.call(this, v2, a0, a2);
        v191 = v12[g190];
        v12[g190] = v189;
        v192 = g123.call(this, v2, a0, a2);
        v194 = v12[g193];
        v12[g193] = v192;
        v195 = g134.call(this, v2, a0, a2);
        v197 = v12[g196];
        v12[g196] = v195;
        v198 = g145.call(this, v2, a0, a2);
        v200 = v12[g199];
        v12[g199] = v198;
        v201 = g127.call(this, v2, a0, a2);
        v203 = v12[g202];
        v12[g202] = v201;
        v204 = g151.call(this, v2, a0, a2);
        v206 = v12[g205];
        v12[g205] = v204;
        v207 = g148.call(this, v2, a0, a2);
        v209 = v12[g208];
        v12[g208] = v207;
        v210 = g140.call(this, v2, a0, a2);
        v212 = v12[g211];
        v12[g211] = v210;
        v213 = g109.call(this, v2, a0, a2);
        v215 = v12[g214];
        v12[g214] = v213;
        v216 = g137.call(this, v2, a0, a2);
        v218 = v12[g217];
        v12[g217] = v216;
        v219 = g112.call(this, v2, a0, a2);
        v221 = v12[g220];
        v12[g220] = v219;
        v223 = g222.state;
        g222.state = 1;
        v224 = g222.x;
        g222.x = 0;
        v225 = g222.y;
        g222.y = 0;
        v226 = g222.z;
        g222.z = 0;
        v227 = g222.w;
        g222.w = 0;
        v228 = g222.buffer;
        g222.buffer = g103;
        v229 = g222.size;
        g222.size = 2;
        v230 = g222.normalized;
        g222.normalized = false;
        v231 = g222.type;
        g222.type = 5126;
        v232 = g222.offset;
        g222.offset = 0;
        v233 = g222.stride;
        g222.stride = 0;
        v234 = g222.divisor;
        g222.divisor = 0;
        v236 = v9.vert;
        v9.vert = g235;
        v238 = v9.frag;
        v9.frag = g237;
        v5.dirty = true;
        a1(v2, a0, a2);
        v4.blend_enable = v160;
        v19[0] = v162;
        v19[1] = v164;
        v21[0] = v166;
        v21[1] = v168;
        v21[2] = v170;
        v21[3] = v172;
        v4.depth_enable = v174;
        v4.depth_mask = v176;
        if (v177) {
          g48.cpuTime += performance.now() - v178;
        }
        v6.count = v180;
        v6.primitive = v182;
        v12[g184] = v185;
        v12[g187] = v188;
        v12[g190] = v191;
        v12[g193] = v194;
        v12[g196] = v197;
        v12[g199] = v200;
        v12[g202] = v203;
        v12[g205] = v206;
        v12[g208] = v209;
        v12[g211] = v212;
        v12[g214] = v215;
        v12[g217] = v218;
        v12[g220] = v221;
        g222.state = v223;
        g222.x = v224;
        g222.y = v225;
        g222.z = v226;
        g222.w = v227;
        g222.buffer = v228;
        g222.size = v229;
        g222.normalized = v230;
        g222.type = v231;
        g222.offset = v232;
        g222.stride = v233;
        g222.divisor = v234;
        v9.vert = v236;
        v9.frag = v238;
        v5.dirty = true;
      },
      "batch": function(a0, a1) {
        var v240, v289, v290, v291, v292, v293;
        v14.angle_instanced_arrays;
        v240 = v13.next;
        if (v240 !== v13.cur) {
          if (v240) {
            v1.bindFramebuffer(36160, v240.framebuffer);
          } else {
            v1.bindFramebuffer(36160, null);
          }
          v13.cur = v240;
        }
        if (v5.dirty) {
          var v241, v242, v243, v244, v245, v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, v259, v260, v261, v262, v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, v280, v281, v282, v283, v284, v285;
          v241 = v4.dither;
          if (v241 !== v5.dither) {
            if (v241) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v241;
          }
          v242 = v17[0];
          v243 = v17[1];
          v244 = v17[2];
          v245 = v17[3];
          if (v242 !== v18[0] || v243 !== v18[1] || v244 !== v18[2] || v245 !== v18[3]) {
            v1.blendColor(v242, v243, v244, v245);
            v18[0] = v242;
            v18[1] = v243;
            v18[2] = v244;
            v18[3] = v245;
          }
          v246 = v4.depth_func;
          if (v246 !== v5.depth_func) {
            v1.depthFunc(v246);
            v5.depth_func = v246;
          }
          v247 = v23[0];
          v248 = v23[1];
          if (v247 !== v24[0] || v248 !== v24[1]) {
            v1.depthRange(v247, v248);
            v24[0] = v247;
            v24[1] = v248;
          }
          v249 = v25[0];
          v250 = v25[1];
          v251 = v25[2];
          v252 = v25[3];
          if (v249 !== v26[0] || v250 !== v26[1] || v251 !== v26[2] || v252 !== v26[3]) {
            v1.colorMask(v249, v250, v251, v252);
            v26[0] = v249;
            v26[1] = v250;
            v26[2] = v251;
            v26[3] = v252;
          }
          v253 = v4.cull_enable;
          if (v253 !== v5.cull_enable) {
            if (v253) {
              v1.enable(2884);
            } else {
              v1.disable(2884);
            }
            v5.cull_enable = v253;
          }
          v254 = v4.cull_face;
          if (v254 !== v5.cull_face) {
            v1.cullFace(v254);
            v5.cull_face = v254;
          }
          v255 = v4.frontFace;
          if (v255 !== v5.frontFace) {
            v1.frontFace(v255);
            v5.frontFace = v255;
          }
          v256 = v4.lineWidth;
          if (v256 !== v5.lineWidth) {
            v1.lineWidth(v256);
            v5.lineWidth = v256;
          }
          v257 = v4.polygonOffset_enable;
          if (v257 !== v5.polygonOffset_enable) {
            if (v257) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v257;
          }
          v258 = v27[0];
          v259 = v27[1];
          if (v258 !== v28[0] || v259 !== v28[1]) {
            v1.polygonOffset(v258, v259);
            v28[0] = v258;
            v28[1] = v259;
          }
          v260 = v4.sample_alpha;
          if (v260 !== v5.sample_alpha) {
            if (v260) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v260;
          }
          v261 = v4.sample_enable;
          if (v261 !== v5.sample_enable) {
            if (v261) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v261;
          }
          v262 = v29[0];
          v263 = v29[1];
          if (v262 !== v30[0] || v263 !== v30[1]) {
            v1.sampleCoverage(v262, v263);
            v30[0] = v262;
            v30[1] = v263;
          }
          v264 = v4.stencil_enable;
          if (v264 !== v5.stencil_enable) {
            if (v264) {
              v1.enable(2960);
            } else {
              v1.disable(2960);
            }
            v5.stencil_enable = v264;
          }
          v265 = v4.stencil_mask;
          if (v265 !== v5.stencil_mask) {
            v1.stencilMask(v265);
            v5.stencil_mask = v265;
          }
          v266 = v31[0];
          v267 = v31[1];
          v268 = v31[2];
          if (v266 !== v32[0] || v267 !== v32[1] || v268 !== v32[2]) {
            v1.stencilFunc(v266, v267, v268);
            v32[0] = v266;
            v32[1] = v267;
            v32[2] = v268;
          }
          v269 = v33[0];
          v270 = v33[1];
          v271 = v33[2];
          v272 = v33[3];
          if (v269 !== v34[0] || v270 !== v34[1] || v271 !== v34[2] || v272 !== v34[3]) {
            v1.stencilOpSeparate(v269, v270, v271, v272);
            v34[0] = v269;
            v34[1] = v270;
            v34[2] = v271;
            v34[3] = v272;
          }
          v273 = v35[0];
          v274 = v35[1];
          v275 = v35[2];
          v276 = v35[3];
          if (v273 !== v36[0] || v274 !== v36[1] || v275 !== v36[2] || v276 !== v36[3]) {
            v1.stencilOpSeparate(v273, v274, v275, v276);
            v36[0] = v273;
            v36[1] = v274;
            v36[2] = v275;
            v36[3] = v276;
          }
          v277 = v4.scissor_enable;
          if (v277 !== v5.scissor_enable) {
            if (v277) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v277;
          }
          v278 = v37[0];
          v279 = v37[1];
          v280 = v37[2];
          v281 = v37[3];
          if (v278 !== v38[0] || v279 !== v38[1] || v280 !== v38[2] || v281 !== v38[3]) {
            v1.scissor(v278, v279, v280, v281);
            v38[0] = v278;
            v38[1] = v279;
            v38[2] = v280;
            v38[3] = v281;
          }
          v282 = v39[0];
          v283 = v39[1];
          v284 = v39[2];
          v285 = v39[3];
          if (v282 !== v40[0] || v283 !== v40[1] || v284 !== v40[2] || v285 !== v40[3]) {
            v1.viewport(v282, v283, v284, v285);
            v40[0] = v282;
            v40[1] = v283;
            v40[2] = v284;
            v40[3] = v285;
          }
        }
        if (g286) {
          v1.enable(3042);
        } else {
          v1.disable(3042);
        }
        v5.blend_enable = g286;
        v1.blendEquationSeparate(32774, 32774);
        v20[0] = 32774;
        v20[1] = 32774;
        v1.blendFuncSeparate(770, 771, 1, 771);
        v22[0] = 770;
        v22[1] = 771;
        v22[2] = 1;
        v22[3] = 771;
        if (g287) {
          v1.enable(2929);
        } else {
          v1.disable(2929);
        }
        v5.depth_enable = g287;
        v1.depthMask(g288);
        v5.depth_mask = g288;
        v289 = v5.profile;
        if (v289) {
          v290 = performance.now();
          g48.count += a1;
        }
        v1.useProgram(g101.program);
        v291 = v14.angle_instanced_arrays;
        var v294, v295, v296, v297, v298, v299, v300, v301, v302, v303, v304, v305, v306, v307, v308, v309, v310, v311, v312, v313, v314, v315, v317, v318, v319, v320;
        v11.setVAO(null);
        v294 = g104.location;
        v295 = v10[v294];
        if (!v295.buffer) {
          v1.enableVertexAttribArray(v294);
        }
        v296 = 2;
        if (v295.type !== 5126 || v295.size !== v296 || v295.buffer !== g103 || v295.normalized !== false || v295.offset !== 0 || v295.stride !== 0) {
          v1.bindBuffer(34962, g103.buffer);
          v1.vertexAttribPointer(v294, v296, 5126, false, 0, 0);
          v295.type = 5126;
          v295.size = v296;
          v295.buffer = g103;
          v295.normalized = false;
          v295.offset = 0;
          v295.stride = 0;
        }
        if (v295.divisor !== 0) {
          v291.vertexAttribDivisorANGLE(v294, 0);
          v295.divisor = 0;
        }
        v297 = g109.call(this, v2, v293, v292);
        v1.uniform1f(g108.location, v297);
        v298 = g112.call(this, v2, v293, v292);
        v1.uniform1f(g111.location, v298);
        v299 = g115.call(this, v2, v293, v292);
        if (v299 && v299._reglType === "framebuffer") {
          v299 = v299.color[0];
        }
        v300 = v299._texture;
        v1.uniform1i(g114.location, v300.bind());
        v301 = g119.call(this, v2, v293, v292);
        if (v301 && v301._reglType === "framebuffer") {
          v301 = v301.color[0];
        }
        v302 = v301._texture;
        v1.uniform1i(g118.location, v302.bind());
        v303 = g123.call(this, v2, v293, v292);
        if (v303 && v303._reglType === "framebuffer") {
          v303 = v303.color[0];
        }
        v304 = v303._texture;
        v1.uniform1i(g122.location, v304.bind());
        v305 = g127.call(this, v2, v293, v292);
        v1.uniform1f(g126.location, v305);
        v306 = g130.call(this, v2, v293, v292);
        if (v306 && v306._reglType === "framebuffer") {
          v306 = v306.color[0];
        }
        v307 = v306._texture;
        v1.uniform1i(g129.location, v307.bind());
        v308 = g134.call(this, v2, v293, v292);
        v1.uniform1f(g133.location, v308);
        v309 = g137.call(this, v2, v293, v292);
        v1.uniform1i(g136.location, v309);
        v310 = g140.call(this, v2, v293, v292);
        v311 = v310[0];
        v312 = v310[1];
        v1.uniform2f(g139.location, v311, v312);
        v313 = g145.call(this, v2, v293, v292);
        v1.uniform1f(g144.location, v313);
        v314 = g148.call(this, v2, v293, v292);
        v1.uniform1f(g147.location, v314);
        v315 = g151.call(this, v2, v293, v292);
        v1.uniformMatrix3fv(g150.location, false, Array.isArray(v315) || v315 instanceof Float32Array ? v315 : (v316[0] = v315[0], v316[1] = v315[1], v316[2] = v315[2], v316[3] = v315[3], v316[4] = v315[4], v316[5] = v315[5], v316[6] = v315[6], v316[7] = v315[7], v316[8] = v315[8], v316));
        v317 = v6.elements;
        if (v317) {
          v1.bindBuffer(34963, v317.buffer.buffer);
        } else if (v11.currentVAO) {
          v317 = v7.getElements(v11.currentVAO.elements);
          if (v317)
            v1.bindBuffer(34963, v317.buffer.buffer);
        }
        v318 = v6.offset;
        v319 = g156.call(this, v2, v293, v292);
        v320 = v6.instances;
        for (v292 = 0; v292 < a1; ++v292) {
          v293 = a0[v292];
          if (v319) {
            if (v320 > 0) {
              if (v317) {
                v291.drawElementsInstancedANGLE(0, v319, v317.type, v318 << (v317.type - 5121 >> 1), v320);
              } else {
                v291.drawArraysInstancedANGLE(0, v318, v319, v320);
              }
            } else if (v320 < 0) {
              if (v317) {
                v1.drawElements(0, v319, v317.type, v318 << (v317.type - 5121 >> 1));
              } else {
                v1.drawArrays(0, v318, v319);
              }
            }
          }
        }
        v300.unbind();
        v302.unbind();
        v304.unbind();
        v307.unbind();
        v5.dirty = true;
        v11.setVAO(null);
        if (v289) {
          g48.cpuTime += performance.now() - v290;
        }
      }
    };
  },
  "d4e6917d633ef08caab467b393ac4c3f800c4c7b3ab0efd4f7f5b82c281cafb1": function anonymous6(g0, g48, g50, g110, g112, g113, g117, g118, g120, g121, g124, g125, g128, g129, g131, g132, g134, g135, g139, g140, g144, g145, g149, g150, g152, g153, g155, g156, g171, g173, g179, g181, g187, g189, g192, g195, g198, g201, g204, g207, g210, g213, g216, g219, g222, g224, g237, g239) {
    var v1, v2, v4, v5, v6, v7, v9, v10, v11, v12, v13, v14, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v158, v326;
    v1 = g0.gl;
    v2 = g0.context;
    g0.strings;
    v4 = g0.next;
    v5 = g0.current;
    v6 = g0.draw;
    v7 = g0.elements;
    g0.buffer;
    v9 = g0.shader;
    v10 = g0.attributes;
    v11 = g0.vao;
    v12 = g0.uniforms;
    v13 = g0.framebuffer;
    v14 = g0.extensions;
    g0.timer;
    g0.isBufferArgs;
    v17 = v4.blend_color;
    v18 = v5.blend_color;
    v19 = v4.blend_equation;
    v20 = v5.blend_equation;
    v21 = v4.blend_func;
    v22 = v5.blend_func;
    v23 = v4.depth_range;
    v24 = v5.depth_range;
    v25 = v4.colorMask;
    v26 = v5.colorMask;
    v27 = v4.polygonOffset_offset;
    v28 = v5.polygonOffset_offset;
    v29 = v4.sample_coverage;
    v30 = v5.sample_coverage;
    v31 = v4.stencil_func;
    v32 = v5.stencil_func;
    v33 = v4.stencil_opFront;
    v34 = v5.stencil_opFront;
    v35 = v4.stencil_opBack;
    v36 = v5.stencil_opBack;
    v37 = v4.scissor_box;
    v38 = v5.scissor_box;
    v39 = v4.viewport;
    v40 = v5.viewport;
    v158 = new Float32Array(9);
    v326 = new Float32Array(9);
    return {
      "draw": function(a0) {
        var v51, v52, v53, v54, v55, v102, v103, v104, v105, v106, v107, v108, v109, v111, v114, v115, v116, v119, v122, v123, v126, v127, v130, v133, v136, v137, v138, v141, v142, v143, v146, v147, v148, v151, v154, v157, v159, v160, v161;
        v14.angle_instanced_arrays;
        v51 = g50.call(this, v2, a0, 0);
        v52 = v13.getFramebuffer(v51);
        v53 = v13.next;
        v13.next = v52;
        v54 = v2.framebufferWidth;
        v2.framebufferWidth = v52 ? v52.width : v2.drawingBufferWidth;
        v55 = v2.framebufferHeight;
        v2.framebufferHeight = v52 ? v52.height : v2.drawingBufferHeight;
        if (v52 !== v13.cur) {
          if (v52) {
            v1.bindFramebuffer(36160, v52.framebuffer);
          } else {
            v1.bindFramebuffer(36160, null);
          }
          v13.cur = v52;
        }
        if (v5.dirty) {
          var v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, v100, v101;
          v56 = v4.dither;
          if (v56 !== v5.dither) {
            if (v56) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v56;
          }
          v57 = v4.blend_enable;
          if (v57 !== v5.blend_enable) {
            if (v57) {
              v1.enable(3042);
            } else {
              v1.disable(3042);
            }
            v5.blend_enable = v57;
          }
          v58 = v17[0];
          v59 = v17[1];
          v60 = v17[2];
          v61 = v17[3];
          if (v58 !== v18[0] || v59 !== v18[1] || v60 !== v18[2] || v61 !== v18[3]) {
            v1.blendColor(v58, v59, v60, v61);
            v18[0] = v58;
            v18[1] = v59;
            v18[2] = v60;
            v18[3] = v61;
          }
          v62 = v19[0];
          v63 = v19[1];
          if (v62 !== v20[0] || v63 !== v20[1]) {
            v1.blendEquationSeparate(v62, v63);
            v20[0] = v62;
            v20[1] = v63;
          }
          v64 = v21[0];
          v65 = v21[1];
          v66 = v21[2];
          v67 = v21[3];
          if (v64 !== v22[0] || v65 !== v22[1] || v66 !== v22[2] || v67 !== v22[3]) {
            v1.blendFuncSeparate(v64, v65, v66, v67);
            v22[0] = v64;
            v22[1] = v65;
            v22[2] = v66;
            v22[3] = v67;
          }
          v68 = v4.depth_enable;
          if (v68 !== v5.depth_enable) {
            if (v68) {
              v1.enable(2929);
            } else {
              v1.disable(2929);
            }
            v5.depth_enable = v68;
          }
          v69 = v4.depth_func;
          if (v69 !== v5.depth_func) {
            v1.depthFunc(v69);
            v5.depth_func = v69;
          }
          v70 = v23[0];
          v71 = v23[1];
          if (v70 !== v24[0] || v71 !== v24[1]) {
            v1.depthRange(v70, v71);
            v24[0] = v70;
            v24[1] = v71;
          }
          v72 = v4.depth_mask;
          if (v72 !== v5.depth_mask) {
            v1.depthMask(v72);
            v5.depth_mask = v72;
          }
          v73 = v25[0];
          v74 = v25[1];
          v75 = v25[2];
          v76 = v25[3];
          if (v73 !== v26[0] || v74 !== v26[1] || v75 !== v26[2] || v76 !== v26[3]) {
            v1.colorMask(v73, v74, v75, v76);
            v26[0] = v73;
            v26[1] = v74;
            v26[2] = v75;
            v26[3] = v76;
          }
          v77 = v4.cull_enable;
          if (v77 !== v5.cull_enable) {
            if (v77) {
              v1.enable(2884);
            } else {
              v1.disable(2884);
            }
            v5.cull_enable = v77;
          }
          v78 = v4.cull_face;
          if (v78 !== v5.cull_face) {
            v1.cullFace(v78);
            v5.cull_face = v78;
          }
          v79 = v4.frontFace;
          if (v79 !== v5.frontFace) {
            v1.frontFace(v79);
            v5.frontFace = v79;
          }
          v80 = v4.lineWidth;
          if (v80 !== v5.lineWidth) {
            v1.lineWidth(v80);
            v5.lineWidth = v80;
          }
          v81 = v4.polygonOffset_enable;
          if (v81 !== v5.polygonOffset_enable) {
            if (v81) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v81;
          }
          v82 = v27[0];
          v83 = v27[1];
          if (v82 !== v28[0] || v83 !== v28[1]) {
            v1.polygonOffset(v82, v83);
            v28[0] = v82;
            v28[1] = v83;
          }
          v84 = v4.sample_alpha;
          if (v84 !== v5.sample_alpha) {
            if (v84) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v84;
          }
          v85 = v4.sample_enable;
          if (v85 !== v5.sample_enable) {
            if (v85) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v85;
          }
          v86 = v29[0];
          v87 = v29[1];
          if (v86 !== v30[0] || v87 !== v30[1]) {
            v1.sampleCoverage(v86, v87);
            v30[0] = v86;
            v30[1] = v87;
          }
          v88 = v4.stencil_enable;
          if (v88 !== v5.stencil_enable) {
            if (v88) {
              v1.enable(2960);
            } else {
              v1.disable(2960);
            }
            v5.stencil_enable = v88;
          }
          v89 = v4.stencil_mask;
          if (v89 !== v5.stencil_mask) {
            v1.stencilMask(v89);
            v5.stencil_mask = v89;
          }
          v90 = v31[0];
          v91 = v31[1];
          v92 = v31[2];
          if (v90 !== v32[0] || v91 !== v32[1] || v92 !== v32[2]) {
            v1.stencilFunc(v90, v91, v92);
            v32[0] = v90;
            v32[1] = v91;
            v32[2] = v92;
          }
          v93 = v33[0];
          v94 = v33[1];
          v95 = v33[2];
          v96 = v33[3];
          if (v93 !== v34[0] || v94 !== v34[1] || v95 !== v34[2] || v96 !== v34[3]) {
            v1.stencilOpSeparate(v93, v94, v95, v96);
            v34[0] = v93;
            v34[1] = v94;
            v34[2] = v95;
            v34[3] = v96;
          }
          v97 = v35[0];
          v98 = v35[1];
          v99 = v35[2];
          v100 = v35[3];
          if (v97 !== v36[0] || v98 !== v36[1] || v99 !== v36[2] || v100 !== v36[3]) {
            v1.stencilOpSeparate(v97, v98, v99, v100);
            v36[0] = v97;
            v36[1] = v98;
            v36[2] = v99;
            v36[3] = v100;
          }
          v101 = v4.scissor_enable;
          if (v101 !== v5.scissor_enable) {
            if (v101) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v101;
          }
        }
        v102 = v2.framebufferWidth;
        v103 = v2.framebufferHeight;
        v104 = v2.viewportWidth;
        v2.viewportWidth = v102;
        v105 = v2.viewportHeight;
        v2.viewportHeight = v103;
        v1.viewport(0, 0, v102, v103);
        v40[0] = 0;
        v40[1] = 0;
        v40[2] = v102;
        v40[3] = v103;
        v106 = v2.framebufferWidth;
        v107 = v2.framebufferHeight;
        v1.scissor(0, 0, v106, v107);
        v38[0] = 0;
        v38[1] = 0;
        v38[2] = v106;
        v38[3] = v107;
        v108 = v5.profile;
        if (v108) {
          v109 = performance.now();
          g48.count++;
        }
        v1.useProgram(g110.program);
        v111 = v14.angle_instanced_arrays;
        v11.setVAO(null);
        v114 = g113.location;
        v115 = v10[v114];
        if (!v115.buffer) {
          v1.enableVertexAttribArray(v114);
        }
        v116 = 2;
        if (v115.type !== 5126 || v115.size !== v116 || v115.buffer !== g112 || v115.normalized !== false || v115.offset !== 0 || v115.stride !== 0) {
          v1.bindBuffer(34962, g112.buffer);
          v1.vertexAttribPointer(v114, v116, 5126, false, 0, 0);
          v115.type = 5126;
          v115.size = v116;
          v115.buffer = g112;
          v115.normalized = false;
          v115.offset = 0;
          v115.stride = 0;
        }
        if (v115.divisor !== 0) {
          v111.vertexAttribDivisorANGLE(v114, 0);
          v115.divisor = 0;
        }
        v119 = g118.call(this, v2, a0, 0);
        v1.uniform1f(g117.location, v119);
        v122 = g121.call(this, v2, a0, 0);
        if (v122 && v122._reglType === "framebuffer") {
          v122 = v122.color[0];
        }
        v123 = v122._texture;
        v1.uniform1i(g120.location, v123.bind());
        v126 = g125.call(this, v2, a0, 0);
        if (v126 && v126._reglType === "framebuffer") {
          v126 = v126.color[0];
        }
        v127 = v126._texture;
        v1.uniform1i(g124.location, v127.bind());
        v130 = g129.call(this, v2, a0, 0);
        v1.uniform1f(g128.location, v130);
        v133 = g132.call(this, v2, a0, 0);
        v1.uniform1i(g131.location, v133);
        v136 = g135.call(this, v2, a0, 0);
        v137 = v136[0];
        v138 = v136[1];
        v1.uniform2f(g134.location, v137, v138);
        v141 = g140.call(this, v2, a0, 0);
        v142 = v141[0];
        v143 = v141[1];
        v1.uniform2f(g139.location, v142, v143);
        v146 = g145.call(this, v2, a0, 0);
        v147 = v146[0];
        v148 = v146[1];
        v1.uniform2f(g144.location, v147, v148);
        v151 = g150.call(this, v2, a0, 0);
        v1.uniform1f(g149.location, v151);
        v154 = g153.call(this, v2, a0, 0);
        v1.uniform1f(g152.location, v154);
        v157 = g156.call(this, v2, a0, 0);
        v1.uniformMatrix3fv(g155.location, false, Array.isArray(v157) || v157 instanceof Float32Array ? v157 : (v158[0] = v157[0], v158[1] = v157[1], v158[2] = v157[2], v158[3] = v157[3], v158[4] = v157[4], v158[5] = v157[5], v158[6] = v157[6], v158[7] = v157[7], v158[8] = v157[8], v158));
        v159 = v6.elements;
        if (v159) {
          v1.bindBuffer(34963, v159.buffer.buffer);
        } else if (v11.currentVAO) {
          v159 = v7.getElements(v11.currentVAO.elements);
          if (v159)
            v1.bindBuffer(34963, v159.buffer.buffer);
        }
        v160 = v6.offset;
        v161 = v6.instances;
        if (v161 > 0) {
          if (v159) {
            v111.drawElementsInstancedANGLE(5, 4, v159.type, v160 << (v159.type - 5121 >> 1), v161);
          } else {
            v111.drawArraysInstancedANGLE(5, v160, 4, v161);
          }
        } else if (v161 < 0) {
          if (v159) {
            v1.drawElements(5, 4, v159.type, v160 << (v159.type - 5121 >> 1));
          } else {
            v1.drawArrays(5, v160, 4);
          }
        }
        v5.dirty = true;
        v11.setVAO(null);
        v13.next = v53;
        v2.framebufferWidth = v54;
        v2.framebufferHeight = v55;
        v2.viewportWidth = v104;
        v2.viewportHeight = v105;
        if (v108) {
          g48.cpuTime += performance.now() - v109;
        }
        v123.unbind();
        v127.unbind();
      },
      "scope": function(a0, a1, a2) {
        var v162, v163, v164, v165, v166, v167, v168, v169, v170, v172, v174, v175, v176, v177, v178, v180, v182, v183, v184, v185, v186, v188, v190, v191, v193, v194, v196, v197, v199, v200, v202, v203, v205, v206, v208, v209, v211, v212, v214, v215, v217, v218, v220, v221, v223, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, v235, v236, v238, v240;
        v162 = g50.call(this, v2, a0, a2);
        v163 = v13.getFramebuffer(v162);
        v164 = v13.next;
        v13.next = v163;
        v165 = v2.framebufferWidth;
        v2.framebufferWidth = v163 ? v163.width : v2.drawingBufferWidth;
        v166 = v2.framebufferHeight;
        v2.framebufferHeight = v163 ? v163.height : v2.drawingBufferHeight;
        v167 = v2.framebufferWidth;
        v168 = v2.framebufferHeight;
        v169 = v2.viewportWidth;
        v2.viewportWidth = v167;
        v170 = v2.viewportHeight;
        v2.viewportHeight = v168;
        v172 = v39[0];
        v39[0] = g171;
        v174 = v39[1];
        v39[1] = g173;
        v175 = v39[2];
        v39[2] = v167;
        v176 = v39[3];
        v39[3] = v168;
        v177 = v2.framebufferWidth;
        v178 = v2.framebufferHeight;
        v180 = v37[0];
        v37[0] = g179;
        v182 = v37[1];
        v37[1] = g181;
        v183 = v37[2];
        v37[2] = v177;
        v184 = v37[3];
        v37[3] = v178;
        v185 = v5.profile;
        if (v185) {
          v186 = performance.now();
          g48.count++;
        }
        v188 = v6.count;
        v6.count = g187;
        v190 = v6.primitive;
        v6.primitive = g189;
        v191 = g125.call(this, v2, a0, a2);
        v193 = v12[g192];
        v12[g192] = v191;
        v194 = g121.call(this, v2, a0, a2);
        v196 = v12[g195];
        v12[g195] = v194;
        v197 = g153.call(this, v2, a0, a2);
        v199 = v12[g198];
        v12[g198] = v197;
        v200 = g135.call(this, v2, a0, a2);
        v202 = v12[g201];
        v12[g201] = v200;
        v203 = g150.call(this, v2, a0, a2);
        v205 = v12[g204];
        v12[g204] = v203;
        v206 = g156.call(this, v2, a0, a2);
        v208 = v12[g207];
        v12[g207] = v206;
        v209 = g129.call(this, v2, a0, a2);
        v211 = v12[g210];
        v12[g210] = v209;
        v212 = g140.call(this, v2, a0, a2);
        v214 = v12[g213];
        v12[g213] = v212;
        v215 = g145.call(this, v2, a0, a2);
        v217 = v12[g216];
        v12[g216] = v215;
        v218 = g132.call(this, v2, a0, a2);
        v220 = v12[g219];
        v12[g219] = v218;
        v221 = g118.call(this, v2, a0, a2);
        v223 = v12[g222];
        v12[g222] = v221;
        v225 = g224.state;
        g224.state = 1;
        v226 = g224.x;
        g224.x = 0;
        v227 = g224.y;
        g224.y = 0;
        v228 = g224.z;
        g224.z = 0;
        v229 = g224.w;
        g224.w = 0;
        v230 = g224.buffer;
        g224.buffer = g112;
        v231 = g224.size;
        g224.size = 2;
        v232 = g224.normalized;
        g224.normalized = false;
        v233 = g224.type;
        g224.type = 5126;
        v234 = g224.offset;
        g224.offset = 0;
        v235 = g224.stride;
        g224.stride = 0;
        v236 = g224.divisor;
        g224.divisor = 0;
        v238 = v9.vert;
        v9.vert = g237;
        v240 = v9.frag;
        v9.frag = g239;
        v5.dirty = true;
        a1(v2, a0, a2);
        v13.next = v164;
        v2.framebufferWidth = v165;
        v2.framebufferHeight = v166;
        v2.viewportWidth = v169;
        v2.viewportHeight = v170;
        v39[0] = v172;
        v39[1] = v174;
        v39[2] = v175;
        v39[3] = v176;
        v37[0] = v180;
        v37[1] = v182;
        v37[2] = v183;
        v37[3] = v184;
        if (v185) {
          g48.cpuTime += performance.now() - v186;
        }
        v6.count = v188;
        v6.primitive = v190;
        v12[g192] = v193;
        v12[g195] = v196;
        v12[g198] = v199;
        v12[g201] = v202;
        v12[g204] = v205;
        v12[g207] = v208;
        v12[g210] = v211;
        v12[g213] = v214;
        v12[g216] = v217;
        v12[g219] = v220;
        v12[g222] = v223;
        g224.state = v225;
        g224.x = v226;
        g224.y = v227;
        g224.z = v228;
        g224.w = v229;
        g224.buffer = v230;
        g224.size = v231;
        g224.normalized = v232;
        g224.type = v233;
        g224.offset = v234;
        g224.stride = v235;
        g224.divisor = v236;
        v9.vert = v238;
        v9.frag = v240;
        v5.dirty = true;
      },
      "batch": function(a0, a1) {
        var v242, v243, v244, v245, v246, v293, v294, v295, v296, v297, v298, v299, v300, v301, v302, v303;
        v14.angle_instanced_arrays;
        v242 = g50.call(this, v2, a0, 0);
        v243 = v13.getFramebuffer(v242);
        v244 = v13.next;
        v13.next = v243;
        v245 = v2.framebufferWidth;
        v2.framebufferWidth = v243 ? v243.width : v2.drawingBufferWidth;
        v246 = v2.framebufferHeight;
        v2.framebufferHeight = v243 ? v243.height : v2.drawingBufferHeight;
        if (v243 !== v13.cur) {
          if (v243) {
            v1.bindFramebuffer(36160, v243.framebuffer);
          } else {
            v1.bindFramebuffer(36160, null);
          }
          v13.cur = v243;
        }
        if (v5.dirty) {
          var v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, v259, v260, v261, v262, v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, v280, v281, v282, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292;
          v247 = v4.dither;
          if (v247 !== v5.dither) {
            if (v247) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v247;
          }
          v248 = v4.blend_enable;
          if (v248 !== v5.blend_enable) {
            if (v248) {
              v1.enable(3042);
            } else {
              v1.disable(3042);
            }
            v5.blend_enable = v248;
          }
          v249 = v17[0];
          v250 = v17[1];
          v251 = v17[2];
          v252 = v17[3];
          if (v249 !== v18[0] || v250 !== v18[1] || v251 !== v18[2] || v252 !== v18[3]) {
            v1.blendColor(v249, v250, v251, v252);
            v18[0] = v249;
            v18[1] = v250;
            v18[2] = v251;
            v18[3] = v252;
          }
          v253 = v19[0];
          v254 = v19[1];
          if (v253 !== v20[0] || v254 !== v20[1]) {
            v1.blendEquationSeparate(v253, v254);
            v20[0] = v253;
            v20[1] = v254;
          }
          v255 = v21[0];
          v256 = v21[1];
          v257 = v21[2];
          v258 = v21[3];
          if (v255 !== v22[0] || v256 !== v22[1] || v257 !== v22[2] || v258 !== v22[3]) {
            v1.blendFuncSeparate(v255, v256, v257, v258);
            v22[0] = v255;
            v22[1] = v256;
            v22[2] = v257;
            v22[3] = v258;
          }
          v259 = v4.depth_enable;
          if (v259 !== v5.depth_enable) {
            if (v259) {
              v1.enable(2929);
            } else {
              v1.disable(2929);
            }
            v5.depth_enable = v259;
          }
          v260 = v4.depth_func;
          if (v260 !== v5.depth_func) {
            v1.depthFunc(v260);
            v5.depth_func = v260;
          }
          v261 = v23[0];
          v262 = v23[1];
          if (v261 !== v24[0] || v262 !== v24[1]) {
            v1.depthRange(v261, v262);
            v24[0] = v261;
            v24[1] = v262;
          }
          v263 = v4.depth_mask;
          if (v263 !== v5.depth_mask) {
            v1.depthMask(v263);
            v5.depth_mask = v263;
          }
          v264 = v25[0];
          v265 = v25[1];
          v266 = v25[2];
          v267 = v25[3];
          if (v264 !== v26[0] || v265 !== v26[1] || v266 !== v26[2] || v267 !== v26[3]) {
            v1.colorMask(v264, v265, v266, v267);
            v26[0] = v264;
            v26[1] = v265;
            v26[2] = v266;
            v26[3] = v267;
          }
          v268 = v4.cull_enable;
          if (v268 !== v5.cull_enable) {
            if (v268) {
              v1.enable(2884);
            } else {
              v1.disable(2884);
            }
            v5.cull_enable = v268;
          }
          v269 = v4.cull_face;
          if (v269 !== v5.cull_face) {
            v1.cullFace(v269);
            v5.cull_face = v269;
          }
          v270 = v4.frontFace;
          if (v270 !== v5.frontFace) {
            v1.frontFace(v270);
            v5.frontFace = v270;
          }
          v271 = v4.lineWidth;
          if (v271 !== v5.lineWidth) {
            v1.lineWidth(v271);
            v5.lineWidth = v271;
          }
          v272 = v4.polygonOffset_enable;
          if (v272 !== v5.polygonOffset_enable) {
            if (v272) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v272;
          }
          v273 = v27[0];
          v274 = v27[1];
          if (v273 !== v28[0] || v274 !== v28[1]) {
            v1.polygonOffset(v273, v274);
            v28[0] = v273;
            v28[1] = v274;
          }
          v275 = v4.sample_alpha;
          if (v275 !== v5.sample_alpha) {
            if (v275) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v275;
          }
          v276 = v4.sample_enable;
          if (v276 !== v5.sample_enable) {
            if (v276) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v276;
          }
          v277 = v29[0];
          v278 = v29[1];
          if (v277 !== v30[0] || v278 !== v30[1]) {
            v1.sampleCoverage(v277, v278);
            v30[0] = v277;
            v30[1] = v278;
          }
          v279 = v4.stencil_enable;
          if (v279 !== v5.stencil_enable) {
            if (v279) {
              v1.enable(2960);
            } else {
              v1.disable(2960);
            }
            v5.stencil_enable = v279;
          }
          v280 = v4.stencil_mask;
          if (v280 !== v5.stencil_mask) {
            v1.stencilMask(v280);
            v5.stencil_mask = v280;
          }
          v281 = v31[0];
          v282 = v31[1];
          v283 = v31[2];
          if (v281 !== v32[0] || v282 !== v32[1] || v283 !== v32[2]) {
            v1.stencilFunc(v281, v282, v283);
            v32[0] = v281;
            v32[1] = v282;
            v32[2] = v283;
          }
          v284 = v33[0];
          v285 = v33[1];
          v286 = v33[2];
          v287 = v33[3];
          if (v284 !== v34[0] || v285 !== v34[1] || v286 !== v34[2] || v287 !== v34[3]) {
            v1.stencilOpSeparate(v284, v285, v286, v287);
            v34[0] = v284;
            v34[1] = v285;
            v34[2] = v286;
            v34[3] = v287;
          }
          v288 = v35[0];
          v289 = v35[1];
          v290 = v35[2];
          v291 = v35[3];
          if (v288 !== v36[0] || v289 !== v36[1] || v290 !== v36[2] || v291 !== v36[3]) {
            v1.stencilOpSeparate(v288, v289, v290, v291);
            v36[0] = v288;
            v36[1] = v289;
            v36[2] = v290;
            v36[3] = v291;
          }
          v292 = v4.scissor_enable;
          if (v292 !== v5.scissor_enable) {
            if (v292) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v292;
          }
        }
        v293 = v2.framebufferWidth;
        v294 = v2.framebufferHeight;
        v295 = v2.viewportWidth;
        v2.viewportWidth = v293;
        v296 = v2.viewportHeight;
        v2.viewportHeight = v294;
        v1.viewport(0, 0, v293, v294);
        v40[0] = 0;
        v40[1] = 0;
        v40[2] = v293;
        v40[3] = v294;
        v297 = v2.framebufferWidth;
        v298 = v2.framebufferHeight;
        v1.scissor(0, 0, v297, v298);
        v38[0] = 0;
        v38[1] = 0;
        v38[2] = v297;
        v38[3] = v298;
        v299 = v5.profile;
        if (v299) {
          v300 = performance.now();
          g48.count += a1;
        }
        v1.useProgram(g110.program);
        v301 = v14.angle_instanced_arrays;
        var v304, v305, v306, v307, v308, v309, v310, v311, v312, v313, v314, v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, v325, v327, v328, v329;
        v11.setVAO(null);
        v304 = g113.location;
        v305 = v10[v304];
        if (!v305.buffer) {
          v1.enableVertexAttribArray(v304);
        }
        v306 = 2;
        if (v305.type !== 5126 || v305.size !== v306 || v305.buffer !== g112 || v305.normalized !== false || v305.offset !== 0 || v305.stride !== 0) {
          v1.bindBuffer(34962, g112.buffer);
          v1.vertexAttribPointer(v304, v306, 5126, false, 0, 0);
          v305.type = 5126;
          v305.size = v306;
          v305.buffer = g112;
          v305.normalized = false;
          v305.offset = 0;
          v305.stride = 0;
        }
        if (v305.divisor !== 0) {
          v301.vertexAttribDivisorANGLE(v304, 0);
          v305.divisor = 0;
        }
        v307 = g118.call(this, v2, v303, v302);
        v1.uniform1f(g117.location, v307);
        v308 = g121.call(this, v2, v303, v302);
        if (v308 && v308._reglType === "framebuffer") {
          v308 = v308.color[0];
        }
        v309 = v308._texture;
        v1.uniform1i(g120.location, v309.bind());
        v310 = g125.call(this, v2, v303, v302);
        if (v310 && v310._reglType === "framebuffer") {
          v310 = v310.color[0];
        }
        v311 = v310._texture;
        v1.uniform1i(g124.location, v311.bind());
        v312 = g129.call(this, v2, v303, v302);
        v1.uniform1f(g128.location, v312);
        v313 = g132.call(this, v2, v303, v302);
        v1.uniform1i(g131.location, v313);
        v314 = g135.call(this, v2, v303, v302);
        v315 = v314[0];
        v316 = v314[1];
        v1.uniform2f(g134.location, v315, v316);
        v317 = g140.call(this, v2, v303, v302);
        v318 = v317[0];
        v319 = v317[1];
        v1.uniform2f(g139.location, v318, v319);
        v320 = g145.call(this, v2, v303, v302);
        v321 = v320[0];
        v322 = v320[1];
        v1.uniform2f(g144.location, v321, v322);
        v323 = g150.call(this, v2, v303, v302);
        v1.uniform1f(g149.location, v323);
        v324 = g153.call(this, v2, v303, v302);
        v1.uniform1f(g152.location, v324);
        v325 = g156.call(this, v2, v303, v302);
        v1.uniformMatrix3fv(g155.location, false, Array.isArray(v325) || v325 instanceof Float32Array ? v325 : (v326[0] = v325[0], v326[1] = v325[1], v326[2] = v325[2], v326[3] = v325[3], v326[4] = v325[4], v326[5] = v325[5], v326[6] = v325[6], v326[7] = v325[7], v326[8] = v325[8], v326));
        v327 = v6.elements;
        if (v327) {
          v1.bindBuffer(34963, v327.buffer.buffer);
        } else if (v11.currentVAO) {
          v327 = v7.getElements(v11.currentVAO.elements);
          if (v327)
            v1.bindBuffer(34963, v327.buffer.buffer);
        }
        v328 = v6.offset;
        v329 = v6.instances;
        for (v302 = 0; v302 < a1; ++v302) {
          v303 = a0[v302];
          if (v329 > 0) {
            if (v327) {
              v301.drawElementsInstancedANGLE(5, 4, v327.type, v328 << (v327.type - 5121 >> 1), v329);
            } else {
              v301.drawArraysInstancedANGLE(5, v328, 4, v329);
            }
          } else if (v329 < 0) {
            if (v327) {
              v1.drawElements(5, 4, v327.type, v328 << (v327.type - 5121 >> 1));
            } else {
              v1.drawArrays(5, v328, 4);
            }
          }
        }
        v309.unbind();
        v311.unbind();
        v5.dirty = true;
        v11.setVAO(null);
        v13.next = v244;
        v2.framebufferWidth = v245;
        v2.framebufferHeight = v246;
        v2.viewportWidth = v295;
        v2.viewportHeight = v296;
        if (v299) {
          g48.cpuTime += performance.now() - v300;
        }
      }
    };
  },
  "4b1048018d132017f70c93d90fb6866b8a15897d22afb4f95c53227794027ed2": function anonymous7(g0, g48, g50, g108, g110, g111, g125, g127, g133, g135, g141, g143, g145, g158, g160) {
    var v1, v2, v4, v5, v6, v7, v9, v10, v11, v13, v14, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40;
    v1 = g0.gl;
    v2 = g0.context;
    g0.strings;
    v4 = g0.next;
    v5 = g0.current;
    v6 = g0.draw;
    v7 = g0.elements;
    g0.buffer;
    v9 = g0.shader;
    v10 = g0.attributes;
    v11 = g0.vao;
    g0.uniforms;
    v13 = g0.framebuffer;
    v14 = g0.extensions;
    g0.timer;
    g0.isBufferArgs;
    v17 = v4.blend_color;
    v18 = v5.blend_color;
    v19 = v4.blend_equation;
    v20 = v5.blend_equation;
    v21 = v4.blend_func;
    v22 = v5.blend_func;
    v23 = v4.depth_range;
    v24 = v5.depth_range;
    v25 = v4.colorMask;
    v26 = v5.colorMask;
    v27 = v4.polygonOffset_offset;
    v28 = v5.polygonOffset_offset;
    v29 = v4.sample_coverage;
    v30 = v5.sample_coverage;
    v31 = v4.stencil_func;
    v32 = v5.stencil_func;
    v33 = v4.stencil_opFront;
    v34 = v5.stencil_opFront;
    v35 = v4.stencil_opBack;
    v36 = v5.stencil_opBack;
    v37 = v4.scissor_box;
    v38 = v5.scissor_box;
    v39 = v4.viewport;
    v40 = v5.viewport;
    return {
      "draw": function(a0) {
        var v51, v52, v53, v100, v101, v102, v103, v104, v105, v106, v107, v109, v112, v113, v114, v115, v116, v117;
        v14.angle_instanced_arrays;
        v51 = v13.next;
        v13.next = g50;
        v52 = v2.framebufferWidth;
        v2.framebufferWidth = g50.width;
        v53 = v2.framebufferHeight;
        v2.framebufferHeight = g50.height;
        if (g50 !== v13.cur) {
          if (g50) {
            v1.bindFramebuffer(36160, g50.framebuffer);
          } else {
            v1.bindFramebuffer(36160, null);
          }
          v13.cur = g50;
        }
        if (v5.dirty) {
          var v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99;
          v54 = v4.dither;
          if (v54 !== v5.dither) {
            if (v54) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v54;
          }
          v55 = v4.blend_enable;
          if (v55 !== v5.blend_enable) {
            if (v55) {
              v1.enable(3042);
            } else {
              v1.disable(3042);
            }
            v5.blend_enable = v55;
          }
          v56 = v17[0];
          v57 = v17[1];
          v58 = v17[2];
          v59 = v17[3];
          if (v56 !== v18[0] || v57 !== v18[1] || v58 !== v18[2] || v59 !== v18[3]) {
            v1.blendColor(v56, v57, v58, v59);
            v18[0] = v56;
            v18[1] = v57;
            v18[2] = v58;
            v18[3] = v59;
          }
          v60 = v19[0];
          v61 = v19[1];
          if (v60 !== v20[0] || v61 !== v20[1]) {
            v1.blendEquationSeparate(v60, v61);
            v20[0] = v60;
            v20[1] = v61;
          }
          v62 = v21[0];
          v63 = v21[1];
          v64 = v21[2];
          v65 = v21[3];
          if (v62 !== v22[0] || v63 !== v22[1] || v64 !== v22[2] || v65 !== v22[3]) {
            v1.blendFuncSeparate(v62, v63, v64, v65);
            v22[0] = v62;
            v22[1] = v63;
            v22[2] = v64;
            v22[3] = v65;
          }
          v66 = v4.depth_enable;
          if (v66 !== v5.depth_enable) {
            if (v66) {
              v1.enable(2929);
            } else {
              v1.disable(2929);
            }
            v5.depth_enable = v66;
          }
          v67 = v4.depth_func;
          if (v67 !== v5.depth_func) {
            v1.depthFunc(v67);
            v5.depth_func = v67;
          }
          v68 = v23[0];
          v69 = v23[1];
          if (v68 !== v24[0] || v69 !== v24[1]) {
            v1.depthRange(v68, v69);
            v24[0] = v68;
            v24[1] = v69;
          }
          v70 = v4.depth_mask;
          if (v70 !== v5.depth_mask) {
            v1.depthMask(v70);
            v5.depth_mask = v70;
          }
          v71 = v25[0];
          v72 = v25[1];
          v73 = v25[2];
          v74 = v25[3];
          if (v71 !== v26[0] || v72 !== v26[1] || v73 !== v26[2] || v74 !== v26[3]) {
            v1.colorMask(v71, v72, v73, v74);
            v26[0] = v71;
            v26[1] = v72;
            v26[2] = v73;
            v26[3] = v74;
          }
          v75 = v4.cull_enable;
          if (v75 !== v5.cull_enable) {
            if (v75) {
              v1.enable(2884);
            } else {
              v1.disable(2884);
            }
            v5.cull_enable = v75;
          }
          v76 = v4.cull_face;
          if (v76 !== v5.cull_face) {
            v1.cullFace(v76);
            v5.cull_face = v76;
          }
          v77 = v4.frontFace;
          if (v77 !== v5.frontFace) {
            v1.frontFace(v77);
            v5.frontFace = v77;
          }
          v78 = v4.lineWidth;
          if (v78 !== v5.lineWidth) {
            v1.lineWidth(v78);
            v5.lineWidth = v78;
          }
          v79 = v4.polygonOffset_enable;
          if (v79 !== v5.polygonOffset_enable) {
            if (v79) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v79;
          }
          v80 = v27[0];
          v81 = v27[1];
          if (v80 !== v28[0] || v81 !== v28[1]) {
            v1.polygonOffset(v80, v81);
            v28[0] = v80;
            v28[1] = v81;
          }
          v82 = v4.sample_alpha;
          if (v82 !== v5.sample_alpha) {
            if (v82) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v82;
          }
          v83 = v4.sample_enable;
          if (v83 !== v5.sample_enable) {
            if (v83) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v83;
          }
          v84 = v29[0];
          v85 = v29[1];
          if (v84 !== v30[0] || v85 !== v30[1]) {
            v1.sampleCoverage(v84, v85);
            v30[0] = v84;
            v30[1] = v85;
          }
          v86 = v4.stencil_enable;
          if (v86 !== v5.stencil_enable) {
            if (v86) {
              v1.enable(2960);
            } else {
              v1.disable(2960);
            }
            v5.stencil_enable = v86;
          }
          v87 = v4.stencil_mask;
          if (v87 !== v5.stencil_mask) {
            v1.stencilMask(v87);
            v5.stencil_mask = v87;
          }
          v88 = v31[0];
          v89 = v31[1];
          v90 = v31[2];
          if (v88 !== v32[0] || v89 !== v32[1] || v90 !== v32[2]) {
            v1.stencilFunc(v88, v89, v90);
            v32[0] = v88;
            v32[1] = v89;
            v32[2] = v90;
          }
          v91 = v33[0];
          v92 = v33[1];
          v93 = v33[2];
          v94 = v33[3];
          if (v91 !== v34[0] || v92 !== v34[1] || v93 !== v34[2] || v94 !== v34[3]) {
            v1.stencilOpSeparate(v91, v92, v93, v94);
            v34[0] = v91;
            v34[1] = v92;
            v34[2] = v93;
            v34[3] = v94;
          }
          v95 = v35[0];
          v96 = v35[1];
          v97 = v35[2];
          v98 = v35[3];
          if (v95 !== v36[0] || v96 !== v36[1] || v97 !== v36[2] || v98 !== v36[3]) {
            v1.stencilOpSeparate(v95, v96, v97, v98);
            v36[0] = v95;
            v36[1] = v96;
            v36[2] = v97;
            v36[3] = v98;
          }
          v99 = v4.scissor_enable;
          if (v99 !== v5.scissor_enable) {
            if (v99) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v99;
          }
        }
        v100 = v2.framebufferWidth;
        v101 = v2.framebufferHeight;
        v102 = v2.viewportWidth;
        v2.viewportWidth = v100;
        v103 = v2.viewportHeight;
        v2.viewportHeight = v101;
        v1.viewport(0, 0, v100, v101);
        v40[0] = 0;
        v40[1] = 0;
        v40[2] = v100;
        v40[3] = v101;
        v104 = v2.framebufferWidth;
        v105 = v2.framebufferHeight;
        v1.scissor(0, 0, v104, v105);
        v38[0] = 0;
        v38[1] = 0;
        v38[2] = v104;
        v38[3] = v105;
        v106 = v5.profile;
        if (v106) {
          v107 = performance.now();
          g48.count++;
        }
        v1.useProgram(g108.program);
        v109 = v14.angle_instanced_arrays;
        v11.setVAO(null);
        v112 = g111.location;
        v113 = v10[v112];
        if (!v113.buffer) {
          v1.enableVertexAttribArray(v112);
        }
        v114 = 2;
        if (v113.type !== 5126 || v113.size !== v114 || v113.buffer !== g110 || v113.normalized !== false || v113.offset !== 0 || v113.stride !== 0) {
          v1.bindBuffer(34962, g110.buffer);
          v1.vertexAttribPointer(v112, v114, 5126, false, 0, 0);
          v113.type = 5126;
          v113.size = v114;
          v113.buffer = g110;
          v113.normalized = false;
          v113.offset = 0;
          v113.stride = 0;
        }
        if (v113.divisor !== 0) {
          v109.vertexAttribDivisorANGLE(v112, 0);
          v113.divisor = 0;
        }
        v115 = v6.elements;
        if (v115) {
          v1.bindBuffer(34963, v115.buffer.buffer);
        } else if (v11.currentVAO) {
          v115 = v7.getElements(v11.currentVAO.elements);
          if (v115)
            v1.bindBuffer(34963, v115.buffer.buffer);
        }
        v116 = v6.offset;
        v117 = v6.instances;
        if (v117 > 0) {
          if (v115) {
            v109.drawElementsInstancedANGLE(5, 4, v115.type, v116 << (v115.type - 5121 >> 1), v117);
          } else {
            v109.drawArraysInstancedANGLE(5, v116, 4, v117);
          }
        } else if (v117 < 0) {
          if (v115) {
            v1.drawElements(5, 4, v115.type, v116 << (v115.type - 5121 >> 1));
          } else {
            v1.drawArrays(5, v116, 4);
          }
        }
        v5.dirty = true;
        v11.setVAO(null);
        v13.next = v51;
        v2.framebufferWidth = v52;
        v2.framebufferHeight = v53;
        v2.viewportWidth = v102;
        v2.viewportHeight = v103;
        if (v106) {
          g48.cpuTime += performance.now() - v107;
        }
      },
      "scope": function(a0, a1, a2) {
        var v118, v119, v120, v121, v122, v123, v124, v126, v128, v129, v130, v131, v132, v134, v136, v137, v138, v139, v140, v142, v144, v146, v147, v148, v149, v150, v151, v152, v153, v154, v155, v156, v157, v159, v161;
        v118 = v13.next;
        v13.next = g50;
        v119 = v2.framebufferWidth;
        v2.framebufferWidth = g50.width;
        v120 = v2.framebufferHeight;
        v2.framebufferHeight = g50.height;
        v121 = v2.framebufferWidth;
        v122 = v2.framebufferHeight;
        v123 = v2.viewportWidth;
        v2.viewportWidth = v121;
        v124 = v2.viewportHeight;
        v2.viewportHeight = v122;
        v126 = v39[0];
        v39[0] = g125;
        v128 = v39[1];
        v39[1] = g127;
        v129 = v39[2];
        v39[2] = v121;
        v130 = v39[3];
        v39[3] = v122;
        v131 = v2.framebufferWidth;
        v132 = v2.framebufferHeight;
        v134 = v37[0];
        v37[0] = g133;
        v136 = v37[1];
        v37[1] = g135;
        v137 = v37[2];
        v37[2] = v131;
        v138 = v37[3];
        v37[3] = v132;
        v139 = v5.profile;
        if (v139) {
          v140 = performance.now();
          g48.count++;
        }
        v142 = v6.count;
        v6.count = g141;
        v144 = v6.primitive;
        v6.primitive = g143;
        v146 = g145.state;
        g145.state = 1;
        v147 = g145.x;
        g145.x = 0;
        v148 = g145.y;
        g145.y = 0;
        v149 = g145.z;
        g145.z = 0;
        v150 = g145.w;
        g145.w = 0;
        v151 = g145.buffer;
        g145.buffer = g110;
        v152 = g145.size;
        g145.size = 2;
        v153 = g145.normalized;
        g145.normalized = false;
        v154 = g145.type;
        g145.type = 5126;
        v155 = g145.offset;
        g145.offset = 0;
        v156 = g145.stride;
        g145.stride = 0;
        v157 = g145.divisor;
        g145.divisor = 0;
        v159 = v9.vert;
        v9.vert = g158;
        v161 = v9.frag;
        v9.frag = g160;
        v5.dirty = true;
        a1(v2, a0, a2);
        v13.next = v118;
        v2.framebufferWidth = v119;
        v2.framebufferHeight = v120;
        v2.viewportWidth = v123;
        v2.viewportHeight = v124;
        v39[0] = v126;
        v39[1] = v128;
        v39[2] = v129;
        v39[3] = v130;
        v37[0] = v134;
        v37[1] = v136;
        v37[2] = v137;
        v37[3] = v138;
        if (v139) {
          g48.cpuTime += performance.now() - v140;
        }
        v6.count = v142;
        v6.primitive = v144;
        g145.state = v146;
        g145.x = v147;
        g145.y = v148;
        g145.z = v149;
        g145.w = v150;
        g145.buffer = v151;
        g145.size = v152;
        g145.normalized = v153;
        g145.type = v154;
        g145.offset = v155;
        g145.stride = v156;
        g145.divisor = v157;
        v9.vert = v159;
        v9.frag = v161;
        v5.dirty = true;
      },
      "batch": function(a0, a1) {
        var v163, v164, v165, v212, v213, v214, v215, v216, v217, v218, v219, v220, v221;
        v14.angle_instanced_arrays;
        v163 = v13.next;
        v13.next = g50;
        v164 = v2.framebufferWidth;
        v2.framebufferWidth = g50.width;
        v165 = v2.framebufferHeight;
        v2.framebufferHeight = g50.height;
        if (g50 !== v13.cur) {
          if (g50) {
            v1.bindFramebuffer(36160, g50.framebuffer);
          } else {
            v1.bindFramebuffer(36160, null);
          }
          v13.cur = g50;
        }
        if (v5.dirty) {
          var v166, v167, v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, v207, v208, v209, v210, v211;
          v166 = v4.dither;
          if (v166 !== v5.dither) {
            if (v166) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v166;
          }
          v167 = v4.blend_enable;
          if (v167 !== v5.blend_enable) {
            if (v167) {
              v1.enable(3042);
            } else {
              v1.disable(3042);
            }
            v5.blend_enable = v167;
          }
          v168 = v17[0];
          v169 = v17[1];
          v170 = v17[2];
          v171 = v17[3];
          if (v168 !== v18[0] || v169 !== v18[1] || v170 !== v18[2] || v171 !== v18[3]) {
            v1.blendColor(v168, v169, v170, v171);
            v18[0] = v168;
            v18[1] = v169;
            v18[2] = v170;
            v18[3] = v171;
          }
          v172 = v19[0];
          v173 = v19[1];
          if (v172 !== v20[0] || v173 !== v20[1]) {
            v1.blendEquationSeparate(v172, v173);
            v20[0] = v172;
            v20[1] = v173;
          }
          v174 = v21[0];
          v175 = v21[1];
          v176 = v21[2];
          v177 = v21[3];
          if (v174 !== v22[0] || v175 !== v22[1] || v176 !== v22[2] || v177 !== v22[3]) {
            v1.blendFuncSeparate(v174, v175, v176, v177);
            v22[0] = v174;
            v22[1] = v175;
            v22[2] = v176;
            v22[3] = v177;
          }
          v178 = v4.depth_enable;
          if (v178 !== v5.depth_enable) {
            if (v178) {
              v1.enable(2929);
            } else {
              v1.disable(2929);
            }
            v5.depth_enable = v178;
          }
          v179 = v4.depth_func;
          if (v179 !== v5.depth_func) {
            v1.depthFunc(v179);
            v5.depth_func = v179;
          }
          v180 = v23[0];
          v181 = v23[1];
          if (v180 !== v24[0] || v181 !== v24[1]) {
            v1.depthRange(v180, v181);
            v24[0] = v180;
            v24[1] = v181;
          }
          v182 = v4.depth_mask;
          if (v182 !== v5.depth_mask) {
            v1.depthMask(v182);
            v5.depth_mask = v182;
          }
          v183 = v25[0];
          v184 = v25[1];
          v185 = v25[2];
          v186 = v25[3];
          if (v183 !== v26[0] || v184 !== v26[1] || v185 !== v26[2] || v186 !== v26[3]) {
            v1.colorMask(v183, v184, v185, v186);
            v26[0] = v183;
            v26[1] = v184;
            v26[2] = v185;
            v26[3] = v186;
          }
          v187 = v4.cull_enable;
          if (v187 !== v5.cull_enable) {
            if (v187) {
              v1.enable(2884);
            } else {
              v1.disable(2884);
            }
            v5.cull_enable = v187;
          }
          v188 = v4.cull_face;
          if (v188 !== v5.cull_face) {
            v1.cullFace(v188);
            v5.cull_face = v188;
          }
          v189 = v4.frontFace;
          if (v189 !== v5.frontFace) {
            v1.frontFace(v189);
            v5.frontFace = v189;
          }
          v190 = v4.lineWidth;
          if (v190 !== v5.lineWidth) {
            v1.lineWidth(v190);
            v5.lineWidth = v190;
          }
          v191 = v4.polygonOffset_enable;
          if (v191 !== v5.polygonOffset_enable) {
            if (v191) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v191;
          }
          v192 = v27[0];
          v193 = v27[1];
          if (v192 !== v28[0] || v193 !== v28[1]) {
            v1.polygonOffset(v192, v193);
            v28[0] = v192;
            v28[1] = v193;
          }
          v194 = v4.sample_alpha;
          if (v194 !== v5.sample_alpha) {
            if (v194) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v194;
          }
          v195 = v4.sample_enable;
          if (v195 !== v5.sample_enable) {
            if (v195) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v195;
          }
          v196 = v29[0];
          v197 = v29[1];
          if (v196 !== v30[0] || v197 !== v30[1]) {
            v1.sampleCoverage(v196, v197);
            v30[0] = v196;
            v30[1] = v197;
          }
          v198 = v4.stencil_enable;
          if (v198 !== v5.stencil_enable) {
            if (v198) {
              v1.enable(2960);
            } else {
              v1.disable(2960);
            }
            v5.stencil_enable = v198;
          }
          v199 = v4.stencil_mask;
          if (v199 !== v5.stencil_mask) {
            v1.stencilMask(v199);
            v5.stencil_mask = v199;
          }
          v200 = v31[0];
          v201 = v31[1];
          v202 = v31[2];
          if (v200 !== v32[0] || v201 !== v32[1] || v202 !== v32[2]) {
            v1.stencilFunc(v200, v201, v202);
            v32[0] = v200;
            v32[1] = v201;
            v32[2] = v202;
          }
          v203 = v33[0];
          v204 = v33[1];
          v205 = v33[2];
          v206 = v33[3];
          if (v203 !== v34[0] || v204 !== v34[1] || v205 !== v34[2] || v206 !== v34[3]) {
            v1.stencilOpSeparate(v203, v204, v205, v206);
            v34[0] = v203;
            v34[1] = v204;
            v34[2] = v205;
            v34[3] = v206;
          }
          v207 = v35[0];
          v208 = v35[1];
          v209 = v35[2];
          v210 = v35[3];
          if (v207 !== v36[0] || v208 !== v36[1] || v209 !== v36[2] || v210 !== v36[3]) {
            v1.stencilOpSeparate(v207, v208, v209, v210);
            v36[0] = v207;
            v36[1] = v208;
            v36[2] = v209;
            v36[3] = v210;
          }
          v211 = v4.scissor_enable;
          if (v211 !== v5.scissor_enable) {
            if (v211) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v211;
          }
        }
        v212 = v2.framebufferWidth;
        v213 = v2.framebufferHeight;
        v214 = v2.viewportWidth;
        v2.viewportWidth = v212;
        v215 = v2.viewportHeight;
        v2.viewportHeight = v213;
        v1.viewport(0, 0, v212, v213);
        v40[0] = 0;
        v40[1] = 0;
        v40[2] = v212;
        v40[3] = v213;
        v216 = v2.framebufferWidth;
        v217 = v2.framebufferHeight;
        v1.scissor(0, 0, v216, v217);
        v38[0] = 0;
        v38[1] = 0;
        v38[2] = v216;
        v38[3] = v217;
        v218 = v5.profile;
        if (v218) {
          v219 = performance.now();
          g48.count += a1;
        }
        v1.useProgram(g108.program);
        v220 = v14.angle_instanced_arrays;
        var v223, v224, v225, v226, v227, v228;
        v11.setVAO(null);
        v223 = g111.location;
        v224 = v10[v223];
        if (!v224.buffer) {
          v1.enableVertexAttribArray(v223);
        }
        v225 = 2;
        if (v224.type !== 5126 || v224.size !== v225 || v224.buffer !== g110 || v224.normalized !== false || v224.offset !== 0 || v224.stride !== 0) {
          v1.bindBuffer(34962, g110.buffer);
          v1.vertexAttribPointer(v223, v225, 5126, false, 0, 0);
          v224.type = 5126;
          v224.size = v225;
          v224.buffer = g110;
          v224.normalized = false;
          v224.offset = 0;
          v224.stride = 0;
        }
        if (v224.divisor !== 0) {
          v220.vertexAttribDivisorANGLE(v223, 0);
          v224.divisor = 0;
        }
        v226 = v6.elements;
        if (v226) {
          v1.bindBuffer(34963, v226.buffer.buffer);
        } else if (v11.currentVAO) {
          v226 = v7.getElements(v11.currentVAO.elements);
          if (v226)
            v1.bindBuffer(34963, v226.buffer.buffer);
        }
        v227 = v6.offset;
        v228 = v6.instances;
        for (v221 = 0; v221 < a1; ++v221) {
          a0[v221];
          if (v228 > 0) {
            if (v226) {
              v220.drawElementsInstancedANGLE(5, 4, v226.type, v227 << (v226.type - 5121 >> 1), v228);
            } else {
              v220.drawArraysInstancedANGLE(5, v227, 4, v228);
            }
          } else if (v228 < 0) {
            if (v226) {
              v1.drawElements(5, 4, v226.type, v227 << (v226.type - 5121 >> 1));
            } else {
              v1.drawArrays(5, v227, 4);
            }
          }
        }
        v5.dirty = true;
        v11.setVAO(null);
        v13.next = v163;
        v2.framebufferWidth = v164;
        v2.framebufferHeight = v165;
        v2.viewportWidth = v214;
        v2.viewportHeight = v215;
        if (v218) {
          g48.cpuTime += performance.now() - v219;
        }
      }
    };
  },
  "dc78818e05e5bdb719097afd9459427ce9cec77af6efb5a73a4259e754167213": function anonymous8(g0, g48, g50, g104, g105, g110, g112, g113, g117, g118, g120, g121, g125, g126, g129, g130, g132, g133, g136, g137, g139, g140, g142, g143, g147, g148, g150, g151, g153, g154, g159, g171, g173, g177, g179, g183, g185, g193, g196, g199, g202, g205, g208, g211, g214, g217, g220, g223, g226, g228, g241, g243, g299, g300) {
    var v1, v2, v4, v5, v6, v7, v9, v10, v11, v12, v13, v14, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v156, v328;
    v1 = g0.gl;
    v2 = g0.context;
    g0.strings;
    v4 = g0.next;
    v5 = g0.current;
    v6 = g0.draw;
    v7 = g0.elements;
    g0.buffer;
    v9 = g0.shader;
    v10 = g0.attributes;
    v11 = g0.vao;
    v12 = g0.uniforms;
    v13 = g0.framebuffer;
    v14 = g0.extensions;
    g0.timer;
    g0.isBufferArgs;
    v17 = v4.blend_color;
    v18 = v5.blend_color;
    v19 = v4.blend_equation;
    v20 = v5.blend_equation;
    v21 = v4.blend_func;
    v22 = v5.blend_func;
    v23 = v4.depth_range;
    v24 = v5.depth_range;
    v25 = v4.colorMask;
    v26 = v5.colorMask;
    v27 = v4.polygonOffset_offset;
    v28 = v5.polygonOffset_offset;
    v29 = v4.sample_coverage;
    v30 = v5.sample_coverage;
    v31 = v4.stencil_func;
    v32 = v5.stencil_func;
    v33 = v4.stencil_opFront;
    v34 = v5.stencil_opFront;
    v35 = v4.stencil_opBack;
    v36 = v5.stencil_opBack;
    v37 = v4.scissor_box;
    v38 = v5.scissor_box;
    v39 = v4.viewport;
    v40 = v5.viewport;
    v156 = new Float32Array(9);
    v328 = new Float32Array(9);
    return {
      "draw": function(a0) {
        var v51, v52, v53, v54, v55, v100, v101, v102, v103, v106, v107, v108, v109, v111, v114, v115, v116, v119, v122, v123, v124, v127, v128, v131, v134, v135, v138, v141, v144, v145, v146, v149, v152, v155, v157, v158, v160, v161;
        v14.angle_instanced_arrays;
        v51 = g50.call(this, v2, a0, 0);
        v52 = v13.getFramebuffer(v51);
        v53 = v13.next;
        v13.next = v52;
        v54 = v2.framebufferWidth;
        v2.framebufferWidth = v52 ? v52.width : v2.drawingBufferWidth;
        v55 = v2.framebufferHeight;
        v2.framebufferHeight = v52 ? v52.height : v2.drawingBufferHeight;
        if (v52 !== v13.cur) {
          if (v52) {
            v1.bindFramebuffer(36160, v52.framebuffer);
          } else {
            v1.bindFramebuffer(36160, null);
          }
          v13.cur = v52;
        }
        if (v5.dirty) {
          var v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99;
          v56 = v4.dither;
          if (v56 !== v5.dither) {
            if (v56) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v56;
          }
          v57 = v4.blend_enable;
          if (v57 !== v5.blend_enable) {
            if (v57) {
              v1.enable(3042);
            } else {
              v1.disable(3042);
            }
            v5.blend_enable = v57;
          }
          v58 = v17[0];
          v59 = v17[1];
          v60 = v17[2];
          v61 = v17[3];
          if (v58 !== v18[0] || v59 !== v18[1] || v60 !== v18[2] || v61 !== v18[3]) {
            v1.blendColor(v58, v59, v60, v61);
            v18[0] = v58;
            v18[1] = v59;
            v18[2] = v60;
            v18[3] = v61;
          }
          v62 = v19[0];
          v63 = v19[1];
          if (v62 !== v20[0] || v63 !== v20[1]) {
            v1.blendEquationSeparate(v62, v63);
            v20[0] = v62;
            v20[1] = v63;
          }
          v64 = v21[0];
          v65 = v21[1];
          v66 = v21[2];
          v67 = v21[3];
          if (v64 !== v22[0] || v65 !== v22[1] || v66 !== v22[2] || v67 !== v22[3]) {
            v1.blendFuncSeparate(v64, v65, v66, v67);
            v22[0] = v64;
            v22[1] = v65;
            v22[2] = v66;
            v22[3] = v67;
          }
          v68 = v4.depth_func;
          if (v68 !== v5.depth_func) {
            v1.depthFunc(v68);
            v5.depth_func = v68;
          }
          v69 = v23[0];
          v70 = v23[1];
          if (v69 !== v24[0] || v70 !== v24[1]) {
            v1.depthRange(v69, v70);
            v24[0] = v69;
            v24[1] = v70;
          }
          v71 = v25[0];
          v72 = v25[1];
          v73 = v25[2];
          v74 = v25[3];
          if (v71 !== v26[0] || v72 !== v26[1] || v73 !== v26[2] || v74 !== v26[3]) {
            v1.colorMask(v71, v72, v73, v74);
            v26[0] = v71;
            v26[1] = v72;
            v26[2] = v73;
            v26[3] = v74;
          }
          v75 = v4.cull_enable;
          if (v75 !== v5.cull_enable) {
            if (v75) {
              v1.enable(2884);
            } else {
              v1.disable(2884);
            }
            v5.cull_enable = v75;
          }
          v76 = v4.cull_face;
          if (v76 !== v5.cull_face) {
            v1.cullFace(v76);
            v5.cull_face = v76;
          }
          v77 = v4.frontFace;
          if (v77 !== v5.frontFace) {
            v1.frontFace(v77);
            v5.frontFace = v77;
          }
          v78 = v4.lineWidth;
          if (v78 !== v5.lineWidth) {
            v1.lineWidth(v78);
            v5.lineWidth = v78;
          }
          v79 = v4.polygonOffset_enable;
          if (v79 !== v5.polygonOffset_enable) {
            if (v79) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v79;
          }
          v80 = v27[0];
          v81 = v27[1];
          if (v80 !== v28[0] || v81 !== v28[1]) {
            v1.polygonOffset(v80, v81);
            v28[0] = v80;
            v28[1] = v81;
          }
          v82 = v4.sample_alpha;
          if (v82 !== v5.sample_alpha) {
            if (v82) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v82;
          }
          v83 = v4.sample_enable;
          if (v83 !== v5.sample_enable) {
            if (v83) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v83;
          }
          v84 = v29[0];
          v85 = v29[1];
          if (v84 !== v30[0] || v85 !== v30[1]) {
            v1.sampleCoverage(v84, v85);
            v30[0] = v84;
            v30[1] = v85;
          }
          v86 = v4.stencil_enable;
          if (v86 !== v5.stencil_enable) {
            if (v86) {
              v1.enable(2960);
            } else {
              v1.disable(2960);
            }
            v5.stencil_enable = v86;
          }
          v87 = v4.stencil_mask;
          if (v87 !== v5.stencil_mask) {
            v1.stencilMask(v87);
            v5.stencil_mask = v87;
          }
          v88 = v31[0];
          v89 = v31[1];
          v90 = v31[2];
          if (v88 !== v32[0] || v89 !== v32[1] || v90 !== v32[2]) {
            v1.stencilFunc(v88, v89, v90);
            v32[0] = v88;
            v32[1] = v89;
            v32[2] = v90;
          }
          v91 = v33[0];
          v92 = v33[1];
          v93 = v33[2];
          v94 = v33[3];
          if (v91 !== v34[0] || v92 !== v34[1] || v93 !== v34[2] || v94 !== v34[3]) {
            v1.stencilOpSeparate(v91, v92, v93, v94);
            v34[0] = v91;
            v34[1] = v92;
            v34[2] = v93;
            v34[3] = v94;
          }
          v95 = v35[0];
          v96 = v35[1];
          v97 = v35[2];
          v98 = v35[3];
          if (v95 !== v36[0] || v96 !== v36[1] || v97 !== v36[2] || v98 !== v36[3]) {
            v1.stencilOpSeparate(v95, v96, v97, v98);
            v36[0] = v95;
            v36[1] = v96;
            v36[2] = v97;
            v36[3] = v98;
          }
          v99 = v4.scissor_enable;
          if (v99 !== v5.scissor_enable) {
            if (v99) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v99;
          }
        }
        v100 = v2.framebufferWidth;
        v101 = v2.framebufferHeight;
        v102 = v2.viewportWidth;
        v2.viewportWidth = v100;
        v103 = v2.viewportHeight;
        v2.viewportHeight = v101;
        v1.viewport(0, 0, v100, v101);
        v40[0] = 0;
        v40[1] = 0;
        v40[2] = v100;
        v40[3] = v101;
        if (g104) {
          v1.enable(2929);
        } else {
          v1.disable(2929);
        }
        v5.depth_enable = g104;
        v1.depthMask(g105);
        v5.depth_mask = g105;
        v106 = v2.framebufferWidth;
        v107 = v2.framebufferHeight;
        v1.scissor(0, 0, v106, v107);
        v38[0] = 0;
        v38[1] = 0;
        v38[2] = v106;
        v38[3] = v107;
        v108 = v5.profile;
        if (v108) {
          v109 = performance.now();
          g48.count++;
        }
        v1.useProgram(g110.program);
        v111 = v14.angle_instanced_arrays;
        v11.setVAO(null);
        v114 = g113.location;
        v115 = v10[v114];
        if (!v115.buffer) {
          v1.enableVertexAttribArray(v114);
        }
        v116 = 2;
        if (v115.type !== 5126 || v115.size !== v116 || v115.buffer !== g112 || v115.normalized !== false || v115.offset !== 0 || v115.stride !== 0) {
          v1.bindBuffer(34962, g112.buffer);
          v1.vertexAttribPointer(v114, v116, 5126, false, 0, 0);
          v115.type = 5126;
          v115.size = v116;
          v115.buffer = g112;
          v115.normalized = false;
          v115.offset = 0;
          v115.stride = 0;
        }
        if (v115.divisor !== 0) {
          v111.vertexAttribDivisorANGLE(v114, 0);
          v115.divisor = 0;
        }
        v119 = g118.call(this, v2, a0, 0);
        v1.uniform1f(g117.location, v119);
        v122 = g121.call(this, v2, a0, 0);
        v123 = v122[0];
        v124 = v122[1];
        v1.uniform2f(g120.location, v123, v124);
        v127 = g126.call(this, v2, a0, 0);
        if (v127 && v127._reglType === "framebuffer") {
          v127 = v127.color[0];
        }
        v128 = v127._texture;
        v1.uniform1i(g125.location, v128.bind());
        v131 = g130.call(this, v2, a0, 0);
        v1.uniform1f(g129.location, v131);
        v134 = g133.call(this, v2, a0, 0);
        if (v134 && v134._reglType === "framebuffer") {
          v134 = v134.color[0];
        }
        v135 = v134._texture;
        v1.uniform1i(g132.location, v135.bind());
        v138 = g137.call(this, v2, a0, 0);
        v1.uniform1f(g136.location, v138);
        v141 = g140.call(this, v2, a0, 0);
        v1.uniform1i(g139.location, v141);
        v144 = g143.call(this, v2, a0, 0);
        v145 = v144[0];
        v146 = v144[1];
        v1.uniform2f(g142.location, v145, v146);
        v149 = g148.call(this, v2, a0, 0);
        v1.uniform1f(g147.location, v149);
        v152 = g151.call(this, v2, a0, 0);
        v1.uniform1f(g150.location, v152);
        v155 = g154.call(this, v2, a0, 0);
        v1.uniformMatrix3fv(g153.location, false, Array.isArray(v155) || v155 instanceof Float32Array ? v155 : (v156[0] = v155[0], v156[1] = v155[1], v156[2] = v155[2], v156[3] = v155[3], v156[4] = v155[4], v156[5] = v155[5], v156[6] = v155[6], v156[7] = v155[7], v156[8] = v155[8], v156));
        v157 = v6.elements;
        if (v157) {
          v1.bindBuffer(34963, v157.buffer.buffer);
        } else if (v11.currentVAO) {
          v157 = v7.getElements(v11.currentVAO.elements);
          if (v157)
            v1.bindBuffer(34963, v157.buffer.buffer);
        }
        v158 = v6.offset;
        v160 = g159.call(this, v2, a0, 0);
        if (v160) {
          v161 = v6.instances;
          if (v161 > 0) {
            if (v157) {
              v111.drawElementsInstancedANGLE(0, v160, v157.type, v158 << (v157.type - 5121 >> 1), v161);
            } else {
              v111.drawArraysInstancedANGLE(0, v158, v160, v161);
            }
          } else if (v161 < 0) {
            if (v157) {
              v1.drawElements(0, v160, v157.type, v158 << (v157.type - 5121 >> 1));
            } else {
              v1.drawArrays(0, v158, v160);
            }
          }
          v5.dirty = true;
          v11.setVAO(null);
          v13.next = v53;
          v2.framebufferWidth = v54;
          v2.framebufferHeight = v55;
          v2.viewportWidth = v102;
          v2.viewportHeight = v103;
          if (v108) {
            g48.cpuTime += performance.now() - v109;
          }
          v128.unbind();
          v135.unbind();
        }
      },
      "scope": function(a0, a1, a2) {
        var v162, v163, v164, v165, v166, v167, v168, v169, v170, v172, v174, v175, v176, v178, v180, v181, v182, v184, v186, v187, v188, v189, v190, v191, v192, v194, v195, v197, v198, v200, v201, v203, v204, v206, v207, v209, v210, v212, v213, v215, v216, v218, v219, v221, v222, v224, v225, v227, v229, v230, v231, v232, v233, v234, v235, v236, v237, v238, v239, v240, v242, v244;
        v162 = g50.call(this, v2, a0, a2);
        v163 = v13.getFramebuffer(v162);
        v164 = v13.next;
        v13.next = v163;
        v165 = v2.framebufferWidth;
        v2.framebufferWidth = v163 ? v163.width : v2.drawingBufferWidth;
        v166 = v2.framebufferHeight;
        v2.framebufferHeight = v163 ? v163.height : v2.drawingBufferHeight;
        v167 = v2.framebufferWidth;
        v168 = v2.framebufferHeight;
        v169 = v2.viewportWidth;
        v2.viewportWidth = v167;
        v170 = v2.viewportHeight;
        v2.viewportHeight = v168;
        v172 = v39[0];
        v39[0] = g171;
        v174 = v39[1];
        v39[1] = g173;
        v175 = v39[2];
        v39[2] = v167;
        v176 = v39[3];
        v39[3] = v168;
        v178 = v4.depth_enable;
        v4.depth_enable = g177;
        v180 = v4.depth_mask;
        v4.depth_mask = g179;
        v181 = v2.framebufferWidth;
        v182 = v2.framebufferHeight;
        v184 = v37[0];
        v37[0] = g183;
        v186 = v37[1];
        v37[1] = g185;
        v187 = v37[2];
        v37[2] = v181;
        v188 = v37[3];
        v37[3] = v182;
        v189 = v5.profile;
        if (v189) {
          v190 = performance.now();
          g48.count++;
        }
        v191 = g159.call(this, v2, a0, a2);
        v192 = v6.count;
        v6.count = v191;
        v194 = v6.primitive;
        v6.primitive = g193;
        v195 = g133.call(this, v2, a0, a2);
        v197 = v12[g196];
        v12[g196] = v195;
        v198 = g126.call(this, v2, a0, a2);
        v200 = v12[g199];
        v12[g199] = v198;
        v201 = g137.call(this, v2, a0, a2);
        v203 = v12[g202];
        v12[g202] = v201;
        v204 = g148.call(this, v2, a0, a2);
        v206 = v12[g205];
        v12[g205] = v204;
        v207 = g130.call(this, v2, a0, a2);
        v209 = v12[g208];
        v12[g208] = v207;
        v210 = g154.call(this, v2, a0, a2);
        v212 = v12[g211];
        v12[g211] = v210;
        v213 = g151.call(this, v2, a0, a2);
        v215 = v12[g214];
        v12[g214] = v213;
        v216 = g143.call(this, v2, a0, a2);
        v218 = v12[g217];
        v12[g217] = v216;
        v219 = g140.call(this, v2, a0, a2);
        v221 = v12[g220];
        v12[g220] = v219;
        v222 = g121.call(this, v2, a0, a2);
        v224 = v12[g223];
        v12[g223] = v222;
        v225 = g118.call(this, v2, a0, a2);
        v227 = v12[g226];
        v12[g226] = v225;
        v229 = g228.state;
        g228.state = 1;
        v230 = g228.x;
        g228.x = 0;
        v231 = g228.y;
        g228.y = 0;
        v232 = g228.z;
        g228.z = 0;
        v233 = g228.w;
        g228.w = 0;
        v234 = g228.buffer;
        g228.buffer = g112;
        v235 = g228.size;
        g228.size = 2;
        v236 = g228.normalized;
        g228.normalized = false;
        v237 = g228.type;
        g228.type = 5126;
        v238 = g228.offset;
        g228.offset = 0;
        v239 = g228.stride;
        g228.stride = 0;
        v240 = g228.divisor;
        g228.divisor = 0;
        v242 = v9.vert;
        v9.vert = g241;
        v244 = v9.frag;
        v9.frag = g243;
        v5.dirty = true;
        a1(v2, a0, a2);
        v13.next = v164;
        v2.framebufferWidth = v165;
        v2.framebufferHeight = v166;
        v2.viewportWidth = v169;
        v2.viewportHeight = v170;
        v39[0] = v172;
        v39[1] = v174;
        v39[2] = v175;
        v39[3] = v176;
        v4.depth_enable = v178;
        v4.depth_mask = v180;
        v37[0] = v184;
        v37[1] = v186;
        v37[2] = v187;
        v37[3] = v188;
        if (v189) {
          g48.cpuTime += performance.now() - v190;
        }
        v6.count = v192;
        v6.primitive = v194;
        v12[g196] = v197;
        v12[g199] = v200;
        v12[g202] = v203;
        v12[g205] = v206;
        v12[g208] = v209;
        v12[g211] = v212;
        v12[g214] = v215;
        v12[g217] = v218;
        v12[g220] = v221;
        v12[g223] = v224;
        v12[g226] = v227;
        g228.state = v229;
        g228.x = v230;
        g228.y = v231;
        g228.z = v232;
        g228.w = v233;
        g228.buffer = v234;
        g228.size = v235;
        g228.normalized = v236;
        g228.type = v237;
        g228.offset = v238;
        g228.stride = v239;
        g228.divisor = v240;
        v9.vert = v242;
        v9.frag = v244;
        v5.dirty = true;
      },
      "batch": function(a0, a1) {
        var v246, v247, v248, v249, v250, v295, v296, v297, v298, v301, v302, v303, v304, v305, v306, v307;
        v14.angle_instanced_arrays;
        v246 = g50.call(this, v2, a0, 0);
        v247 = v13.getFramebuffer(v246);
        v248 = v13.next;
        v13.next = v247;
        v249 = v2.framebufferWidth;
        v2.framebufferWidth = v247 ? v247.width : v2.drawingBufferWidth;
        v250 = v2.framebufferHeight;
        v2.framebufferHeight = v247 ? v247.height : v2.drawingBufferHeight;
        if (v247 !== v13.cur) {
          if (v247) {
            v1.bindFramebuffer(36160, v247.framebuffer);
          } else {
            v1.bindFramebuffer(36160, null);
          }
          v13.cur = v247;
        }
        if (v5.dirty) {
          var v251, v252, v253, v254, v255, v256, v257, v258, v259, v260, v261, v262, v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, v280, v281, v282, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294;
          v251 = v4.dither;
          if (v251 !== v5.dither) {
            if (v251) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v251;
          }
          v252 = v4.blend_enable;
          if (v252 !== v5.blend_enable) {
            if (v252) {
              v1.enable(3042);
            } else {
              v1.disable(3042);
            }
            v5.blend_enable = v252;
          }
          v253 = v17[0];
          v254 = v17[1];
          v255 = v17[2];
          v256 = v17[3];
          if (v253 !== v18[0] || v254 !== v18[1] || v255 !== v18[2] || v256 !== v18[3]) {
            v1.blendColor(v253, v254, v255, v256);
            v18[0] = v253;
            v18[1] = v254;
            v18[2] = v255;
            v18[3] = v256;
          }
          v257 = v19[0];
          v258 = v19[1];
          if (v257 !== v20[0] || v258 !== v20[1]) {
            v1.blendEquationSeparate(v257, v258);
            v20[0] = v257;
            v20[1] = v258;
          }
          v259 = v21[0];
          v260 = v21[1];
          v261 = v21[2];
          v262 = v21[3];
          if (v259 !== v22[0] || v260 !== v22[1] || v261 !== v22[2] || v262 !== v22[3]) {
            v1.blendFuncSeparate(v259, v260, v261, v262);
            v22[0] = v259;
            v22[1] = v260;
            v22[2] = v261;
            v22[3] = v262;
          }
          v263 = v4.depth_func;
          if (v263 !== v5.depth_func) {
            v1.depthFunc(v263);
            v5.depth_func = v263;
          }
          v264 = v23[0];
          v265 = v23[1];
          if (v264 !== v24[0] || v265 !== v24[1]) {
            v1.depthRange(v264, v265);
            v24[0] = v264;
            v24[1] = v265;
          }
          v266 = v25[0];
          v267 = v25[1];
          v268 = v25[2];
          v269 = v25[3];
          if (v266 !== v26[0] || v267 !== v26[1] || v268 !== v26[2] || v269 !== v26[3]) {
            v1.colorMask(v266, v267, v268, v269);
            v26[0] = v266;
            v26[1] = v267;
            v26[2] = v268;
            v26[3] = v269;
          }
          v270 = v4.cull_enable;
          if (v270 !== v5.cull_enable) {
            if (v270) {
              v1.enable(2884);
            } else {
              v1.disable(2884);
            }
            v5.cull_enable = v270;
          }
          v271 = v4.cull_face;
          if (v271 !== v5.cull_face) {
            v1.cullFace(v271);
            v5.cull_face = v271;
          }
          v272 = v4.frontFace;
          if (v272 !== v5.frontFace) {
            v1.frontFace(v272);
            v5.frontFace = v272;
          }
          v273 = v4.lineWidth;
          if (v273 !== v5.lineWidth) {
            v1.lineWidth(v273);
            v5.lineWidth = v273;
          }
          v274 = v4.polygonOffset_enable;
          if (v274 !== v5.polygonOffset_enable) {
            if (v274) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v274;
          }
          v275 = v27[0];
          v276 = v27[1];
          if (v275 !== v28[0] || v276 !== v28[1]) {
            v1.polygonOffset(v275, v276);
            v28[0] = v275;
            v28[1] = v276;
          }
          v277 = v4.sample_alpha;
          if (v277 !== v5.sample_alpha) {
            if (v277) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v277;
          }
          v278 = v4.sample_enable;
          if (v278 !== v5.sample_enable) {
            if (v278) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v278;
          }
          v279 = v29[0];
          v280 = v29[1];
          if (v279 !== v30[0] || v280 !== v30[1]) {
            v1.sampleCoverage(v279, v280);
            v30[0] = v279;
            v30[1] = v280;
          }
          v281 = v4.stencil_enable;
          if (v281 !== v5.stencil_enable) {
            if (v281) {
              v1.enable(2960);
            } else {
              v1.disable(2960);
            }
            v5.stencil_enable = v281;
          }
          v282 = v4.stencil_mask;
          if (v282 !== v5.stencil_mask) {
            v1.stencilMask(v282);
            v5.stencil_mask = v282;
          }
          v283 = v31[0];
          v284 = v31[1];
          v285 = v31[2];
          if (v283 !== v32[0] || v284 !== v32[1] || v285 !== v32[2]) {
            v1.stencilFunc(v283, v284, v285);
            v32[0] = v283;
            v32[1] = v284;
            v32[2] = v285;
          }
          v286 = v33[0];
          v287 = v33[1];
          v288 = v33[2];
          v289 = v33[3];
          if (v286 !== v34[0] || v287 !== v34[1] || v288 !== v34[2] || v289 !== v34[3]) {
            v1.stencilOpSeparate(v286, v287, v288, v289);
            v34[0] = v286;
            v34[1] = v287;
            v34[2] = v288;
            v34[3] = v289;
          }
          v290 = v35[0];
          v291 = v35[1];
          v292 = v35[2];
          v293 = v35[3];
          if (v290 !== v36[0] || v291 !== v36[1] || v292 !== v36[2] || v293 !== v36[3]) {
            v1.stencilOpSeparate(v290, v291, v292, v293);
            v36[0] = v290;
            v36[1] = v291;
            v36[2] = v292;
            v36[3] = v293;
          }
          v294 = v4.scissor_enable;
          if (v294 !== v5.scissor_enable) {
            if (v294) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v294;
          }
        }
        v295 = v2.framebufferWidth;
        v296 = v2.framebufferHeight;
        v297 = v2.viewportWidth;
        v2.viewportWidth = v295;
        v298 = v2.viewportHeight;
        v2.viewportHeight = v296;
        v1.viewport(0, 0, v295, v296);
        v40[0] = 0;
        v40[1] = 0;
        v40[2] = v295;
        v40[3] = v296;
        if (g299) {
          v1.enable(2929);
        } else {
          v1.disable(2929);
        }
        v5.depth_enable = g299;
        v1.depthMask(g300);
        v5.depth_mask = g300;
        v301 = v2.framebufferWidth;
        v302 = v2.framebufferHeight;
        v1.scissor(0, 0, v301, v302);
        v38[0] = 0;
        v38[1] = 0;
        v38[2] = v301;
        v38[3] = v302;
        v303 = v5.profile;
        if (v303) {
          v304 = performance.now();
          g48.count += a1;
        }
        v1.useProgram(g110.program);
        v305 = v14.angle_instanced_arrays;
        var v308, v309, v310, v311, v312, v313, v314, v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, v325, v326, v327, v329, v330, v331, v332;
        v11.setVAO(null);
        v308 = g113.location;
        v309 = v10[v308];
        if (!v309.buffer) {
          v1.enableVertexAttribArray(v308);
        }
        v310 = 2;
        if (v309.type !== 5126 || v309.size !== v310 || v309.buffer !== g112 || v309.normalized !== false || v309.offset !== 0 || v309.stride !== 0) {
          v1.bindBuffer(34962, g112.buffer);
          v1.vertexAttribPointer(v308, v310, 5126, false, 0, 0);
          v309.type = 5126;
          v309.size = v310;
          v309.buffer = g112;
          v309.normalized = false;
          v309.offset = 0;
          v309.stride = 0;
        }
        if (v309.divisor !== 0) {
          v305.vertexAttribDivisorANGLE(v308, 0);
          v309.divisor = 0;
        }
        v311 = g118.call(this, v2, v307, v306);
        v1.uniform1f(g117.location, v311);
        v312 = g121.call(this, v2, v307, v306);
        v313 = v312[0];
        v314 = v312[1];
        v1.uniform2f(g120.location, v313, v314);
        v315 = g126.call(this, v2, v307, v306);
        if (v315 && v315._reglType === "framebuffer") {
          v315 = v315.color[0];
        }
        v316 = v315._texture;
        v1.uniform1i(g125.location, v316.bind());
        v317 = g130.call(this, v2, v307, v306);
        v1.uniform1f(g129.location, v317);
        v318 = g133.call(this, v2, v307, v306);
        if (v318 && v318._reglType === "framebuffer") {
          v318 = v318.color[0];
        }
        v319 = v318._texture;
        v1.uniform1i(g132.location, v319.bind());
        v320 = g137.call(this, v2, v307, v306);
        v1.uniform1f(g136.location, v320);
        v321 = g140.call(this, v2, v307, v306);
        v1.uniform1i(g139.location, v321);
        v322 = g143.call(this, v2, v307, v306);
        v323 = v322[0];
        v324 = v322[1];
        v1.uniform2f(g142.location, v323, v324);
        v325 = g148.call(this, v2, v307, v306);
        v1.uniform1f(g147.location, v325);
        v326 = g151.call(this, v2, v307, v306);
        v1.uniform1f(g150.location, v326);
        v327 = g154.call(this, v2, v307, v306);
        v1.uniformMatrix3fv(g153.location, false, Array.isArray(v327) || v327 instanceof Float32Array ? v327 : (v328[0] = v327[0], v328[1] = v327[1], v328[2] = v327[2], v328[3] = v327[3], v328[4] = v327[4], v328[5] = v327[5], v328[6] = v327[6], v328[7] = v327[7], v328[8] = v327[8], v328));
        v329 = v6.elements;
        if (v329) {
          v1.bindBuffer(34963, v329.buffer.buffer);
        } else if (v11.currentVAO) {
          v329 = v7.getElements(v11.currentVAO.elements);
          if (v329)
            v1.bindBuffer(34963, v329.buffer.buffer);
        }
        v330 = v6.offset;
        v331 = g159.call(this, v2, v307, v306);
        v332 = v6.instances;
        for (v306 = 0; v306 < a1; ++v306) {
          v307 = a0[v306];
          if (v331) {
            if (v332 > 0) {
              if (v329) {
                v305.drawElementsInstancedANGLE(0, v331, v329.type, v330 << (v329.type - 5121 >> 1), v332);
              } else {
                v305.drawArraysInstancedANGLE(0, v330, v331, v332);
              }
            } else if (v332 < 0) {
              if (v329) {
                v1.drawElements(0, v331, v329.type, v330 << (v329.type - 5121 >> 1));
              } else {
                v1.drawArrays(0, v330, v331);
              }
            }
          }
        }
        v316.unbind();
        v319.unbind();
        v5.dirty = true;
        v11.setVAO(null);
        v13.next = v248;
        v2.framebufferWidth = v249;
        v2.framebufferHeight = v250;
        v2.viewportWidth = v297;
        v2.viewportHeight = v298;
        if (v303) {
          g48.cpuTime += performance.now() - v304;
        }
      }
    };
  },
  "3656ddc8a124213dd6cc380663c06f93d2eb875ec39b2fabe1227101650ec654": function anonymous9(g0, g48, g50, g110, g112, g113, g129, g131, g137, g139, g145, g147, g149, g162, g164) {
    var v1, v2, v4, v5, v6, v7, v9, v10, v11, v13, v14, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40;
    v1 = g0.gl;
    v2 = g0.context;
    g0.strings;
    v4 = g0.next;
    v5 = g0.current;
    v6 = g0.draw;
    v7 = g0.elements;
    g0.buffer;
    v9 = g0.shader;
    v10 = g0.attributes;
    v11 = g0.vao;
    g0.uniforms;
    v13 = g0.framebuffer;
    v14 = g0.extensions;
    g0.timer;
    g0.isBufferArgs;
    v17 = v4.blend_color;
    v18 = v5.blend_color;
    v19 = v4.blend_equation;
    v20 = v5.blend_equation;
    v21 = v4.blend_func;
    v22 = v5.blend_func;
    v23 = v4.depth_range;
    v24 = v5.depth_range;
    v25 = v4.colorMask;
    v26 = v5.colorMask;
    v27 = v4.polygonOffset_offset;
    v28 = v5.polygonOffset_offset;
    v29 = v4.sample_coverage;
    v30 = v5.sample_coverage;
    v31 = v4.stencil_func;
    v32 = v5.stencil_func;
    v33 = v4.stencil_opFront;
    v34 = v5.stencil_opFront;
    v35 = v4.stencil_opBack;
    v36 = v5.stencil_opBack;
    v37 = v4.scissor_box;
    v38 = v5.scissor_box;
    v39 = v4.viewport;
    v40 = v5.viewport;
    return {
      "draw": function(a0) {
        var v51, v52, v53, v54, v55, v102, v103, v104, v105, v106, v107, v108, v109, v111, v114, v115, v116, v117, v118, v119;
        v14.angle_instanced_arrays;
        v51 = g50.call(this, v2, a0, 0);
        v52 = v13.getFramebuffer(v51);
        v53 = v13.next;
        v13.next = v52;
        v54 = v2.framebufferWidth;
        v2.framebufferWidth = v52 ? v52.width : v2.drawingBufferWidth;
        v55 = v2.framebufferHeight;
        v2.framebufferHeight = v52 ? v52.height : v2.drawingBufferHeight;
        if (v52 !== v13.cur) {
          if (v52) {
            v1.bindFramebuffer(36160, v52.framebuffer);
          } else {
            v1.bindFramebuffer(36160, null);
          }
          v13.cur = v52;
        }
        if (v5.dirty) {
          var v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, v100, v101;
          v56 = v4.dither;
          if (v56 !== v5.dither) {
            if (v56) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v56;
          }
          v57 = v4.blend_enable;
          if (v57 !== v5.blend_enable) {
            if (v57) {
              v1.enable(3042);
            } else {
              v1.disable(3042);
            }
            v5.blend_enable = v57;
          }
          v58 = v17[0];
          v59 = v17[1];
          v60 = v17[2];
          v61 = v17[3];
          if (v58 !== v18[0] || v59 !== v18[1] || v60 !== v18[2] || v61 !== v18[3]) {
            v1.blendColor(v58, v59, v60, v61);
            v18[0] = v58;
            v18[1] = v59;
            v18[2] = v60;
            v18[3] = v61;
          }
          v62 = v19[0];
          v63 = v19[1];
          if (v62 !== v20[0] || v63 !== v20[1]) {
            v1.blendEquationSeparate(v62, v63);
            v20[0] = v62;
            v20[1] = v63;
          }
          v64 = v21[0];
          v65 = v21[1];
          v66 = v21[2];
          v67 = v21[3];
          if (v64 !== v22[0] || v65 !== v22[1] || v66 !== v22[2] || v67 !== v22[3]) {
            v1.blendFuncSeparate(v64, v65, v66, v67);
            v22[0] = v64;
            v22[1] = v65;
            v22[2] = v66;
            v22[3] = v67;
          }
          v68 = v4.depth_enable;
          if (v68 !== v5.depth_enable) {
            if (v68) {
              v1.enable(2929);
            } else {
              v1.disable(2929);
            }
            v5.depth_enable = v68;
          }
          v69 = v4.depth_func;
          if (v69 !== v5.depth_func) {
            v1.depthFunc(v69);
            v5.depth_func = v69;
          }
          v70 = v23[0];
          v71 = v23[1];
          if (v70 !== v24[0] || v71 !== v24[1]) {
            v1.depthRange(v70, v71);
            v24[0] = v70;
            v24[1] = v71;
          }
          v72 = v4.depth_mask;
          if (v72 !== v5.depth_mask) {
            v1.depthMask(v72);
            v5.depth_mask = v72;
          }
          v73 = v25[0];
          v74 = v25[1];
          v75 = v25[2];
          v76 = v25[3];
          if (v73 !== v26[0] || v74 !== v26[1] || v75 !== v26[2] || v76 !== v26[3]) {
            v1.colorMask(v73, v74, v75, v76);
            v26[0] = v73;
            v26[1] = v74;
            v26[2] = v75;
            v26[3] = v76;
          }
          v77 = v4.cull_enable;
          if (v77 !== v5.cull_enable) {
            if (v77) {
              v1.enable(2884);
            } else {
              v1.disable(2884);
            }
            v5.cull_enable = v77;
          }
          v78 = v4.cull_face;
          if (v78 !== v5.cull_face) {
            v1.cullFace(v78);
            v5.cull_face = v78;
          }
          v79 = v4.frontFace;
          if (v79 !== v5.frontFace) {
            v1.frontFace(v79);
            v5.frontFace = v79;
          }
          v80 = v4.lineWidth;
          if (v80 !== v5.lineWidth) {
            v1.lineWidth(v80);
            v5.lineWidth = v80;
          }
          v81 = v4.polygonOffset_enable;
          if (v81 !== v5.polygonOffset_enable) {
            if (v81) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v81;
          }
          v82 = v27[0];
          v83 = v27[1];
          if (v82 !== v28[0] || v83 !== v28[1]) {
            v1.polygonOffset(v82, v83);
            v28[0] = v82;
            v28[1] = v83;
          }
          v84 = v4.sample_alpha;
          if (v84 !== v5.sample_alpha) {
            if (v84) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v84;
          }
          v85 = v4.sample_enable;
          if (v85 !== v5.sample_enable) {
            if (v85) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v85;
          }
          v86 = v29[0];
          v87 = v29[1];
          if (v86 !== v30[0] || v87 !== v30[1]) {
            v1.sampleCoverage(v86, v87);
            v30[0] = v86;
            v30[1] = v87;
          }
          v88 = v4.stencil_enable;
          if (v88 !== v5.stencil_enable) {
            if (v88) {
              v1.enable(2960);
            } else {
              v1.disable(2960);
            }
            v5.stencil_enable = v88;
          }
          v89 = v4.stencil_mask;
          if (v89 !== v5.stencil_mask) {
            v1.stencilMask(v89);
            v5.stencil_mask = v89;
          }
          v90 = v31[0];
          v91 = v31[1];
          v92 = v31[2];
          if (v90 !== v32[0] || v91 !== v32[1] || v92 !== v32[2]) {
            v1.stencilFunc(v90, v91, v92);
            v32[0] = v90;
            v32[1] = v91;
            v32[2] = v92;
          }
          v93 = v33[0];
          v94 = v33[1];
          v95 = v33[2];
          v96 = v33[3];
          if (v93 !== v34[0] || v94 !== v34[1] || v95 !== v34[2] || v96 !== v34[3]) {
            v1.stencilOpSeparate(v93, v94, v95, v96);
            v34[0] = v93;
            v34[1] = v94;
            v34[2] = v95;
            v34[3] = v96;
          }
          v97 = v35[0];
          v98 = v35[1];
          v99 = v35[2];
          v100 = v35[3];
          if (v97 !== v36[0] || v98 !== v36[1] || v99 !== v36[2] || v100 !== v36[3]) {
            v1.stencilOpSeparate(v97, v98, v99, v100);
            v36[0] = v97;
            v36[1] = v98;
            v36[2] = v99;
            v36[3] = v100;
          }
          v101 = v4.scissor_enable;
          if (v101 !== v5.scissor_enable) {
            if (v101) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v101;
          }
        }
        v102 = v2.framebufferWidth;
        v103 = v2.framebufferHeight;
        v104 = v2.viewportWidth;
        v2.viewportWidth = v102;
        v105 = v2.viewportHeight;
        v2.viewportHeight = v103;
        v1.viewport(0, 0, v102, v103);
        v40[0] = 0;
        v40[1] = 0;
        v40[2] = v102;
        v40[3] = v103;
        v106 = v2.framebufferWidth;
        v107 = v2.framebufferHeight;
        v1.scissor(0, 0, v106, v107);
        v38[0] = 0;
        v38[1] = 0;
        v38[2] = v106;
        v38[3] = v107;
        v108 = v5.profile;
        if (v108) {
          v109 = performance.now();
          g48.count++;
        }
        v1.useProgram(g110.program);
        v111 = v14.angle_instanced_arrays;
        v11.setVAO(null);
        v114 = g113.location;
        v115 = v10[v114];
        if (!v115.buffer) {
          v1.enableVertexAttribArray(v114);
        }
        v116 = 2;
        if (v115.type !== 5126 || v115.size !== v116 || v115.buffer !== g112 || v115.normalized !== false || v115.offset !== 0 || v115.stride !== 0) {
          v1.bindBuffer(34962, g112.buffer);
          v1.vertexAttribPointer(v114, v116, 5126, false, 0, 0);
          v115.type = 5126;
          v115.size = v116;
          v115.buffer = g112;
          v115.normalized = false;
          v115.offset = 0;
          v115.stride = 0;
        }
        if (v115.divisor !== 0) {
          v111.vertexAttribDivisorANGLE(v114, 0);
          v115.divisor = 0;
        }
        v117 = v6.elements;
        if (v117) {
          v1.bindBuffer(34963, v117.buffer.buffer);
        } else if (v11.currentVAO) {
          v117 = v7.getElements(v11.currentVAO.elements);
          if (v117)
            v1.bindBuffer(34963, v117.buffer.buffer);
        }
        v118 = v6.offset;
        v119 = v6.instances;
        if (v119 > 0) {
          if (v117) {
            v111.drawElementsInstancedANGLE(5, 4, v117.type, v118 << (v117.type - 5121 >> 1), v119);
          } else {
            v111.drawArraysInstancedANGLE(5, v118, 4, v119);
          }
        } else if (v119 < 0) {
          if (v117) {
            v1.drawElements(5, 4, v117.type, v118 << (v117.type - 5121 >> 1));
          } else {
            v1.drawArrays(5, v118, 4);
          }
        }
        v5.dirty = true;
        v11.setVAO(null);
        v13.next = v53;
        v2.framebufferWidth = v54;
        v2.framebufferHeight = v55;
        v2.viewportWidth = v104;
        v2.viewportHeight = v105;
        if (v108) {
          g48.cpuTime += performance.now() - v109;
        }
      },
      "scope": function(a0, a1, a2) {
        var v120, v121, v122, v123, v124, v125, v126, v127, v128, v130, v132, v133, v134, v135, v136, v138, v140, v141, v142, v143, v144, v146, v148, v150, v151, v152, v153, v154, v155, v156, v157, v158, v159, v160, v161, v163, v165;
        v120 = g50.call(this, v2, a0, a2);
        v121 = v13.getFramebuffer(v120);
        v122 = v13.next;
        v13.next = v121;
        v123 = v2.framebufferWidth;
        v2.framebufferWidth = v121 ? v121.width : v2.drawingBufferWidth;
        v124 = v2.framebufferHeight;
        v2.framebufferHeight = v121 ? v121.height : v2.drawingBufferHeight;
        v125 = v2.framebufferWidth;
        v126 = v2.framebufferHeight;
        v127 = v2.viewportWidth;
        v2.viewportWidth = v125;
        v128 = v2.viewportHeight;
        v2.viewportHeight = v126;
        v130 = v39[0];
        v39[0] = g129;
        v132 = v39[1];
        v39[1] = g131;
        v133 = v39[2];
        v39[2] = v125;
        v134 = v39[3];
        v39[3] = v126;
        v135 = v2.framebufferWidth;
        v136 = v2.framebufferHeight;
        v138 = v37[0];
        v37[0] = g137;
        v140 = v37[1];
        v37[1] = g139;
        v141 = v37[2];
        v37[2] = v135;
        v142 = v37[3];
        v37[3] = v136;
        v143 = v5.profile;
        if (v143) {
          v144 = performance.now();
          g48.count++;
        }
        v146 = v6.count;
        v6.count = g145;
        v148 = v6.primitive;
        v6.primitive = g147;
        v150 = g149.state;
        g149.state = 1;
        v151 = g149.x;
        g149.x = 0;
        v152 = g149.y;
        g149.y = 0;
        v153 = g149.z;
        g149.z = 0;
        v154 = g149.w;
        g149.w = 0;
        v155 = g149.buffer;
        g149.buffer = g112;
        v156 = g149.size;
        g149.size = 2;
        v157 = g149.normalized;
        g149.normalized = false;
        v158 = g149.type;
        g149.type = 5126;
        v159 = g149.offset;
        g149.offset = 0;
        v160 = g149.stride;
        g149.stride = 0;
        v161 = g149.divisor;
        g149.divisor = 0;
        v163 = v9.vert;
        v9.vert = g162;
        v165 = v9.frag;
        v9.frag = g164;
        v5.dirty = true;
        a1(v2, a0, a2);
        v13.next = v122;
        v2.framebufferWidth = v123;
        v2.framebufferHeight = v124;
        v2.viewportWidth = v127;
        v2.viewportHeight = v128;
        v39[0] = v130;
        v39[1] = v132;
        v39[2] = v133;
        v39[3] = v134;
        v37[0] = v138;
        v37[1] = v140;
        v37[2] = v141;
        v37[3] = v142;
        if (v143) {
          g48.cpuTime += performance.now() - v144;
        }
        v6.count = v146;
        v6.primitive = v148;
        g149.state = v150;
        g149.x = v151;
        g149.y = v152;
        g149.z = v153;
        g149.w = v154;
        g149.buffer = v155;
        g149.size = v156;
        g149.normalized = v157;
        g149.type = v158;
        g149.offset = v159;
        g149.stride = v160;
        g149.divisor = v161;
        v9.vert = v163;
        v9.frag = v165;
        v5.dirty = true;
      },
      "batch": function(a0, a1) {
        var v167, v168, v169, v170, v171, v218, v219, v220, v221, v222, v223, v224, v225, v226, v227;
        v14.angle_instanced_arrays;
        v167 = g50.call(this, v2, a0, 0);
        v168 = v13.getFramebuffer(v167);
        v169 = v13.next;
        v13.next = v168;
        v170 = v2.framebufferWidth;
        v2.framebufferWidth = v168 ? v168.width : v2.drawingBufferWidth;
        v171 = v2.framebufferHeight;
        v2.framebufferHeight = v168 ? v168.height : v2.drawingBufferHeight;
        if (v168 !== v13.cur) {
          if (v168) {
            v1.bindFramebuffer(36160, v168.framebuffer);
          } else {
            v1.bindFramebuffer(36160, null);
          }
          v13.cur = v168;
        }
        if (v5.dirty) {
          var v172, v173, v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v216, v217;
          v172 = v4.dither;
          if (v172 !== v5.dither) {
            if (v172) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v172;
          }
          v173 = v4.blend_enable;
          if (v173 !== v5.blend_enable) {
            if (v173) {
              v1.enable(3042);
            } else {
              v1.disable(3042);
            }
            v5.blend_enable = v173;
          }
          v174 = v17[0];
          v175 = v17[1];
          v176 = v17[2];
          v177 = v17[3];
          if (v174 !== v18[0] || v175 !== v18[1] || v176 !== v18[2] || v177 !== v18[3]) {
            v1.blendColor(v174, v175, v176, v177);
            v18[0] = v174;
            v18[1] = v175;
            v18[2] = v176;
            v18[3] = v177;
          }
          v178 = v19[0];
          v179 = v19[1];
          if (v178 !== v20[0] || v179 !== v20[1]) {
            v1.blendEquationSeparate(v178, v179);
            v20[0] = v178;
            v20[1] = v179;
          }
          v180 = v21[0];
          v181 = v21[1];
          v182 = v21[2];
          v183 = v21[3];
          if (v180 !== v22[0] || v181 !== v22[1] || v182 !== v22[2] || v183 !== v22[3]) {
            v1.blendFuncSeparate(v180, v181, v182, v183);
            v22[0] = v180;
            v22[1] = v181;
            v22[2] = v182;
            v22[3] = v183;
          }
          v184 = v4.depth_enable;
          if (v184 !== v5.depth_enable) {
            if (v184) {
              v1.enable(2929);
            } else {
              v1.disable(2929);
            }
            v5.depth_enable = v184;
          }
          v185 = v4.depth_func;
          if (v185 !== v5.depth_func) {
            v1.depthFunc(v185);
            v5.depth_func = v185;
          }
          v186 = v23[0];
          v187 = v23[1];
          if (v186 !== v24[0] || v187 !== v24[1]) {
            v1.depthRange(v186, v187);
            v24[0] = v186;
            v24[1] = v187;
          }
          v188 = v4.depth_mask;
          if (v188 !== v5.depth_mask) {
            v1.depthMask(v188);
            v5.depth_mask = v188;
          }
          v189 = v25[0];
          v190 = v25[1];
          v191 = v25[2];
          v192 = v25[3];
          if (v189 !== v26[0] || v190 !== v26[1] || v191 !== v26[2] || v192 !== v26[3]) {
            v1.colorMask(v189, v190, v191, v192);
            v26[0] = v189;
            v26[1] = v190;
            v26[2] = v191;
            v26[3] = v192;
          }
          v193 = v4.cull_enable;
          if (v193 !== v5.cull_enable) {
            if (v193) {
              v1.enable(2884);
            } else {
              v1.disable(2884);
            }
            v5.cull_enable = v193;
          }
          v194 = v4.cull_face;
          if (v194 !== v5.cull_face) {
            v1.cullFace(v194);
            v5.cull_face = v194;
          }
          v195 = v4.frontFace;
          if (v195 !== v5.frontFace) {
            v1.frontFace(v195);
            v5.frontFace = v195;
          }
          v196 = v4.lineWidth;
          if (v196 !== v5.lineWidth) {
            v1.lineWidth(v196);
            v5.lineWidth = v196;
          }
          v197 = v4.polygonOffset_enable;
          if (v197 !== v5.polygonOffset_enable) {
            if (v197) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v197;
          }
          v198 = v27[0];
          v199 = v27[1];
          if (v198 !== v28[0] || v199 !== v28[1]) {
            v1.polygonOffset(v198, v199);
            v28[0] = v198;
            v28[1] = v199;
          }
          v200 = v4.sample_alpha;
          if (v200 !== v5.sample_alpha) {
            if (v200) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v200;
          }
          v201 = v4.sample_enable;
          if (v201 !== v5.sample_enable) {
            if (v201) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v201;
          }
          v202 = v29[0];
          v203 = v29[1];
          if (v202 !== v30[0] || v203 !== v30[1]) {
            v1.sampleCoverage(v202, v203);
            v30[0] = v202;
            v30[1] = v203;
          }
          v204 = v4.stencil_enable;
          if (v204 !== v5.stencil_enable) {
            if (v204) {
              v1.enable(2960);
            } else {
              v1.disable(2960);
            }
            v5.stencil_enable = v204;
          }
          v205 = v4.stencil_mask;
          if (v205 !== v5.stencil_mask) {
            v1.stencilMask(v205);
            v5.stencil_mask = v205;
          }
          v206 = v31[0];
          v207 = v31[1];
          v208 = v31[2];
          if (v206 !== v32[0] || v207 !== v32[1] || v208 !== v32[2]) {
            v1.stencilFunc(v206, v207, v208);
            v32[0] = v206;
            v32[1] = v207;
            v32[2] = v208;
          }
          v209 = v33[0];
          v210 = v33[1];
          v211 = v33[2];
          v212 = v33[3];
          if (v209 !== v34[0] || v210 !== v34[1] || v211 !== v34[2] || v212 !== v34[3]) {
            v1.stencilOpSeparate(v209, v210, v211, v212);
            v34[0] = v209;
            v34[1] = v210;
            v34[2] = v211;
            v34[3] = v212;
          }
          v213 = v35[0];
          v214 = v35[1];
          v215 = v35[2];
          v216 = v35[3];
          if (v213 !== v36[0] || v214 !== v36[1] || v215 !== v36[2] || v216 !== v36[3]) {
            v1.stencilOpSeparate(v213, v214, v215, v216);
            v36[0] = v213;
            v36[1] = v214;
            v36[2] = v215;
            v36[3] = v216;
          }
          v217 = v4.scissor_enable;
          if (v217 !== v5.scissor_enable) {
            if (v217) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v217;
          }
        }
        v218 = v2.framebufferWidth;
        v219 = v2.framebufferHeight;
        v220 = v2.viewportWidth;
        v2.viewportWidth = v218;
        v221 = v2.viewportHeight;
        v2.viewportHeight = v219;
        v1.viewport(0, 0, v218, v219);
        v40[0] = 0;
        v40[1] = 0;
        v40[2] = v218;
        v40[3] = v219;
        v222 = v2.framebufferWidth;
        v223 = v2.framebufferHeight;
        v1.scissor(0, 0, v222, v223);
        v38[0] = 0;
        v38[1] = 0;
        v38[2] = v222;
        v38[3] = v223;
        v224 = v5.profile;
        if (v224) {
          v225 = performance.now();
          g48.count += a1;
        }
        v1.useProgram(g110.program);
        v226 = v14.angle_instanced_arrays;
        var v229, v230, v231, v232, v233, v234;
        v11.setVAO(null);
        v229 = g113.location;
        v230 = v10[v229];
        if (!v230.buffer) {
          v1.enableVertexAttribArray(v229);
        }
        v231 = 2;
        if (v230.type !== 5126 || v230.size !== v231 || v230.buffer !== g112 || v230.normalized !== false || v230.offset !== 0 || v230.stride !== 0) {
          v1.bindBuffer(34962, g112.buffer);
          v1.vertexAttribPointer(v229, v231, 5126, false, 0, 0);
          v230.type = 5126;
          v230.size = v231;
          v230.buffer = g112;
          v230.normalized = false;
          v230.offset = 0;
          v230.stride = 0;
        }
        if (v230.divisor !== 0) {
          v226.vertexAttribDivisorANGLE(v229, 0);
          v230.divisor = 0;
        }
        v232 = v6.elements;
        if (v232) {
          v1.bindBuffer(34963, v232.buffer.buffer);
        } else if (v11.currentVAO) {
          v232 = v7.getElements(v11.currentVAO.elements);
          if (v232)
            v1.bindBuffer(34963, v232.buffer.buffer);
        }
        v233 = v6.offset;
        v234 = v6.instances;
        for (v227 = 0; v227 < a1; ++v227) {
          a0[v227];
          if (v234 > 0) {
            if (v232) {
              v226.drawElementsInstancedANGLE(5, 4, v232.type, v233 << (v232.type - 5121 >> 1), v234);
            } else {
              v226.drawArraysInstancedANGLE(5, v233, 4, v234);
            }
          } else if (v234 < 0) {
            if (v232) {
              v1.drawElements(5, 4, v232.type, v233 << (v232.type - 5121 >> 1));
            } else {
              v1.drawArrays(5, v233, 4);
            }
          }
        }
        v5.dirty = true;
        v11.setVAO(null);
        v13.next = v169;
        v2.framebufferWidth = v170;
        v2.framebufferHeight = v171;
        v2.viewportWidth = v220;
        v2.viewportHeight = v221;
        if (v224) {
          g48.cpuTime += performance.now() - v225;
        }
      }
    };
  },
  "99397aae3c42f297df7b4b923ad2ed8869ec3d788ec7b7573ba53bc3447a1a81": function anonymous10(g0, g48, g96, g97, g98, g101, g103, g104, g108, g114, g115, g117, g118, g120, g121, g124, g125, g128, g129, g132, g134, g135, g137, g138, g141, g142, g144, g145, g149, g150, g152, g153, g155, g156, g159, g164, g166, g168, g170, g172, g174, g176, g178, g180, g184, g186, g189, g192, g195, g198, g201, g204, g207, g210, g213, g216, g219, g222, g225, g228, g231, g233, g246, g248, g297, g298, g299) {
    var v1, v2, v4, v5, v6, v7, v9, v10, v11, v12, v13, v14, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v158, v326;
    v1 = g0.gl;
    v2 = g0.context;
    g0.strings;
    v4 = g0.next;
    v5 = g0.current;
    v6 = g0.draw;
    v7 = g0.elements;
    g0.buffer;
    v9 = g0.shader;
    v10 = g0.attributes;
    v11 = g0.vao;
    v12 = g0.uniforms;
    v13 = g0.framebuffer;
    v14 = g0.extensions;
    g0.timer;
    g0.isBufferArgs;
    v17 = v4.blend_color;
    v18 = v5.blend_color;
    v19 = v4.blend_equation;
    v20 = v5.blend_equation;
    v21 = v4.blend_func;
    v22 = v5.blend_func;
    v23 = v4.depth_range;
    v24 = v5.depth_range;
    v25 = v4.colorMask;
    v26 = v5.colorMask;
    v27 = v4.polygonOffset_offset;
    v28 = v5.polygonOffset_offset;
    v29 = v4.sample_coverage;
    v30 = v5.sample_coverage;
    v31 = v4.stencil_func;
    v32 = v5.stencil_func;
    v33 = v4.stencil_opFront;
    v34 = v5.stencil_opFront;
    v35 = v4.stencil_opBack;
    v36 = v5.stencil_opBack;
    v37 = v4.scissor_box;
    v38 = v5.scissor_box;
    v39 = v4.viewport;
    v40 = v5.viewport;
    v158 = new Float32Array(9);
    v326 = new Float32Array(9);
    return {
      "draw": function(a0) {
        var v50, v99, v100, v102, v105, v106, v107, v109, v110, v111, v112, v113, v116, v119, v122, v123, v126, v127, v130, v131, v133, v136, v139, v140, v143, v146, v147, v148, v151, v154, v157, v160, v161, v162, v163;
        v14.angle_instanced_arrays;
        v50 = v13.next;
        if (v50 !== v13.cur) {
          if (v50) {
            v1.bindFramebuffer(36160, v50.framebuffer);
          } else {
            v1.bindFramebuffer(36160, null);
          }
          v13.cur = v50;
        }
        if (v5.dirty) {
          var v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90, v91, v92, v93, v94, v95;
          v51 = v4.dither;
          if (v51 !== v5.dither) {
            if (v51) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v51;
          }
          v52 = v17[0];
          v53 = v17[1];
          v54 = v17[2];
          v55 = v17[3];
          if (v52 !== v18[0] || v53 !== v18[1] || v54 !== v18[2] || v55 !== v18[3]) {
            v1.blendColor(v52, v53, v54, v55);
            v18[0] = v52;
            v18[1] = v53;
            v18[2] = v54;
            v18[3] = v55;
          }
          v56 = v4.depth_func;
          if (v56 !== v5.depth_func) {
            v1.depthFunc(v56);
            v5.depth_func = v56;
          }
          v57 = v23[0];
          v58 = v23[1];
          if (v57 !== v24[0] || v58 !== v24[1]) {
            v1.depthRange(v57, v58);
            v24[0] = v57;
            v24[1] = v58;
          }
          v59 = v25[0];
          v60 = v25[1];
          v61 = v25[2];
          v62 = v25[3];
          if (v59 !== v26[0] || v60 !== v26[1] || v61 !== v26[2] || v62 !== v26[3]) {
            v1.colorMask(v59, v60, v61, v62);
            v26[0] = v59;
            v26[1] = v60;
            v26[2] = v61;
            v26[3] = v62;
          }
          v63 = v4.cull_enable;
          if (v63 !== v5.cull_enable) {
            if (v63) {
              v1.enable(2884);
            } else {
              v1.disable(2884);
            }
            v5.cull_enable = v63;
          }
          v64 = v4.cull_face;
          if (v64 !== v5.cull_face) {
            v1.cullFace(v64);
            v5.cull_face = v64;
          }
          v65 = v4.frontFace;
          if (v65 !== v5.frontFace) {
            v1.frontFace(v65);
            v5.frontFace = v65;
          }
          v66 = v4.lineWidth;
          if (v66 !== v5.lineWidth) {
            v1.lineWidth(v66);
            v5.lineWidth = v66;
          }
          v67 = v4.polygonOffset_enable;
          if (v67 !== v5.polygonOffset_enable) {
            if (v67) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v67;
          }
          v68 = v27[0];
          v69 = v27[1];
          if (v68 !== v28[0] || v69 !== v28[1]) {
            v1.polygonOffset(v68, v69);
            v28[0] = v68;
            v28[1] = v69;
          }
          v70 = v4.sample_alpha;
          if (v70 !== v5.sample_alpha) {
            if (v70) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v70;
          }
          v71 = v4.sample_enable;
          if (v71 !== v5.sample_enable) {
            if (v71) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v71;
          }
          v72 = v29[0];
          v73 = v29[1];
          if (v72 !== v30[0] || v73 !== v30[1]) {
            v1.sampleCoverage(v72, v73);
            v30[0] = v72;
            v30[1] = v73;
          }
          v74 = v4.stencil_enable;
          if (v74 !== v5.stencil_enable) {
            if (v74) {
              v1.enable(2960);
            } else {
              v1.disable(2960);
            }
            v5.stencil_enable = v74;
          }
          v75 = v4.stencil_mask;
          if (v75 !== v5.stencil_mask) {
            v1.stencilMask(v75);
            v5.stencil_mask = v75;
          }
          v76 = v31[0];
          v77 = v31[1];
          v78 = v31[2];
          if (v76 !== v32[0] || v77 !== v32[1] || v78 !== v32[2]) {
            v1.stencilFunc(v76, v77, v78);
            v32[0] = v76;
            v32[1] = v77;
            v32[2] = v78;
          }
          v79 = v33[0];
          v80 = v33[1];
          v81 = v33[2];
          v82 = v33[3];
          if (v79 !== v34[0] || v80 !== v34[1] || v81 !== v34[2] || v82 !== v34[3]) {
            v1.stencilOpSeparate(v79, v80, v81, v82);
            v34[0] = v79;
            v34[1] = v80;
            v34[2] = v81;
            v34[3] = v82;
          }
          v83 = v35[0];
          v84 = v35[1];
          v85 = v35[2];
          v86 = v35[3];
          if (v83 !== v36[0] || v84 !== v36[1] || v85 !== v36[2] || v86 !== v36[3]) {
            v1.stencilOpSeparate(v83, v84, v85, v86);
            v36[0] = v83;
            v36[1] = v84;
            v36[2] = v85;
            v36[3] = v86;
          }
          v87 = v4.scissor_enable;
          if (v87 !== v5.scissor_enable) {
            if (v87) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v87;
          }
          v88 = v37[0];
          v89 = v37[1];
          v90 = v37[2];
          v91 = v37[3];
          if (v88 !== v38[0] || v89 !== v38[1] || v90 !== v38[2] || v91 !== v38[3]) {
            v1.scissor(v88, v89, v90, v91);
            v38[0] = v88;
            v38[1] = v89;
            v38[2] = v90;
            v38[3] = v91;
          }
          v92 = v39[0];
          v93 = v39[1];
          v94 = v39[2];
          v95 = v39[3];
          if (v92 !== v40[0] || v93 !== v40[1] || v94 !== v40[2] || v95 !== v40[3]) {
            v1.viewport(v92, v93, v94, v95);
            v40[0] = v92;
            v40[1] = v93;
            v40[2] = v94;
            v40[3] = v95;
          }
        }
        if (g96) {
          v1.enable(3042);
        } else {
          v1.disable(3042);
        }
        v5.blend_enable = g96;
        v1.blendEquationSeparate(32774, 32774);
        v20[0] = 32774;
        v20[1] = 32774;
        v1.blendFuncSeparate(770, 771, 1, 771);
        v22[0] = 770;
        v22[1] = 771;
        v22[2] = 1;
        v22[3] = 771;
        if (g97) {
          v1.enable(2929);
        } else {
          v1.disable(2929);
        }
        v5.depth_enable = g97;
        v1.depthMask(g98);
        v5.depth_mask = g98;
        v99 = v5.profile;
        if (v99) {
          v100 = performance.now();
          g48.count++;
        }
        v1.useProgram(g101.program);
        v102 = v14.angle_instanced_arrays;
        v11.setVAO(null);
        v105 = g104.location;
        v106 = v10[v105];
        if (!v106.buffer) {
          v1.enableVertexAttribArray(v105);
        }
        v107 = 2;
        if (v106.type !== 5126 || v106.size !== v107 || v106.buffer !== g103 || v106.normalized !== false || v106.offset !== 0 || v106.stride !== 0) {
          v1.bindBuffer(34962, g103.buffer);
          v1.vertexAttribPointer(v105, v107, 5126, false, 0, 0);
          v106.type = 5126;
          v106.size = v107;
          v106.buffer = g103;
          v106.normalized = false;
          v106.offset = 0;
          v106.stride = 0;
        }
        if (v106.divisor !== 0) {
          v102.vertexAttribDivisorANGLE(v105, 0);
          v106.divisor = 0;
        }
        v109 = a0["color"];
        v110 = v109[0];
        v111 = v109[1];
        v112 = v109[2];
        v113 = v109[3];
        v1.uniform4f(g108.location, v110, v111, v112, v113);
        v116 = g115.call(this, v2, a0, 0);
        v1.uniform1f(g114.location, v116);
        v119 = g118.call(this, v2, a0, 0);
        v1.uniform1f(g117.location, v119);
        v122 = g121.call(this, v2, a0, 0);
        if (v122 && v122._reglType === "framebuffer") {
          v122 = v122.color[0];
        }
        v123 = v122._texture;
        v1.uniform1i(g120.location, v123.bind());
        v126 = g125.call(this, v2, a0, 0);
        if (v126 && v126._reglType === "framebuffer") {
          v126 = v126.color[0];
        }
        v127 = v126._texture;
        v1.uniform1i(g124.location, v127.bind());
        v130 = g129.call(this, v2, a0, 0);
        if (v130 && v130._reglType === "framebuffer") {
          v130 = v130.color[0];
        }
        v131 = v130._texture;
        v1.uniform1i(g128.location, v131.bind());
        v133 = a0["pointIndex"];
        v1.uniform1f(g132.location, v133);
        v136 = g135.call(this, v2, a0, 0);
        v1.uniform1f(g134.location, v136);
        v139 = g138.call(this, v2, a0, 0);
        if (v139 && v139._reglType === "framebuffer") {
          v139 = v139.color[0];
        }
        v140 = v139._texture;
        v1.uniform1i(g137.location, v140.bind());
        v143 = g142.call(this, v2, a0, 0);
        v1.uniform1i(g141.location, v143);
        v146 = g145.call(this, v2, a0, 0);
        v147 = v146[0];
        v148 = v146[1];
        v1.uniform2f(g144.location, v147, v148);
        v151 = g150.call(this, v2, a0, 0);
        v1.uniform1f(g149.location, v151);
        v154 = g153.call(this, v2, a0, 0);
        v1.uniform1f(g152.location, v154);
        v157 = g156.call(this, v2, a0, 0);
        v1.uniformMatrix3fv(g155.location, false, Array.isArray(v157) || v157 instanceof Float32Array ? v157 : (v158[0] = v157[0], v158[1] = v157[1], v158[2] = v157[2], v158[3] = v157[3], v158[4] = v157[4], v158[5] = v157[5], v158[6] = v157[6], v158[7] = v157[7], v158[8] = v157[8], v158));
        v160 = a0["width"];
        v1.uniform1f(g159.location, v160);
        v161 = v6.elements;
        if (v161) {
          v1.bindBuffer(34963, v161.buffer.buffer);
        } else if (v11.currentVAO) {
          v161 = v7.getElements(v11.currentVAO.elements);
          if (v161)
            v1.bindBuffer(34963, v161.buffer.buffer);
        }
        v162 = v6.offset;
        v163 = v6.instances;
        if (v163 > 0) {
          if (v161) {
            v102.drawElementsInstancedANGLE(5, 4, v161.type, v162 << (v161.type - 5121 >> 1), v163);
          } else {
            v102.drawArraysInstancedANGLE(5, v162, 4, v163);
          }
        } else if (v163 < 0) {
          if (v161) {
            v1.drawElements(5, 4, v161.type, v162 << (v161.type - 5121 >> 1));
          } else {
            v1.drawArrays(5, v162, 4);
          }
        }
        v5.dirty = true;
        v11.setVAO(null);
        if (v99) {
          g48.cpuTime += performance.now() - v100;
        }
        v123.unbind();
        v127.unbind();
        v131.unbind();
        v140.unbind();
      },
      "scope": function(a0, a1, a2) {
        var v165, v167, v169, v171, v173, v175, v177, v179, v181, v182, v183, v185, v187, v188, v190, v191, v193, v194, v196, v197, v199, v200, v202, v203, v205, v206, v208, v209, v211, v212, v214, v215, v217, v218, v220, v221, v223, v224, v226, v227, v229, v230, v232, v234, v235, v236, v237, v238, v239, v240, v241, v242, v243, v244, v245, v247, v249;
        v165 = v4.blend_enable;
        v4.blend_enable = g164;
        v167 = v19[0];
        v19[0] = g166;
        v169 = v19[1];
        v19[1] = g168;
        v171 = v21[0];
        v21[0] = g170;
        v173 = v21[1];
        v21[1] = g172;
        v175 = v21[2];
        v21[2] = g174;
        v177 = v21[3];
        v21[3] = g176;
        v179 = v4.depth_enable;
        v4.depth_enable = g178;
        v181 = v4.depth_mask;
        v4.depth_mask = g180;
        v182 = v5.profile;
        if (v182) {
          v183 = performance.now();
          g48.count++;
        }
        v185 = v6.count;
        v6.count = g184;
        v187 = v6.primitive;
        v6.primitive = g186;
        v188 = a0["color"];
        v190 = v12[g189];
        v12[g189] = v188;
        v191 = a0["width"];
        v193 = v12[g192];
        v12[g192] = v191;
        v194 = a0["pointIndex"];
        v196 = v12[g195];
        v12[g195] = v194;
        v197 = g138.call(this, v2, a0, a2);
        v199 = v12[g198];
        v12[g198] = v197;
        v200 = g121.call(this, v2, a0, a2);
        v202 = v12[g201];
        v12[g201] = v200;
        v203 = g129.call(this, v2, a0, a2);
        v205 = v12[g204];
        v12[g204] = v203;
        v206 = g150.call(this, v2, a0, a2);
        v208 = v12[g207];
        v12[g207] = v206;
        v209 = g135.call(this, v2, a0, a2);
        v211 = v12[g210];
        v12[g210] = v209;
        v212 = g156.call(this, v2, a0, a2);
        v214 = v12[g213];
        v12[g213] = v212;
        v215 = g153.call(this, v2, a0, a2);
        v217 = v12[g216];
        v12[g216] = v215;
        v218 = g145.call(this, v2, a0, a2);
        v220 = v12[g219];
        v12[g219] = v218;
        v221 = g142.call(this, v2, a0, a2);
        v223 = v12[g222];
        v12[g222] = v221;
        v224 = g118.call(this, v2, a0, a2);
        v226 = v12[g225];
        v12[g225] = v224;
        v227 = g125.call(this, v2, a0, a2);
        v229 = v12[g228];
        v12[g228] = v227;
        v230 = g115.call(this, v2, a0, a2);
        v232 = v12[g231];
        v12[g231] = v230;
        v234 = g233.state;
        g233.state = 1;
        v235 = g233.x;
        g233.x = 0;
        v236 = g233.y;
        g233.y = 0;
        v237 = g233.z;
        g233.z = 0;
        v238 = g233.w;
        g233.w = 0;
        v239 = g233.buffer;
        g233.buffer = g103;
        v240 = g233.size;
        g233.size = 2;
        v241 = g233.normalized;
        g233.normalized = false;
        v242 = g233.type;
        g233.type = 5126;
        v243 = g233.offset;
        g233.offset = 0;
        v244 = g233.stride;
        g233.stride = 0;
        v245 = g233.divisor;
        g233.divisor = 0;
        v247 = v9.vert;
        v9.vert = g246;
        v249 = v9.frag;
        v9.frag = g248;
        v5.dirty = true;
        a1(v2, a0, a2);
        v4.blend_enable = v165;
        v19[0] = v167;
        v19[1] = v169;
        v21[0] = v171;
        v21[1] = v173;
        v21[2] = v175;
        v21[3] = v177;
        v4.depth_enable = v179;
        v4.depth_mask = v181;
        if (v182) {
          g48.cpuTime += performance.now() - v183;
        }
        v6.count = v185;
        v6.primitive = v187;
        v12[g189] = v190;
        v12[g192] = v193;
        v12[g195] = v196;
        v12[g198] = v199;
        v12[g201] = v202;
        v12[g204] = v205;
        v12[g207] = v208;
        v12[g210] = v211;
        v12[g213] = v214;
        v12[g216] = v217;
        v12[g219] = v220;
        v12[g222] = v223;
        v12[g225] = v226;
        v12[g228] = v229;
        v12[g231] = v232;
        g233.state = v234;
        g233.x = v235;
        g233.y = v236;
        g233.z = v237;
        g233.w = v238;
        g233.buffer = v239;
        g233.size = v240;
        g233.normalized = v241;
        g233.type = v242;
        g233.offset = v243;
        g233.stride = v244;
        g233.divisor = v245;
        v9.vert = v247;
        v9.frag = v249;
        v5.dirty = true;
      },
      "batch": function(a0, a1) {
        var v251, v300, v301, v302, v303, v304;
        v14.angle_instanced_arrays;
        v251 = v13.next;
        if (v251 !== v13.cur) {
          if (v251) {
            v1.bindFramebuffer(36160, v251.framebuffer);
          } else {
            v1.bindFramebuffer(36160, null);
          }
          v13.cur = v251;
        }
        if (v5.dirty) {
          var v252, v253, v254, v255, v256, v257, v258, v259, v260, v261, v262, v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, v280, v281, v282, v283, v284, v285, v286, v287, v288, v289, v290, v291, v292, v293, v294, v295, v296;
          v252 = v4.dither;
          if (v252 !== v5.dither) {
            if (v252) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v252;
          }
          v253 = v17[0];
          v254 = v17[1];
          v255 = v17[2];
          v256 = v17[3];
          if (v253 !== v18[0] || v254 !== v18[1] || v255 !== v18[2] || v256 !== v18[3]) {
            v1.blendColor(v253, v254, v255, v256);
            v18[0] = v253;
            v18[1] = v254;
            v18[2] = v255;
            v18[3] = v256;
          }
          v257 = v4.depth_func;
          if (v257 !== v5.depth_func) {
            v1.depthFunc(v257);
            v5.depth_func = v257;
          }
          v258 = v23[0];
          v259 = v23[1];
          if (v258 !== v24[0] || v259 !== v24[1]) {
            v1.depthRange(v258, v259);
            v24[0] = v258;
            v24[1] = v259;
          }
          v260 = v25[0];
          v261 = v25[1];
          v262 = v25[2];
          v263 = v25[3];
          if (v260 !== v26[0] || v261 !== v26[1] || v262 !== v26[2] || v263 !== v26[3]) {
            v1.colorMask(v260, v261, v262, v263);
            v26[0] = v260;
            v26[1] = v261;
            v26[2] = v262;
            v26[3] = v263;
          }
          v264 = v4.cull_enable;
          if (v264 !== v5.cull_enable) {
            if (v264) {
              v1.enable(2884);
            } else {
              v1.disable(2884);
            }
            v5.cull_enable = v264;
          }
          v265 = v4.cull_face;
          if (v265 !== v5.cull_face) {
            v1.cullFace(v265);
            v5.cull_face = v265;
          }
          v266 = v4.frontFace;
          if (v266 !== v5.frontFace) {
            v1.frontFace(v266);
            v5.frontFace = v266;
          }
          v267 = v4.lineWidth;
          if (v267 !== v5.lineWidth) {
            v1.lineWidth(v267);
            v5.lineWidth = v267;
          }
          v268 = v4.polygonOffset_enable;
          if (v268 !== v5.polygonOffset_enable) {
            if (v268) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v268;
          }
          v269 = v27[0];
          v270 = v27[1];
          if (v269 !== v28[0] || v270 !== v28[1]) {
            v1.polygonOffset(v269, v270);
            v28[0] = v269;
            v28[1] = v270;
          }
          v271 = v4.sample_alpha;
          if (v271 !== v5.sample_alpha) {
            if (v271) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v271;
          }
          v272 = v4.sample_enable;
          if (v272 !== v5.sample_enable) {
            if (v272) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v272;
          }
          v273 = v29[0];
          v274 = v29[1];
          if (v273 !== v30[0] || v274 !== v30[1]) {
            v1.sampleCoverage(v273, v274);
            v30[0] = v273;
            v30[1] = v274;
          }
          v275 = v4.stencil_enable;
          if (v275 !== v5.stencil_enable) {
            if (v275) {
              v1.enable(2960);
            } else {
              v1.disable(2960);
            }
            v5.stencil_enable = v275;
          }
          v276 = v4.stencil_mask;
          if (v276 !== v5.stencil_mask) {
            v1.stencilMask(v276);
            v5.stencil_mask = v276;
          }
          v277 = v31[0];
          v278 = v31[1];
          v279 = v31[2];
          if (v277 !== v32[0] || v278 !== v32[1] || v279 !== v32[2]) {
            v1.stencilFunc(v277, v278, v279);
            v32[0] = v277;
            v32[1] = v278;
            v32[2] = v279;
          }
          v280 = v33[0];
          v281 = v33[1];
          v282 = v33[2];
          v283 = v33[3];
          if (v280 !== v34[0] || v281 !== v34[1] || v282 !== v34[2] || v283 !== v34[3]) {
            v1.stencilOpSeparate(v280, v281, v282, v283);
            v34[0] = v280;
            v34[1] = v281;
            v34[2] = v282;
            v34[3] = v283;
          }
          v284 = v35[0];
          v285 = v35[1];
          v286 = v35[2];
          v287 = v35[3];
          if (v284 !== v36[0] || v285 !== v36[1] || v286 !== v36[2] || v287 !== v36[3]) {
            v1.stencilOpSeparate(v284, v285, v286, v287);
            v36[0] = v284;
            v36[1] = v285;
            v36[2] = v286;
            v36[3] = v287;
          }
          v288 = v4.scissor_enable;
          if (v288 !== v5.scissor_enable) {
            if (v288) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v288;
          }
          v289 = v37[0];
          v290 = v37[1];
          v291 = v37[2];
          v292 = v37[3];
          if (v289 !== v38[0] || v290 !== v38[1] || v291 !== v38[2] || v292 !== v38[3]) {
            v1.scissor(v289, v290, v291, v292);
            v38[0] = v289;
            v38[1] = v290;
            v38[2] = v291;
            v38[3] = v292;
          }
          v293 = v39[0];
          v294 = v39[1];
          v295 = v39[2];
          v296 = v39[3];
          if (v293 !== v40[0] || v294 !== v40[1] || v295 !== v40[2] || v296 !== v40[3]) {
            v1.viewport(v293, v294, v295, v296);
            v40[0] = v293;
            v40[1] = v294;
            v40[2] = v295;
            v40[3] = v296;
          }
        }
        if (g297) {
          v1.enable(3042);
        } else {
          v1.disable(3042);
        }
        v5.blend_enable = g297;
        v1.blendEquationSeparate(32774, 32774);
        v20[0] = 32774;
        v20[1] = 32774;
        v1.blendFuncSeparate(770, 771, 1, 771);
        v22[0] = 770;
        v22[1] = 771;
        v22[2] = 1;
        v22[3] = 771;
        if (g298) {
          v1.enable(2929);
        } else {
          v1.disable(2929);
        }
        v5.depth_enable = g298;
        v1.depthMask(g299);
        v5.depth_mask = g299;
        v300 = v5.profile;
        if (v300) {
          v301 = performance.now();
          g48.count += a1;
        }
        v1.useProgram(g101.program);
        v302 = v14.angle_instanced_arrays;
        var v305, v306, v307, v308, v309, v310, v311, v312, v313, v314, v315, v316, v317, v318, v319, v320, v321, v322, v323, v324, v325, v340, v341, v342;
        v11.setVAO(null);
        v305 = g104.location;
        v306 = v10[v305];
        if (!v306.buffer) {
          v1.enableVertexAttribArray(v305);
        }
        v307 = 2;
        if (v306.type !== 5126 || v306.size !== v307 || v306.buffer !== g103 || v306.normalized !== false || v306.offset !== 0 || v306.stride !== 0) {
          v1.bindBuffer(34962, g103.buffer);
          v1.vertexAttribPointer(v305, v307, 5126, false, 0, 0);
          v306.type = 5126;
          v306.size = v307;
          v306.buffer = g103;
          v306.normalized = false;
          v306.offset = 0;
          v306.stride = 0;
        }
        if (v306.divisor !== 0) {
          v302.vertexAttribDivisorANGLE(v305, 0);
          v306.divisor = 0;
        }
        v308 = g115.call(this, v2, v304, v303);
        v1.uniform1f(g114.location, v308);
        v309 = g118.call(this, v2, v304, v303);
        v1.uniform1f(g117.location, v309);
        v310 = g121.call(this, v2, v304, v303);
        if (v310 && v310._reglType === "framebuffer") {
          v310 = v310.color[0];
        }
        v311 = v310._texture;
        v1.uniform1i(g120.location, v311.bind());
        v312 = g125.call(this, v2, v304, v303);
        if (v312 && v312._reglType === "framebuffer") {
          v312 = v312.color[0];
        }
        v313 = v312._texture;
        v1.uniform1i(g124.location, v313.bind());
        v314 = g129.call(this, v2, v304, v303);
        if (v314 && v314._reglType === "framebuffer") {
          v314 = v314.color[0];
        }
        v315 = v314._texture;
        v1.uniform1i(g128.location, v315.bind());
        v316 = g135.call(this, v2, v304, v303);
        v1.uniform1f(g134.location, v316);
        v317 = g138.call(this, v2, v304, v303);
        if (v317 && v317._reglType === "framebuffer") {
          v317 = v317.color[0];
        }
        v318 = v317._texture;
        v1.uniform1i(g137.location, v318.bind());
        v319 = g142.call(this, v2, v304, v303);
        v1.uniform1i(g141.location, v319);
        v320 = g145.call(this, v2, v304, v303);
        v321 = v320[0];
        v322 = v320[1];
        v1.uniform2f(g144.location, v321, v322);
        v323 = g150.call(this, v2, v304, v303);
        v1.uniform1f(g149.location, v323);
        v324 = g153.call(this, v2, v304, v303);
        v1.uniform1f(g152.location, v324);
        v325 = g156.call(this, v2, v304, v303);
        v1.uniformMatrix3fv(g155.location, false, Array.isArray(v325) || v325 instanceof Float32Array ? v325 : (v326[0] = v325[0], v326[1] = v325[1], v326[2] = v325[2], v326[3] = v325[3], v326[4] = v325[4], v326[5] = v325[5], v326[6] = v325[6], v326[7] = v325[7], v326[8] = v325[8], v326));
        v340 = v6.elements;
        if (v340) {
          v1.bindBuffer(34963, v340.buffer.buffer);
        } else if (v11.currentVAO) {
          v340 = v7.getElements(v11.currentVAO.elements);
          if (v340)
            v1.bindBuffer(34963, v340.buffer.buffer);
        }
        v341 = v6.offset;
        v342 = v6.instances;
        for (v303 = 0; v303 < a1; ++v303) {
          v304 = a0[v303];
          var v327, v328, v329, v330, v331, v332, v333, v334, v335, v336, v337, v338, v339;
          v327 = v304["color"];
          v328 = v327[0];
          v330 = v327[1];
          v332 = v327[2];
          v334 = v327[3];
          if (!v303 || v329 !== v328 || v331 !== v330 || v333 !== v332 || v335 !== v334) {
            v329 = v328;
            v331 = v330;
            v333 = v332;
            v335 = v334;
            v1.uniform4f(g108.location, v328, v330, v332, v334);
          }
          v336 = v304["pointIndex"];
          if (!v303 || v337 !== v336) {
            v337 = v336;
            v1.uniform1f(g132.location, v336);
          }
          v338 = v304["width"];
          if (!v303 || v339 !== v338) {
            v339 = v338;
            v1.uniform1f(g159.location, v338);
          }
          if (v342 > 0) {
            if (v340) {
              v302.drawElementsInstancedANGLE(5, 4, v340.type, v341 << (v340.type - 5121 >> 1), v342);
            } else {
              v302.drawArraysInstancedANGLE(5, v341, 4, v342);
            }
          } else if (v342 < 0) {
            if (v340) {
              v1.drawElements(5, 4, v340.type, v341 << (v340.type - 5121 >> 1));
            } else {
              v1.drawArrays(5, v341, 4);
            }
          }
        }
        v311.unbind();
        v313.unbind();
        v315.unbind();
        v318.unbind();
        v5.dirty = true;
        v11.setVAO(null);
        if (v300) {
          g48.cpuTime += performance.now() - v301;
        }
      }
    };
  },
  "eb221f9c85bbb1289d8191f0a5e2cb2f7a7494b901353fb18a93f8073ffa6fbe": function anonymous11(g0, g48, g50, g110, g112, g113, g117, g118, g120, g121, g124, g125, g140, g142, g148, g150, g156, g158, g161, g164, g167, g169, g182, g184) {
    var v1, v2, v4, v5, v6, v7, v9, v10, v11, v12, v13, v14, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40;
    v1 = g0.gl;
    v2 = g0.context;
    g0.strings;
    v4 = g0.next;
    v5 = g0.current;
    v6 = g0.draw;
    v7 = g0.elements;
    g0.buffer;
    v9 = g0.shader;
    v10 = g0.attributes;
    v11 = g0.vao;
    v12 = g0.uniforms;
    v13 = g0.framebuffer;
    v14 = g0.extensions;
    g0.timer;
    g0.isBufferArgs;
    v17 = v4.blend_color;
    v18 = v5.blend_color;
    v19 = v4.blend_equation;
    v20 = v5.blend_equation;
    v21 = v4.blend_func;
    v22 = v5.blend_func;
    v23 = v4.depth_range;
    v24 = v5.depth_range;
    v25 = v4.colorMask;
    v26 = v5.colorMask;
    v27 = v4.polygonOffset_offset;
    v28 = v5.polygonOffset_offset;
    v29 = v4.sample_coverage;
    v30 = v5.sample_coverage;
    v31 = v4.stencil_func;
    v32 = v5.stencil_func;
    v33 = v4.stencil_opFront;
    v34 = v5.stencil_opFront;
    v35 = v4.stencil_opBack;
    v36 = v5.stencil_opBack;
    v37 = v4.scissor_box;
    v38 = v5.scissor_box;
    v39 = v4.viewport;
    v40 = v5.viewport;
    return {
      "draw": function(a0) {
        var v51, v52, v53, v54, v55, v102, v103, v104, v105, v106, v107, v108, v109, v111, v114, v115, v116, v119, v122, v123, v126, v127, v128, v129, v130;
        v14.angle_instanced_arrays;
        v51 = g50.call(this, v2, a0, 0);
        v52 = v13.getFramebuffer(v51);
        v53 = v13.next;
        v13.next = v52;
        v54 = v2.framebufferWidth;
        v2.framebufferWidth = v52 ? v52.width : v2.drawingBufferWidth;
        v55 = v2.framebufferHeight;
        v2.framebufferHeight = v52 ? v52.height : v2.drawingBufferHeight;
        if (v52 !== v13.cur) {
          if (v52) {
            v1.bindFramebuffer(36160, v52.framebuffer);
          } else {
            v1.bindFramebuffer(36160, null);
          }
          v13.cur = v52;
        }
        if (v5.dirty) {
          var v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, v100, v101;
          v56 = v4.dither;
          if (v56 !== v5.dither) {
            if (v56) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v56;
          }
          v57 = v4.blend_enable;
          if (v57 !== v5.blend_enable) {
            if (v57) {
              v1.enable(3042);
            } else {
              v1.disable(3042);
            }
            v5.blend_enable = v57;
          }
          v58 = v17[0];
          v59 = v17[1];
          v60 = v17[2];
          v61 = v17[3];
          if (v58 !== v18[0] || v59 !== v18[1] || v60 !== v18[2] || v61 !== v18[3]) {
            v1.blendColor(v58, v59, v60, v61);
            v18[0] = v58;
            v18[1] = v59;
            v18[2] = v60;
            v18[3] = v61;
          }
          v62 = v19[0];
          v63 = v19[1];
          if (v62 !== v20[0] || v63 !== v20[1]) {
            v1.blendEquationSeparate(v62, v63);
            v20[0] = v62;
            v20[1] = v63;
          }
          v64 = v21[0];
          v65 = v21[1];
          v66 = v21[2];
          v67 = v21[3];
          if (v64 !== v22[0] || v65 !== v22[1] || v66 !== v22[2] || v67 !== v22[3]) {
            v1.blendFuncSeparate(v64, v65, v66, v67);
            v22[0] = v64;
            v22[1] = v65;
            v22[2] = v66;
            v22[3] = v67;
          }
          v68 = v4.depth_enable;
          if (v68 !== v5.depth_enable) {
            if (v68) {
              v1.enable(2929);
            } else {
              v1.disable(2929);
            }
            v5.depth_enable = v68;
          }
          v69 = v4.depth_func;
          if (v69 !== v5.depth_func) {
            v1.depthFunc(v69);
            v5.depth_func = v69;
          }
          v70 = v23[0];
          v71 = v23[1];
          if (v70 !== v24[0] || v71 !== v24[1]) {
            v1.depthRange(v70, v71);
            v24[0] = v70;
            v24[1] = v71;
          }
          v72 = v4.depth_mask;
          if (v72 !== v5.depth_mask) {
            v1.depthMask(v72);
            v5.depth_mask = v72;
          }
          v73 = v25[0];
          v74 = v25[1];
          v75 = v25[2];
          v76 = v25[3];
          if (v73 !== v26[0] || v74 !== v26[1] || v75 !== v26[2] || v76 !== v26[3]) {
            v1.colorMask(v73, v74, v75, v76);
            v26[0] = v73;
            v26[1] = v74;
            v26[2] = v75;
            v26[3] = v76;
          }
          v77 = v4.cull_enable;
          if (v77 !== v5.cull_enable) {
            if (v77) {
              v1.enable(2884);
            } else {
              v1.disable(2884);
            }
            v5.cull_enable = v77;
          }
          v78 = v4.cull_face;
          if (v78 !== v5.cull_face) {
            v1.cullFace(v78);
            v5.cull_face = v78;
          }
          v79 = v4.frontFace;
          if (v79 !== v5.frontFace) {
            v1.frontFace(v79);
            v5.frontFace = v79;
          }
          v80 = v4.lineWidth;
          if (v80 !== v5.lineWidth) {
            v1.lineWidth(v80);
            v5.lineWidth = v80;
          }
          v81 = v4.polygonOffset_enable;
          if (v81 !== v5.polygonOffset_enable) {
            if (v81) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v81;
          }
          v82 = v27[0];
          v83 = v27[1];
          if (v82 !== v28[0] || v83 !== v28[1]) {
            v1.polygonOffset(v82, v83);
            v28[0] = v82;
            v28[1] = v83;
          }
          v84 = v4.sample_alpha;
          if (v84 !== v5.sample_alpha) {
            if (v84) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v84;
          }
          v85 = v4.sample_enable;
          if (v85 !== v5.sample_enable) {
            if (v85) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v85;
          }
          v86 = v29[0];
          v87 = v29[1];
          if (v86 !== v30[0] || v87 !== v30[1]) {
            v1.sampleCoverage(v86, v87);
            v30[0] = v86;
            v30[1] = v87;
          }
          v88 = v4.stencil_enable;
          if (v88 !== v5.stencil_enable) {
            if (v88) {
              v1.enable(2960);
            } else {
              v1.disable(2960);
            }
            v5.stencil_enable = v88;
          }
          v89 = v4.stencil_mask;
          if (v89 !== v5.stencil_mask) {
            v1.stencilMask(v89);
            v5.stencil_mask = v89;
          }
          v90 = v31[0];
          v91 = v31[1];
          v92 = v31[2];
          if (v90 !== v32[0] || v91 !== v32[1] || v92 !== v32[2]) {
            v1.stencilFunc(v90, v91, v92);
            v32[0] = v90;
            v32[1] = v91;
            v32[2] = v92;
          }
          v93 = v33[0];
          v94 = v33[1];
          v95 = v33[2];
          v96 = v33[3];
          if (v93 !== v34[0] || v94 !== v34[1] || v95 !== v34[2] || v96 !== v34[3]) {
            v1.stencilOpSeparate(v93, v94, v95, v96);
            v34[0] = v93;
            v34[1] = v94;
            v34[2] = v95;
            v34[3] = v96;
          }
          v97 = v35[0];
          v98 = v35[1];
          v99 = v35[2];
          v100 = v35[3];
          if (v97 !== v36[0] || v98 !== v36[1] || v99 !== v36[2] || v100 !== v36[3]) {
            v1.stencilOpSeparate(v97, v98, v99, v100);
            v36[0] = v97;
            v36[1] = v98;
            v36[2] = v99;
            v36[3] = v100;
          }
          v101 = v4.scissor_enable;
          if (v101 !== v5.scissor_enable) {
            if (v101) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v101;
          }
        }
        v102 = v2.framebufferWidth;
        v103 = v2.framebufferHeight;
        v104 = v2.viewportWidth;
        v2.viewportWidth = v102;
        v105 = v2.viewportHeight;
        v2.viewportHeight = v103;
        v1.viewport(0, 0, v102, v103);
        v40[0] = 0;
        v40[1] = 0;
        v40[2] = v102;
        v40[3] = v103;
        v106 = v2.framebufferWidth;
        v107 = v2.framebufferHeight;
        v1.scissor(0, 0, v106, v107);
        v38[0] = 0;
        v38[1] = 0;
        v38[2] = v106;
        v38[3] = v107;
        v108 = v5.profile;
        if (v108) {
          v109 = performance.now();
          g48.count++;
        }
        v1.useProgram(g110.program);
        v111 = v14.angle_instanced_arrays;
        v11.setVAO(null);
        v114 = g113.location;
        v115 = v10[v114];
        if (!v115.buffer) {
          v1.enableVertexAttribArray(v114);
        }
        v116 = 2;
        if (v115.type !== 5126 || v115.size !== v116 || v115.buffer !== g112 || v115.normalized !== false || v115.offset !== 0 || v115.stride !== 0) {
          v1.bindBuffer(34962, g112.buffer);
          v1.vertexAttribPointer(v114, v116, 5126, false, 0, 0);
          v115.type = 5126;
          v115.size = v116;
          v115.buffer = g112;
          v115.normalized = false;
          v115.offset = 0;
          v115.stride = 0;
        }
        if (v115.divisor !== 0) {
          v111.vertexAttribDivisorANGLE(v114, 0);
          v115.divisor = 0;
        }
        v119 = g118.call(this, v2, a0, 0);
        v1.uniform1f(g117.location, v119);
        v122 = g121.call(this, v2, a0, 0);
        if (v122 && v122._reglType === "framebuffer") {
          v122 = v122.color[0];
        }
        v123 = v122._texture;
        v1.uniform1i(g120.location, v123.bind());
        v126 = g125.call(this, v2, a0, 0);
        if (v126 && v126._reglType === "framebuffer") {
          v126 = v126.color[0];
        }
        v127 = v126._texture;
        v1.uniform1i(g124.location, v127.bind());
        v128 = v6.elements;
        if (v128) {
          v1.bindBuffer(34963, v128.buffer.buffer);
        } else if (v11.currentVAO) {
          v128 = v7.getElements(v11.currentVAO.elements);
          if (v128)
            v1.bindBuffer(34963, v128.buffer.buffer);
        }
        v129 = v6.offset;
        v130 = v6.instances;
        if (v130 > 0) {
          if (v128) {
            v111.drawElementsInstancedANGLE(5, 4, v128.type, v129 << (v128.type - 5121 >> 1), v130);
          } else {
            v111.drawArraysInstancedANGLE(5, v129, 4, v130);
          }
        } else if (v130 < 0) {
          if (v128) {
            v1.drawElements(5, 4, v128.type, v129 << (v128.type - 5121 >> 1));
          } else {
            v1.drawArrays(5, v129, 4);
          }
        }
        v5.dirty = true;
        v11.setVAO(null);
        v13.next = v53;
        v2.framebufferWidth = v54;
        v2.framebufferHeight = v55;
        v2.viewportWidth = v104;
        v2.viewportHeight = v105;
        if (v108) {
          g48.cpuTime += performance.now() - v109;
        }
        v123.unbind();
        v127.unbind();
      },
      "scope": function(a0, a1, a2) {
        var v131, v132, v133, v134, v135, v136, v137, v138, v139, v141, v143, v144, v145, v146, v147, v149, v151, v152, v153, v154, v155, v157, v159, v160, v162, v163, v165, v166, v168, v170, v171, v172, v173, v174, v175, v176, v177, v178, v179, v180, v181, v183, v185;
        v131 = g50.call(this, v2, a0, a2);
        v132 = v13.getFramebuffer(v131);
        v133 = v13.next;
        v13.next = v132;
        v134 = v2.framebufferWidth;
        v2.framebufferWidth = v132 ? v132.width : v2.drawingBufferWidth;
        v135 = v2.framebufferHeight;
        v2.framebufferHeight = v132 ? v132.height : v2.drawingBufferHeight;
        v136 = v2.framebufferWidth;
        v137 = v2.framebufferHeight;
        v138 = v2.viewportWidth;
        v2.viewportWidth = v136;
        v139 = v2.viewportHeight;
        v2.viewportHeight = v137;
        v141 = v39[0];
        v39[0] = g140;
        v143 = v39[1];
        v39[1] = g142;
        v144 = v39[2];
        v39[2] = v136;
        v145 = v39[3];
        v39[3] = v137;
        v146 = v2.framebufferWidth;
        v147 = v2.framebufferHeight;
        v149 = v37[0];
        v37[0] = g148;
        v151 = v37[1];
        v37[1] = g150;
        v152 = v37[2];
        v37[2] = v146;
        v153 = v37[3];
        v37[3] = v147;
        v154 = v5.profile;
        if (v154) {
          v155 = performance.now();
          g48.count++;
        }
        v157 = v6.count;
        v6.count = g156;
        v159 = v6.primitive;
        v6.primitive = g158;
        v160 = g121.call(this, v2, a0, a2);
        v162 = v12[g161];
        v12[g161] = v160;
        v163 = g125.call(this, v2, a0, a2);
        v165 = v12[g164];
        v12[g164] = v163;
        v166 = g118.call(this, v2, a0, a2);
        v168 = v12[g167];
        v12[g167] = v166;
        v170 = g169.state;
        g169.state = 1;
        v171 = g169.x;
        g169.x = 0;
        v172 = g169.y;
        g169.y = 0;
        v173 = g169.z;
        g169.z = 0;
        v174 = g169.w;
        g169.w = 0;
        v175 = g169.buffer;
        g169.buffer = g112;
        v176 = g169.size;
        g169.size = 2;
        v177 = g169.normalized;
        g169.normalized = false;
        v178 = g169.type;
        g169.type = 5126;
        v179 = g169.offset;
        g169.offset = 0;
        v180 = g169.stride;
        g169.stride = 0;
        v181 = g169.divisor;
        g169.divisor = 0;
        v183 = v9.vert;
        v9.vert = g182;
        v185 = v9.frag;
        v9.frag = g184;
        v5.dirty = true;
        a1(v2, a0, a2);
        v13.next = v133;
        v2.framebufferWidth = v134;
        v2.framebufferHeight = v135;
        v2.viewportWidth = v138;
        v2.viewportHeight = v139;
        v39[0] = v141;
        v39[1] = v143;
        v39[2] = v144;
        v39[3] = v145;
        v37[0] = v149;
        v37[1] = v151;
        v37[2] = v152;
        v37[3] = v153;
        if (v154) {
          g48.cpuTime += performance.now() - v155;
        }
        v6.count = v157;
        v6.primitive = v159;
        v12[g161] = v162;
        v12[g164] = v165;
        v12[g167] = v168;
        g169.state = v170;
        g169.x = v171;
        g169.y = v172;
        g169.z = v173;
        g169.w = v174;
        g169.buffer = v175;
        g169.size = v176;
        g169.normalized = v177;
        g169.type = v178;
        g169.offset = v179;
        g169.stride = v180;
        g169.divisor = v181;
        v9.vert = v183;
        v9.frag = v185;
        v5.dirty = true;
      },
      "batch": function(a0, a1) {
        var v187, v188, v189, v190, v191, v238, v239, v240, v241, v242, v243, v244, v245, v246, v247, v248;
        v14.angle_instanced_arrays;
        v187 = g50.call(this, v2, a0, 0);
        v188 = v13.getFramebuffer(v187);
        v189 = v13.next;
        v13.next = v188;
        v190 = v2.framebufferWidth;
        v2.framebufferWidth = v188 ? v188.width : v2.drawingBufferWidth;
        v191 = v2.framebufferHeight;
        v2.framebufferHeight = v188 ? v188.height : v2.drawingBufferHeight;
        if (v188 !== v13.cur) {
          if (v188) {
            v1.bindFramebuffer(36160, v188.framebuffer);
          } else {
            v1.bindFramebuffer(36160, null);
          }
          v13.cur = v188;
        }
        if (v5.dirty) {
          var v192, v193, v194, v195, v196, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, v220, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, v235, v236, v237;
          v192 = v4.dither;
          if (v192 !== v5.dither) {
            if (v192) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v192;
          }
          v193 = v4.blend_enable;
          if (v193 !== v5.blend_enable) {
            if (v193) {
              v1.enable(3042);
            } else {
              v1.disable(3042);
            }
            v5.blend_enable = v193;
          }
          v194 = v17[0];
          v195 = v17[1];
          v196 = v17[2];
          v197 = v17[3];
          if (v194 !== v18[0] || v195 !== v18[1] || v196 !== v18[2] || v197 !== v18[3]) {
            v1.blendColor(v194, v195, v196, v197);
            v18[0] = v194;
            v18[1] = v195;
            v18[2] = v196;
            v18[3] = v197;
          }
          v198 = v19[0];
          v199 = v19[1];
          if (v198 !== v20[0] || v199 !== v20[1]) {
            v1.blendEquationSeparate(v198, v199);
            v20[0] = v198;
            v20[1] = v199;
          }
          v200 = v21[0];
          v201 = v21[1];
          v202 = v21[2];
          v203 = v21[3];
          if (v200 !== v22[0] || v201 !== v22[1] || v202 !== v22[2] || v203 !== v22[3]) {
            v1.blendFuncSeparate(v200, v201, v202, v203);
            v22[0] = v200;
            v22[1] = v201;
            v22[2] = v202;
            v22[3] = v203;
          }
          v204 = v4.depth_enable;
          if (v204 !== v5.depth_enable) {
            if (v204) {
              v1.enable(2929);
            } else {
              v1.disable(2929);
            }
            v5.depth_enable = v204;
          }
          v205 = v4.depth_func;
          if (v205 !== v5.depth_func) {
            v1.depthFunc(v205);
            v5.depth_func = v205;
          }
          v206 = v23[0];
          v207 = v23[1];
          if (v206 !== v24[0] || v207 !== v24[1]) {
            v1.depthRange(v206, v207);
            v24[0] = v206;
            v24[1] = v207;
          }
          v208 = v4.depth_mask;
          if (v208 !== v5.depth_mask) {
            v1.depthMask(v208);
            v5.depth_mask = v208;
          }
          v209 = v25[0];
          v210 = v25[1];
          v211 = v25[2];
          v212 = v25[3];
          if (v209 !== v26[0] || v210 !== v26[1] || v211 !== v26[2] || v212 !== v26[3]) {
            v1.colorMask(v209, v210, v211, v212);
            v26[0] = v209;
            v26[1] = v210;
            v26[2] = v211;
            v26[3] = v212;
          }
          v213 = v4.cull_enable;
          if (v213 !== v5.cull_enable) {
            if (v213) {
              v1.enable(2884);
            } else {
              v1.disable(2884);
            }
            v5.cull_enable = v213;
          }
          v214 = v4.cull_face;
          if (v214 !== v5.cull_face) {
            v1.cullFace(v214);
            v5.cull_face = v214;
          }
          v215 = v4.frontFace;
          if (v215 !== v5.frontFace) {
            v1.frontFace(v215);
            v5.frontFace = v215;
          }
          v216 = v4.lineWidth;
          if (v216 !== v5.lineWidth) {
            v1.lineWidth(v216);
            v5.lineWidth = v216;
          }
          v217 = v4.polygonOffset_enable;
          if (v217 !== v5.polygonOffset_enable) {
            if (v217) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v217;
          }
          v218 = v27[0];
          v219 = v27[1];
          if (v218 !== v28[0] || v219 !== v28[1]) {
            v1.polygonOffset(v218, v219);
            v28[0] = v218;
            v28[1] = v219;
          }
          v220 = v4.sample_alpha;
          if (v220 !== v5.sample_alpha) {
            if (v220) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v220;
          }
          v221 = v4.sample_enable;
          if (v221 !== v5.sample_enable) {
            if (v221) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v221;
          }
          v222 = v29[0];
          v223 = v29[1];
          if (v222 !== v30[0] || v223 !== v30[1]) {
            v1.sampleCoverage(v222, v223);
            v30[0] = v222;
            v30[1] = v223;
          }
          v224 = v4.stencil_enable;
          if (v224 !== v5.stencil_enable) {
            if (v224) {
              v1.enable(2960);
            } else {
              v1.disable(2960);
            }
            v5.stencil_enable = v224;
          }
          v225 = v4.stencil_mask;
          if (v225 !== v5.stencil_mask) {
            v1.stencilMask(v225);
            v5.stencil_mask = v225;
          }
          v226 = v31[0];
          v227 = v31[1];
          v228 = v31[2];
          if (v226 !== v32[0] || v227 !== v32[1] || v228 !== v32[2]) {
            v1.stencilFunc(v226, v227, v228);
            v32[0] = v226;
            v32[1] = v227;
            v32[2] = v228;
          }
          v229 = v33[0];
          v230 = v33[1];
          v231 = v33[2];
          v232 = v33[3];
          if (v229 !== v34[0] || v230 !== v34[1] || v231 !== v34[2] || v232 !== v34[3]) {
            v1.stencilOpSeparate(v229, v230, v231, v232);
            v34[0] = v229;
            v34[1] = v230;
            v34[2] = v231;
            v34[3] = v232;
          }
          v233 = v35[0];
          v234 = v35[1];
          v235 = v35[2];
          v236 = v35[3];
          if (v233 !== v36[0] || v234 !== v36[1] || v235 !== v36[2] || v236 !== v36[3]) {
            v1.stencilOpSeparate(v233, v234, v235, v236);
            v36[0] = v233;
            v36[1] = v234;
            v36[2] = v235;
            v36[3] = v236;
          }
          v237 = v4.scissor_enable;
          if (v237 !== v5.scissor_enable) {
            if (v237) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v237;
          }
        }
        v238 = v2.framebufferWidth;
        v239 = v2.framebufferHeight;
        v240 = v2.viewportWidth;
        v2.viewportWidth = v238;
        v241 = v2.viewportHeight;
        v2.viewportHeight = v239;
        v1.viewport(0, 0, v238, v239);
        v40[0] = 0;
        v40[1] = 0;
        v40[2] = v238;
        v40[3] = v239;
        v242 = v2.framebufferWidth;
        v243 = v2.framebufferHeight;
        v1.scissor(0, 0, v242, v243);
        v38[0] = 0;
        v38[1] = 0;
        v38[2] = v242;
        v38[3] = v243;
        v244 = v5.profile;
        if (v244) {
          v245 = performance.now();
          g48.count += a1;
        }
        v1.useProgram(g110.program);
        v246 = v14.angle_instanced_arrays;
        var v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, v259;
        v11.setVAO(null);
        v249 = g113.location;
        v250 = v10[v249];
        if (!v250.buffer) {
          v1.enableVertexAttribArray(v249);
        }
        v251 = 2;
        if (v250.type !== 5126 || v250.size !== v251 || v250.buffer !== g112 || v250.normalized !== false || v250.offset !== 0 || v250.stride !== 0) {
          v1.bindBuffer(34962, g112.buffer);
          v1.vertexAttribPointer(v249, v251, 5126, false, 0, 0);
          v250.type = 5126;
          v250.size = v251;
          v250.buffer = g112;
          v250.normalized = false;
          v250.offset = 0;
          v250.stride = 0;
        }
        if (v250.divisor !== 0) {
          v246.vertexAttribDivisorANGLE(v249, 0);
          v250.divisor = 0;
        }
        v252 = g118.call(this, v2, v248, v247);
        v1.uniform1f(g117.location, v252);
        v253 = g121.call(this, v2, v248, v247);
        if (v253 && v253._reglType === "framebuffer") {
          v253 = v253.color[0];
        }
        v254 = v253._texture;
        v1.uniform1i(g120.location, v254.bind());
        v255 = g125.call(this, v2, v248, v247);
        if (v255 && v255._reglType === "framebuffer") {
          v255 = v255.color[0];
        }
        v256 = v255._texture;
        v1.uniform1i(g124.location, v256.bind());
        v257 = v6.elements;
        if (v257) {
          v1.bindBuffer(34963, v257.buffer.buffer);
        } else if (v11.currentVAO) {
          v257 = v7.getElements(v11.currentVAO.elements);
          if (v257)
            v1.bindBuffer(34963, v257.buffer.buffer);
        }
        v258 = v6.offset;
        v259 = v6.instances;
        for (v247 = 0; v247 < a1; ++v247) {
          v248 = a0[v247];
          if (v259 > 0) {
            if (v257) {
              v246.drawElementsInstancedANGLE(5, 4, v257.type, v258 << (v257.type - 5121 >> 1), v259);
            } else {
              v246.drawArraysInstancedANGLE(5, v258, 4, v259);
            }
          } else if (v259 < 0) {
            if (v257) {
              v1.drawElements(5, 4, v257.type, v258 << (v257.type - 5121 >> 1));
            } else {
              v1.drawArrays(5, v258, 4);
            }
          }
        }
        v254.unbind();
        v256.unbind();
        v5.dirty = true;
        v11.setVAO(null);
        v13.next = v189;
        v2.framebufferWidth = v190;
        v2.framebufferHeight = v191;
        v2.viewportWidth = v240;
        v2.viewportHeight = v241;
        if (v244) {
          g48.cpuTime += performance.now() - v245;
        }
      }
    };
  },
  "da693cc97ee74da1ea2a4318da665c6724ca4598a491573f90321d5cf98cd00e": function anonymous12(g0, g48, g50, g104, g105, g110, g112, g113, g117, g118, g120, g121, g124, g125, g129, g130, g132, g133, g138, g150, g152, g156, g158, g162, g164, g172, g175, g178, g181, g184, g187, g189, g202, g204, g260, g261) {
    var v1, v2, v4, v5, v6, v7, v9, v10, v11, v12, v13, v14, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v135, v280;
    v1 = g0.gl;
    v2 = g0.context;
    g0.strings;
    v4 = g0.next;
    v5 = g0.current;
    v6 = g0.draw;
    v7 = g0.elements;
    g0.buffer;
    v9 = g0.shader;
    v10 = g0.attributes;
    v11 = g0.vao;
    v12 = g0.uniforms;
    v13 = g0.framebuffer;
    v14 = g0.extensions;
    g0.timer;
    g0.isBufferArgs;
    v17 = v4.blend_color;
    v18 = v5.blend_color;
    v19 = v4.blend_equation;
    v20 = v5.blend_equation;
    v21 = v4.blend_func;
    v22 = v5.blend_func;
    v23 = v4.depth_range;
    v24 = v5.depth_range;
    v25 = v4.colorMask;
    v26 = v5.colorMask;
    v27 = v4.polygonOffset_offset;
    v28 = v5.polygonOffset_offset;
    v29 = v4.sample_coverage;
    v30 = v5.sample_coverage;
    v31 = v4.stencil_func;
    v32 = v5.stencil_func;
    v33 = v4.stencil_opFront;
    v34 = v5.stencil_opFront;
    v35 = v4.stencil_opBack;
    v36 = v5.stencil_opBack;
    v37 = v4.scissor_box;
    v38 = v5.scissor_box;
    v39 = v4.viewport;
    v40 = v5.viewport;
    v135 = new Float32Array(9);
    v280 = new Float32Array(9);
    return {
      "draw": function(a0) {
        var v51, v52, v53, v54, v55, v100, v101, v102, v103, v106, v107, v108, v109, v111, v114, v115, v116, v119, v122, v123, v126, v127, v128, v131, v134, v136, v137, v139, v140;
        v14.angle_instanced_arrays;
        v51 = g50.call(this, v2, a0, 0);
        v52 = v13.getFramebuffer(v51);
        v53 = v13.next;
        v13.next = v52;
        v54 = v2.framebufferWidth;
        v2.framebufferWidth = v52 ? v52.width : v2.drawingBufferWidth;
        v55 = v2.framebufferHeight;
        v2.framebufferHeight = v52 ? v52.height : v2.drawingBufferHeight;
        if (v52 !== v13.cur) {
          if (v52) {
            v1.bindFramebuffer(36160, v52.framebuffer);
          } else {
            v1.bindFramebuffer(36160, null);
          }
          v13.cur = v52;
        }
        if (v5.dirty) {
          var v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99;
          v56 = v4.dither;
          if (v56 !== v5.dither) {
            if (v56) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v56;
          }
          v57 = v4.blend_enable;
          if (v57 !== v5.blend_enable) {
            if (v57) {
              v1.enable(3042);
            } else {
              v1.disable(3042);
            }
            v5.blend_enable = v57;
          }
          v58 = v17[0];
          v59 = v17[1];
          v60 = v17[2];
          v61 = v17[3];
          if (v58 !== v18[0] || v59 !== v18[1] || v60 !== v18[2] || v61 !== v18[3]) {
            v1.blendColor(v58, v59, v60, v61);
            v18[0] = v58;
            v18[1] = v59;
            v18[2] = v60;
            v18[3] = v61;
          }
          v62 = v19[0];
          v63 = v19[1];
          if (v62 !== v20[0] || v63 !== v20[1]) {
            v1.blendEquationSeparate(v62, v63);
            v20[0] = v62;
            v20[1] = v63;
          }
          v64 = v21[0];
          v65 = v21[1];
          v66 = v21[2];
          v67 = v21[3];
          if (v64 !== v22[0] || v65 !== v22[1] || v66 !== v22[2] || v67 !== v22[3]) {
            v1.blendFuncSeparate(v64, v65, v66, v67);
            v22[0] = v64;
            v22[1] = v65;
            v22[2] = v66;
            v22[3] = v67;
          }
          v68 = v4.depth_func;
          if (v68 !== v5.depth_func) {
            v1.depthFunc(v68);
            v5.depth_func = v68;
          }
          v69 = v23[0];
          v70 = v23[1];
          if (v69 !== v24[0] || v70 !== v24[1]) {
            v1.depthRange(v69, v70);
            v24[0] = v69;
            v24[1] = v70;
          }
          v71 = v25[0];
          v72 = v25[1];
          v73 = v25[2];
          v74 = v25[3];
          if (v71 !== v26[0] || v72 !== v26[1] || v73 !== v26[2] || v74 !== v26[3]) {
            v1.colorMask(v71, v72, v73, v74);
            v26[0] = v71;
            v26[1] = v72;
            v26[2] = v73;
            v26[3] = v74;
          }
          v75 = v4.cull_enable;
          if (v75 !== v5.cull_enable) {
            if (v75) {
              v1.enable(2884);
            } else {
              v1.disable(2884);
            }
            v5.cull_enable = v75;
          }
          v76 = v4.cull_face;
          if (v76 !== v5.cull_face) {
            v1.cullFace(v76);
            v5.cull_face = v76;
          }
          v77 = v4.frontFace;
          if (v77 !== v5.frontFace) {
            v1.frontFace(v77);
            v5.frontFace = v77;
          }
          v78 = v4.lineWidth;
          if (v78 !== v5.lineWidth) {
            v1.lineWidth(v78);
            v5.lineWidth = v78;
          }
          v79 = v4.polygonOffset_enable;
          if (v79 !== v5.polygonOffset_enable) {
            if (v79) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v79;
          }
          v80 = v27[0];
          v81 = v27[1];
          if (v80 !== v28[0] || v81 !== v28[1]) {
            v1.polygonOffset(v80, v81);
            v28[0] = v80;
            v28[1] = v81;
          }
          v82 = v4.sample_alpha;
          if (v82 !== v5.sample_alpha) {
            if (v82) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v82;
          }
          v83 = v4.sample_enable;
          if (v83 !== v5.sample_enable) {
            if (v83) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v83;
          }
          v84 = v29[0];
          v85 = v29[1];
          if (v84 !== v30[0] || v85 !== v30[1]) {
            v1.sampleCoverage(v84, v85);
            v30[0] = v84;
            v30[1] = v85;
          }
          v86 = v4.stencil_enable;
          if (v86 !== v5.stencil_enable) {
            if (v86) {
              v1.enable(2960);
            } else {
              v1.disable(2960);
            }
            v5.stencil_enable = v86;
          }
          v87 = v4.stencil_mask;
          if (v87 !== v5.stencil_mask) {
            v1.stencilMask(v87);
            v5.stencil_mask = v87;
          }
          v88 = v31[0];
          v89 = v31[1];
          v90 = v31[2];
          if (v88 !== v32[0] || v89 !== v32[1] || v90 !== v32[2]) {
            v1.stencilFunc(v88, v89, v90);
            v32[0] = v88;
            v32[1] = v89;
            v32[2] = v90;
          }
          v91 = v33[0];
          v92 = v33[1];
          v93 = v33[2];
          v94 = v33[3];
          if (v91 !== v34[0] || v92 !== v34[1] || v93 !== v34[2] || v94 !== v34[3]) {
            v1.stencilOpSeparate(v91, v92, v93, v94);
            v34[0] = v91;
            v34[1] = v92;
            v34[2] = v93;
            v34[3] = v94;
          }
          v95 = v35[0];
          v96 = v35[1];
          v97 = v35[2];
          v98 = v35[3];
          if (v95 !== v36[0] || v96 !== v36[1] || v97 !== v36[2] || v98 !== v36[3]) {
            v1.stencilOpSeparate(v95, v96, v97, v98);
            v36[0] = v95;
            v36[1] = v96;
            v36[2] = v97;
            v36[3] = v98;
          }
          v99 = v4.scissor_enable;
          if (v99 !== v5.scissor_enable) {
            if (v99) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v99;
          }
        }
        v100 = v2.framebufferWidth;
        v101 = v2.framebufferHeight;
        v102 = v2.viewportWidth;
        v2.viewportWidth = v100;
        v103 = v2.viewportHeight;
        v2.viewportHeight = v101;
        v1.viewport(0, 0, v100, v101);
        v40[0] = 0;
        v40[1] = 0;
        v40[2] = v100;
        v40[3] = v101;
        if (g104) {
          v1.enable(2929);
        } else {
          v1.disable(2929);
        }
        v5.depth_enable = g104;
        v1.depthMask(g105);
        v5.depth_mask = g105;
        v106 = v2.framebufferWidth;
        v107 = v2.framebufferHeight;
        v1.scissor(0, 0, v106, v107);
        v38[0] = 0;
        v38[1] = 0;
        v38[2] = v106;
        v38[3] = v107;
        v108 = v5.profile;
        if (v108) {
          v109 = performance.now();
          g48.count++;
        }
        v1.useProgram(g110.program);
        v111 = v14.angle_instanced_arrays;
        v11.setVAO(null);
        v114 = g113.location;
        v115 = v10[v114];
        if (!v115.buffer) {
          v1.enableVertexAttribArray(v114);
        }
        v116 = 2;
        if (v115.type !== 5126 || v115.size !== v116 || v115.buffer !== g112 || v115.normalized !== false || v115.offset !== 0 || v115.stride !== 0) {
          v1.bindBuffer(34962, g112.buffer);
          v1.vertexAttribPointer(v114, v116, 5126, false, 0, 0);
          v115.type = 5126;
          v115.size = v116;
          v115.buffer = g112;
          v115.normalized = false;
          v115.offset = 0;
          v115.stride = 0;
        }
        if (v115.divisor !== 0) {
          v111.vertexAttribDivisorANGLE(v114, 0);
          v115.divisor = 0;
        }
        v119 = g118.call(this, v2, a0, 0);
        v1.uniform1f(g117.location, v119);
        v122 = g121.call(this, v2, a0, 0);
        if (v122 && v122._reglType === "framebuffer") {
          v122 = v122.color[0];
        }
        v123 = v122._texture;
        v1.uniform1i(g120.location, v123.bind());
        v126 = g125.call(this, v2, a0, 0);
        v127 = v126[0];
        v128 = v126[1];
        v1.uniform2f(g124.location, v127, v128);
        v131 = g130.call(this, v2, a0, 0);
        v1.uniform1f(g129.location, v131);
        v134 = g133.call(this, v2, a0, 0);
        v1.uniformMatrix3fv(g132.location, false, Array.isArray(v134) || v134 instanceof Float32Array ? v134 : (v135[0] = v134[0], v135[1] = v134[1], v135[2] = v134[2], v135[3] = v134[3], v135[4] = v134[4], v135[5] = v134[5], v135[6] = v134[6], v135[7] = v134[7], v135[8] = v134[8], v135));
        v136 = v6.elements;
        if (v136) {
          v1.bindBuffer(34963, v136.buffer.buffer);
        } else if (v11.currentVAO) {
          v136 = v7.getElements(v11.currentVAO.elements);
          if (v136)
            v1.bindBuffer(34963, v136.buffer.buffer);
        }
        v137 = v6.offset;
        v139 = g138.call(this, v2, a0, 0);
        if (v139) {
          v140 = v6.instances;
          if (v140 > 0) {
            if (v136) {
              v111.drawElementsInstancedANGLE(0, v139, v136.type, v137 << (v136.type - 5121 >> 1), v140);
            } else {
              v111.drawArraysInstancedANGLE(0, v137, v139, v140);
            }
          } else if (v140 < 0) {
            if (v136) {
              v1.drawElements(0, v139, v136.type, v137 << (v136.type - 5121 >> 1));
            } else {
              v1.drawArrays(0, v137, v139);
            }
          }
          v5.dirty = true;
          v11.setVAO(null);
          v13.next = v53;
          v2.framebufferWidth = v54;
          v2.framebufferHeight = v55;
          v2.viewportWidth = v102;
          v2.viewportHeight = v103;
          if (v108) {
            g48.cpuTime += performance.now() - v109;
          }
          v123.unbind();
        }
      },
      "scope": function(a0, a1, a2) {
        var v141, v142, v143, v144, v145, v146, v147, v148, v149, v151, v153, v154, v155, v157, v159, v160, v161, v163, v165, v166, v167, v168, v169, v170, v171, v173, v174, v176, v177, v179, v180, v182, v183, v185, v186, v188, v190, v191, v192, v193, v194, v195, v196, v197, v198, v199, v200, v201, v203, v205;
        v141 = g50.call(this, v2, a0, a2);
        v142 = v13.getFramebuffer(v141);
        v143 = v13.next;
        v13.next = v142;
        v144 = v2.framebufferWidth;
        v2.framebufferWidth = v142 ? v142.width : v2.drawingBufferWidth;
        v145 = v2.framebufferHeight;
        v2.framebufferHeight = v142 ? v142.height : v2.drawingBufferHeight;
        v146 = v2.framebufferWidth;
        v147 = v2.framebufferHeight;
        v148 = v2.viewportWidth;
        v2.viewportWidth = v146;
        v149 = v2.viewportHeight;
        v2.viewportHeight = v147;
        v151 = v39[0];
        v39[0] = g150;
        v153 = v39[1];
        v39[1] = g152;
        v154 = v39[2];
        v39[2] = v146;
        v155 = v39[3];
        v39[3] = v147;
        v157 = v4.depth_enable;
        v4.depth_enable = g156;
        v159 = v4.depth_mask;
        v4.depth_mask = g158;
        v160 = v2.framebufferWidth;
        v161 = v2.framebufferHeight;
        v163 = v37[0];
        v37[0] = g162;
        v165 = v37[1];
        v37[1] = g164;
        v166 = v37[2];
        v37[2] = v160;
        v167 = v37[3];
        v37[3] = v161;
        v168 = v5.profile;
        if (v168) {
          v169 = performance.now();
          g48.count++;
        }
        v170 = g138.call(this, v2, a0, a2);
        v171 = v6.count;
        v6.count = v170;
        v173 = v6.primitive;
        v6.primitive = g172;
        v174 = g121.call(this, v2, a0, a2);
        v176 = v12[g175];
        v12[g175] = v174;
        v177 = g118.call(this, v2, a0, a2);
        v179 = v12[g178];
        v12[g178] = v177;
        v180 = g133.call(this, v2, a0, a2);
        v182 = v12[g181];
        v12[g181] = v180;
        v183 = g130.call(this, v2, a0, a2);
        v185 = v12[g184];
        v12[g184] = v183;
        v186 = g125.call(this, v2, a0, a2);
        v188 = v12[g187];
        v12[g187] = v186;
        v190 = g189.state;
        g189.state = 1;
        v191 = g189.x;
        g189.x = 0;
        v192 = g189.y;
        g189.y = 0;
        v193 = g189.z;
        g189.z = 0;
        v194 = g189.w;
        g189.w = 0;
        v195 = g189.buffer;
        g189.buffer = g112;
        v196 = g189.size;
        g189.size = 2;
        v197 = g189.normalized;
        g189.normalized = false;
        v198 = g189.type;
        g189.type = 5126;
        v199 = g189.offset;
        g189.offset = 0;
        v200 = g189.stride;
        g189.stride = 0;
        v201 = g189.divisor;
        g189.divisor = 0;
        v203 = v9.vert;
        v9.vert = g202;
        v205 = v9.frag;
        v9.frag = g204;
        v5.dirty = true;
        a1(v2, a0, a2);
        v13.next = v143;
        v2.framebufferWidth = v144;
        v2.framebufferHeight = v145;
        v2.viewportWidth = v148;
        v2.viewportHeight = v149;
        v39[0] = v151;
        v39[1] = v153;
        v39[2] = v154;
        v39[3] = v155;
        v4.depth_enable = v157;
        v4.depth_mask = v159;
        v37[0] = v163;
        v37[1] = v165;
        v37[2] = v166;
        v37[3] = v167;
        if (v168) {
          g48.cpuTime += performance.now() - v169;
        }
        v6.count = v171;
        v6.primitive = v173;
        v12[g175] = v176;
        v12[g178] = v179;
        v12[g181] = v182;
        v12[g184] = v185;
        v12[g187] = v188;
        g189.state = v190;
        g189.x = v191;
        g189.y = v192;
        g189.z = v193;
        g189.w = v194;
        g189.buffer = v195;
        g189.size = v196;
        g189.normalized = v197;
        g189.type = v198;
        g189.offset = v199;
        g189.stride = v200;
        g189.divisor = v201;
        v9.vert = v203;
        v9.frag = v205;
        v5.dirty = true;
      },
      "batch": function(a0, a1) {
        var v207, v208, v209, v210, v211, v256, v257, v258, v259, v262, v263, v264, v265, v266, v267, v268;
        v14.angle_instanced_arrays;
        v207 = g50.call(this, v2, a0, 0);
        v208 = v13.getFramebuffer(v207);
        v209 = v13.next;
        v13.next = v208;
        v210 = v2.framebufferWidth;
        v2.framebufferWidth = v208 ? v208.width : v2.drawingBufferWidth;
        v211 = v2.framebufferHeight;
        v2.framebufferHeight = v208 ? v208.height : v2.drawingBufferHeight;
        if (v208 !== v13.cur) {
          if (v208) {
            v1.bindFramebuffer(36160, v208.framebuffer);
          } else {
            v1.bindFramebuffer(36160, null);
          }
          v13.cur = v208;
        }
        if (v5.dirty) {
          var v212, v213, v214, v215, v216, v217, v218, v219, v220, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, v235, v236, v237, v238, v239, v240, v241, v242, v243, v244, v245, v246, v247, v248, v249, v250, v251, v252, v253, v254, v255;
          v212 = v4.dither;
          if (v212 !== v5.dither) {
            if (v212) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v212;
          }
          v213 = v4.blend_enable;
          if (v213 !== v5.blend_enable) {
            if (v213) {
              v1.enable(3042);
            } else {
              v1.disable(3042);
            }
            v5.blend_enable = v213;
          }
          v214 = v17[0];
          v215 = v17[1];
          v216 = v17[2];
          v217 = v17[3];
          if (v214 !== v18[0] || v215 !== v18[1] || v216 !== v18[2] || v217 !== v18[3]) {
            v1.blendColor(v214, v215, v216, v217);
            v18[0] = v214;
            v18[1] = v215;
            v18[2] = v216;
            v18[3] = v217;
          }
          v218 = v19[0];
          v219 = v19[1];
          if (v218 !== v20[0] || v219 !== v20[1]) {
            v1.blendEquationSeparate(v218, v219);
            v20[0] = v218;
            v20[1] = v219;
          }
          v220 = v21[0];
          v221 = v21[1];
          v222 = v21[2];
          v223 = v21[3];
          if (v220 !== v22[0] || v221 !== v22[1] || v222 !== v22[2] || v223 !== v22[3]) {
            v1.blendFuncSeparate(v220, v221, v222, v223);
            v22[0] = v220;
            v22[1] = v221;
            v22[2] = v222;
            v22[3] = v223;
          }
          v224 = v4.depth_func;
          if (v224 !== v5.depth_func) {
            v1.depthFunc(v224);
            v5.depth_func = v224;
          }
          v225 = v23[0];
          v226 = v23[1];
          if (v225 !== v24[0] || v226 !== v24[1]) {
            v1.depthRange(v225, v226);
            v24[0] = v225;
            v24[1] = v226;
          }
          v227 = v25[0];
          v228 = v25[1];
          v229 = v25[2];
          v230 = v25[3];
          if (v227 !== v26[0] || v228 !== v26[1] || v229 !== v26[2] || v230 !== v26[3]) {
            v1.colorMask(v227, v228, v229, v230);
            v26[0] = v227;
            v26[1] = v228;
            v26[2] = v229;
            v26[3] = v230;
          }
          v231 = v4.cull_enable;
          if (v231 !== v5.cull_enable) {
            if (v231) {
              v1.enable(2884);
            } else {
              v1.disable(2884);
            }
            v5.cull_enable = v231;
          }
          v232 = v4.cull_face;
          if (v232 !== v5.cull_face) {
            v1.cullFace(v232);
            v5.cull_face = v232;
          }
          v233 = v4.frontFace;
          if (v233 !== v5.frontFace) {
            v1.frontFace(v233);
            v5.frontFace = v233;
          }
          v234 = v4.lineWidth;
          if (v234 !== v5.lineWidth) {
            v1.lineWidth(v234);
            v5.lineWidth = v234;
          }
          v235 = v4.polygonOffset_enable;
          if (v235 !== v5.polygonOffset_enable) {
            if (v235) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v235;
          }
          v236 = v27[0];
          v237 = v27[1];
          if (v236 !== v28[0] || v237 !== v28[1]) {
            v1.polygonOffset(v236, v237);
            v28[0] = v236;
            v28[1] = v237;
          }
          v238 = v4.sample_alpha;
          if (v238 !== v5.sample_alpha) {
            if (v238) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v238;
          }
          v239 = v4.sample_enable;
          if (v239 !== v5.sample_enable) {
            if (v239) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v239;
          }
          v240 = v29[0];
          v241 = v29[1];
          if (v240 !== v30[0] || v241 !== v30[1]) {
            v1.sampleCoverage(v240, v241);
            v30[0] = v240;
            v30[1] = v241;
          }
          v242 = v4.stencil_enable;
          if (v242 !== v5.stencil_enable) {
            if (v242) {
              v1.enable(2960);
            } else {
              v1.disable(2960);
            }
            v5.stencil_enable = v242;
          }
          v243 = v4.stencil_mask;
          if (v243 !== v5.stencil_mask) {
            v1.stencilMask(v243);
            v5.stencil_mask = v243;
          }
          v244 = v31[0];
          v245 = v31[1];
          v246 = v31[2];
          if (v244 !== v32[0] || v245 !== v32[1] || v246 !== v32[2]) {
            v1.stencilFunc(v244, v245, v246);
            v32[0] = v244;
            v32[1] = v245;
            v32[2] = v246;
          }
          v247 = v33[0];
          v248 = v33[1];
          v249 = v33[2];
          v250 = v33[3];
          if (v247 !== v34[0] || v248 !== v34[1] || v249 !== v34[2] || v250 !== v34[3]) {
            v1.stencilOpSeparate(v247, v248, v249, v250);
            v34[0] = v247;
            v34[1] = v248;
            v34[2] = v249;
            v34[3] = v250;
          }
          v251 = v35[0];
          v252 = v35[1];
          v253 = v35[2];
          v254 = v35[3];
          if (v251 !== v36[0] || v252 !== v36[1] || v253 !== v36[2] || v254 !== v36[3]) {
            v1.stencilOpSeparate(v251, v252, v253, v254);
            v36[0] = v251;
            v36[1] = v252;
            v36[2] = v253;
            v36[3] = v254;
          }
          v255 = v4.scissor_enable;
          if (v255 !== v5.scissor_enable) {
            if (v255) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v255;
          }
        }
        v256 = v2.framebufferWidth;
        v257 = v2.framebufferHeight;
        v258 = v2.viewportWidth;
        v2.viewportWidth = v256;
        v259 = v2.viewportHeight;
        v2.viewportHeight = v257;
        v1.viewport(0, 0, v256, v257);
        v40[0] = 0;
        v40[1] = 0;
        v40[2] = v256;
        v40[3] = v257;
        if (g260) {
          v1.enable(2929);
        } else {
          v1.disable(2929);
        }
        v5.depth_enable = g260;
        v1.depthMask(g261);
        v5.depth_mask = g261;
        v262 = v2.framebufferWidth;
        v263 = v2.framebufferHeight;
        v1.scissor(0, 0, v262, v263);
        v38[0] = 0;
        v38[1] = 0;
        v38[2] = v262;
        v38[3] = v263;
        v264 = v5.profile;
        if (v264) {
          v265 = performance.now();
          g48.count += a1;
        }
        v1.useProgram(g110.program);
        v266 = v14.angle_instanced_arrays;
        var v269, v270, v271, v272, v273, v274, v275, v276, v277, v278, v279, v281, v282, v283, v284;
        v11.setVAO(null);
        v269 = g113.location;
        v270 = v10[v269];
        if (!v270.buffer) {
          v1.enableVertexAttribArray(v269);
        }
        v271 = 2;
        if (v270.type !== 5126 || v270.size !== v271 || v270.buffer !== g112 || v270.normalized !== false || v270.offset !== 0 || v270.stride !== 0) {
          v1.bindBuffer(34962, g112.buffer);
          v1.vertexAttribPointer(v269, v271, 5126, false, 0, 0);
          v270.type = 5126;
          v270.size = v271;
          v270.buffer = g112;
          v270.normalized = false;
          v270.offset = 0;
          v270.stride = 0;
        }
        if (v270.divisor !== 0) {
          v266.vertexAttribDivisorANGLE(v269, 0);
          v270.divisor = 0;
        }
        v272 = g118.call(this, v2, v268, v267);
        v1.uniform1f(g117.location, v272);
        v273 = g121.call(this, v2, v268, v267);
        if (v273 && v273._reglType === "framebuffer") {
          v273 = v273.color[0];
        }
        v274 = v273._texture;
        v1.uniform1i(g120.location, v274.bind());
        v275 = g125.call(this, v2, v268, v267);
        v276 = v275[0];
        v277 = v275[1];
        v1.uniform2f(g124.location, v276, v277);
        v278 = g130.call(this, v2, v268, v267);
        v1.uniform1f(g129.location, v278);
        v279 = g133.call(this, v2, v268, v267);
        v1.uniformMatrix3fv(g132.location, false, Array.isArray(v279) || v279 instanceof Float32Array ? v279 : (v280[0] = v279[0], v280[1] = v279[1], v280[2] = v279[2], v280[3] = v279[3], v280[4] = v279[4], v280[5] = v279[5], v280[6] = v279[6], v280[7] = v279[7], v280[8] = v279[8], v280));
        v281 = v6.elements;
        if (v281) {
          v1.bindBuffer(34963, v281.buffer.buffer);
        } else if (v11.currentVAO) {
          v281 = v7.getElements(v11.currentVAO.elements);
          if (v281)
            v1.bindBuffer(34963, v281.buffer.buffer);
        }
        v282 = v6.offset;
        v283 = g138.call(this, v2, v268, v267);
        v284 = v6.instances;
        for (v267 = 0; v267 < a1; ++v267) {
          v268 = a0[v267];
          if (v283) {
            if (v284 > 0) {
              if (v281) {
                v266.drawElementsInstancedANGLE(0, v283, v281.type, v282 << (v281.type - 5121 >> 1), v284);
              } else {
                v266.drawArraysInstancedANGLE(0, v282, v283, v284);
              }
            } else if (v284 < 0) {
              if (v281) {
                v1.drawElements(0, v283, v281.type, v282 << (v281.type - 5121 >> 1));
              } else {
                v1.drawArrays(0, v282, v283);
              }
            }
          }
        }
        v274.unbind();
        v5.dirty = true;
        v11.setVAO(null);
        v13.next = v209;
        v2.framebufferWidth = v210;
        v2.framebufferHeight = v211;
        v2.viewportWidth = v258;
        v2.viewportHeight = v259;
        if (v264) {
          g48.cpuTime += performance.now() - v265;
        }
      }
    };
  },
  "4fcdeed74044cf60aec3d04b2ef34a1a9339bee96262f7b7dc4f0861dd54a457": function anonymous13(g0, g48, g100, g101, g102, g103, g104, g107, g109, g124, g128, g143, g147, g162, g166, g181, g185, g200, g204, g219, g223, g224, g226, g227, g229, g230, g232, g233, g235, g236, g238, g239, g243, g244, g246, g247, g250, g251, g253, g254, g257, g258, g262, g263, g265, g266, g269, g270, g274, g276, g278, g280, g282, g284, g286, g288, g290, g292, g294, g296, g298, g306, g309, g312, g315, g318, g320, g322, g325, g328, g331, g334, g336, g338, g341, g344, g347, g349, g351, g354, g357, g360, g376, g403, g430, g457, g484, g511, g524, g526, g573, g574, g575, g576, g577) {
    var v1, v2, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v46, v49, v50, v51, v52, v53, v54, v268, v704;
    v1 = g0.gl;
    v2 = g0.context;
    g0.strings;
    v4 = g0.next;
    v5 = g0.current;
    v6 = g0.draw;
    v7 = g0.elements;
    v8 = g0.buffer;
    v9 = g0.shader;
    v10 = g0.attributes;
    v11 = g0.vao;
    v12 = g0.uniforms;
    v13 = g0.framebuffer;
    v14 = g0.extensions;
    g0.timer;
    v16 = g0.isBufferArgs;
    v17 = v4.blend_color;
    v18 = v5.blend_color;
    v19 = v4.blend_equation;
    v20 = v5.blend_equation;
    v21 = v4.blend_func;
    v22 = v5.blend_func;
    v23 = v4.depth_range;
    v24 = v5.depth_range;
    v25 = v4.colorMask;
    v26 = v5.colorMask;
    v27 = v4.polygonOffset_offset;
    v28 = v5.polygonOffset_offset;
    v29 = v4.sample_coverage;
    v30 = v5.sample_coverage;
    v31 = v4.stencil_func;
    v32 = v5.stencil_func;
    v33 = v4.stencil_opFront;
    v34 = v5.stencil_opFront;
    v35 = v4.stencil_opBack;
    v36 = v5.stencil_opBack;
    v37 = v4.scissor_box;
    v38 = v5.scissor_box;
    v39 = v4.viewport;
    v40 = v5.viewport;
    v46 = {
      "int8": 5120,
      "int16": 5122,
      "int32": 5124,
      "uint8": 5121,
      "uint16": 5123,
      "uint32": 5125,
      "float": 5126,
      "float32": 5126
    };
    v49 = {};
    v49.divisor = 0;
    v50 = {};
    v50.divisor = 1;
    v50.offset = 0;
    v50.stride = 16;
    v51 = {};
    v51.divisor = 1;
    v51.offset = 8;
    v51.stride = 16;
    v52 = {};
    v52.divisor = 1;
    v52.offset = 0;
    v52.stride = 16;
    v53 = {};
    v53.divisor = 1;
    v53.offset = 0;
    v53.stride = 4;
    v54 = {};
    v54.divisor = 1;
    v54.offset = 0;
    v54.stride = 4;
    v268 = new Float32Array(9);
    v704 = new Float32Array(9);
    return {
      "draw": function(a0) {
        var v56, v105, v106, v108, v110, v111, v112, v113, v114, v115, v116, v117, v118, v119, v120, v121, v122, v123, v125, v126, v127, v129, v130, v131, v132, v133, v134, v135, v136, v137, v138, v139, v140, v141, v142, v144, v145, v146, v148, v149, v150, v151, v152, v153, v154, v155, v156, v157, v158, v159, v160, v161, v163, v164, v165, v167, v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, v178, v179, v180, v182, v183, v184, v186, v187, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, v198, v199, v201, v202, v203, v205, v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v216, v217, v218, v220, v221, v222, v225, v228, v231, v234, v237, v240, v241, v242, v245, v248, v249, v252, v255, v256, v259, v260, v261, v264, v267, v271, v272, v273, v275, v277;
        v14.angle_instanced_arrays;
        v56 = v13.next;
        if (v56 !== v13.cur) {
          if (v56) {
            v1.bindFramebuffer(36160, v56.framebuffer);
          } else {
            v1.bindFramebuffer(36160, null);
          }
          v13.cur = v56;
        }
        if (v5.dirty) {
          var v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99;
          v57 = v4.dither;
          if (v57 !== v5.dither) {
            if (v57) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v57;
          }
          v58 = v17[0];
          v59 = v17[1];
          v60 = v17[2];
          v61 = v17[3];
          if (v58 !== v18[0] || v59 !== v18[1] || v60 !== v18[2] || v61 !== v18[3]) {
            v1.blendColor(v58, v59, v60, v61);
            v18[0] = v58;
            v18[1] = v59;
            v18[2] = v60;
            v18[3] = v61;
          }
          v62 = v4.depth_func;
          if (v62 !== v5.depth_func) {
            v1.depthFunc(v62);
            v5.depth_func = v62;
          }
          v63 = v23[0];
          v64 = v23[1];
          if (v63 !== v24[0] || v64 !== v24[1]) {
            v1.depthRange(v63, v64);
            v24[0] = v63;
            v24[1] = v64;
          }
          v65 = v25[0];
          v66 = v25[1];
          v67 = v25[2];
          v68 = v25[3];
          if (v65 !== v26[0] || v66 !== v26[1] || v67 !== v26[2] || v68 !== v26[3]) {
            v1.colorMask(v65, v66, v67, v68);
            v26[0] = v65;
            v26[1] = v66;
            v26[2] = v67;
            v26[3] = v68;
          }
          v69 = v4.frontFace;
          if (v69 !== v5.frontFace) {
            v1.frontFace(v69);
            v5.frontFace = v69;
          }
          v70 = v4.lineWidth;
          if (v70 !== v5.lineWidth) {
            v1.lineWidth(v70);
            v5.lineWidth = v70;
          }
          v71 = v4.polygonOffset_enable;
          if (v71 !== v5.polygonOffset_enable) {
            if (v71) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v71;
          }
          v72 = v27[0];
          v73 = v27[1];
          if (v72 !== v28[0] || v73 !== v28[1]) {
            v1.polygonOffset(v72, v73);
            v28[0] = v72;
            v28[1] = v73;
          }
          v74 = v4.sample_alpha;
          if (v74 !== v5.sample_alpha) {
            if (v74) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v74;
          }
          v75 = v4.sample_enable;
          if (v75 !== v5.sample_enable) {
            if (v75) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v75;
          }
          v76 = v29[0];
          v77 = v29[1];
          if (v76 !== v30[0] || v77 !== v30[1]) {
            v1.sampleCoverage(v76, v77);
            v30[0] = v76;
            v30[1] = v77;
          }
          v78 = v4.stencil_enable;
          if (v78 !== v5.stencil_enable) {
            if (v78) {
              v1.enable(2960);
            } else {
              v1.disable(2960);
            }
            v5.stencil_enable = v78;
          }
          v79 = v4.stencil_mask;
          if (v79 !== v5.stencil_mask) {
            v1.stencilMask(v79);
            v5.stencil_mask = v79;
          }
          v80 = v31[0];
          v81 = v31[1];
          v82 = v31[2];
          if (v80 !== v32[0] || v81 !== v32[1] || v82 !== v32[2]) {
            v1.stencilFunc(v80, v81, v82);
            v32[0] = v80;
            v32[1] = v81;
            v32[2] = v82;
          }
          v83 = v33[0];
          v84 = v33[1];
          v85 = v33[2];
          v86 = v33[3];
          if (v83 !== v34[0] || v84 !== v34[1] || v85 !== v34[2] || v86 !== v34[3]) {
            v1.stencilOpSeparate(v83, v84, v85, v86);
            v34[0] = v83;
            v34[1] = v84;
            v34[2] = v85;
            v34[3] = v86;
          }
          v87 = v35[0];
          v88 = v35[1];
          v89 = v35[2];
          v90 = v35[3];
          if (v87 !== v36[0] || v88 !== v36[1] || v89 !== v36[2] || v90 !== v36[3]) {
            v1.stencilOpSeparate(v87, v88, v89, v90);
            v36[0] = v87;
            v36[1] = v88;
            v36[2] = v89;
            v36[3] = v90;
          }
          v91 = v4.scissor_enable;
          if (v91 !== v5.scissor_enable) {
            if (v91) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v91;
          }
          v92 = v37[0];
          v93 = v37[1];
          v94 = v37[2];
          v95 = v37[3];
          if (v92 !== v38[0] || v93 !== v38[1] || v94 !== v38[2] || v95 !== v38[3]) {
            v1.scissor(v92, v93, v94, v95);
            v38[0] = v92;
            v38[1] = v93;
            v38[2] = v94;
            v38[3] = v95;
          }
          v96 = v39[0];
          v97 = v39[1];
          v98 = v39[2];
          v99 = v39[3];
          if (v96 !== v40[0] || v97 !== v40[1] || v98 !== v40[2] || v99 !== v40[3]) {
            v1.viewport(v96, v97, v98, v99);
            v40[0] = v96;
            v40[1] = v97;
            v40[2] = v98;
            v40[3] = v99;
          }
        }
        if (g100) {
          v1.enable(3042);
        } else {
          v1.disable(3042);
        }
        v5.blend_enable = g100;
        v1.blendEquationSeparate(32774, 32774);
        v20[0] = 32774;
        v20[1] = 32774;
        v1.blendFuncSeparate(770, 771, 1, 771);
        v22[0] = 770;
        v22[1] = 771;
        v22[2] = 1;
        v22[3] = 771;
        if (g101) {
          v1.enable(2884);
        } else {
          v1.disable(2884);
        }
        v5.cull_enable = g101;
        v1.cullFace(g102);
        v5.cull_face = g102;
        if (g103) {
          v1.enable(2929);
        } else {
          v1.disable(2929);
        }
        v5.depth_enable = g103;
        v1.depthMask(g104);
        v5.depth_mask = g104;
        v105 = v5.profile;
        if (v105) {
          v106 = performance.now();
          g48.count++;
        }
        v1.useProgram(g107.program);
        v108 = v14.angle_instanced_arrays;
        v11.setVAO(null);
        v110 = g109.call(this, v2, a0, 0);
        v54.buffer = v110;
        v111 = false;
        v112 = 1;
        v113 = 0;
        v114 = 0;
        v115 = 0;
        v116 = 0;
        v117 = null;
        v118 = 0;
        v119 = false;
        v120 = 5126;
        v121 = 0;
        v122 = 0;
        v123 = 0;
        if (v16(v54)) {
          v111 = true;
          v117 = v8.createStream(34962, v54);
          v120 = v117.dtype;
        } else {
          v117 = v8.getBuffer(v54);
          if (v117) {
            v120 = v117.dtype;
          } else if ("constant" in v54) {
            v112 = 2;
            if (typeof v54.constant === "number") {
              v113 = v54.constant;
              v114 = v115 = v116 = 0;
            } else {
              v113 = v54.constant.length > 0 ? v54.constant[0] : 0;
              v114 = v54.constant.length > 1 ? v54.constant[1] : 0;
              v115 = v54.constant.length > 2 ? v54.constant[2] : 0;
              v116 = v54.constant.length > 3 ? v54.constant[3] : 0;
            }
          } else {
            if (v16(v54.buffer)) {
              v117 = v8.createStream(34962, v54.buffer);
            } else {
              v117 = v8.getBuffer(v54.buffer);
            }
            v120 = "type" in v54 ? v46[v54.type] : v117.dtype;
            v119 = !!v54.normalized;
            v118 = v54.size | 0;
            v121 = v54.offset | 0;
            v122 = v54.stride | 0;
            v123 = v54.divisor | 0;
          }
        }
        v125 = g124.location;
        v126 = v10[v125];
        if (v112 === 1) {
          if (!v126.buffer) {
            v1.enableVertexAttribArray(v125);
          }
          v127 = v118 || 1;
          if (v126.type !== v120 || v126.size !== v127 || v126.buffer !== v117 || v126.normalized !== v119 || v126.offset !== v121 || v126.stride !== v122) {
            v1.bindBuffer(34962, v117.buffer);
            v1.vertexAttribPointer(v125, v127, v120, v119, v122, v121);
            v126.type = v120;
            v126.size = v127;
            v126.buffer = v117;
            v126.normalized = v119;
            v126.offset = v121;
            v126.stride = v122;
          }
          if (v126.divisor !== v123) {
            v108.vertexAttribDivisorANGLE(v125, v123);
            v126.divisor = v123;
          }
        } else {
          if (v126.buffer) {
            v1.disableVertexAttribArray(v125);
            v126.buffer = null;
          }
          if (v126.x !== v113 || v126.y !== v114 || v126.z !== v115 || v126.w !== v116) {
            v1.vertexAttrib4f(v125, v113, v114, v115, v116);
            v126.x = v113;
            v126.y = v114;
            v126.z = v115;
            v126.w = v116;
          }
        }
        v129 = g128.call(this, v2, a0, 0);
        v52.buffer = v129;
        v130 = false;
        v131 = 1;
        v132 = 0;
        v133 = 0;
        v134 = 0;
        v135 = 0;
        v136 = null;
        v137 = 0;
        v138 = false;
        v139 = 5126;
        v140 = 0;
        v141 = 0;
        v142 = 0;
        if (v16(v52)) {
          v130 = true;
          v136 = v8.createStream(34962, v52);
          v139 = v136.dtype;
        } else {
          v136 = v8.getBuffer(v52);
          if (v136) {
            v139 = v136.dtype;
          } else if ("constant" in v52) {
            v131 = 2;
            if (typeof v52.constant === "number") {
              v132 = v52.constant;
              v133 = v134 = v135 = 0;
            } else {
              v132 = v52.constant.length > 0 ? v52.constant[0] : 0;
              v133 = v52.constant.length > 1 ? v52.constant[1] : 0;
              v134 = v52.constant.length > 2 ? v52.constant[2] : 0;
              v135 = v52.constant.length > 3 ? v52.constant[3] : 0;
            }
          } else {
            if (v16(v52.buffer)) {
              v136 = v8.createStream(34962, v52.buffer);
            } else {
              v136 = v8.getBuffer(v52.buffer);
            }
            v139 = "type" in v52 ? v46[v52.type] : v136.dtype;
            v138 = !!v52.normalized;
            v137 = v52.size | 0;
            v140 = v52.offset | 0;
            v141 = v52.stride | 0;
            v142 = v52.divisor | 0;
          }
        }
        v144 = g143.location;
        v145 = v10[v144];
        if (v131 === 1) {
          if (!v145.buffer) {
            v1.enableVertexAttribArray(v144);
          }
          v146 = v137 || 4;
          if (v145.type !== v139 || v145.size !== v146 || v145.buffer !== v136 || v145.normalized !== v138 || v145.offset !== v140 || v145.stride !== v141) {
            v1.bindBuffer(34962, v136.buffer);
            v1.vertexAttribPointer(v144, v146, v139, v138, v141, v140);
            v145.type = v139;
            v145.size = v146;
            v145.buffer = v136;
            v145.normalized = v138;
            v145.offset = v140;
            v145.stride = v141;
          }
          if (v145.divisor !== v142) {
            v108.vertexAttribDivisorANGLE(v144, v142);
            v145.divisor = v142;
          }
        } else {
          if (v145.buffer) {
            v1.disableVertexAttribArray(v144);
            v145.buffer = null;
          }
          if (v145.x !== v132 || v145.y !== v133 || v145.z !== v134 || v145.w !== v135) {
            v1.vertexAttrib4f(v144, v132, v133, v134, v135);
            v145.x = v132;
            v145.y = v133;
            v145.z = v134;
            v145.w = v135;
          }
        }
        v148 = g147.call(this, v2, a0, 0);
        v50.buffer = v148;
        v149 = false;
        v150 = 1;
        v151 = 0;
        v152 = 0;
        v153 = 0;
        v154 = 0;
        v155 = null;
        v156 = 0;
        v157 = false;
        v158 = 5126;
        v159 = 0;
        v160 = 0;
        v161 = 0;
        if (v16(v50)) {
          v149 = true;
          v155 = v8.createStream(34962, v50);
          v158 = v155.dtype;
        } else {
          v155 = v8.getBuffer(v50);
          if (v155) {
            v158 = v155.dtype;
          } else if ("constant" in v50) {
            v150 = 2;
            if (typeof v50.constant === "number") {
              v151 = v50.constant;
              v152 = v153 = v154 = 0;
            } else {
              v151 = v50.constant.length > 0 ? v50.constant[0] : 0;
              v152 = v50.constant.length > 1 ? v50.constant[1] : 0;
              v153 = v50.constant.length > 2 ? v50.constant[2] : 0;
              v154 = v50.constant.length > 3 ? v50.constant[3] : 0;
            }
          } else {
            if (v16(v50.buffer)) {
              v155 = v8.createStream(34962, v50.buffer);
            } else {
              v155 = v8.getBuffer(v50.buffer);
            }
            v158 = "type" in v50 ? v46[v50.type] : v155.dtype;
            v157 = !!v50.normalized;
            v156 = v50.size | 0;
            v159 = v50.offset | 0;
            v160 = v50.stride | 0;
            v161 = v50.divisor | 0;
          }
        }
        v163 = g162.location;
        v164 = v10[v163];
        if (v150 === 1) {
          if (!v164.buffer) {
            v1.enableVertexAttribArray(v163);
          }
          v165 = v156 || 2;
          if (v164.type !== v158 || v164.size !== v165 || v164.buffer !== v155 || v164.normalized !== v157 || v164.offset !== v159 || v164.stride !== v160) {
            v1.bindBuffer(34962, v155.buffer);
            v1.vertexAttribPointer(v163, v165, v158, v157, v160, v159);
            v164.type = v158;
            v164.size = v165;
            v164.buffer = v155;
            v164.normalized = v157;
            v164.offset = v159;
            v164.stride = v160;
          }
          if (v164.divisor !== v161) {
            v108.vertexAttribDivisorANGLE(v163, v161);
            v164.divisor = v161;
          }
        } else {
          if (v164.buffer) {
            v1.disableVertexAttribArray(v163);
            v164.buffer = null;
          }
          if (v164.x !== v151 || v164.y !== v152 || v164.z !== v153 || v164.w !== v154) {
            v1.vertexAttrib4f(v163, v151, v152, v153, v154);
            v164.x = v151;
            v164.y = v152;
            v164.z = v153;
            v164.w = v154;
          }
        }
        v167 = g166.call(this, v2, a0, 0);
        v51.buffer = v167;
        v168 = false;
        v169 = 1;
        v170 = 0;
        v171 = 0;
        v172 = 0;
        v173 = 0;
        v174 = null;
        v175 = 0;
        v176 = false;
        v177 = 5126;
        v178 = 0;
        v179 = 0;
        v180 = 0;
        if (v16(v51)) {
          v168 = true;
          v174 = v8.createStream(34962, v51);
          v177 = v174.dtype;
        } else {
          v174 = v8.getBuffer(v51);
          if (v174) {
            v177 = v174.dtype;
          } else if ("constant" in v51) {
            v169 = 2;
            if (typeof v51.constant === "number") {
              v170 = v51.constant;
              v171 = v172 = v173 = 0;
            } else {
              v170 = v51.constant.length > 0 ? v51.constant[0] : 0;
              v171 = v51.constant.length > 1 ? v51.constant[1] : 0;
              v172 = v51.constant.length > 2 ? v51.constant[2] : 0;
              v173 = v51.constant.length > 3 ? v51.constant[3] : 0;
            }
          } else {
            if (v16(v51.buffer)) {
              v174 = v8.createStream(34962, v51.buffer);
            } else {
              v174 = v8.getBuffer(v51.buffer);
            }
            v177 = "type" in v51 ? v46[v51.type] : v174.dtype;
            v176 = !!v51.normalized;
            v175 = v51.size | 0;
            v178 = v51.offset | 0;
            v179 = v51.stride | 0;
            v180 = v51.divisor | 0;
          }
        }
        v182 = g181.location;
        v183 = v10[v182];
        if (v169 === 1) {
          if (!v183.buffer) {
            v1.enableVertexAttribArray(v182);
          }
          v184 = v175 || 2;
          if (v183.type !== v177 || v183.size !== v184 || v183.buffer !== v174 || v183.normalized !== v176 || v183.offset !== v178 || v183.stride !== v179) {
            v1.bindBuffer(34962, v174.buffer);
            v1.vertexAttribPointer(v182, v184, v177, v176, v179, v178);
            v183.type = v177;
            v183.size = v184;
            v183.buffer = v174;
            v183.normalized = v176;
            v183.offset = v178;
            v183.stride = v179;
          }
          if (v183.divisor !== v180) {
            v108.vertexAttribDivisorANGLE(v182, v180);
            v183.divisor = v180;
          }
        } else {
          if (v183.buffer) {
            v1.disableVertexAttribArray(v182);
            v183.buffer = null;
          }
          if (v183.x !== v170 || v183.y !== v171 || v183.z !== v172 || v183.w !== v173) {
            v1.vertexAttrib4f(v182, v170, v171, v172, v173);
            v183.x = v170;
            v183.y = v171;
            v183.z = v172;
            v183.w = v173;
          }
        }
        v186 = g185.call(this, v2, a0, 0);
        v49.buffer = v186;
        v187 = false;
        v188 = 1;
        v189 = 0;
        v190 = 0;
        v191 = 0;
        v192 = 0;
        v193 = null;
        v194 = 0;
        v195 = false;
        v196 = 5126;
        v197 = 0;
        v198 = 0;
        v199 = 0;
        if (v16(v49)) {
          v187 = true;
          v193 = v8.createStream(34962, v49);
          v196 = v193.dtype;
        } else {
          v193 = v8.getBuffer(v49);
          if (v193) {
            v196 = v193.dtype;
          } else if ("constant" in v49) {
            v188 = 2;
            if (typeof v49.constant === "number") {
              v189 = v49.constant;
              v190 = v191 = v192 = 0;
            } else {
              v189 = v49.constant.length > 0 ? v49.constant[0] : 0;
              v190 = v49.constant.length > 1 ? v49.constant[1] : 0;
              v191 = v49.constant.length > 2 ? v49.constant[2] : 0;
              v192 = v49.constant.length > 3 ? v49.constant[3] : 0;
            }
          } else {
            if (v16(v49.buffer)) {
              v193 = v8.createStream(34962, v49.buffer);
            } else {
              v193 = v8.getBuffer(v49.buffer);
            }
            v196 = "type" in v49 ? v46[v49.type] : v193.dtype;
            v195 = !!v49.normalized;
            v194 = v49.size | 0;
            v197 = v49.offset | 0;
            v198 = v49.stride | 0;
            v199 = v49.divisor | 0;
          }
        }
        v201 = g200.location;
        v202 = v10[v201];
        if (v188 === 1) {
          if (!v202.buffer) {
            v1.enableVertexAttribArray(v201);
          }
          v203 = v194 || 2;
          if (v202.type !== v196 || v202.size !== v203 || v202.buffer !== v193 || v202.normalized !== v195 || v202.offset !== v197 || v202.stride !== v198) {
            v1.bindBuffer(34962, v193.buffer);
            v1.vertexAttribPointer(v201, v203, v196, v195, v198, v197);
            v202.type = v196;
            v202.size = v203;
            v202.buffer = v193;
            v202.normalized = v195;
            v202.offset = v197;
            v202.stride = v198;
          }
          if (v202.divisor !== v199) {
            v108.vertexAttribDivisorANGLE(v201, v199);
            v202.divisor = v199;
          }
        } else {
          if (v202.buffer) {
            v1.disableVertexAttribArray(v201);
            v202.buffer = null;
          }
          if (v202.x !== v189 || v202.y !== v190 || v202.z !== v191 || v202.w !== v192) {
            v1.vertexAttrib4f(v201, v189, v190, v191, v192);
            v202.x = v189;
            v202.y = v190;
            v202.z = v191;
            v202.w = v192;
          }
        }
        v205 = g204.call(this, v2, a0, 0);
        v53.buffer = v205;
        v206 = false;
        v207 = 1;
        v208 = 0;
        v209 = 0;
        v210 = 0;
        v211 = 0;
        v212 = null;
        v213 = 0;
        v214 = false;
        v215 = 5126;
        v216 = 0;
        v217 = 0;
        v218 = 0;
        if (v16(v53)) {
          v206 = true;
          v212 = v8.createStream(34962, v53);
          v215 = v212.dtype;
        } else {
          v212 = v8.getBuffer(v53);
          if (v212) {
            v215 = v212.dtype;
          } else if ("constant" in v53) {
            v207 = 2;
            if (typeof v53.constant === "number") {
              v208 = v53.constant;
              v209 = v210 = v211 = 0;
            } else {
              v208 = v53.constant.length > 0 ? v53.constant[0] : 0;
              v209 = v53.constant.length > 1 ? v53.constant[1] : 0;
              v210 = v53.constant.length > 2 ? v53.constant[2] : 0;
              v211 = v53.constant.length > 3 ? v53.constant[3] : 0;
            }
          } else {
            if (v16(v53.buffer)) {
              v212 = v8.createStream(34962, v53.buffer);
            } else {
              v212 = v8.getBuffer(v53.buffer);
            }
            v215 = "type" in v53 ? v46[v53.type] : v212.dtype;
            v214 = !!v53.normalized;
            v213 = v53.size | 0;
            v216 = v53.offset | 0;
            v217 = v53.stride | 0;
            v218 = v53.divisor | 0;
          }
        }
        v220 = g219.location;
        v221 = v10[v220];
        if (v207 === 1) {
          if (!v221.buffer) {
            v1.enableVertexAttribArray(v220);
          }
          v222 = v213 || 1;
          if (v221.type !== v215 || v221.size !== v222 || v221.buffer !== v212 || v221.normalized !== v214 || v221.offset !== v216 || v221.stride !== v217) {
            v1.bindBuffer(34962, v212.buffer);
            v1.vertexAttribPointer(v220, v222, v215, v214, v217, v216);
            v221.type = v215;
            v221.size = v222;
            v221.buffer = v212;
            v221.normalized = v214;
            v221.offset = v216;
            v221.stride = v217;
          }
          if (v221.divisor !== v218) {
            v108.vertexAttribDivisorANGLE(v220, v218);
            v221.divisor = v218;
          }
        } else {
          if (v221.buffer) {
            v1.disableVertexAttribArray(v220);
            v221.buffer = null;
          }
          if (v221.x !== v208 || v221.y !== v209 || v221.z !== v210 || v221.w !== v211) {
            v1.vertexAttrib4f(v220, v208, v209, v210, v211);
            v221.x = v208;
            v221.y = v209;
            v221.z = v210;
            v221.w = v211;
          }
        }
        v225 = g224.call(this, v2, a0, 0);
        v1.uniform1f(g223.location, v225);
        v228 = g227.call(this, v2, a0, 0);
        v1.uniform1f(g226.location, v228);
        v231 = g230.call(this, v2, a0, 0);
        v1.uniform1f(g229.location, v231);
        v234 = g233.call(this, v2, a0, 0);
        v1.uniform1f(g232.location, v234);
        v237 = g236.call(this, v2, a0, 0);
        v1.uniform1f(g235.location, v237);
        v240 = g239.call(this, v2, a0, 0);
        v241 = v240[0];
        v242 = v240[1];
        v1.uniform2f(g238.location, v241, v242);
        v245 = g244.call(this, v2, a0, 0);
        v1.uniform1f(g243.location, v245);
        v248 = g247.call(this, v2, a0, 0);
        if (v248 && v248._reglType === "framebuffer") {
          v248 = v248.color[0];
        }
        v249 = v248._texture;
        v1.uniform1i(g246.location, v249.bind());
        v252 = g251.call(this, v2, a0, 0);
        v1.uniform1f(g250.location, v252);
        v255 = g254.call(this, v2, a0, 0);
        if (v255 && v255._reglType === "framebuffer") {
          v255 = v255.color[0];
        }
        v256 = v255._texture;
        v1.uniform1i(g253.location, v256.bind());
        v259 = g258.call(this, v2, a0, 0);
        v260 = v259[0];
        v261 = v259[1];
        v1.uniform2f(g257.location, v260, v261);
        v264 = g263.call(this, v2, a0, 0);
        v1.uniform1f(g262.location, v264);
        v267 = g266.call(this, v2, a0, 0);
        v1.uniformMatrix3fv(g265.location, false, Array.isArray(v267) || v267 instanceof Float32Array ? v267 : (v268[0] = v267[0], v268[1] = v267[1], v268[2] = v267[2], v268[3] = v267[3], v268[4] = v267[4], v268[5] = v267[5], v268[6] = v267[6], v268[7] = v267[7], v268[8] = v267[8], v268));
        v271 = g270.call(this, v2, a0, 0);
        v1.uniform1f(g269.location, v271);
        v272 = v6.elements;
        if (v272) {
          v1.bindBuffer(34963, v272.buffer.buffer);
        } else if (v11.currentVAO) {
          v272 = v7.getElements(v11.currentVAO.elements);
          if (v272)
            v1.bindBuffer(34963, v272.buffer.buffer);
        }
        v273 = v6.offset;
        v275 = g274.call(this, v2, a0, 0);
        if (v275) {
          v277 = g276.call(this, v2, a0, 0);
          if (v277 > 0) {
            if (v272) {
              v108.drawElementsInstancedANGLE(5, v275, v272.type, v273 << (v272.type - 5121 >> 1), v277);
            } else {
              v108.drawArraysInstancedANGLE(5, v273, v275, v277);
            }
          } else if (v277 < 0) {
            if (v272) {
              v1.drawElements(5, v275, v272.type, v273 << (v272.type - 5121 >> 1));
            } else {
              v1.drawArrays(5, v273, v275);
            }
          }
          v5.dirty = true;
          v11.setVAO(null);
          if (v105) {
            g48.cpuTime += performance.now() - v106;
          }
          if (v111) {
            v8.destroyStream(v117);
          }
          if (v130) {
            v8.destroyStream(v136);
          }
          if (v149) {
            v8.destroyStream(v155);
          }
          if (v168) {
            v8.destroyStream(v174);
          }
          if (v187) {
            v8.destroyStream(v193);
          }
          if (v206) {
            v8.destroyStream(v212);
          }
          v249.unbind();
          v256.unbind();
        }
      },
      "scope": function(a0, a1, a2) {
        var v279, v281, v283, v285, v287, v289, v291, v293, v295, v297, v299, v300, v301, v302, v303, v304, v305, v307, v308, v310, v311, v313, v314, v316, v317, v319, v321, v323, v324, v326, v327, v329, v330, v332, v333, v335, v337, v339, v340, v342, v343, v345, v346, v348, v350, v352, v353, v355, v356, v358, v359, v361, v362, v363, v364, v365, v366, v367, v368, v369, v370, v371, v372, v373, v374, v375, v377, v378, v379, v380, v381, v382, v383, v384, v385, v386, v387, v388, v389, v390, v391, v392, v393, v394, v395, v396, v397, v398, v399, v400, v401, v402, v404, v405, v406, v407, v408, v409, v410, v411, v412, v413, v414, v415, v416, v417, v418, v419, v420, v421, v422, v423, v424, v425, v426, v427, v428, v429, v431, v432, v433, v434, v435, v436, v437, v438, v439, v440, v441, v442, v443, v444, v445, v446, v447, v448, v449, v450, v451, v452, v453, v454, v455, v456, v458, v459, v460, v461, v462, v463, v464, v465, v466, v467, v468, v469, v470, v471, v472, v473, v474, v475, v476, v477, v478, v479, v480, v481, v482, v483, v485, v486, v487, v488, v489, v490, v491, v492, v493, v494, v495, v496, v497, v498, v499, v500, v501, v502, v503, v504, v505, v506, v507, v508, v509, v510, v512, v513, v514, v515, v516, v517, v518, v519, v520, v521, v522, v523, v525, v527;
        v279 = v4.blend_enable;
        v4.blend_enable = g278;
        v281 = v19[0];
        v19[0] = g280;
        v283 = v19[1];
        v19[1] = g282;
        v285 = v21[0];
        v21[0] = g284;
        v287 = v21[1];
        v21[1] = g286;
        v289 = v21[2];
        v21[2] = g288;
        v291 = v21[3];
        v21[3] = g290;
        v293 = v4.cull_enable;
        v4.cull_enable = g292;
        v295 = v4.cull_face;
        v4.cull_face = g294;
        v297 = v4.depth_enable;
        v4.depth_enable = g296;
        v299 = v4.depth_mask;
        v4.depth_mask = g298;
        v300 = v5.profile;
        if (v300) {
          v301 = performance.now();
          g48.count++;
        }
        v302 = g274.call(this, v2, a0, a2);
        v303 = v6.count;
        v6.count = v302;
        v304 = g276.call(this, v2, a0, a2);
        v305 = v6.instances;
        v6.instances = v304;
        v307 = v6.primitive;
        v6.primitive = g306;
        v308 = g254.call(this, v2, a0, a2);
        v310 = v12[g309];
        v12[g309] = v308;
        v311 = g247.call(this, v2, a0, a2);
        v313 = v12[g312];
        v12[g312] = v311;
        v314 = g266.call(this, v2, a0, a2);
        v316 = v12[g315];
        v12[g315] = v314;
        v317 = g251.call(this, v2, a0, a2);
        v319 = v12[g318];
        v12[g318] = v317;
        v321 = g320.call(this, v2, a0, a2);
        v323 = v12[g322];
        v12[g322] = v321;
        v324 = g270.call(this, v2, a0, a2);
        v326 = v12[g325];
        v12[g325] = v324;
        v327 = g224.call(this, v2, a0, a2);
        v329 = v12[g328];
        v12[g328] = v327;
        v330 = g263.call(this, v2, a0, a2);
        v332 = v12[g331];
        v12[g331] = v330;
        v333 = g258.call(this, v2, a0, a2);
        v335 = v12[g334];
        v12[g334] = v333;
        v337 = g336.call(this, v2, a0, a2);
        v339 = v12[g338];
        v12[g338] = v337;
        v340 = g239.call(this, v2, a0, a2);
        v342 = v12[g341];
        v12[g341] = v340;
        v343 = g244.call(this, v2, a0, a2);
        v345 = v12[g344];
        v12[g344] = v343;
        v346 = g236.call(this, v2, a0, a2);
        v348 = v12[g347];
        v12[g347] = v346;
        v350 = g349.call(this, v2, a0, a2);
        v352 = v12[g351];
        v12[g351] = v350;
        v353 = g233.call(this, v2, a0, a2);
        v355 = v12[g354];
        v12[g354] = v353;
        v356 = g227.call(this, v2, a0, a2);
        v358 = v12[g357];
        v12[g357] = v356;
        v359 = g230.call(this, v2, a0, a2);
        v361 = v12[g360];
        v12[g360] = v359;
        v362 = g185.call(this, v2, a0, a2);
        v49.buffer = v362;
        v363 = false;
        v364 = 1;
        v365 = 0;
        v366 = 0;
        v367 = 0;
        v368 = 0;
        v369 = null;
        v370 = 0;
        v371 = false;
        v372 = 5126;
        v373 = 0;
        v374 = 0;
        v375 = 0;
        if (v16(v49)) {
          v363 = true;
          v369 = v8.createStream(34962, v49);
          v372 = v369.dtype;
        } else {
          v369 = v8.getBuffer(v49);
          if (v369) {
            v372 = v369.dtype;
          } else if ("constant" in v49) {
            v364 = 2;
            if (typeof v49.constant === "number") {
              v365 = v49.constant;
              v366 = v367 = v368 = 0;
            } else {
              v365 = v49.constant.length > 0 ? v49.constant[0] : 0;
              v366 = v49.constant.length > 1 ? v49.constant[1] : 0;
              v367 = v49.constant.length > 2 ? v49.constant[2] : 0;
              v368 = v49.constant.length > 3 ? v49.constant[3] : 0;
            }
          } else {
            if (v16(v49.buffer)) {
              v369 = v8.createStream(34962, v49.buffer);
            } else {
              v369 = v8.getBuffer(v49.buffer);
            }
            v372 = "type" in v49 ? v46[v49.type] : v369.dtype;
            v371 = !!v49.normalized;
            v370 = v49.size | 0;
            v373 = v49.offset | 0;
            v374 = v49.stride | 0;
            v375 = v49.divisor | 0;
          }
        }
        v377 = g376.state;
        g376.state = v364;
        v378 = g376.x;
        g376.x = v365;
        v379 = g376.y;
        g376.y = v366;
        v380 = g376.z;
        g376.z = v367;
        v381 = g376.w;
        g376.w = v368;
        v382 = g376.buffer;
        g376.buffer = v369;
        v383 = g376.size;
        g376.size = v370;
        v384 = g376.normalized;
        g376.normalized = v371;
        v385 = g376.type;
        g376.type = v372;
        v386 = g376.offset;
        g376.offset = v373;
        v387 = g376.stride;
        g376.stride = v374;
        v388 = g376.divisor;
        g376.divisor = v375;
        v389 = g147.call(this, v2, a0, a2);
        v50.buffer = v389;
        v390 = false;
        v391 = 1;
        v392 = 0;
        v393 = 0;
        v394 = 0;
        v395 = 0;
        v396 = null;
        v397 = 0;
        v398 = false;
        v399 = 5126;
        v400 = 0;
        v401 = 0;
        v402 = 0;
        if (v16(v50)) {
          v390 = true;
          v396 = v8.createStream(34962, v50);
          v399 = v396.dtype;
        } else {
          v396 = v8.getBuffer(v50);
          if (v396) {
            v399 = v396.dtype;
          } else if ("constant" in v50) {
            v391 = 2;
            if (typeof v50.constant === "number") {
              v392 = v50.constant;
              v393 = v394 = v395 = 0;
            } else {
              v392 = v50.constant.length > 0 ? v50.constant[0] : 0;
              v393 = v50.constant.length > 1 ? v50.constant[1] : 0;
              v394 = v50.constant.length > 2 ? v50.constant[2] : 0;
              v395 = v50.constant.length > 3 ? v50.constant[3] : 0;
            }
          } else {
            if (v16(v50.buffer)) {
              v396 = v8.createStream(34962, v50.buffer);
            } else {
              v396 = v8.getBuffer(v50.buffer);
            }
            v399 = "type" in v50 ? v46[v50.type] : v396.dtype;
            v398 = !!v50.normalized;
            v397 = v50.size | 0;
            v400 = v50.offset | 0;
            v401 = v50.stride | 0;
            v402 = v50.divisor | 0;
          }
        }
        v404 = g403.state;
        g403.state = v391;
        v405 = g403.x;
        g403.x = v392;
        v406 = g403.y;
        g403.y = v393;
        v407 = g403.z;
        g403.z = v394;
        v408 = g403.w;
        g403.w = v395;
        v409 = g403.buffer;
        g403.buffer = v396;
        v410 = g403.size;
        g403.size = v397;
        v411 = g403.normalized;
        g403.normalized = v398;
        v412 = g403.type;
        g403.type = v399;
        v413 = g403.offset;
        g403.offset = v400;
        v414 = g403.stride;
        g403.stride = v401;
        v415 = g403.divisor;
        g403.divisor = v402;
        v416 = g166.call(this, v2, a0, a2);
        v51.buffer = v416;
        v417 = false;
        v418 = 1;
        v419 = 0;
        v420 = 0;
        v421 = 0;
        v422 = 0;
        v423 = null;
        v424 = 0;
        v425 = false;
        v426 = 5126;
        v427 = 0;
        v428 = 0;
        v429 = 0;
        if (v16(v51)) {
          v417 = true;
          v423 = v8.createStream(34962, v51);
          v426 = v423.dtype;
        } else {
          v423 = v8.getBuffer(v51);
          if (v423) {
            v426 = v423.dtype;
          } else if ("constant" in v51) {
            v418 = 2;
            if (typeof v51.constant === "number") {
              v419 = v51.constant;
              v420 = v421 = v422 = 0;
            } else {
              v419 = v51.constant.length > 0 ? v51.constant[0] : 0;
              v420 = v51.constant.length > 1 ? v51.constant[1] : 0;
              v421 = v51.constant.length > 2 ? v51.constant[2] : 0;
              v422 = v51.constant.length > 3 ? v51.constant[3] : 0;
            }
          } else {
            if (v16(v51.buffer)) {
              v423 = v8.createStream(34962, v51.buffer);
            } else {
              v423 = v8.getBuffer(v51.buffer);
            }
            v426 = "type" in v51 ? v46[v51.type] : v423.dtype;
            v425 = !!v51.normalized;
            v424 = v51.size | 0;
            v427 = v51.offset | 0;
            v428 = v51.stride | 0;
            v429 = v51.divisor | 0;
          }
        }
        v431 = g430.state;
        g430.state = v418;
        v432 = g430.x;
        g430.x = v419;
        v433 = g430.y;
        g430.y = v420;
        v434 = g430.z;
        g430.z = v421;
        v435 = g430.w;
        g430.w = v422;
        v436 = g430.buffer;
        g430.buffer = v423;
        v437 = g430.size;
        g430.size = v424;
        v438 = g430.normalized;
        g430.normalized = v425;
        v439 = g430.type;
        g430.type = v426;
        v440 = g430.offset;
        g430.offset = v427;
        v441 = g430.stride;
        g430.stride = v428;
        v442 = g430.divisor;
        g430.divisor = v429;
        v443 = g128.call(this, v2, a0, a2);
        v52.buffer = v443;
        v444 = false;
        v445 = 1;
        v446 = 0;
        v447 = 0;
        v448 = 0;
        v449 = 0;
        v450 = null;
        v451 = 0;
        v452 = false;
        v453 = 5126;
        v454 = 0;
        v455 = 0;
        v456 = 0;
        if (v16(v52)) {
          v444 = true;
          v450 = v8.createStream(34962, v52);
          v453 = v450.dtype;
        } else {
          v450 = v8.getBuffer(v52);
          if (v450) {
            v453 = v450.dtype;
          } else if ("constant" in v52) {
            v445 = 2;
            if (typeof v52.constant === "number") {
              v446 = v52.constant;
              v447 = v448 = v449 = 0;
            } else {
              v446 = v52.constant.length > 0 ? v52.constant[0] : 0;
              v447 = v52.constant.length > 1 ? v52.constant[1] : 0;
              v448 = v52.constant.length > 2 ? v52.constant[2] : 0;
              v449 = v52.constant.length > 3 ? v52.constant[3] : 0;
            }
          } else {
            if (v16(v52.buffer)) {
              v450 = v8.createStream(34962, v52.buffer);
            } else {
              v450 = v8.getBuffer(v52.buffer);
            }
            v453 = "type" in v52 ? v46[v52.type] : v450.dtype;
            v452 = !!v52.normalized;
            v451 = v52.size | 0;
            v454 = v52.offset | 0;
            v455 = v52.stride | 0;
            v456 = v52.divisor | 0;
          }
        }
        v458 = g457.state;
        g457.state = v445;
        v459 = g457.x;
        g457.x = v446;
        v460 = g457.y;
        g457.y = v447;
        v461 = g457.z;
        g457.z = v448;
        v462 = g457.w;
        g457.w = v449;
        v463 = g457.buffer;
        g457.buffer = v450;
        v464 = g457.size;
        g457.size = v451;
        v465 = g457.normalized;
        g457.normalized = v452;
        v466 = g457.type;
        g457.type = v453;
        v467 = g457.offset;
        g457.offset = v454;
        v468 = g457.stride;
        g457.stride = v455;
        v469 = g457.divisor;
        g457.divisor = v456;
        v470 = g204.call(this, v2, a0, a2);
        v53.buffer = v470;
        v471 = false;
        v472 = 1;
        v473 = 0;
        v474 = 0;
        v475 = 0;
        v476 = 0;
        v477 = null;
        v478 = 0;
        v479 = false;
        v480 = 5126;
        v481 = 0;
        v482 = 0;
        v483 = 0;
        if (v16(v53)) {
          v471 = true;
          v477 = v8.createStream(34962, v53);
          v480 = v477.dtype;
        } else {
          v477 = v8.getBuffer(v53);
          if (v477) {
            v480 = v477.dtype;
          } else if ("constant" in v53) {
            v472 = 2;
            if (typeof v53.constant === "number") {
              v473 = v53.constant;
              v474 = v475 = v476 = 0;
            } else {
              v473 = v53.constant.length > 0 ? v53.constant[0] : 0;
              v474 = v53.constant.length > 1 ? v53.constant[1] : 0;
              v475 = v53.constant.length > 2 ? v53.constant[2] : 0;
              v476 = v53.constant.length > 3 ? v53.constant[3] : 0;
            }
          } else {
            if (v16(v53.buffer)) {
              v477 = v8.createStream(34962, v53.buffer);
            } else {
              v477 = v8.getBuffer(v53.buffer);
            }
            v480 = "type" in v53 ? v46[v53.type] : v477.dtype;
            v479 = !!v53.normalized;
            v478 = v53.size | 0;
            v481 = v53.offset | 0;
            v482 = v53.stride | 0;
            v483 = v53.divisor | 0;
          }
        }
        v485 = g484.state;
        g484.state = v472;
        v486 = g484.x;
        g484.x = v473;
        v487 = g484.y;
        g484.y = v474;
        v488 = g484.z;
        g484.z = v475;
        v489 = g484.w;
        g484.w = v476;
        v490 = g484.buffer;
        g484.buffer = v477;
        v491 = g484.size;
        g484.size = v478;
        v492 = g484.normalized;
        g484.normalized = v479;
        v493 = g484.type;
        g484.type = v480;
        v494 = g484.offset;
        g484.offset = v481;
        v495 = g484.stride;
        g484.stride = v482;
        v496 = g484.divisor;
        g484.divisor = v483;
        v497 = g109.call(this, v2, a0, a2);
        v54.buffer = v497;
        v498 = false;
        v499 = 1;
        v500 = 0;
        v501 = 0;
        v502 = 0;
        v503 = 0;
        v504 = null;
        v505 = 0;
        v506 = false;
        v507 = 5126;
        v508 = 0;
        v509 = 0;
        v510 = 0;
        if (v16(v54)) {
          v498 = true;
          v504 = v8.createStream(34962, v54);
          v507 = v504.dtype;
        } else {
          v504 = v8.getBuffer(v54);
          if (v504) {
            v507 = v504.dtype;
          } else if ("constant" in v54) {
            v499 = 2;
            if (typeof v54.constant === "number") {
              v500 = v54.constant;
              v501 = v502 = v503 = 0;
            } else {
              v500 = v54.constant.length > 0 ? v54.constant[0] : 0;
              v501 = v54.constant.length > 1 ? v54.constant[1] : 0;
              v502 = v54.constant.length > 2 ? v54.constant[2] : 0;
              v503 = v54.constant.length > 3 ? v54.constant[3] : 0;
            }
          } else {
            if (v16(v54.buffer)) {
              v504 = v8.createStream(34962, v54.buffer);
            } else {
              v504 = v8.getBuffer(v54.buffer);
            }
            v507 = "type" in v54 ? v46[v54.type] : v504.dtype;
            v506 = !!v54.normalized;
            v505 = v54.size | 0;
            v508 = v54.offset | 0;
            v509 = v54.stride | 0;
            v510 = v54.divisor | 0;
          }
        }
        v512 = g511.state;
        g511.state = v499;
        v513 = g511.x;
        g511.x = v500;
        v514 = g511.y;
        g511.y = v501;
        v515 = g511.z;
        g511.z = v502;
        v516 = g511.w;
        g511.w = v503;
        v517 = g511.buffer;
        g511.buffer = v504;
        v518 = g511.size;
        g511.size = v505;
        v519 = g511.normalized;
        g511.normalized = v506;
        v520 = g511.type;
        g511.type = v507;
        v521 = g511.offset;
        g511.offset = v508;
        v522 = g511.stride;
        g511.stride = v509;
        v523 = g511.divisor;
        g511.divisor = v510;
        v525 = v9.vert;
        v9.vert = g524;
        v527 = v9.frag;
        v9.frag = g526;
        v5.dirty = true;
        a1(v2, a0, a2);
        v4.blend_enable = v279;
        v19[0] = v281;
        v19[1] = v283;
        v21[0] = v285;
        v21[1] = v287;
        v21[2] = v289;
        v21[3] = v291;
        v4.cull_enable = v293;
        v4.cull_face = v295;
        v4.depth_enable = v297;
        v4.depth_mask = v299;
        if (v300) {
          g48.cpuTime += performance.now() - v301;
        }
        v6.count = v303;
        v6.instances = v305;
        v6.primitive = v307;
        v12[g309] = v310;
        v12[g312] = v313;
        v12[g315] = v316;
        v12[g318] = v319;
        v12[g322] = v323;
        v12[g325] = v326;
        v12[g328] = v329;
        v12[g331] = v332;
        v12[g334] = v335;
        v12[g338] = v339;
        v12[g341] = v342;
        v12[g344] = v345;
        v12[g347] = v348;
        v12[g351] = v352;
        v12[g354] = v355;
        v12[g357] = v358;
        v12[g360] = v361;
        if (v363) {
          v8.destroyStream(v369);
        }
        g376.state = v377;
        g376.x = v378;
        g376.y = v379;
        g376.z = v380;
        g376.w = v381;
        g376.buffer = v382;
        g376.size = v383;
        g376.normalized = v384;
        g376.type = v385;
        g376.offset = v386;
        g376.stride = v387;
        g376.divisor = v388;
        if (v390) {
          v8.destroyStream(v396);
        }
        g403.state = v404;
        g403.x = v405;
        g403.y = v406;
        g403.z = v407;
        g403.w = v408;
        g403.buffer = v409;
        g403.size = v410;
        g403.normalized = v411;
        g403.type = v412;
        g403.offset = v413;
        g403.stride = v414;
        g403.divisor = v415;
        if (v417) {
          v8.destroyStream(v423);
        }
        g430.state = v431;
        g430.x = v432;
        g430.y = v433;
        g430.z = v434;
        g430.w = v435;
        g430.buffer = v436;
        g430.size = v437;
        g430.normalized = v438;
        g430.type = v439;
        g430.offset = v440;
        g430.stride = v441;
        g430.divisor = v442;
        if (v444) {
          v8.destroyStream(v450);
        }
        g457.state = v458;
        g457.x = v459;
        g457.y = v460;
        g457.z = v461;
        g457.w = v462;
        g457.buffer = v463;
        g457.size = v464;
        g457.normalized = v465;
        g457.type = v466;
        g457.offset = v467;
        g457.stride = v468;
        g457.divisor = v469;
        if (v471) {
          v8.destroyStream(v477);
        }
        g484.state = v485;
        g484.x = v486;
        g484.y = v487;
        g484.z = v488;
        g484.w = v489;
        g484.buffer = v490;
        g484.size = v491;
        g484.normalized = v492;
        g484.type = v493;
        g484.offset = v494;
        g484.stride = v495;
        g484.divisor = v496;
        if (v498) {
          v8.destroyStream(v504);
        }
        g511.state = v512;
        g511.x = v513;
        g511.y = v514;
        g511.z = v515;
        g511.w = v516;
        g511.buffer = v517;
        g511.size = v518;
        g511.normalized = v519;
        g511.type = v520;
        g511.offset = v521;
        g511.stride = v522;
        g511.divisor = v523;
        v9.vert = v525;
        v9.frag = v527;
        v5.dirty = true;
      },
      "batch": function(a0, a1) {
        var v529, v578, v579, v580, v581, v582;
        v14.angle_instanced_arrays;
        v529 = v13.next;
        if (v529 !== v13.cur) {
          if (v529) {
            v1.bindFramebuffer(36160, v529.framebuffer);
          } else {
            v1.bindFramebuffer(36160, null);
          }
          v13.cur = v529;
        }
        if (v5.dirty) {
          var v530, v531, v532, v533, v534, v535, v536, v537, v538, v539, v540, v541, v542, v543, v544, v545, v546, v547, v548, v549, v550, v551, v552, v553, v554, v555, v556, v557, v558, v559, v560, v561, v562, v563, v564, v565, v566, v567, v568, v569, v570, v571, v572;
          v530 = v4.dither;
          if (v530 !== v5.dither) {
            if (v530) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v530;
          }
          v531 = v17[0];
          v532 = v17[1];
          v533 = v17[2];
          v534 = v17[3];
          if (v531 !== v18[0] || v532 !== v18[1] || v533 !== v18[2] || v534 !== v18[3]) {
            v1.blendColor(v531, v532, v533, v534);
            v18[0] = v531;
            v18[1] = v532;
            v18[2] = v533;
            v18[3] = v534;
          }
          v535 = v4.depth_func;
          if (v535 !== v5.depth_func) {
            v1.depthFunc(v535);
            v5.depth_func = v535;
          }
          v536 = v23[0];
          v537 = v23[1];
          if (v536 !== v24[0] || v537 !== v24[1]) {
            v1.depthRange(v536, v537);
            v24[0] = v536;
            v24[1] = v537;
          }
          v538 = v25[0];
          v539 = v25[1];
          v540 = v25[2];
          v541 = v25[3];
          if (v538 !== v26[0] || v539 !== v26[1] || v540 !== v26[2] || v541 !== v26[3]) {
            v1.colorMask(v538, v539, v540, v541);
            v26[0] = v538;
            v26[1] = v539;
            v26[2] = v540;
            v26[3] = v541;
          }
          v542 = v4.frontFace;
          if (v542 !== v5.frontFace) {
            v1.frontFace(v542);
            v5.frontFace = v542;
          }
          v543 = v4.lineWidth;
          if (v543 !== v5.lineWidth) {
            v1.lineWidth(v543);
            v5.lineWidth = v543;
          }
          v544 = v4.polygonOffset_enable;
          if (v544 !== v5.polygonOffset_enable) {
            if (v544) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v544;
          }
          v545 = v27[0];
          v546 = v27[1];
          if (v545 !== v28[0] || v546 !== v28[1]) {
            v1.polygonOffset(v545, v546);
            v28[0] = v545;
            v28[1] = v546;
          }
          v547 = v4.sample_alpha;
          if (v547 !== v5.sample_alpha) {
            if (v547) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v547;
          }
          v548 = v4.sample_enable;
          if (v548 !== v5.sample_enable) {
            if (v548) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v548;
          }
          v549 = v29[0];
          v550 = v29[1];
          if (v549 !== v30[0] || v550 !== v30[1]) {
            v1.sampleCoverage(v549, v550);
            v30[0] = v549;
            v30[1] = v550;
          }
          v551 = v4.stencil_enable;
          if (v551 !== v5.stencil_enable) {
            if (v551) {
              v1.enable(2960);
            } else {
              v1.disable(2960);
            }
            v5.stencil_enable = v551;
          }
          v552 = v4.stencil_mask;
          if (v552 !== v5.stencil_mask) {
            v1.stencilMask(v552);
            v5.stencil_mask = v552;
          }
          v553 = v31[0];
          v554 = v31[1];
          v555 = v31[2];
          if (v553 !== v32[0] || v554 !== v32[1] || v555 !== v32[2]) {
            v1.stencilFunc(v553, v554, v555);
            v32[0] = v553;
            v32[1] = v554;
            v32[2] = v555;
          }
          v556 = v33[0];
          v557 = v33[1];
          v558 = v33[2];
          v559 = v33[3];
          if (v556 !== v34[0] || v557 !== v34[1] || v558 !== v34[2] || v559 !== v34[3]) {
            v1.stencilOpSeparate(v556, v557, v558, v559);
            v34[0] = v556;
            v34[1] = v557;
            v34[2] = v558;
            v34[3] = v559;
          }
          v560 = v35[0];
          v561 = v35[1];
          v562 = v35[2];
          v563 = v35[3];
          if (v560 !== v36[0] || v561 !== v36[1] || v562 !== v36[2] || v563 !== v36[3]) {
            v1.stencilOpSeparate(v560, v561, v562, v563);
            v36[0] = v560;
            v36[1] = v561;
            v36[2] = v562;
            v36[3] = v563;
          }
          v564 = v4.scissor_enable;
          if (v564 !== v5.scissor_enable) {
            if (v564) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v564;
          }
          v565 = v37[0];
          v566 = v37[1];
          v567 = v37[2];
          v568 = v37[3];
          if (v565 !== v38[0] || v566 !== v38[1] || v567 !== v38[2] || v568 !== v38[3]) {
            v1.scissor(v565, v566, v567, v568);
            v38[0] = v565;
            v38[1] = v566;
            v38[2] = v567;
            v38[3] = v568;
          }
          v569 = v39[0];
          v570 = v39[1];
          v571 = v39[2];
          v572 = v39[3];
          if (v569 !== v40[0] || v570 !== v40[1] || v571 !== v40[2] || v572 !== v40[3]) {
            v1.viewport(v569, v570, v571, v572);
            v40[0] = v569;
            v40[1] = v570;
            v40[2] = v571;
            v40[3] = v572;
          }
        }
        if (g573) {
          v1.enable(3042);
        } else {
          v1.disable(3042);
        }
        v5.blend_enable = g573;
        v1.blendEquationSeparate(32774, 32774);
        v20[0] = 32774;
        v20[1] = 32774;
        v1.blendFuncSeparate(770, 771, 1, 771);
        v22[0] = 770;
        v22[1] = 771;
        v22[2] = 1;
        v22[3] = 771;
        if (g574) {
          v1.enable(2884);
        } else {
          v1.disable(2884);
        }
        v5.cull_enable = g574;
        v1.cullFace(g575);
        v5.cull_face = g575;
        if (g576) {
          v1.enable(2929);
        } else {
          v1.disable(2929);
        }
        v5.depth_enable = g576;
        v1.depthMask(g577);
        v5.depth_mask = g577;
        v578 = v5.profile;
        if (v578) {
          v579 = performance.now();
          g48.count += a1;
        }
        v1.useProgram(g107.program);
        v580 = v14.angle_instanced_arrays;
        var v583, v584, v585, v586, v587, v588, v589, v590, v591, v592, v593, v594, v595, v596, v597, v598, v599, v600, v601, v602, v603, v604, v605, v606, v607, v608, v609, v610, v611, v612, v613, v614, v615, v616, v617, v618, v619, v620, v621, v622, v623, v624, v625, v626, v627, v628, v629, v630, v631, v632, v633, v634, v635, v636, v637, v638, v639, v640, v641, v642, v643, v644, v645, v646, v647, v648, v649, v650, v651, v652, v653, v654, v655, v656, v657, v658, v659, v660, v661, v662, v663, v664, v665, v666, v667, v668, v669, v670, v671, v672, v673, v674, v675, v676, v677, v678, v679, v680, v681, v682, v683, v684, v685, v686, v687, v688, v689, v690, v691, v692, v693, v694, v695, v696, v697, v698, v699, v700, v701, v702, v703, v705, v706, v707, v708, v709;
        v11.setVAO(null);
        v583 = g109.call(this, v2, v582, v581);
        v54.buffer = v583;
        v584 = false;
        v585 = 1;
        v586 = 0;
        v587 = 0;
        v588 = 0;
        v589 = 0;
        v590 = null;
        v591 = 0;
        v592 = false;
        v593 = 5126;
        v594 = 0;
        v595 = 0;
        v596 = 0;
        if (v16(v54)) {
          v584 = true;
          v590 = v8.createStream(34962, v54);
          v593 = v590.dtype;
        } else {
          v590 = v8.getBuffer(v54);
          if (v590) {
            v593 = v590.dtype;
          } else if ("constant" in v54) {
            v585 = 2;
            if (typeof v54.constant === "number") {
              v586 = v54.constant;
              v587 = v588 = v589 = 0;
            } else {
              v586 = v54.constant.length > 0 ? v54.constant[0] : 0;
              v587 = v54.constant.length > 1 ? v54.constant[1] : 0;
              v588 = v54.constant.length > 2 ? v54.constant[2] : 0;
              v589 = v54.constant.length > 3 ? v54.constant[3] : 0;
            }
          } else {
            if (v16(v54.buffer)) {
              v590 = v8.createStream(34962, v54.buffer);
            } else {
              v590 = v8.getBuffer(v54.buffer);
            }
            v593 = "type" in v54 ? v46[v54.type] : v590.dtype;
            v592 = !!v54.normalized;
            v591 = v54.size | 0;
            v594 = v54.offset | 0;
            v595 = v54.stride | 0;
            v596 = v54.divisor | 0;
          }
        }
        v597 = g124.location;
        v598 = v10[v597];
        if (v585 === 1) {
          if (!v598.buffer) {
            v1.enableVertexAttribArray(v597);
          }
          v599 = v591 || 1;
          if (v598.type !== v593 || v598.size !== v599 || v598.buffer !== v590 || v598.normalized !== v592 || v598.offset !== v594 || v598.stride !== v595) {
            v1.bindBuffer(34962, v590.buffer);
            v1.vertexAttribPointer(v597, v599, v593, v592, v595, v594);
            v598.type = v593;
            v598.size = v599;
            v598.buffer = v590;
            v598.normalized = v592;
            v598.offset = v594;
            v598.stride = v595;
          }
          if (v598.divisor !== v596) {
            v580.vertexAttribDivisorANGLE(v597, v596);
            v598.divisor = v596;
          }
        } else {
          if (v598.buffer) {
            v1.disableVertexAttribArray(v597);
            v598.buffer = null;
          }
          if (v598.x !== v586 || v598.y !== v587 || v598.z !== v588 || v598.w !== v589) {
            v1.vertexAttrib4f(v597, v586, v587, v588, v589);
            v598.x = v586;
            v598.y = v587;
            v598.z = v588;
            v598.w = v589;
          }
        }
        v600 = g128.call(this, v2, v582, v581);
        v52.buffer = v600;
        v601 = false;
        v602 = 1;
        v603 = 0;
        v604 = 0;
        v605 = 0;
        v606 = 0;
        v607 = null;
        v608 = 0;
        v609 = false;
        v610 = 5126;
        v611 = 0;
        v612 = 0;
        v613 = 0;
        if (v16(v52)) {
          v601 = true;
          v607 = v8.createStream(34962, v52);
          v610 = v607.dtype;
        } else {
          v607 = v8.getBuffer(v52);
          if (v607) {
            v610 = v607.dtype;
          } else if ("constant" in v52) {
            v602 = 2;
            if (typeof v52.constant === "number") {
              v603 = v52.constant;
              v604 = v605 = v606 = 0;
            } else {
              v603 = v52.constant.length > 0 ? v52.constant[0] : 0;
              v604 = v52.constant.length > 1 ? v52.constant[1] : 0;
              v605 = v52.constant.length > 2 ? v52.constant[2] : 0;
              v606 = v52.constant.length > 3 ? v52.constant[3] : 0;
            }
          } else {
            if (v16(v52.buffer)) {
              v607 = v8.createStream(34962, v52.buffer);
            } else {
              v607 = v8.getBuffer(v52.buffer);
            }
            v610 = "type" in v52 ? v46[v52.type] : v607.dtype;
            v609 = !!v52.normalized;
            v608 = v52.size | 0;
            v611 = v52.offset | 0;
            v612 = v52.stride | 0;
            v613 = v52.divisor | 0;
          }
        }
        v614 = g143.location;
        v615 = v10[v614];
        if (v602 === 1) {
          if (!v615.buffer) {
            v1.enableVertexAttribArray(v614);
          }
          v616 = v608 || 4;
          if (v615.type !== v610 || v615.size !== v616 || v615.buffer !== v607 || v615.normalized !== v609 || v615.offset !== v611 || v615.stride !== v612) {
            v1.bindBuffer(34962, v607.buffer);
            v1.vertexAttribPointer(v614, v616, v610, v609, v612, v611);
            v615.type = v610;
            v615.size = v616;
            v615.buffer = v607;
            v615.normalized = v609;
            v615.offset = v611;
            v615.stride = v612;
          }
          if (v615.divisor !== v613) {
            v580.vertexAttribDivisorANGLE(v614, v613);
            v615.divisor = v613;
          }
        } else {
          if (v615.buffer) {
            v1.disableVertexAttribArray(v614);
            v615.buffer = null;
          }
          if (v615.x !== v603 || v615.y !== v604 || v615.z !== v605 || v615.w !== v606) {
            v1.vertexAttrib4f(v614, v603, v604, v605, v606);
            v615.x = v603;
            v615.y = v604;
            v615.z = v605;
            v615.w = v606;
          }
        }
        v617 = g147.call(this, v2, v582, v581);
        v50.buffer = v617;
        v618 = false;
        v619 = 1;
        v620 = 0;
        v621 = 0;
        v622 = 0;
        v623 = 0;
        v624 = null;
        v625 = 0;
        v626 = false;
        v627 = 5126;
        v628 = 0;
        v629 = 0;
        v630 = 0;
        if (v16(v50)) {
          v618 = true;
          v624 = v8.createStream(34962, v50);
          v627 = v624.dtype;
        } else {
          v624 = v8.getBuffer(v50);
          if (v624) {
            v627 = v624.dtype;
          } else if ("constant" in v50) {
            v619 = 2;
            if (typeof v50.constant === "number") {
              v620 = v50.constant;
              v621 = v622 = v623 = 0;
            } else {
              v620 = v50.constant.length > 0 ? v50.constant[0] : 0;
              v621 = v50.constant.length > 1 ? v50.constant[1] : 0;
              v622 = v50.constant.length > 2 ? v50.constant[2] : 0;
              v623 = v50.constant.length > 3 ? v50.constant[3] : 0;
            }
          } else {
            if (v16(v50.buffer)) {
              v624 = v8.createStream(34962, v50.buffer);
            } else {
              v624 = v8.getBuffer(v50.buffer);
            }
            v627 = "type" in v50 ? v46[v50.type] : v624.dtype;
            v626 = !!v50.normalized;
            v625 = v50.size | 0;
            v628 = v50.offset | 0;
            v629 = v50.stride | 0;
            v630 = v50.divisor | 0;
          }
        }
        v631 = g162.location;
        v632 = v10[v631];
        if (v619 === 1) {
          if (!v632.buffer) {
            v1.enableVertexAttribArray(v631);
          }
          v633 = v625 || 2;
          if (v632.type !== v627 || v632.size !== v633 || v632.buffer !== v624 || v632.normalized !== v626 || v632.offset !== v628 || v632.stride !== v629) {
            v1.bindBuffer(34962, v624.buffer);
            v1.vertexAttribPointer(v631, v633, v627, v626, v629, v628);
            v632.type = v627;
            v632.size = v633;
            v632.buffer = v624;
            v632.normalized = v626;
            v632.offset = v628;
            v632.stride = v629;
          }
          if (v632.divisor !== v630) {
            v580.vertexAttribDivisorANGLE(v631, v630);
            v632.divisor = v630;
          }
        } else {
          if (v632.buffer) {
            v1.disableVertexAttribArray(v631);
            v632.buffer = null;
          }
          if (v632.x !== v620 || v632.y !== v621 || v632.z !== v622 || v632.w !== v623) {
            v1.vertexAttrib4f(v631, v620, v621, v622, v623);
            v632.x = v620;
            v632.y = v621;
            v632.z = v622;
            v632.w = v623;
          }
        }
        v634 = g166.call(this, v2, v582, v581);
        v51.buffer = v634;
        v635 = false;
        v636 = 1;
        v637 = 0;
        v638 = 0;
        v639 = 0;
        v640 = 0;
        v641 = null;
        v642 = 0;
        v643 = false;
        v644 = 5126;
        v645 = 0;
        v646 = 0;
        v647 = 0;
        if (v16(v51)) {
          v635 = true;
          v641 = v8.createStream(34962, v51);
          v644 = v641.dtype;
        } else {
          v641 = v8.getBuffer(v51);
          if (v641) {
            v644 = v641.dtype;
          } else if ("constant" in v51) {
            v636 = 2;
            if (typeof v51.constant === "number") {
              v637 = v51.constant;
              v638 = v639 = v640 = 0;
            } else {
              v637 = v51.constant.length > 0 ? v51.constant[0] : 0;
              v638 = v51.constant.length > 1 ? v51.constant[1] : 0;
              v639 = v51.constant.length > 2 ? v51.constant[2] : 0;
              v640 = v51.constant.length > 3 ? v51.constant[3] : 0;
            }
          } else {
            if (v16(v51.buffer)) {
              v641 = v8.createStream(34962, v51.buffer);
            } else {
              v641 = v8.getBuffer(v51.buffer);
            }
            v644 = "type" in v51 ? v46[v51.type] : v641.dtype;
            v643 = !!v51.normalized;
            v642 = v51.size | 0;
            v645 = v51.offset | 0;
            v646 = v51.stride | 0;
            v647 = v51.divisor | 0;
          }
        }
        v648 = g181.location;
        v649 = v10[v648];
        if (v636 === 1) {
          if (!v649.buffer) {
            v1.enableVertexAttribArray(v648);
          }
          v650 = v642 || 2;
          if (v649.type !== v644 || v649.size !== v650 || v649.buffer !== v641 || v649.normalized !== v643 || v649.offset !== v645 || v649.stride !== v646) {
            v1.bindBuffer(34962, v641.buffer);
            v1.vertexAttribPointer(v648, v650, v644, v643, v646, v645);
            v649.type = v644;
            v649.size = v650;
            v649.buffer = v641;
            v649.normalized = v643;
            v649.offset = v645;
            v649.stride = v646;
          }
          if (v649.divisor !== v647) {
            v580.vertexAttribDivisorANGLE(v648, v647);
            v649.divisor = v647;
          }
        } else {
          if (v649.buffer) {
            v1.disableVertexAttribArray(v648);
            v649.buffer = null;
          }
          if (v649.x !== v637 || v649.y !== v638 || v649.z !== v639 || v649.w !== v640) {
            v1.vertexAttrib4f(v648, v637, v638, v639, v640);
            v649.x = v637;
            v649.y = v638;
            v649.z = v639;
            v649.w = v640;
          }
        }
        v651 = g185.call(this, v2, v582, v581);
        v49.buffer = v651;
        v652 = false;
        v653 = 1;
        v654 = 0;
        v655 = 0;
        v656 = 0;
        v657 = 0;
        v658 = null;
        v659 = 0;
        v660 = false;
        v661 = 5126;
        v662 = 0;
        v663 = 0;
        v664 = 0;
        if (v16(v49)) {
          v652 = true;
          v658 = v8.createStream(34962, v49);
          v661 = v658.dtype;
        } else {
          v658 = v8.getBuffer(v49);
          if (v658) {
            v661 = v658.dtype;
          } else if ("constant" in v49) {
            v653 = 2;
            if (typeof v49.constant === "number") {
              v654 = v49.constant;
              v655 = v656 = v657 = 0;
            } else {
              v654 = v49.constant.length > 0 ? v49.constant[0] : 0;
              v655 = v49.constant.length > 1 ? v49.constant[1] : 0;
              v656 = v49.constant.length > 2 ? v49.constant[2] : 0;
              v657 = v49.constant.length > 3 ? v49.constant[3] : 0;
            }
          } else {
            if (v16(v49.buffer)) {
              v658 = v8.createStream(34962, v49.buffer);
            } else {
              v658 = v8.getBuffer(v49.buffer);
            }
            v661 = "type" in v49 ? v46[v49.type] : v658.dtype;
            v660 = !!v49.normalized;
            v659 = v49.size | 0;
            v662 = v49.offset | 0;
            v663 = v49.stride | 0;
            v664 = v49.divisor | 0;
          }
        }
        v665 = g200.location;
        v666 = v10[v665];
        if (v653 === 1) {
          if (!v666.buffer) {
            v1.enableVertexAttribArray(v665);
          }
          v667 = v659 || 2;
          if (v666.type !== v661 || v666.size !== v667 || v666.buffer !== v658 || v666.normalized !== v660 || v666.offset !== v662 || v666.stride !== v663) {
            v1.bindBuffer(34962, v658.buffer);
            v1.vertexAttribPointer(v665, v667, v661, v660, v663, v662);
            v666.type = v661;
            v666.size = v667;
            v666.buffer = v658;
            v666.normalized = v660;
            v666.offset = v662;
            v666.stride = v663;
          }
          if (v666.divisor !== v664) {
            v580.vertexAttribDivisorANGLE(v665, v664);
            v666.divisor = v664;
          }
        } else {
          if (v666.buffer) {
            v1.disableVertexAttribArray(v665);
            v666.buffer = null;
          }
          if (v666.x !== v654 || v666.y !== v655 || v666.z !== v656 || v666.w !== v657) {
            v1.vertexAttrib4f(v665, v654, v655, v656, v657);
            v666.x = v654;
            v666.y = v655;
            v666.z = v656;
            v666.w = v657;
          }
        }
        v668 = g204.call(this, v2, v582, v581);
        v53.buffer = v668;
        v669 = false;
        v670 = 1;
        v671 = 0;
        v672 = 0;
        v673 = 0;
        v674 = 0;
        v675 = null;
        v676 = 0;
        v677 = false;
        v678 = 5126;
        v679 = 0;
        v680 = 0;
        v681 = 0;
        if (v16(v53)) {
          v669 = true;
          v675 = v8.createStream(34962, v53);
          v678 = v675.dtype;
        } else {
          v675 = v8.getBuffer(v53);
          if (v675) {
            v678 = v675.dtype;
          } else if ("constant" in v53) {
            v670 = 2;
            if (typeof v53.constant === "number") {
              v671 = v53.constant;
              v672 = v673 = v674 = 0;
            } else {
              v671 = v53.constant.length > 0 ? v53.constant[0] : 0;
              v672 = v53.constant.length > 1 ? v53.constant[1] : 0;
              v673 = v53.constant.length > 2 ? v53.constant[2] : 0;
              v674 = v53.constant.length > 3 ? v53.constant[3] : 0;
            }
          } else {
            if (v16(v53.buffer)) {
              v675 = v8.createStream(34962, v53.buffer);
            } else {
              v675 = v8.getBuffer(v53.buffer);
            }
            v678 = "type" in v53 ? v46[v53.type] : v675.dtype;
            v677 = !!v53.normalized;
            v676 = v53.size | 0;
            v679 = v53.offset | 0;
            v680 = v53.stride | 0;
            v681 = v53.divisor | 0;
          }
        }
        v682 = g219.location;
        v683 = v10[v682];
        if (v670 === 1) {
          if (!v683.buffer) {
            v1.enableVertexAttribArray(v682);
          }
          v684 = v676 || 1;
          if (v683.type !== v678 || v683.size !== v684 || v683.buffer !== v675 || v683.normalized !== v677 || v683.offset !== v679 || v683.stride !== v680) {
            v1.bindBuffer(34962, v675.buffer);
            v1.vertexAttribPointer(v682, v684, v678, v677, v680, v679);
            v683.type = v678;
            v683.size = v684;
            v683.buffer = v675;
            v683.normalized = v677;
            v683.offset = v679;
            v683.stride = v680;
          }
          if (v683.divisor !== v681) {
            v580.vertexAttribDivisorANGLE(v682, v681);
            v683.divisor = v681;
          }
        } else {
          if (v683.buffer) {
            v1.disableVertexAttribArray(v682);
            v683.buffer = null;
          }
          if (v683.x !== v671 || v683.y !== v672 || v683.z !== v673 || v683.w !== v674) {
            v1.vertexAttrib4f(v682, v671, v672, v673, v674);
            v683.x = v671;
            v683.y = v672;
            v683.z = v673;
            v683.w = v674;
          }
        }
        v685 = g224.call(this, v2, v582, v581);
        v1.uniform1f(g223.location, v685);
        v686 = g227.call(this, v2, v582, v581);
        v1.uniform1f(g226.location, v686);
        v687 = g230.call(this, v2, v582, v581);
        v1.uniform1f(g229.location, v687);
        v688 = g233.call(this, v2, v582, v581);
        v1.uniform1f(g232.location, v688);
        v689 = g236.call(this, v2, v582, v581);
        v1.uniform1f(g235.location, v689);
        v690 = g239.call(this, v2, v582, v581);
        v691 = v690[0];
        v692 = v690[1];
        v1.uniform2f(g238.location, v691, v692);
        v693 = g244.call(this, v2, v582, v581);
        v1.uniform1f(g243.location, v693);
        v694 = g247.call(this, v2, v582, v581);
        if (v694 && v694._reglType === "framebuffer") {
          v694 = v694.color[0];
        }
        v695 = v694._texture;
        v1.uniform1i(g246.location, v695.bind());
        v696 = g251.call(this, v2, v582, v581);
        v1.uniform1f(g250.location, v696);
        v697 = g254.call(this, v2, v582, v581);
        if (v697 && v697._reglType === "framebuffer") {
          v697 = v697.color[0];
        }
        v698 = v697._texture;
        v1.uniform1i(g253.location, v698.bind());
        v699 = g258.call(this, v2, v582, v581);
        v700 = v699[0];
        v701 = v699[1];
        v1.uniform2f(g257.location, v700, v701);
        v702 = g263.call(this, v2, v582, v581);
        v1.uniform1f(g262.location, v702);
        v703 = g266.call(this, v2, v582, v581);
        v1.uniformMatrix3fv(g265.location, false, Array.isArray(v703) || v703 instanceof Float32Array ? v703 : (v704[0] = v703[0], v704[1] = v703[1], v704[2] = v703[2], v704[3] = v703[3], v704[4] = v703[4], v704[5] = v703[5], v704[6] = v703[6], v704[7] = v703[7], v704[8] = v703[8], v704));
        v705 = g270.call(this, v2, v582, v581);
        v1.uniform1f(g269.location, v705);
        v706 = v6.elements;
        if (v706) {
          v1.bindBuffer(34963, v706.buffer.buffer);
        } else if (v11.currentVAO) {
          v706 = v7.getElements(v11.currentVAO.elements);
          if (v706)
            v1.bindBuffer(34963, v706.buffer.buffer);
        }
        v707 = v6.offset;
        v708 = g274.call(this, v2, v582, v581);
        v709 = g276.call(this, v2, v582, v581);
        for (v581 = 0; v581 < a1; ++v581) {
          v582 = a0[v581];
          if (v708) {
            if (v709 > 0) {
              if (v706) {
                v580.drawElementsInstancedANGLE(5, v708, v706.type, v707 << (v706.type - 5121 >> 1), v709);
              } else {
                v580.drawArraysInstancedANGLE(5, v707, v708, v709);
              }
            } else if (v709 < 0) {
              if (v706) {
                v1.drawElements(5, v708, v706.type, v707 << (v706.type - 5121 >> 1));
              } else {
                v1.drawArrays(5, v707, v708);
              }
            }
          }
        }
        if (v584) {
          v8.destroyStream(v590);
        }
        if (v601) {
          v8.destroyStream(v607);
        }
        if (v618) {
          v8.destroyStream(v624);
        }
        if (v635) {
          v8.destroyStream(v641);
        }
        if (v652) {
          v8.destroyStream(v658);
        }
        if (v669) {
          v8.destroyStream(v675);
        }
        v695.unbind();
        v698.unbind();
        v5.dirty = true;
        v11.setVAO(null);
        if (v578) {
          g48.cpuTime += performance.now() - v579;
        }
      }
    };
  },
  "2f7c7f7dc19b56c5cba8adc85f521391fae94c0383e508841812535aea6244ef": function anonymous14(g0, g48, g50, g110, g112, g113, g117, g118, g120, g121, g123, g124, g127, g128, g142, g144, g150, g152, g158, g160, g163, g166, g169, g172, g174, g187, g189) {
    var v1, v2, v4, v5, v6, v7, v9, v10, v11, v12, v13, v14, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40;
    v1 = g0.gl;
    v2 = g0.context;
    g0.strings;
    v4 = g0.next;
    v5 = g0.current;
    v6 = g0.draw;
    v7 = g0.elements;
    g0.buffer;
    v9 = g0.shader;
    v10 = g0.attributes;
    v11 = g0.vao;
    v12 = g0.uniforms;
    v13 = g0.framebuffer;
    v14 = g0.extensions;
    g0.timer;
    g0.isBufferArgs;
    v17 = v4.blend_color;
    v18 = v5.blend_color;
    v19 = v4.blend_equation;
    v20 = v5.blend_equation;
    v21 = v4.blend_func;
    v22 = v5.blend_func;
    v23 = v4.depth_range;
    v24 = v5.depth_range;
    v25 = v4.colorMask;
    v26 = v5.colorMask;
    v27 = v4.polygonOffset_offset;
    v28 = v5.polygonOffset_offset;
    v29 = v4.sample_coverage;
    v30 = v5.sample_coverage;
    v31 = v4.stencil_func;
    v32 = v5.stencil_func;
    v33 = v4.stencil_opFront;
    v34 = v5.stencil_opFront;
    v35 = v4.stencil_opBack;
    v36 = v5.stencil_opBack;
    v37 = v4.scissor_box;
    v38 = v5.scissor_box;
    v39 = v4.viewport;
    v40 = v5.viewport;
    return {
      "draw": function(a0) {
        var v51, v52, v53, v54, v55, v102, v103, v104, v105, v106, v107, v108, v109, v111, v114, v115, v116, v119, v122, v125, v126, v129, v130, v131, v132;
        v14.angle_instanced_arrays;
        v51 = g50.call(this, v2, a0, 0);
        v52 = v13.getFramebuffer(v51);
        v53 = v13.next;
        v13.next = v52;
        v54 = v2.framebufferWidth;
        v2.framebufferWidth = v52 ? v52.width : v2.drawingBufferWidth;
        v55 = v2.framebufferHeight;
        v2.framebufferHeight = v52 ? v52.height : v2.drawingBufferHeight;
        if (v52 !== v13.cur) {
          if (v52) {
            v1.bindFramebuffer(36160, v52.framebuffer);
          } else {
            v1.bindFramebuffer(36160, null);
          }
          v13.cur = v52;
        }
        if (v5.dirty) {
          var v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, v100, v101;
          v56 = v4.dither;
          if (v56 !== v5.dither) {
            if (v56) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v56;
          }
          v57 = v4.blend_enable;
          if (v57 !== v5.blend_enable) {
            if (v57) {
              v1.enable(3042);
            } else {
              v1.disable(3042);
            }
            v5.blend_enable = v57;
          }
          v58 = v17[0];
          v59 = v17[1];
          v60 = v17[2];
          v61 = v17[3];
          if (v58 !== v18[0] || v59 !== v18[1] || v60 !== v18[2] || v61 !== v18[3]) {
            v1.blendColor(v58, v59, v60, v61);
            v18[0] = v58;
            v18[1] = v59;
            v18[2] = v60;
            v18[3] = v61;
          }
          v62 = v19[0];
          v63 = v19[1];
          if (v62 !== v20[0] || v63 !== v20[1]) {
            v1.blendEquationSeparate(v62, v63);
            v20[0] = v62;
            v20[1] = v63;
          }
          v64 = v21[0];
          v65 = v21[1];
          v66 = v21[2];
          v67 = v21[3];
          if (v64 !== v22[0] || v65 !== v22[1] || v66 !== v22[2] || v67 !== v22[3]) {
            v1.blendFuncSeparate(v64, v65, v66, v67);
            v22[0] = v64;
            v22[1] = v65;
            v22[2] = v66;
            v22[3] = v67;
          }
          v68 = v4.depth_enable;
          if (v68 !== v5.depth_enable) {
            if (v68) {
              v1.enable(2929);
            } else {
              v1.disable(2929);
            }
            v5.depth_enable = v68;
          }
          v69 = v4.depth_func;
          if (v69 !== v5.depth_func) {
            v1.depthFunc(v69);
            v5.depth_func = v69;
          }
          v70 = v23[0];
          v71 = v23[1];
          if (v70 !== v24[0] || v71 !== v24[1]) {
            v1.depthRange(v70, v71);
            v24[0] = v70;
            v24[1] = v71;
          }
          v72 = v4.depth_mask;
          if (v72 !== v5.depth_mask) {
            v1.depthMask(v72);
            v5.depth_mask = v72;
          }
          v73 = v25[0];
          v74 = v25[1];
          v75 = v25[2];
          v76 = v25[3];
          if (v73 !== v26[0] || v74 !== v26[1] || v75 !== v26[2] || v76 !== v26[3]) {
            v1.colorMask(v73, v74, v75, v76);
            v26[0] = v73;
            v26[1] = v74;
            v26[2] = v75;
            v26[3] = v76;
          }
          v77 = v4.cull_enable;
          if (v77 !== v5.cull_enable) {
            if (v77) {
              v1.enable(2884);
            } else {
              v1.disable(2884);
            }
            v5.cull_enable = v77;
          }
          v78 = v4.cull_face;
          if (v78 !== v5.cull_face) {
            v1.cullFace(v78);
            v5.cull_face = v78;
          }
          v79 = v4.frontFace;
          if (v79 !== v5.frontFace) {
            v1.frontFace(v79);
            v5.frontFace = v79;
          }
          v80 = v4.lineWidth;
          if (v80 !== v5.lineWidth) {
            v1.lineWidth(v80);
            v5.lineWidth = v80;
          }
          v81 = v4.polygonOffset_enable;
          if (v81 !== v5.polygonOffset_enable) {
            if (v81) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v81;
          }
          v82 = v27[0];
          v83 = v27[1];
          if (v82 !== v28[0] || v83 !== v28[1]) {
            v1.polygonOffset(v82, v83);
            v28[0] = v82;
            v28[1] = v83;
          }
          v84 = v4.sample_alpha;
          if (v84 !== v5.sample_alpha) {
            if (v84) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v84;
          }
          v85 = v4.sample_enable;
          if (v85 !== v5.sample_enable) {
            if (v85) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v85;
          }
          v86 = v29[0];
          v87 = v29[1];
          if (v86 !== v30[0] || v87 !== v30[1]) {
            v1.sampleCoverage(v86, v87);
            v30[0] = v86;
            v30[1] = v87;
          }
          v88 = v4.stencil_enable;
          if (v88 !== v5.stencil_enable) {
            if (v88) {
              v1.enable(2960);
            } else {
              v1.disable(2960);
            }
            v5.stencil_enable = v88;
          }
          v89 = v4.stencil_mask;
          if (v89 !== v5.stencil_mask) {
            v1.stencilMask(v89);
            v5.stencil_mask = v89;
          }
          v90 = v31[0];
          v91 = v31[1];
          v92 = v31[2];
          if (v90 !== v32[0] || v91 !== v32[1] || v92 !== v32[2]) {
            v1.stencilFunc(v90, v91, v92);
            v32[0] = v90;
            v32[1] = v91;
            v32[2] = v92;
          }
          v93 = v33[0];
          v94 = v33[1];
          v95 = v33[2];
          v96 = v33[3];
          if (v93 !== v34[0] || v94 !== v34[1] || v95 !== v34[2] || v96 !== v34[3]) {
            v1.stencilOpSeparate(v93, v94, v95, v96);
            v34[0] = v93;
            v34[1] = v94;
            v34[2] = v95;
            v34[3] = v96;
          }
          v97 = v35[0];
          v98 = v35[1];
          v99 = v35[2];
          v100 = v35[3];
          if (v97 !== v36[0] || v98 !== v36[1] || v99 !== v36[2] || v100 !== v36[3]) {
            v1.stencilOpSeparate(v97, v98, v99, v100);
            v36[0] = v97;
            v36[1] = v98;
            v36[2] = v99;
            v36[3] = v100;
          }
          v101 = v4.scissor_enable;
          if (v101 !== v5.scissor_enable) {
            if (v101) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v101;
          }
        }
        v102 = v2.framebufferWidth;
        v103 = v2.framebufferHeight;
        v104 = v2.viewportWidth;
        v2.viewportWidth = v102;
        v105 = v2.viewportHeight;
        v2.viewportHeight = v103;
        v1.viewport(0, 0, v102, v103);
        v40[0] = 0;
        v40[1] = 0;
        v40[2] = v102;
        v40[3] = v103;
        v106 = v2.framebufferWidth;
        v107 = v2.framebufferHeight;
        v1.scissor(0, 0, v106, v107);
        v38[0] = 0;
        v38[1] = 0;
        v38[2] = v106;
        v38[3] = v107;
        v108 = v5.profile;
        if (v108) {
          v109 = performance.now();
          g48.count++;
        }
        v1.useProgram(g110.program);
        v111 = v14.angle_instanced_arrays;
        v11.setVAO(null);
        v114 = g113.location;
        v115 = v10[v114];
        if (!v115.buffer) {
          v1.enableVertexAttribArray(v114);
        }
        v116 = 2;
        if (v115.type !== 5126 || v115.size !== v116 || v115.buffer !== g112 || v115.normalized !== false || v115.offset !== 0 || v115.stride !== 0) {
          v1.bindBuffer(34962, g112.buffer);
          v1.vertexAttribPointer(v114, v116, 5126, false, 0, 0);
          v115.type = 5126;
          v115.size = v116;
          v115.buffer = g112;
          v115.normalized = false;
          v115.offset = 0;
          v115.stride = 0;
        }
        if (v115.divisor !== 0) {
          v111.vertexAttribDivisorANGLE(v114, 0);
          v115.divisor = 0;
        }
        v119 = g118.call(this, v2, a0, 0);
        v1.uniform1f(g117.location, v119);
        v122 = g121.call(this, v2, a0, 0);
        v1.uniform1f(g120.location, v122);
        v125 = g124.call(this, v2, a0, 0);
        if (v125 && v125._reglType === "framebuffer") {
          v125 = v125.color[0];
        }
        v126 = v125._texture;
        v1.uniform1i(g123.location, v126.bind());
        v129 = g128.call(this, v2, a0, 0);
        v1.uniform1f(g127.location, v129);
        v130 = v6.elements;
        if (v130) {
          v1.bindBuffer(34963, v130.buffer.buffer);
        } else if (v11.currentVAO) {
          v130 = v7.getElements(v11.currentVAO.elements);
          if (v130)
            v1.bindBuffer(34963, v130.buffer.buffer);
        }
        v131 = v6.offset;
        v132 = v6.instances;
        if (v132 > 0) {
          if (v130) {
            v111.drawElementsInstancedANGLE(5, 4, v130.type, v131 << (v130.type - 5121 >> 1), v132);
          } else {
            v111.drawArraysInstancedANGLE(5, v131, 4, v132);
          }
        } else if (v132 < 0) {
          if (v130) {
            v1.drawElements(5, 4, v130.type, v131 << (v130.type - 5121 >> 1));
          } else {
            v1.drawArrays(5, v131, 4);
          }
        }
        v5.dirty = true;
        v11.setVAO(null);
        v13.next = v53;
        v2.framebufferWidth = v54;
        v2.framebufferHeight = v55;
        v2.viewportWidth = v104;
        v2.viewportHeight = v105;
        if (v108) {
          g48.cpuTime += performance.now() - v109;
        }
        v126.unbind();
      },
      "scope": function(a0, a1, a2) {
        var v133, v134, v135, v136, v137, v138, v139, v140, v141, v143, v145, v146, v147, v148, v149, v151, v153, v154, v155, v156, v157, v159, v161, v162, v164, v165, v167, v168, v170, v171, v173, v175, v176, v177, v178, v179, v180, v181, v182, v183, v184, v185, v186, v188, v190;
        v133 = g50.call(this, v2, a0, a2);
        v134 = v13.getFramebuffer(v133);
        v135 = v13.next;
        v13.next = v134;
        v136 = v2.framebufferWidth;
        v2.framebufferWidth = v134 ? v134.width : v2.drawingBufferWidth;
        v137 = v2.framebufferHeight;
        v2.framebufferHeight = v134 ? v134.height : v2.drawingBufferHeight;
        v138 = v2.framebufferWidth;
        v139 = v2.framebufferHeight;
        v140 = v2.viewportWidth;
        v2.viewportWidth = v138;
        v141 = v2.viewportHeight;
        v2.viewportHeight = v139;
        v143 = v39[0];
        v39[0] = g142;
        v145 = v39[1];
        v39[1] = g144;
        v146 = v39[2];
        v39[2] = v138;
        v147 = v39[3];
        v39[3] = v139;
        v148 = v2.framebufferWidth;
        v149 = v2.framebufferHeight;
        v151 = v37[0];
        v37[0] = g150;
        v153 = v37[1];
        v37[1] = g152;
        v154 = v37[2];
        v37[2] = v148;
        v155 = v37[3];
        v37[3] = v149;
        v156 = v5.profile;
        if (v156) {
          v157 = performance.now();
          g48.count++;
        }
        v159 = v6.count;
        v6.count = g158;
        v161 = v6.primitive;
        v6.primitive = g160;
        v162 = g124.call(this, v2, a0, a2);
        v164 = v12[g163];
        v12[g163] = v162;
        v165 = g121.call(this, v2, a0, a2);
        v167 = v12[g166];
        v12[g166] = v165;
        v168 = g128.call(this, v2, a0, a2);
        v170 = v12[g169];
        v12[g169] = v168;
        v171 = g118.call(this, v2, a0, a2);
        v173 = v12[g172];
        v12[g172] = v171;
        v175 = g174.state;
        g174.state = 1;
        v176 = g174.x;
        g174.x = 0;
        v177 = g174.y;
        g174.y = 0;
        v178 = g174.z;
        g174.z = 0;
        v179 = g174.w;
        g174.w = 0;
        v180 = g174.buffer;
        g174.buffer = g112;
        v181 = g174.size;
        g174.size = 2;
        v182 = g174.normalized;
        g174.normalized = false;
        v183 = g174.type;
        g174.type = 5126;
        v184 = g174.offset;
        g174.offset = 0;
        v185 = g174.stride;
        g174.stride = 0;
        v186 = g174.divisor;
        g174.divisor = 0;
        v188 = v9.vert;
        v9.vert = g187;
        v190 = v9.frag;
        v9.frag = g189;
        v5.dirty = true;
        a1(v2, a0, a2);
        v13.next = v135;
        v2.framebufferWidth = v136;
        v2.framebufferHeight = v137;
        v2.viewportWidth = v140;
        v2.viewportHeight = v141;
        v39[0] = v143;
        v39[1] = v145;
        v39[2] = v146;
        v39[3] = v147;
        v37[0] = v151;
        v37[1] = v153;
        v37[2] = v154;
        v37[3] = v155;
        if (v156) {
          g48.cpuTime += performance.now() - v157;
        }
        v6.count = v159;
        v6.primitive = v161;
        v12[g163] = v164;
        v12[g166] = v167;
        v12[g169] = v170;
        v12[g172] = v173;
        g174.state = v175;
        g174.x = v176;
        g174.y = v177;
        g174.z = v178;
        g174.w = v179;
        g174.buffer = v180;
        g174.size = v181;
        g174.normalized = v182;
        g174.type = v183;
        g174.offset = v184;
        g174.stride = v185;
        g174.divisor = v186;
        v9.vert = v188;
        v9.frag = v190;
        v5.dirty = true;
      },
      "batch": function(a0, a1) {
        var v192, v193, v194, v195, v196, v243, v244, v245, v246, v247, v248, v249, v250, v251, v252, v253;
        v14.angle_instanced_arrays;
        v192 = g50.call(this, v2, a0, 0);
        v193 = v13.getFramebuffer(v192);
        v194 = v13.next;
        v13.next = v193;
        v195 = v2.framebufferWidth;
        v2.framebufferWidth = v193 ? v193.width : v2.drawingBufferWidth;
        v196 = v2.framebufferHeight;
        v2.framebufferHeight = v193 ? v193.height : v2.drawingBufferHeight;
        if (v193 !== v13.cur) {
          if (v193) {
            v1.bindFramebuffer(36160, v193.framebuffer);
          } else {
            v1.bindFramebuffer(36160, null);
          }
          v13.cur = v193;
        }
        if (v5.dirty) {
          var v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, v220, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, v235, v236, v237, v238, v239, v240, v241, v242;
          v197 = v4.dither;
          if (v197 !== v5.dither) {
            if (v197) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v197;
          }
          v198 = v4.blend_enable;
          if (v198 !== v5.blend_enable) {
            if (v198) {
              v1.enable(3042);
            } else {
              v1.disable(3042);
            }
            v5.blend_enable = v198;
          }
          v199 = v17[0];
          v200 = v17[1];
          v201 = v17[2];
          v202 = v17[3];
          if (v199 !== v18[0] || v200 !== v18[1] || v201 !== v18[2] || v202 !== v18[3]) {
            v1.blendColor(v199, v200, v201, v202);
            v18[0] = v199;
            v18[1] = v200;
            v18[2] = v201;
            v18[3] = v202;
          }
          v203 = v19[0];
          v204 = v19[1];
          if (v203 !== v20[0] || v204 !== v20[1]) {
            v1.blendEquationSeparate(v203, v204);
            v20[0] = v203;
            v20[1] = v204;
          }
          v205 = v21[0];
          v206 = v21[1];
          v207 = v21[2];
          v208 = v21[3];
          if (v205 !== v22[0] || v206 !== v22[1] || v207 !== v22[2] || v208 !== v22[3]) {
            v1.blendFuncSeparate(v205, v206, v207, v208);
            v22[0] = v205;
            v22[1] = v206;
            v22[2] = v207;
            v22[3] = v208;
          }
          v209 = v4.depth_enable;
          if (v209 !== v5.depth_enable) {
            if (v209) {
              v1.enable(2929);
            } else {
              v1.disable(2929);
            }
            v5.depth_enable = v209;
          }
          v210 = v4.depth_func;
          if (v210 !== v5.depth_func) {
            v1.depthFunc(v210);
            v5.depth_func = v210;
          }
          v211 = v23[0];
          v212 = v23[1];
          if (v211 !== v24[0] || v212 !== v24[1]) {
            v1.depthRange(v211, v212);
            v24[0] = v211;
            v24[1] = v212;
          }
          v213 = v4.depth_mask;
          if (v213 !== v5.depth_mask) {
            v1.depthMask(v213);
            v5.depth_mask = v213;
          }
          v214 = v25[0];
          v215 = v25[1];
          v216 = v25[2];
          v217 = v25[3];
          if (v214 !== v26[0] || v215 !== v26[1] || v216 !== v26[2] || v217 !== v26[3]) {
            v1.colorMask(v214, v215, v216, v217);
            v26[0] = v214;
            v26[1] = v215;
            v26[2] = v216;
            v26[3] = v217;
          }
          v218 = v4.cull_enable;
          if (v218 !== v5.cull_enable) {
            if (v218) {
              v1.enable(2884);
            } else {
              v1.disable(2884);
            }
            v5.cull_enable = v218;
          }
          v219 = v4.cull_face;
          if (v219 !== v5.cull_face) {
            v1.cullFace(v219);
            v5.cull_face = v219;
          }
          v220 = v4.frontFace;
          if (v220 !== v5.frontFace) {
            v1.frontFace(v220);
            v5.frontFace = v220;
          }
          v221 = v4.lineWidth;
          if (v221 !== v5.lineWidth) {
            v1.lineWidth(v221);
            v5.lineWidth = v221;
          }
          v222 = v4.polygonOffset_enable;
          if (v222 !== v5.polygonOffset_enable) {
            if (v222) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v222;
          }
          v223 = v27[0];
          v224 = v27[1];
          if (v223 !== v28[0] || v224 !== v28[1]) {
            v1.polygonOffset(v223, v224);
            v28[0] = v223;
            v28[1] = v224;
          }
          v225 = v4.sample_alpha;
          if (v225 !== v5.sample_alpha) {
            if (v225) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v225;
          }
          v226 = v4.sample_enable;
          if (v226 !== v5.sample_enable) {
            if (v226) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v226;
          }
          v227 = v29[0];
          v228 = v29[1];
          if (v227 !== v30[0] || v228 !== v30[1]) {
            v1.sampleCoverage(v227, v228);
            v30[0] = v227;
            v30[1] = v228;
          }
          v229 = v4.stencil_enable;
          if (v229 !== v5.stencil_enable) {
            if (v229) {
              v1.enable(2960);
            } else {
              v1.disable(2960);
            }
            v5.stencil_enable = v229;
          }
          v230 = v4.stencil_mask;
          if (v230 !== v5.stencil_mask) {
            v1.stencilMask(v230);
            v5.stencil_mask = v230;
          }
          v231 = v31[0];
          v232 = v31[1];
          v233 = v31[2];
          if (v231 !== v32[0] || v232 !== v32[1] || v233 !== v32[2]) {
            v1.stencilFunc(v231, v232, v233);
            v32[0] = v231;
            v32[1] = v232;
            v32[2] = v233;
          }
          v234 = v33[0];
          v235 = v33[1];
          v236 = v33[2];
          v237 = v33[3];
          if (v234 !== v34[0] || v235 !== v34[1] || v236 !== v34[2] || v237 !== v34[3]) {
            v1.stencilOpSeparate(v234, v235, v236, v237);
            v34[0] = v234;
            v34[1] = v235;
            v34[2] = v236;
            v34[3] = v237;
          }
          v238 = v35[0];
          v239 = v35[1];
          v240 = v35[2];
          v241 = v35[3];
          if (v238 !== v36[0] || v239 !== v36[1] || v240 !== v36[2] || v241 !== v36[3]) {
            v1.stencilOpSeparate(v238, v239, v240, v241);
            v36[0] = v238;
            v36[1] = v239;
            v36[2] = v240;
            v36[3] = v241;
          }
          v242 = v4.scissor_enable;
          if (v242 !== v5.scissor_enable) {
            if (v242) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v242;
          }
        }
        v243 = v2.framebufferWidth;
        v244 = v2.framebufferHeight;
        v245 = v2.viewportWidth;
        v2.viewportWidth = v243;
        v246 = v2.viewportHeight;
        v2.viewportHeight = v244;
        v1.viewport(0, 0, v243, v244);
        v40[0] = 0;
        v40[1] = 0;
        v40[2] = v243;
        v40[3] = v244;
        v247 = v2.framebufferWidth;
        v248 = v2.framebufferHeight;
        v1.scissor(0, 0, v247, v248);
        v38[0] = 0;
        v38[1] = 0;
        v38[2] = v247;
        v38[3] = v248;
        v249 = v5.profile;
        if (v249) {
          v250 = performance.now();
          g48.count += a1;
        }
        v1.useProgram(g110.program);
        v251 = v14.angle_instanced_arrays;
        var v254, v255, v256, v257, v258, v259, v260, v261, v262, v263, v264;
        v11.setVAO(null);
        v254 = g113.location;
        v255 = v10[v254];
        if (!v255.buffer) {
          v1.enableVertexAttribArray(v254);
        }
        v256 = 2;
        if (v255.type !== 5126 || v255.size !== v256 || v255.buffer !== g112 || v255.normalized !== false || v255.offset !== 0 || v255.stride !== 0) {
          v1.bindBuffer(34962, g112.buffer);
          v1.vertexAttribPointer(v254, v256, 5126, false, 0, 0);
          v255.type = 5126;
          v255.size = v256;
          v255.buffer = g112;
          v255.normalized = false;
          v255.offset = 0;
          v255.stride = 0;
        }
        if (v255.divisor !== 0) {
          v251.vertexAttribDivisorANGLE(v254, 0);
          v255.divisor = 0;
        }
        v257 = g118.call(this, v2, v253, v252);
        v1.uniform1f(g117.location, v257);
        v258 = g121.call(this, v2, v253, v252);
        v1.uniform1f(g120.location, v258);
        v259 = g124.call(this, v2, v253, v252);
        if (v259 && v259._reglType === "framebuffer") {
          v259 = v259.color[0];
        }
        v260 = v259._texture;
        v1.uniform1i(g123.location, v260.bind());
        v261 = g128.call(this, v2, v253, v252);
        v1.uniform1f(g127.location, v261);
        v262 = v6.elements;
        if (v262) {
          v1.bindBuffer(34963, v262.buffer.buffer);
        } else if (v11.currentVAO) {
          v262 = v7.getElements(v11.currentVAO.elements);
          if (v262)
            v1.bindBuffer(34963, v262.buffer.buffer);
        }
        v263 = v6.offset;
        v264 = v6.instances;
        for (v252 = 0; v252 < a1; ++v252) {
          v253 = a0[v252];
          if (v264 > 0) {
            if (v262) {
              v251.drawElementsInstancedANGLE(5, 4, v262.type, v263 << (v262.type - 5121 >> 1), v264);
            } else {
              v251.drawArraysInstancedANGLE(5, v263, 4, v264);
            }
          } else if (v264 < 0) {
            if (v262) {
              v1.drawElements(5, 4, v262.type, v263 << (v262.type - 5121 >> 1));
            } else {
              v1.drawArrays(5, v263, 4);
            }
          }
        }
        v260.unbind();
        v5.dirty = true;
        v11.setVAO(null);
        v13.next = v194;
        v2.framebufferWidth = v195;
        v2.framebufferHeight = v196;
        v2.viewportWidth = v245;
        v2.viewportHeight = v246;
        if (v249) {
          g48.cpuTime += performance.now() - v250;
        }
      }
    };
  },
  "9d21b165a30f9f6f75398bdcb7c7a26023eb7f6897f345551a241761b2807eea": function anonymous15(g0, g48, g50, g110, g117, g127, g129, g135, g137, g143, g145, g147, g149, g151, g153, g155, g157, g159, g161, g163, g165, g167, g169, g171, g173, g175, g177, g179, g181, g183, g185, g187, g189, g191, g192, g205, g276) {
    var v1, v2, v3, v4, v5, v6, v9, v11, v12, v13, v14, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v114, v273;
    v1 = g0.gl;
    v2 = g0.context;
    v3 = g0.strings;
    v4 = g0.next;
    v5 = g0.current;
    v6 = g0.draw;
    g0.elements;
    g0.buffer;
    v9 = g0.shader;
    g0.attributes;
    v11 = g0.vao;
    v12 = g0.uniforms;
    v13 = g0.framebuffer;
    v14 = g0.extensions;
    g0.timer;
    g0.isBufferArgs;
    v17 = v4.blend_color;
    v18 = v5.blend_color;
    v19 = v4.blend_equation;
    v20 = v5.blend_equation;
    v21 = v4.blend_func;
    v22 = v5.blend_func;
    v23 = v4.depth_range;
    v24 = v5.depth_range;
    v25 = v4.colorMask;
    v26 = v5.colorMask;
    v27 = v4.polygonOffset_offset;
    v28 = v5.polygonOffset_offset;
    v29 = v4.sample_coverage;
    v30 = v5.sample_coverage;
    v31 = v4.stencil_func;
    v32 = v5.stencil_func;
    v33 = v4.stencil_opFront;
    v34 = v5.stencil_opFront;
    v35 = v4.stencil_opBack;
    v36 = v5.stencil_opBack;
    v37 = v4.scissor_box;
    v38 = v5.scissor_box;
    v39 = v4.viewport;
    v40 = v5.viewport;
    v114 = {};
    v273 = {};
    return {
      "draw": function(a0) {
        var v51, v52, v53, v54, v55, v102, v103, v104, v105, v106, v107, v108, v109, v111, v112, v113, v115, v116;
        v14.angle_instanced_arrays;
        v51 = g50.call(this, v2, a0, 0);
        v52 = v13.getFramebuffer(v51);
        v53 = v13.next;
        v13.next = v52;
        v54 = v2.framebufferWidth;
        v2.framebufferWidth = v52 ? v52.width : v2.drawingBufferWidth;
        v55 = v2.framebufferHeight;
        v2.framebufferHeight = v52 ? v52.height : v2.drawingBufferHeight;
        if (v52 !== v13.cur) {
          if (v52) {
            v1.bindFramebuffer(36160, v52.framebuffer);
          } else {
            v1.bindFramebuffer(36160, null);
          }
          v13.cur = v52;
        }
        if (v5.dirty) {
          var v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, v100, v101;
          v56 = v4.dither;
          if (v56 !== v5.dither) {
            if (v56) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v56;
          }
          v57 = v4.blend_enable;
          if (v57 !== v5.blend_enable) {
            if (v57) {
              v1.enable(3042);
            } else {
              v1.disable(3042);
            }
            v5.blend_enable = v57;
          }
          v58 = v17[0];
          v59 = v17[1];
          v60 = v17[2];
          v61 = v17[3];
          if (v58 !== v18[0] || v59 !== v18[1] || v60 !== v18[2] || v61 !== v18[3]) {
            v1.blendColor(v58, v59, v60, v61);
            v18[0] = v58;
            v18[1] = v59;
            v18[2] = v60;
            v18[3] = v61;
          }
          v62 = v19[0];
          v63 = v19[1];
          if (v62 !== v20[0] || v63 !== v20[1]) {
            v1.blendEquationSeparate(v62, v63);
            v20[0] = v62;
            v20[1] = v63;
          }
          v64 = v21[0];
          v65 = v21[1];
          v66 = v21[2];
          v67 = v21[3];
          if (v64 !== v22[0] || v65 !== v22[1] || v66 !== v22[2] || v67 !== v22[3]) {
            v1.blendFuncSeparate(v64, v65, v66, v67);
            v22[0] = v64;
            v22[1] = v65;
            v22[2] = v66;
            v22[3] = v67;
          }
          v68 = v4.depth_enable;
          if (v68 !== v5.depth_enable) {
            if (v68) {
              v1.enable(2929);
            } else {
              v1.disable(2929);
            }
            v5.depth_enable = v68;
          }
          v69 = v4.depth_func;
          if (v69 !== v5.depth_func) {
            v1.depthFunc(v69);
            v5.depth_func = v69;
          }
          v70 = v23[0];
          v71 = v23[1];
          if (v70 !== v24[0] || v71 !== v24[1]) {
            v1.depthRange(v70, v71);
            v24[0] = v70;
            v24[1] = v71;
          }
          v72 = v4.depth_mask;
          if (v72 !== v5.depth_mask) {
            v1.depthMask(v72);
            v5.depth_mask = v72;
          }
          v73 = v25[0];
          v74 = v25[1];
          v75 = v25[2];
          v76 = v25[3];
          if (v73 !== v26[0] || v74 !== v26[1] || v75 !== v26[2] || v76 !== v26[3]) {
            v1.colorMask(v73, v74, v75, v76);
            v26[0] = v73;
            v26[1] = v74;
            v26[2] = v75;
            v26[3] = v76;
          }
          v77 = v4.cull_enable;
          if (v77 !== v5.cull_enable) {
            if (v77) {
              v1.enable(2884);
            } else {
              v1.disable(2884);
            }
            v5.cull_enable = v77;
          }
          v78 = v4.cull_face;
          if (v78 !== v5.cull_face) {
            v1.cullFace(v78);
            v5.cull_face = v78;
          }
          v79 = v4.frontFace;
          if (v79 !== v5.frontFace) {
            v1.frontFace(v79);
            v5.frontFace = v79;
          }
          v80 = v4.lineWidth;
          if (v80 !== v5.lineWidth) {
            v1.lineWidth(v80);
            v5.lineWidth = v80;
          }
          v81 = v4.polygonOffset_enable;
          if (v81 !== v5.polygonOffset_enable) {
            if (v81) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v81;
          }
          v82 = v27[0];
          v83 = v27[1];
          if (v82 !== v28[0] || v83 !== v28[1]) {
            v1.polygonOffset(v82, v83);
            v28[0] = v82;
            v28[1] = v83;
          }
          v84 = v4.sample_alpha;
          if (v84 !== v5.sample_alpha) {
            if (v84) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v84;
          }
          v85 = v4.sample_enable;
          if (v85 !== v5.sample_enable) {
            if (v85) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v85;
          }
          v86 = v29[0];
          v87 = v29[1];
          if (v86 !== v30[0] || v87 !== v30[1]) {
            v1.sampleCoverage(v86, v87);
            v30[0] = v86;
            v30[1] = v87;
          }
          v88 = v4.stencil_enable;
          if (v88 !== v5.stencil_enable) {
            if (v88) {
              v1.enable(2960);
            } else {
              v1.disable(2960);
            }
            v5.stencil_enable = v88;
          }
          v89 = v4.stencil_mask;
          if (v89 !== v5.stencil_mask) {
            v1.stencilMask(v89);
            v5.stencil_mask = v89;
          }
          v90 = v31[0];
          v91 = v31[1];
          v92 = v31[2];
          if (v90 !== v32[0] || v91 !== v32[1] || v92 !== v32[2]) {
            v1.stencilFunc(v90, v91, v92);
            v32[0] = v90;
            v32[1] = v91;
            v32[2] = v92;
          }
          v93 = v33[0];
          v94 = v33[1];
          v95 = v33[2];
          v96 = v33[3];
          if (v93 !== v34[0] || v94 !== v34[1] || v95 !== v34[2] || v96 !== v34[3]) {
            v1.stencilOpSeparate(v93, v94, v95, v96);
            v34[0] = v93;
            v34[1] = v94;
            v34[2] = v95;
            v34[3] = v96;
          }
          v97 = v35[0];
          v98 = v35[1];
          v99 = v35[2];
          v100 = v35[3];
          if (v97 !== v36[0] || v98 !== v36[1] || v99 !== v36[2] || v100 !== v36[3]) {
            v1.stencilOpSeparate(v97, v98, v99, v100);
            v36[0] = v97;
            v36[1] = v98;
            v36[2] = v99;
            v36[3] = v100;
          }
          v101 = v4.scissor_enable;
          if (v101 !== v5.scissor_enable) {
            if (v101) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v101;
          }
        }
        v102 = v2.framebufferWidth;
        v103 = v2.framebufferHeight;
        v104 = v2.viewportWidth;
        v2.viewportWidth = v102;
        v105 = v2.viewportHeight;
        v2.viewportHeight = v103;
        v1.viewport(0, 0, v102, v103);
        v40[0] = 0;
        v40[1] = 0;
        v40[2] = v102;
        v40[3] = v103;
        v106 = v2.framebufferWidth;
        v107 = v2.framebufferHeight;
        v1.scissor(0, 0, v106, v107);
        v38[0] = 0;
        v38[1] = 0;
        v38[2] = v106;
        v38[3] = v107;
        v108 = v5.profile;
        if (v108) {
          v109 = performance.now();
          g48.count++;
        }
        v111 = g110.call(this, v2, a0, 0);
        v112 = v3.id(v111);
        v113 = v9.program(2, v112);
        v1.useProgram(v113.program);
        v11.setVAO(null);
        v115 = v113.id;
        v116 = v114[v115];
        if (v116) {
          v116.call(this, a0);
        } else {
          v116 = v114[v115] = g117(v113);
          v116.call(this, a0);
        }
        v5.dirty = true;
        v11.setVAO(null);
        v13.next = v53;
        v2.framebufferWidth = v54;
        v2.framebufferHeight = v55;
        v2.viewportWidth = v104;
        v2.viewportHeight = v105;
        if (v108) {
          g48.cpuTime += performance.now() - v109;
        }
      },
      "scope": function(a0, a1, a2) {
        var v118, v119, v120, v121, v122, v123, v124, v125, v126, v128, v130, v131, v132, v133, v134, v136, v138, v139, v140, v141, v142, v144, v146, v148, v150, v152, v154, v156, v158, v160, v162, v164, v166, v168, v170, v172, v174, v176, v178, v180, v182, v184, v186, v188, v190, v193, v194, v195, v196, v197, v198, v199, v200, v201, v202, v203, v204, v206, v207, v208, v209;
        v118 = g50.call(this, v2, a0, a2);
        v119 = v13.getFramebuffer(v118);
        v120 = v13.next;
        v13.next = v119;
        v121 = v2.framebufferWidth;
        v2.framebufferWidth = v119 ? v119.width : v2.drawingBufferWidth;
        v122 = v2.framebufferHeight;
        v2.framebufferHeight = v119 ? v119.height : v2.drawingBufferHeight;
        v123 = v2.framebufferWidth;
        v124 = v2.framebufferHeight;
        v125 = v2.viewportWidth;
        v2.viewportWidth = v123;
        v126 = v2.viewportHeight;
        v2.viewportHeight = v124;
        v128 = v39[0];
        v39[0] = g127;
        v130 = v39[1];
        v39[1] = g129;
        v131 = v39[2];
        v39[2] = v123;
        v132 = v39[3];
        v39[3] = v124;
        v133 = v2.framebufferWidth;
        v134 = v2.framebufferHeight;
        v136 = v37[0];
        v37[0] = g135;
        v138 = v37[1];
        v37[1] = g137;
        v139 = v37[2];
        v37[2] = v133;
        v140 = v37[3];
        v37[3] = v134;
        v141 = v5.profile;
        if (v141) {
          v142 = performance.now();
          g48.count++;
        }
        v144 = v6.count;
        v6.count = g143;
        v146 = v6.primitive;
        v6.primitive = g145;
        v148 = g147.call(this, v2, a0, a2);
        v150 = v12[g149];
        v12[g149] = v148;
        v152 = g151.call(this, v2, a0, a2);
        v154 = v12[g153];
        v12[g153] = v152;
        v156 = g155.call(this, v2, a0, a2);
        v158 = v12[g157];
        v12[g157] = v156;
        v160 = g159.call(this, v2, a0, a2);
        v162 = v12[g161];
        v12[g161] = v160;
        v164 = g163.call(this, v2, a0, a2);
        v166 = v12[g165];
        v12[g165] = v164;
        v168 = g167.call(this, v2, a0, a2);
        v170 = v12[g169];
        v12[g169] = v168;
        v172 = g171.call(this, v2, a0, a2);
        v174 = v12[g173];
        v12[g173] = v172;
        v176 = g175.call(this, v2, a0, a2);
        v178 = v12[g177];
        v12[g177] = v176;
        v180 = g179.call(this, v2, a0, a2);
        v182 = v12[g181];
        v12[g181] = v180;
        v184 = g183.call(this, v2, a0, a2);
        v186 = v12[g185];
        v12[g185] = v184;
        v188 = g187.call(this, v2, a0, a2);
        v190 = v12[g189];
        v12[g189] = v188;
        v193 = g192.state;
        g192.state = 1;
        v194 = g192.x;
        g192.x = 0;
        v195 = g192.y;
        g192.y = 0;
        v196 = g192.z;
        g192.z = 0;
        v197 = g192.w;
        g192.w = 0;
        v198 = g192.buffer;
        g192.buffer = g191;
        v199 = g192.size;
        g192.size = 2;
        v200 = g192.normalized;
        g192.normalized = false;
        v201 = g192.type;
        g192.type = 5126;
        v202 = g192.offset;
        g192.offset = 0;
        v203 = g192.stride;
        g192.stride = 0;
        v204 = g192.divisor;
        g192.divisor = 0;
        v206 = v9.vert;
        v9.vert = g205;
        v207 = g110.call(this, v2, a0, a2);
        v208 = v3.id(v207);
        v209 = v9.frag;
        v9.frag = v208;
        v5.dirty = true;
        a1(v2, a0, a2);
        v13.next = v120;
        v2.framebufferWidth = v121;
        v2.framebufferHeight = v122;
        v2.viewportWidth = v125;
        v2.viewportHeight = v126;
        v39[0] = v128;
        v39[1] = v130;
        v39[2] = v131;
        v39[3] = v132;
        v37[0] = v136;
        v37[1] = v138;
        v37[2] = v139;
        v37[3] = v140;
        if (v141) {
          g48.cpuTime += performance.now() - v142;
        }
        v6.count = v144;
        v6.primitive = v146;
        v12[g149] = v150;
        v12[g153] = v154;
        v12[g157] = v158;
        v12[g161] = v162;
        v12[g165] = v166;
        v12[g169] = v170;
        v12[g173] = v174;
        v12[g177] = v178;
        v12[g181] = v182;
        v12[g185] = v186;
        v12[g189] = v190;
        g192.state = v193;
        g192.x = v194;
        g192.y = v195;
        g192.z = v196;
        g192.w = v197;
        g192.buffer = v198;
        g192.size = v199;
        g192.normalized = v200;
        g192.type = v201;
        g192.offset = v202;
        g192.stride = v203;
        g192.divisor = v204;
        v9.vert = v206;
        v9.frag = v209;
        v5.dirty = true;
      },
      "batch": function(a0, a1) {
        var v211, v212, v213, v214, v215, v262, v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v274, v275;
        v14.angle_instanced_arrays;
        v211 = g50.call(this, v2, a0, 0);
        v212 = v13.getFramebuffer(v211);
        v213 = v13.next;
        v13.next = v212;
        v214 = v2.framebufferWidth;
        v2.framebufferWidth = v212 ? v212.width : v2.drawingBufferWidth;
        v215 = v2.framebufferHeight;
        v2.framebufferHeight = v212 ? v212.height : v2.drawingBufferHeight;
        if (v212 !== v13.cur) {
          if (v212) {
            v1.bindFramebuffer(36160, v212.framebuffer);
          } else {
            v1.bindFramebuffer(36160, null);
          }
          v13.cur = v212;
        }
        if (v5.dirty) {
          var v216, v217, v218, v219, v220, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, v235, v236, v237, v238, v239, v240, v241, v242, v243, v244, v245, v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, v259, v260, v261;
          v216 = v4.dither;
          if (v216 !== v5.dither) {
            if (v216) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v216;
          }
          v217 = v4.blend_enable;
          if (v217 !== v5.blend_enable) {
            if (v217) {
              v1.enable(3042);
            } else {
              v1.disable(3042);
            }
            v5.blend_enable = v217;
          }
          v218 = v17[0];
          v219 = v17[1];
          v220 = v17[2];
          v221 = v17[3];
          if (v218 !== v18[0] || v219 !== v18[1] || v220 !== v18[2] || v221 !== v18[3]) {
            v1.blendColor(v218, v219, v220, v221);
            v18[0] = v218;
            v18[1] = v219;
            v18[2] = v220;
            v18[3] = v221;
          }
          v222 = v19[0];
          v223 = v19[1];
          if (v222 !== v20[0] || v223 !== v20[1]) {
            v1.blendEquationSeparate(v222, v223);
            v20[0] = v222;
            v20[1] = v223;
          }
          v224 = v21[0];
          v225 = v21[1];
          v226 = v21[2];
          v227 = v21[3];
          if (v224 !== v22[0] || v225 !== v22[1] || v226 !== v22[2] || v227 !== v22[3]) {
            v1.blendFuncSeparate(v224, v225, v226, v227);
            v22[0] = v224;
            v22[1] = v225;
            v22[2] = v226;
            v22[3] = v227;
          }
          v228 = v4.depth_enable;
          if (v228 !== v5.depth_enable) {
            if (v228) {
              v1.enable(2929);
            } else {
              v1.disable(2929);
            }
            v5.depth_enable = v228;
          }
          v229 = v4.depth_func;
          if (v229 !== v5.depth_func) {
            v1.depthFunc(v229);
            v5.depth_func = v229;
          }
          v230 = v23[0];
          v231 = v23[1];
          if (v230 !== v24[0] || v231 !== v24[1]) {
            v1.depthRange(v230, v231);
            v24[0] = v230;
            v24[1] = v231;
          }
          v232 = v4.depth_mask;
          if (v232 !== v5.depth_mask) {
            v1.depthMask(v232);
            v5.depth_mask = v232;
          }
          v233 = v25[0];
          v234 = v25[1];
          v235 = v25[2];
          v236 = v25[3];
          if (v233 !== v26[0] || v234 !== v26[1] || v235 !== v26[2] || v236 !== v26[3]) {
            v1.colorMask(v233, v234, v235, v236);
            v26[0] = v233;
            v26[1] = v234;
            v26[2] = v235;
            v26[3] = v236;
          }
          v237 = v4.cull_enable;
          if (v237 !== v5.cull_enable) {
            if (v237) {
              v1.enable(2884);
            } else {
              v1.disable(2884);
            }
            v5.cull_enable = v237;
          }
          v238 = v4.cull_face;
          if (v238 !== v5.cull_face) {
            v1.cullFace(v238);
            v5.cull_face = v238;
          }
          v239 = v4.frontFace;
          if (v239 !== v5.frontFace) {
            v1.frontFace(v239);
            v5.frontFace = v239;
          }
          v240 = v4.lineWidth;
          if (v240 !== v5.lineWidth) {
            v1.lineWidth(v240);
            v5.lineWidth = v240;
          }
          v241 = v4.polygonOffset_enable;
          if (v241 !== v5.polygonOffset_enable) {
            if (v241) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v241;
          }
          v242 = v27[0];
          v243 = v27[1];
          if (v242 !== v28[0] || v243 !== v28[1]) {
            v1.polygonOffset(v242, v243);
            v28[0] = v242;
            v28[1] = v243;
          }
          v244 = v4.sample_alpha;
          if (v244 !== v5.sample_alpha) {
            if (v244) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v244;
          }
          v245 = v4.sample_enable;
          if (v245 !== v5.sample_enable) {
            if (v245) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v245;
          }
          v246 = v29[0];
          v247 = v29[1];
          if (v246 !== v30[0] || v247 !== v30[1]) {
            v1.sampleCoverage(v246, v247);
            v30[0] = v246;
            v30[1] = v247;
          }
          v248 = v4.stencil_enable;
          if (v248 !== v5.stencil_enable) {
            if (v248) {
              v1.enable(2960);
            } else {
              v1.disable(2960);
            }
            v5.stencil_enable = v248;
          }
          v249 = v4.stencil_mask;
          if (v249 !== v5.stencil_mask) {
            v1.stencilMask(v249);
            v5.stencil_mask = v249;
          }
          v250 = v31[0];
          v251 = v31[1];
          v252 = v31[2];
          if (v250 !== v32[0] || v251 !== v32[1] || v252 !== v32[2]) {
            v1.stencilFunc(v250, v251, v252);
            v32[0] = v250;
            v32[1] = v251;
            v32[2] = v252;
          }
          v253 = v33[0];
          v254 = v33[1];
          v255 = v33[2];
          v256 = v33[3];
          if (v253 !== v34[0] || v254 !== v34[1] || v255 !== v34[2] || v256 !== v34[3]) {
            v1.stencilOpSeparate(v253, v254, v255, v256);
            v34[0] = v253;
            v34[1] = v254;
            v34[2] = v255;
            v34[3] = v256;
          }
          v257 = v35[0];
          v258 = v35[1];
          v259 = v35[2];
          v260 = v35[3];
          if (v257 !== v36[0] || v258 !== v36[1] || v259 !== v36[2] || v260 !== v36[3]) {
            v1.stencilOpSeparate(v257, v258, v259, v260);
            v36[0] = v257;
            v36[1] = v258;
            v36[2] = v259;
            v36[3] = v260;
          }
          v261 = v4.scissor_enable;
          if (v261 !== v5.scissor_enable) {
            if (v261) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v261;
          }
        }
        v262 = v2.framebufferWidth;
        v263 = v2.framebufferHeight;
        v264 = v2.viewportWidth;
        v2.viewportWidth = v262;
        v265 = v2.viewportHeight;
        v2.viewportHeight = v263;
        v1.viewport(0, 0, v262, v263);
        v40[0] = 0;
        v40[1] = 0;
        v40[2] = v262;
        v40[3] = v263;
        v266 = v2.framebufferWidth;
        v267 = v2.framebufferHeight;
        v1.scissor(0, 0, v266, v267);
        v38[0] = 0;
        v38[1] = 0;
        v38[2] = v266;
        v38[3] = v267;
        v268 = v5.profile;
        if (v268) {
          v269 = performance.now();
          g48.count += a1;
        }
        v270 = g110.call(this, v2, a0, 0);
        v271 = v3.id(v270);
        v272 = v9.program(2, v271);
        v1.useProgram(v272.program);
        v11.setVAO(null);
        v274 = v272.id;
        v275 = v273[v274];
        if (v275) {
          v275.call(this, a0, a1);
        } else {
          v275 = v273[v274] = g276(v272);
          v275.call(this, a0, a1);
        }
        v5.dirty = true;
        v11.setVAO(null);
        v13.next = v213;
        v2.framebufferWidth = v214;
        v2.framebufferHeight = v215;
        v2.viewportWidth = v264;
        v2.viewportHeight = v265;
        if (v268) {
          g48.cpuTime += performance.now() - v269;
        }
      }
    };
  },
  "a56156b46387d9ebaeb16362ff9fd91a496e85692131cee7d7a0dd9997816a78": function anonymous16(g0, g48, g50, g110, g112, g113, g117, g118, g122, g123, g126, g127, g141, g143, g149, g151, g157, g159, g162, g165, g168, g170, g183, g185) {
    var v1, v2, v4, v5, v6, v7, v9, v10, v11, v12, v13, v14, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40;
    v1 = g0.gl;
    v2 = g0.context;
    g0.strings;
    v4 = g0.next;
    v5 = g0.current;
    v6 = g0.draw;
    v7 = g0.elements;
    g0.buffer;
    v9 = g0.shader;
    v10 = g0.attributes;
    v11 = g0.vao;
    v12 = g0.uniforms;
    v13 = g0.framebuffer;
    v14 = g0.extensions;
    g0.timer;
    g0.isBufferArgs;
    v17 = v4.blend_color;
    v18 = v5.blend_color;
    v19 = v4.blend_equation;
    v20 = v5.blend_equation;
    v21 = v4.blend_func;
    v22 = v5.blend_func;
    v23 = v4.depth_range;
    v24 = v5.depth_range;
    v25 = v4.colorMask;
    v26 = v5.colorMask;
    v27 = v4.polygonOffset_offset;
    v28 = v5.polygonOffset_offset;
    v29 = v4.sample_coverage;
    v30 = v5.sample_coverage;
    v31 = v4.stencil_func;
    v32 = v5.stencil_func;
    v33 = v4.stencil_opFront;
    v34 = v5.stencil_opFront;
    v35 = v4.stencil_opBack;
    v36 = v5.stencil_opBack;
    v37 = v4.scissor_box;
    v38 = v5.scissor_box;
    v39 = v4.viewport;
    v40 = v5.viewport;
    return {
      "draw": function(a0) {
        var v51, v52, v53, v54, v55, v102, v103, v104, v105, v106, v107, v108, v109, v111, v114, v115, v116, v119, v120, v121, v124, v125, v128, v129, v130, v131;
        v14.angle_instanced_arrays;
        v51 = g50.call(this, v2, a0, 0);
        v52 = v13.getFramebuffer(v51);
        v53 = v13.next;
        v13.next = v52;
        v54 = v2.framebufferWidth;
        v2.framebufferWidth = v52 ? v52.width : v2.drawingBufferWidth;
        v55 = v2.framebufferHeight;
        v2.framebufferHeight = v52 ? v52.height : v2.drawingBufferHeight;
        if (v52 !== v13.cur) {
          if (v52) {
            v1.bindFramebuffer(36160, v52.framebuffer);
          } else {
            v1.bindFramebuffer(36160, null);
          }
          v13.cur = v52;
        }
        if (v5.dirty) {
          var v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, v100, v101;
          v56 = v4.dither;
          if (v56 !== v5.dither) {
            if (v56) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v56;
          }
          v57 = v4.blend_enable;
          if (v57 !== v5.blend_enable) {
            if (v57) {
              v1.enable(3042);
            } else {
              v1.disable(3042);
            }
            v5.blend_enable = v57;
          }
          v58 = v17[0];
          v59 = v17[1];
          v60 = v17[2];
          v61 = v17[3];
          if (v58 !== v18[0] || v59 !== v18[1] || v60 !== v18[2] || v61 !== v18[3]) {
            v1.blendColor(v58, v59, v60, v61);
            v18[0] = v58;
            v18[1] = v59;
            v18[2] = v60;
            v18[3] = v61;
          }
          v62 = v19[0];
          v63 = v19[1];
          if (v62 !== v20[0] || v63 !== v20[1]) {
            v1.blendEquationSeparate(v62, v63);
            v20[0] = v62;
            v20[1] = v63;
          }
          v64 = v21[0];
          v65 = v21[1];
          v66 = v21[2];
          v67 = v21[3];
          if (v64 !== v22[0] || v65 !== v22[1] || v66 !== v22[2] || v67 !== v22[3]) {
            v1.blendFuncSeparate(v64, v65, v66, v67);
            v22[0] = v64;
            v22[1] = v65;
            v22[2] = v66;
            v22[3] = v67;
          }
          v68 = v4.depth_enable;
          if (v68 !== v5.depth_enable) {
            if (v68) {
              v1.enable(2929);
            } else {
              v1.disable(2929);
            }
            v5.depth_enable = v68;
          }
          v69 = v4.depth_func;
          if (v69 !== v5.depth_func) {
            v1.depthFunc(v69);
            v5.depth_func = v69;
          }
          v70 = v23[0];
          v71 = v23[1];
          if (v70 !== v24[0] || v71 !== v24[1]) {
            v1.depthRange(v70, v71);
            v24[0] = v70;
            v24[1] = v71;
          }
          v72 = v4.depth_mask;
          if (v72 !== v5.depth_mask) {
            v1.depthMask(v72);
            v5.depth_mask = v72;
          }
          v73 = v25[0];
          v74 = v25[1];
          v75 = v25[2];
          v76 = v25[3];
          if (v73 !== v26[0] || v74 !== v26[1] || v75 !== v26[2] || v76 !== v26[3]) {
            v1.colorMask(v73, v74, v75, v76);
            v26[0] = v73;
            v26[1] = v74;
            v26[2] = v75;
            v26[3] = v76;
          }
          v77 = v4.cull_enable;
          if (v77 !== v5.cull_enable) {
            if (v77) {
              v1.enable(2884);
            } else {
              v1.disable(2884);
            }
            v5.cull_enable = v77;
          }
          v78 = v4.cull_face;
          if (v78 !== v5.cull_face) {
            v1.cullFace(v78);
            v5.cull_face = v78;
          }
          v79 = v4.frontFace;
          if (v79 !== v5.frontFace) {
            v1.frontFace(v79);
            v5.frontFace = v79;
          }
          v80 = v4.lineWidth;
          if (v80 !== v5.lineWidth) {
            v1.lineWidth(v80);
            v5.lineWidth = v80;
          }
          v81 = v4.polygonOffset_enable;
          if (v81 !== v5.polygonOffset_enable) {
            if (v81) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v81;
          }
          v82 = v27[0];
          v83 = v27[1];
          if (v82 !== v28[0] || v83 !== v28[1]) {
            v1.polygonOffset(v82, v83);
            v28[0] = v82;
            v28[1] = v83;
          }
          v84 = v4.sample_alpha;
          if (v84 !== v5.sample_alpha) {
            if (v84) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v84;
          }
          v85 = v4.sample_enable;
          if (v85 !== v5.sample_enable) {
            if (v85) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v85;
          }
          v86 = v29[0];
          v87 = v29[1];
          if (v86 !== v30[0] || v87 !== v30[1]) {
            v1.sampleCoverage(v86, v87);
            v30[0] = v86;
            v30[1] = v87;
          }
          v88 = v4.stencil_enable;
          if (v88 !== v5.stencil_enable) {
            if (v88) {
              v1.enable(2960);
            } else {
              v1.disable(2960);
            }
            v5.stencil_enable = v88;
          }
          v89 = v4.stencil_mask;
          if (v89 !== v5.stencil_mask) {
            v1.stencilMask(v89);
            v5.stencil_mask = v89;
          }
          v90 = v31[0];
          v91 = v31[1];
          v92 = v31[2];
          if (v90 !== v32[0] || v91 !== v32[1] || v92 !== v32[2]) {
            v1.stencilFunc(v90, v91, v92);
            v32[0] = v90;
            v32[1] = v91;
            v32[2] = v92;
          }
          v93 = v33[0];
          v94 = v33[1];
          v95 = v33[2];
          v96 = v33[3];
          if (v93 !== v34[0] || v94 !== v34[1] || v95 !== v34[2] || v96 !== v34[3]) {
            v1.stencilOpSeparate(v93, v94, v95, v96);
            v34[0] = v93;
            v34[1] = v94;
            v34[2] = v95;
            v34[3] = v96;
          }
          v97 = v35[0];
          v98 = v35[1];
          v99 = v35[2];
          v100 = v35[3];
          if (v97 !== v36[0] || v98 !== v36[1] || v99 !== v36[2] || v100 !== v36[3]) {
            v1.stencilOpSeparate(v97, v98, v99, v100);
            v36[0] = v97;
            v36[1] = v98;
            v36[2] = v99;
            v36[3] = v100;
          }
          v101 = v4.scissor_enable;
          if (v101 !== v5.scissor_enable) {
            if (v101) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v101;
          }
        }
        v102 = v2.framebufferWidth;
        v103 = v2.framebufferHeight;
        v104 = v2.viewportWidth;
        v2.viewportWidth = v102;
        v105 = v2.viewportHeight;
        v2.viewportHeight = v103;
        v1.viewport(0, 0, v102, v103);
        v40[0] = 0;
        v40[1] = 0;
        v40[2] = v102;
        v40[3] = v103;
        v106 = v2.framebufferWidth;
        v107 = v2.framebufferHeight;
        v1.scissor(0, 0, v106, v107);
        v38[0] = 0;
        v38[1] = 0;
        v38[2] = v106;
        v38[3] = v107;
        v108 = v5.profile;
        if (v108) {
          v109 = performance.now();
          g48.count++;
        }
        v1.useProgram(g110.program);
        v111 = v14.angle_instanced_arrays;
        v11.setVAO(null);
        v114 = g113.location;
        v115 = v10[v114];
        if (!v115.buffer) {
          v1.enableVertexAttribArray(v114);
        }
        v116 = 2;
        if (v115.type !== 5126 || v115.size !== v116 || v115.buffer !== g112 || v115.normalized !== false || v115.offset !== 0 || v115.stride !== 0) {
          v1.bindBuffer(34962, g112.buffer);
          v1.vertexAttribPointer(v114, v116, 5126, false, 0, 0);
          v115.type = 5126;
          v115.size = v116;
          v115.buffer = g112;
          v115.normalized = false;
          v115.offset = 0;
          v115.stride = 0;
        }
        if (v115.divisor !== 0) {
          v111.vertexAttribDivisorANGLE(v114, 0);
          v115.divisor = 0;
        }
        v119 = g118.call(this, v2, a0, 0);
        v120 = v119[0];
        v121 = v119[1];
        v1.uniform2f(g117.location, v120, v121);
        v124 = g123.call(this, v2, a0, 0);
        if (v124 && v124._reglType === "framebuffer") {
          v124 = v124.color[0];
        }
        v125 = v124._texture;
        v1.uniform1i(g122.location, v125.bind());
        v128 = g127.call(this, v2, a0, 0);
        v1.uniform1f(g126.location, v128);
        v129 = v6.elements;
        if (v129) {
          v1.bindBuffer(34963, v129.buffer.buffer);
        } else if (v11.currentVAO) {
          v129 = v7.getElements(v11.currentVAO.elements);
          if (v129)
            v1.bindBuffer(34963, v129.buffer.buffer);
        }
        v130 = v6.offset;
        v131 = v6.instances;
        if (v131 > 0) {
          if (v129) {
            v111.drawElementsInstancedANGLE(5, 4, v129.type, v130 << (v129.type - 5121 >> 1), v131);
          } else {
            v111.drawArraysInstancedANGLE(5, v130, 4, v131);
          }
        } else if (v131 < 0) {
          if (v129) {
            v1.drawElements(5, 4, v129.type, v130 << (v129.type - 5121 >> 1));
          } else {
            v1.drawArrays(5, v130, 4);
          }
        }
        v5.dirty = true;
        v11.setVAO(null);
        v13.next = v53;
        v2.framebufferWidth = v54;
        v2.framebufferHeight = v55;
        v2.viewportWidth = v104;
        v2.viewportHeight = v105;
        if (v108) {
          g48.cpuTime += performance.now() - v109;
        }
        v125.unbind();
      },
      "scope": function(a0, a1, a2) {
        var v132, v133, v134, v135, v136, v137, v138, v139, v140, v142, v144, v145, v146, v147, v148, v150, v152, v153, v154, v155, v156, v158, v160, v161, v163, v164, v166, v167, v169, v171, v172, v173, v174, v175, v176, v177, v178, v179, v180, v181, v182, v184, v186;
        v132 = g50.call(this, v2, a0, a2);
        v133 = v13.getFramebuffer(v132);
        v134 = v13.next;
        v13.next = v133;
        v135 = v2.framebufferWidth;
        v2.framebufferWidth = v133 ? v133.width : v2.drawingBufferWidth;
        v136 = v2.framebufferHeight;
        v2.framebufferHeight = v133 ? v133.height : v2.drawingBufferHeight;
        v137 = v2.framebufferWidth;
        v138 = v2.framebufferHeight;
        v139 = v2.viewportWidth;
        v2.viewportWidth = v137;
        v140 = v2.viewportHeight;
        v2.viewportHeight = v138;
        v142 = v39[0];
        v39[0] = g141;
        v144 = v39[1];
        v39[1] = g143;
        v145 = v39[2];
        v39[2] = v137;
        v146 = v39[3];
        v39[3] = v138;
        v147 = v2.framebufferWidth;
        v148 = v2.framebufferHeight;
        v150 = v37[0];
        v37[0] = g149;
        v152 = v37[1];
        v37[1] = g151;
        v153 = v37[2];
        v37[2] = v147;
        v154 = v37[3];
        v37[3] = v148;
        v155 = v5.profile;
        if (v155) {
          v156 = performance.now();
          g48.count++;
        }
        v158 = v6.count;
        v6.count = g157;
        v160 = v6.primitive;
        v6.primitive = g159;
        v161 = g123.call(this, v2, a0, a2);
        v163 = v12[g162];
        v12[g162] = v161;
        v164 = g118.call(this, v2, a0, a2);
        v166 = v12[g165];
        v12[g165] = v164;
        v167 = g127.call(this, v2, a0, a2);
        v169 = v12[g168];
        v12[g168] = v167;
        v171 = g170.state;
        g170.state = 1;
        v172 = g170.x;
        g170.x = 0;
        v173 = g170.y;
        g170.y = 0;
        v174 = g170.z;
        g170.z = 0;
        v175 = g170.w;
        g170.w = 0;
        v176 = g170.buffer;
        g170.buffer = g112;
        v177 = g170.size;
        g170.size = 2;
        v178 = g170.normalized;
        g170.normalized = false;
        v179 = g170.type;
        g170.type = 5126;
        v180 = g170.offset;
        g170.offset = 0;
        v181 = g170.stride;
        g170.stride = 0;
        v182 = g170.divisor;
        g170.divisor = 0;
        v184 = v9.vert;
        v9.vert = g183;
        v186 = v9.frag;
        v9.frag = g185;
        v5.dirty = true;
        a1(v2, a0, a2);
        v13.next = v134;
        v2.framebufferWidth = v135;
        v2.framebufferHeight = v136;
        v2.viewportWidth = v139;
        v2.viewportHeight = v140;
        v39[0] = v142;
        v39[1] = v144;
        v39[2] = v145;
        v39[3] = v146;
        v37[0] = v150;
        v37[1] = v152;
        v37[2] = v153;
        v37[3] = v154;
        if (v155) {
          g48.cpuTime += performance.now() - v156;
        }
        v6.count = v158;
        v6.primitive = v160;
        v12[g162] = v163;
        v12[g165] = v166;
        v12[g168] = v169;
        g170.state = v171;
        g170.x = v172;
        g170.y = v173;
        g170.z = v174;
        g170.w = v175;
        g170.buffer = v176;
        g170.size = v177;
        g170.normalized = v178;
        g170.type = v179;
        g170.offset = v180;
        g170.stride = v181;
        g170.divisor = v182;
        v9.vert = v184;
        v9.frag = v186;
        v5.dirty = true;
      },
      "batch": function(a0, a1) {
        var v188, v189, v190, v191, v192, v239, v240, v241, v242, v243, v244, v245, v246, v247, v248, v249;
        v14.angle_instanced_arrays;
        v188 = g50.call(this, v2, a0, 0);
        v189 = v13.getFramebuffer(v188);
        v190 = v13.next;
        v13.next = v189;
        v191 = v2.framebufferWidth;
        v2.framebufferWidth = v189 ? v189.width : v2.drawingBufferWidth;
        v192 = v2.framebufferHeight;
        v2.framebufferHeight = v189 ? v189.height : v2.drawingBufferHeight;
        if (v189 !== v13.cur) {
          if (v189) {
            v1.bindFramebuffer(36160, v189.framebuffer);
          } else {
            v1.bindFramebuffer(36160, null);
          }
          v13.cur = v189;
        }
        if (v5.dirty) {
          var v193, v194, v195, v196, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, v220, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, v235, v236, v237, v238;
          v193 = v4.dither;
          if (v193 !== v5.dither) {
            if (v193) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v193;
          }
          v194 = v4.blend_enable;
          if (v194 !== v5.blend_enable) {
            if (v194) {
              v1.enable(3042);
            } else {
              v1.disable(3042);
            }
            v5.blend_enable = v194;
          }
          v195 = v17[0];
          v196 = v17[1];
          v197 = v17[2];
          v198 = v17[3];
          if (v195 !== v18[0] || v196 !== v18[1] || v197 !== v18[2] || v198 !== v18[3]) {
            v1.blendColor(v195, v196, v197, v198);
            v18[0] = v195;
            v18[1] = v196;
            v18[2] = v197;
            v18[3] = v198;
          }
          v199 = v19[0];
          v200 = v19[1];
          if (v199 !== v20[0] || v200 !== v20[1]) {
            v1.blendEquationSeparate(v199, v200);
            v20[0] = v199;
            v20[1] = v200;
          }
          v201 = v21[0];
          v202 = v21[1];
          v203 = v21[2];
          v204 = v21[3];
          if (v201 !== v22[0] || v202 !== v22[1] || v203 !== v22[2] || v204 !== v22[3]) {
            v1.blendFuncSeparate(v201, v202, v203, v204);
            v22[0] = v201;
            v22[1] = v202;
            v22[2] = v203;
            v22[3] = v204;
          }
          v205 = v4.depth_enable;
          if (v205 !== v5.depth_enable) {
            if (v205) {
              v1.enable(2929);
            } else {
              v1.disable(2929);
            }
            v5.depth_enable = v205;
          }
          v206 = v4.depth_func;
          if (v206 !== v5.depth_func) {
            v1.depthFunc(v206);
            v5.depth_func = v206;
          }
          v207 = v23[0];
          v208 = v23[1];
          if (v207 !== v24[0] || v208 !== v24[1]) {
            v1.depthRange(v207, v208);
            v24[0] = v207;
            v24[1] = v208;
          }
          v209 = v4.depth_mask;
          if (v209 !== v5.depth_mask) {
            v1.depthMask(v209);
            v5.depth_mask = v209;
          }
          v210 = v25[0];
          v211 = v25[1];
          v212 = v25[2];
          v213 = v25[3];
          if (v210 !== v26[0] || v211 !== v26[1] || v212 !== v26[2] || v213 !== v26[3]) {
            v1.colorMask(v210, v211, v212, v213);
            v26[0] = v210;
            v26[1] = v211;
            v26[2] = v212;
            v26[3] = v213;
          }
          v214 = v4.cull_enable;
          if (v214 !== v5.cull_enable) {
            if (v214) {
              v1.enable(2884);
            } else {
              v1.disable(2884);
            }
            v5.cull_enable = v214;
          }
          v215 = v4.cull_face;
          if (v215 !== v5.cull_face) {
            v1.cullFace(v215);
            v5.cull_face = v215;
          }
          v216 = v4.frontFace;
          if (v216 !== v5.frontFace) {
            v1.frontFace(v216);
            v5.frontFace = v216;
          }
          v217 = v4.lineWidth;
          if (v217 !== v5.lineWidth) {
            v1.lineWidth(v217);
            v5.lineWidth = v217;
          }
          v218 = v4.polygonOffset_enable;
          if (v218 !== v5.polygonOffset_enable) {
            if (v218) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v218;
          }
          v219 = v27[0];
          v220 = v27[1];
          if (v219 !== v28[0] || v220 !== v28[1]) {
            v1.polygonOffset(v219, v220);
            v28[0] = v219;
            v28[1] = v220;
          }
          v221 = v4.sample_alpha;
          if (v221 !== v5.sample_alpha) {
            if (v221) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v221;
          }
          v222 = v4.sample_enable;
          if (v222 !== v5.sample_enable) {
            if (v222) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v222;
          }
          v223 = v29[0];
          v224 = v29[1];
          if (v223 !== v30[0] || v224 !== v30[1]) {
            v1.sampleCoverage(v223, v224);
            v30[0] = v223;
            v30[1] = v224;
          }
          v225 = v4.stencil_enable;
          if (v225 !== v5.stencil_enable) {
            if (v225) {
              v1.enable(2960);
            } else {
              v1.disable(2960);
            }
            v5.stencil_enable = v225;
          }
          v226 = v4.stencil_mask;
          if (v226 !== v5.stencil_mask) {
            v1.stencilMask(v226);
            v5.stencil_mask = v226;
          }
          v227 = v31[0];
          v228 = v31[1];
          v229 = v31[2];
          if (v227 !== v32[0] || v228 !== v32[1] || v229 !== v32[2]) {
            v1.stencilFunc(v227, v228, v229);
            v32[0] = v227;
            v32[1] = v228;
            v32[2] = v229;
          }
          v230 = v33[0];
          v231 = v33[1];
          v232 = v33[2];
          v233 = v33[3];
          if (v230 !== v34[0] || v231 !== v34[1] || v232 !== v34[2] || v233 !== v34[3]) {
            v1.stencilOpSeparate(v230, v231, v232, v233);
            v34[0] = v230;
            v34[1] = v231;
            v34[2] = v232;
            v34[3] = v233;
          }
          v234 = v35[0];
          v235 = v35[1];
          v236 = v35[2];
          v237 = v35[3];
          if (v234 !== v36[0] || v235 !== v36[1] || v236 !== v36[2] || v237 !== v36[3]) {
            v1.stencilOpSeparate(v234, v235, v236, v237);
            v36[0] = v234;
            v36[1] = v235;
            v36[2] = v236;
            v36[3] = v237;
          }
          v238 = v4.scissor_enable;
          if (v238 !== v5.scissor_enable) {
            if (v238) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v238;
          }
        }
        v239 = v2.framebufferWidth;
        v240 = v2.framebufferHeight;
        v241 = v2.viewportWidth;
        v2.viewportWidth = v239;
        v242 = v2.viewportHeight;
        v2.viewportHeight = v240;
        v1.viewport(0, 0, v239, v240);
        v40[0] = 0;
        v40[1] = 0;
        v40[2] = v239;
        v40[3] = v240;
        v243 = v2.framebufferWidth;
        v244 = v2.framebufferHeight;
        v1.scissor(0, 0, v243, v244);
        v38[0] = 0;
        v38[1] = 0;
        v38[2] = v243;
        v38[3] = v244;
        v245 = v5.profile;
        if (v245) {
          v246 = performance.now();
          g48.count += a1;
        }
        v1.useProgram(g110.program);
        v247 = v14.angle_instanced_arrays;
        var v250, v251, v252, v253, v254, v255, v256, v257, v258, v259, v260, v261;
        v11.setVAO(null);
        v250 = g113.location;
        v251 = v10[v250];
        if (!v251.buffer) {
          v1.enableVertexAttribArray(v250);
        }
        v252 = 2;
        if (v251.type !== 5126 || v251.size !== v252 || v251.buffer !== g112 || v251.normalized !== false || v251.offset !== 0 || v251.stride !== 0) {
          v1.bindBuffer(34962, g112.buffer);
          v1.vertexAttribPointer(v250, v252, 5126, false, 0, 0);
          v251.type = 5126;
          v251.size = v252;
          v251.buffer = g112;
          v251.normalized = false;
          v251.offset = 0;
          v251.stride = 0;
        }
        if (v251.divisor !== 0) {
          v247.vertexAttribDivisorANGLE(v250, 0);
          v251.divisor = 0;
        }
        v253 = g118.call(this, v2, v249, v248);
        v254 = v253[0];
        v255 = v253[1];
        v1.uniform2f(g117.location, v254, v255);
        v256 = g123.call(this, v2, v249, v248);
        if (v256 && v256._reglType === "framebuffer") {
          v256 = v256.color[0];
        }
        v257 = v256._texture;
        v1.uniform1i(g122.location, v257.bind());
        v258 = g127.call(this, v2, v249, v248);
        v1.uniform1f(g126.location, v258);
        v259 = v6.elements;
        if (v259) {
          v1.bindBuffer(34963, v259.buffer.buffer);
        } else if (v11.currentVAO) {
          v259 = v7.getElements(v11.currentVAO.elements);
          if (v259)
            v1.bindBuffer(34963, v259.buffer.buffer);
        }
        v260 = v6.offset;
        v261 = v6.instances;
        for (v248 = 0; v248 < a1; ++v248) {
          v249 = a0[v248];
          if (v261 > 0) {
            if (v259) {
              v247.drawElementsInstancedANGLE(5, 4, v259.type, v260 << (v259.type - 5121 >> 1), v261);
            } else {
              v247.drawArraysInstancedANGLE(5, v260, 4, v261);
            }
          } else if (v261 < 0) {
            if (v259) {
              v1.drawElements(5, 4, v259.type, v260 << (v259.type - 5121 >> 1));
            } else {
              v1.drawArrays(5, v260, 4);
            }
          }
        }
        v257.unbind();
        v5.dirty = true;
        v11.setVAO(null);
        v13.next = v190;
        v2.framebufferWidth = v191;
        v2.framebufferHeight = v192;
        v2.viewportWidth = v241;
        v2.viewportHeight = v242;
        if (v245) {
          g48.cpuTime += performance.now() - v246;
        }
      }
    };
  },
  "a078ac08badcbb8d92ee14097c5aa87a7d715adc669508e1f2527db65d2020a6": function anonymous17(g0, g48, g50, g110, g112, g113, g129, g131, g137, g139, g145, g147, g149, g162, g164) {
    var v1, v2, v4, v5, v6, v7, v9, v10, v11, v13, v14, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40;
    v1 = g0.gl;
    v2 = g0.context;
    g0.strings;
    v4 = g0.next;
    v5 = g0.current;
    v6 = g0.draw;
    v7 = g0.elements;
    g0.buffer;
    v9 = g0.shader;
    v10 = g0.attributes;
    v11 = g0.vao;
    g0.uniforms;
    v13 = g0.framebuffer;
    v14 = g0.extensions;
    g0.timer;
    g0.isBufferArgs;
    v17 = v4.blend_color;
    v18 = v5.blend_color;
    v19 = v4.blend_equation;
    v20 = v5.blend_equation;
    v21 = v4.blend_func;
    v22 = v5.blend_func;
    v23 = v4.depth_range;
    v24 = v5.depth_range;
    v25 = v4.colorMask;
    v26 = v5.colorMask;
    v27 = v4.polygonOffset_offset;
    v28 = v5.polygonOffset_offset;
    v29 = v4.sample_coverage;
    v30 = v5.sample_coverage;
    v31 = v4.stencil_func;
    v32 = v5.stencil_func;
    v33 = v4.stencil_opFront;
    v34 = v5.stencil_opFront;
    v35 = v4.stencil_opBack;
    v36 = v5.stencil_opBack;
    v37 = v4.scissor_box;
    v38 = v5.scissor_box;
    v39 = v4.viewport;
    v40 = v5.viewport;
    return {
      "draw": function(a0) {
        var v51, v52, v53, v54, v55, v102, v103, v104, v105, v106, v107, v108, v109, v111, v114, v115, v116, v117, v118, v119;
        v14.angle_instanced_arrays;
        v51 = g50.call(this, v2, a0, 0);
        v52 = v13.getFramebuffer(v51);
        v53 = v13.next;
        v13.next = v52;
        v54 = v2.framebufferWidth;
        v2.framebufferWidth = v52 ? v52.width : v2.drawingBufferWidth;
        v55 = v2.framebufferHeight;
        v2.framebufferHeight = v52 ? v52.height : v2.drawingBufferHeight;
        if (v52 !== v13.cur) {
          if (v52) {
            v1.bindFramebuffer(36160, v52.framebuffer);
          } else {
            v1.bindFramebuffer(36160, null);
          }
          v13.cur = v52;
        }
        if (v5.dirty) {
          var v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, v100, v101;
          v56 = v4.dither;
          if (v56 !== v5.dither) {
            if (v56) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v56;
          }
          v57 = v4.blend_enable;
          if (v57 !== v5.blend_enable) {
            if (v57) {
              v1.enable(3042);
            } else {
              v1.disable(3042);
            }
            v5.blend_enable = v57;
          }
          v58 = v17[0];
          v59 = v17[1];
          v60 = v17[2];
          v61 = v17[3];
          if (v58 !== v18[0] || v59 !== v18[1] || v60 !== v18[2] || v61 !== v18[3]) {
            v1.blendColor(v58, v59, v60, v61);
            v18[0] = v58;
            v18[1] = v59;
            v18[2] = v60;
            v18[3] = v61;
          }
          v62 = v19[0];
          v63 = v19[1];
          if (v62 !== v20[0] || v63 !== v20[1]) {
            v1.blendEquationSeparate(v62, v63);
            v20[0] = v62;
            v20[1] = v63;
          }
          v64 = v21[0];
          v65 = v21[1];
          v66 = v21[2];
          v67 = v21[3];
          if (v64 !== v22[0] || v65 !== v22[1] || v66 !== v22[2] || v67 !== v22[3]) {
            v1.blendFuncSeparate(v64, v65, v66, v67);
            v22[0] = v64;
            v22[1] = v65;
            v22[2] = v66;
            v22[3] = v67;
          }
          v68 = v4.depth_enable;
          if (v68 !== v5.depth_enable) {
            if (v68) {
              v1.enable(2929);
            } else {
              v1.disable(2929);
            }
            v5.depth_enable = v68;
          }
          v69 = v4.depth_func;
          if (v69 !== v5.depth_func) {
            v1.depthFunc(v69);
            v5.depth_func = v69;
          }
          v70 = v23[0];
          v71 = v23[1];
          if (v70 !== v24[0] || v71 !== v24[1]) {
            v1.depthRange(v70, v71);
            v24[0] = v70;
            v24[1] = v71;
          }
          v72 = v4.depth_mask;
          if (v72 !== v5.depth_mask) {
            v1.depthMask(v72);
            v5.depth_mask = v72;
          }
          v73 = v25[0];
          v74 = v25[1];
          v75 = v25[2];
          v76 = v25[3];
          if (v73 !== v26[0] || v74 !== v26[1] || v75 !== v26[2] || v76 !== v26[3]) {
            v1.colorMask(v73, v74, v75, v76);
            v26[0] = v73;
            v26[1] = v74;
            v26[2] = v75;
            v26[3] = v76;
          }
          v77 = v4.cull_enable;
          if (v77 !== v5.cull_enable) {
            if (v77) {
              v1.enable(2884);
            } else {
              v1.disable(2884);
            }
            v5.cull_enable = v77;
          }
          v78 = v4.cull_face;
          if (v78 !== v5.cull_face) {
            v1.cullFace(v78);
            v5.cull_face = v78;
          }
          v79 = v4.frontFace;
          if (v79 !== v5.frontFace) {
            v1.frontFace(v79);
            v5.frontFace = v79;
          }
          v80 = v4.lineWidth;
          if (v80 !== v5.lineWidth) {
            v1.lineWidth(v80);
            v5.lineWidth = v80;
          }
          v81 = v4.polygonOffset_enable;
          if (v81 !== v5.polygonOffset_enable) {
            if (v81) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v81;
          }
          v82 = v27[0];
          v83 = v27[1];
          if (v82 !== v28[0] || v83 !== v28[1]) {
            v1.polygonOffset(v82, v83);
            v28[0] = v82;
            v28[1] = v83;
          }
          v84 = v4.sample_alpha;
          if (v84 !== v5.sample_alpha) {
            if (v84) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v84;
          }
          v85 = v4.sample_enable;
          if (v85 !== v5.sample_enable) {
            if (v85) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v85;
          }
          v86 = v29[0];
          v87 = v29[1];
          if (v86 !== v30[0] || v87 !== v30[1]) {
            v1.sampleCoverage(v86, v87);
            v30[0] = v86;
            v30[1] = v87;
          }
          v88 = v4.stencil_enable;
          if (v88 !== v5.stencil_enable) {
            if (v88) {
              v1.enable(2960);
            } else {
              v1.disable(2960);
            }
            v5.stencil_enable = v88;
          }
          v89 = v4.stencil_mask;
          if (v89 !== v5.stencil_mask) {
            v1.stencilMask(v89);
            v5.stencil_mask = v89;
          }
          v90 = v31[0];
          v91 = v31[1];
          v92 = v31[2];
          if (v90 !== v32[0] || v91 !== v32[1] || v92 !== v32[2]) {
            v1.stencilFunc(v90, v91, v92);
            v32[0] = v90;
            v32[1] = v91;
            v32[2] = v92;
          }
          v93 = v33[0];
          v94 = v33[1];
          v95 = v33[2];
          v96 = v33[3];
          if (v93 !== v34[0] || v94 !== v34[1] || v95 !== v34[2] || v96 !== v34[3]) {
            v1.stencilOpSeparate(v93, v94, v95, v96);
            v34[0] = v93;
            v34[1] = v94;
            v34[2] = v95;
            v34[3] = v96;
          }
          v97 = v35[0];
          v98 = v35[1];
          v99 = v35[2];
          v100 = v35[3];
          if (v97 !== v36[0] || v98 !== v36[1] || v99 !== v36[2] || v100 !== v36[3]) {
            v1.stencilOpSeparate(v97, v98, v99, v100);
            v36[0] = v97;
            v36[1] = v98;
            v36[2] = v99;
            v36[3] = v100;
          }
          v101 = v4.scissor_enable;
          if (v101 !== v5.scissor_enable) {
            if (v101) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v101;
          }
        }
        v102 = v2.framebufferWidth;
        v103 = v2.framebufferHeight;
        v104 = v2.viewportWidth;
        v2.viewportWidth = v102;
        v105 = v2.viewportHeight;
        v2.viewportHeight = v103;
        v1.viewport(0, 0, v102, v103);
        v40[0] = 0;
        v40[1] = 0;
        v40[2] = v102;
        v40[3] = v103;
        v106 = v2.framebufferWidth;
        v107 = v2.framebufferHeight;
        v1.scissor(0, 0, v106, v107);
        v38[0] = 0;
        v38[1] = 0;
        v38[2] = v106;
        v38[3] = v107;
        v108 = v5.profile;
        if (v108) {
          v109 = performance.now();
          g48.count++;
        }
        v1.useProgram(g110.program);
        v111 = v14.angle_instanced_arrays;
        v11.setVAO(null);
        v114 = g113.location;
        v115 = v10[v114];
        if (!v115.buffer) {
          v1.enableVertexAttribArray(v114);
        }
        v116 = 2;
        if (v115.type !== 5126 || v115.size !== v116 || v115.buffer !== g112 || v115.normalized !== false || v115.offset !== 0 || v115.stride !== 0) {
          v1.bindBuffer(34962, g112.buffer);
          v1.vertexAttribPointer(v114, v116, 5126, false, 0, 0);
          v115.type = 5126;
          v115.size = v116;
          v115.buffer = g112;
          v115.normalized = false;
          v115.offset = 0;
          v115.stride = 0;
        }
        if (v115.divisor !== 0) {
          v111.vertexAttribDivisorANGLE(v114, 0);
          v115.divisor = 0;
        }
        v117 = v6.elements;
        if (v117) {
          v1.bindBuffer(34963, v117.buffer.buffer);
        } else if (v11.currentVAO) {
          v117 = v7.getElements(v11.currentVAO.elements);
          if (v117)
            v1.bindBuffer(34963, v117.buffer.buffer);
        }
        v118 = v6.offset;
        v119 = v6.instances;
        if (v119 > 0) {
          if (v117) {
            v111.drawElementsInstancedANGLE(5, 4, v117.type, v118 << (v117.type - 5121 >> 1), v119);
          } else {
            v111.drawArraysInstancedANGLE(5, v118, 4, v119);
          }
        } else if (v119 < 0) {
          if (v117) {
            v1.drawElements(5, 4, v117.type, v118 << (v117.type - 5121 >> 1));
          } else {
            v1.drawArrays(5, v118, 4);
          }
        }
        v5.dirty = true;
        v11.setVAO(null);
        v13.next = v53;
        v2.framebufferWidth = v54;
        v2.framebufferHeight = v55;
        v2.viewportWidth = v104;
        v2.viewportHeight = v105;
        if (v108) {
          g48.cpuTime += performance.now() - v109;
        }
      },
      "scope": function(a0, a1, a2) {
        var v120, v121, v122, v123, v124, v125, v126, v127, v128, v130, v132, v133, v134, v135, v136, v138, v140, v141, v142, v143, v144, v146, v148, v150, v151, v152, v153, v154, v155, v156, v157, v158, v159, v160, v161, v163, v165;
        v120 = g50.call(this, v2, a0, a2);
        v121 = v13.getFramebuffer(v120);
        v122 = v13.next;
        v13.next = v121;
        v123 = v2.framebufferWidth;
        v2.framebufferWidth = v121 ? v121.width : v2.drawingBufferWidth;
        v124 = v2.framebufferHeight;
        v2.framebufferHeight = v121 ? v121.height : v2.drawingBufferHeight;
        v125 = v2.framebufferWidth;
        v126 = v2.framebufferHeight;
        v127 = v2.viewportWidth;
        v2.viewportWidth = v125;
        v128 = v2.viewportHeight;
        v2.viewportHeight = v126;
        v130 = v39[0];
        v39[0] = g129;
        v132 = v39[1];
        v39[1] = g131;
        v133 = v39[2];
        v39[2] = v125;
        v134 = v39[3];
        v39[3] = v126;
        v135 = v2.framebufferWidth;
        v136 = v2.framebufferHeight;
        v138 = v37[0];
        v37[0] = g137;
        v140 = v37[1];
        v37[1] = g139;
        v141 = v37[2];
        v37[2] = v135;
        v142 = v37[3];
        v37[3] = v136;
        v143 = v5.profile;
        if (v143) {
          v144 = performance.now();
          g48.count++;
        }
        v146 = v6.count;
        v6.count = g145;
        v148 = v6.primitive;
        v6.primitive = g147;
        v150 = g149.state;
        g149.state = 1;
        v151 = g149.x;
        g149.x = 0;
        v152 = g149.y;
        g149.y = 0;
        v153 = g149.z;
        g149.z = 0;
        v154 = g149.w;
        g149.w = 0;
        v155 = g149.buffer;
        g149.buffer = g112;
        v156 = g149.size;
        g149.size = 2;
        v157 = g149.normalized;
        g149.normalized = false;
        v158 = g149.type;
        g149.type = 5126;
        v159 = g149.offset;
        g149.offset = 0;
        v160 = g149.stride;
        g149.stride = 0;
        v161 = g149.divisor;
        g149.divisor = 0;
        v163 = v9.vert;
        v9.vert = g162;
        v165 = v9.frag;
        v9.frag = g164;
        v5.dirty = true;
        a1(v2, a0, a2);
        v13.next = v122;
        v2.framebufferWidth = v123;
        v2.framebufferHeight = v124;
        v2.viewportWidth = v127;
        v2.viewportHeight = v128;
        v39[0] = v130;
        v39[1] = v132;
        v39[2] = v133;
        v39[3] = v134;
        v37[0] = v138;
        v37[1] = v140;
        v37[2] = v141;
        v37[3] = v142;
        if (v143) {
          g48.cpuTime += performance.now() - v144;
        }
        v6.count = v146;
        v6.primitive = v148;
        g149.state = v150;
        g149.x = v151;
        g149.y = v152;
        g149.z = v153;
        g149.w = v154;
        g149.buffer = v155;
        g149.size = v156;
        g149.normalized = v157;
        g149.type = v158;
        g149.offset = v159;
        g149.stride = v160;
        g149.divisor = v161;
        v9.vert = v163;
        v9.frag = v165;
        v5.dirty = true;
      },
      "batch": function(a0, a1) {
        var v213, v214, v215, v216, v217;
        v14.angle_instanced_arrays;
        if (v5.dirty) {
          var v167, v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, v198, v199, v200, v201, v202, v203, v204, v205, v206, v207, v208, v209, v210, v211, v212;
          v167 = v4.dither;
          if (v167 !== v5.dither) {
            if (v167) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v167;
          }
          v168 = v4.blend_enable;
          if (v168 !== v5.blend_enable) {
            if (v168) {
              v1.enable(3042);
            } else {
              v1.disable(3042);
            }
            v5.blend_enable = v168;
          }
          v169 = v17[0];
          v170 = v17[1];
          v171 = v17[2];
          v172 = v17[3];
          if (v169 !== v18[0] || v170 !== v18[1] || v171 !== v18[2] || v172 !== v18[3]) {
            v1.blendColor(v169, v170, v171, v172);
            v18[0] = v169;
            v18[1] = v170;
            v18[2] = v171;
            v18[3] = v172;
          }
          v173 = v19[0];
          v174 = v19[1];
          if (v173 !== v20[0] || v174 !== v20[1]) {
            v1.blendEquationSeparate(v173, v174);
            v20[0] = v173;
            v20[1] = v174;
          }
          v175 = v21[0];
          v176 = v21[1];
          v177 = v21[2];
          v178 = v21[3];
          if (v175 !== v22[0] || v176 !== v22[1] || v177 !== v22[2] || v178 !== v22[3]) {
            v1.blendFuncSeparate(v175, v176, v177, v178);
            v22[0] = v175;
            v22[1] = v176;
            v22[2] = v177;
            v22[3] = v178;
          }
          v179 = v4.depth_enable;
          if (v179 !== v5.depth_enable) {
            if (v179) {
              v1.enable(2929);
            } else {
              v1.disable(2929);
            }
            v5.depth_enable = v179;
          }
          v180 = v4.depth_func;
          if (v180 !== v5.depth_func) {
            v1.depthFunc(v180);
            v5.depth_func = v180;
          }
          v181 = v23[0];
          v182 = v23[1];
          if (v181 !== v24[0] || v182 !== v24[1]) {
            v1.depthRange(v181, v182);
            v24[0] = v181;
            v24[1] = v182;
          }
          v183 = v4.depth_mask;
          if (v183 !== v5.depth_mask) {
            v1.depthMask(v183);
            v5.depth_mask = v183;
          }
          v184 = v25[0];
          v185 = v25[1];
          v186 = v25[2];
          v187 = v25[3];
          if (v184 !== v26[0] || v185 !== v26[1] || v186 !== v26[2] || v187 !== v26[3]) {
            v1.colorMask(v184, v185, v186, v187);
            v26[0] = v184;
            v26[1] = v185;
            v26[2] = v186;
            v26[3] = v187;
          }
          v188 = v4.cull_enable;
          if (v188 !== v5.cull_enable) {
            if (v188) {
              v1.enable(2884);
            } else {
              v1.disable(2884);
            }
            v5.cull_enable = v188;
          }
          v189 = v4.cull_face;
          if (v189 !== v5.cull_face) {
            v1.cullFace(v189);
            v5.cull_face = v189;
          }
          v190 = v4.frontFace;
          if (v190 !== v5.frontFace) {
            v1.frontFace(v190);
            v5.frontFace = v190;
          }
          v191 = v4.lineWidth;
          if (v191 !== v5.lineWidth) {
            v1.lineWidth(v191);
            v5.lineWidth = v191;
          }
          v192 = v4.polygonOffset_enable;
          if (v192 !== v5.polygonOffset_enable) {
            if (v192) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v192;
          }
          v193 = v27[0];
          v194 = v27[1];
          if (v193 !== v28[0] || v194 !== v28[1]) {
            v1.polygonOffset(v193, v194);
            v28[0] = v193;
            v28[1] = v194;
          }
          v195 = v4.sample_alpha;
          if (v195 !== v5.sample_alpha) {
            if (v195) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v195;
          }
          v196 = v4.sample_enable;
          if (v196 !== v5.sample_enable) {
            if (v196) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v196;
          }
          v197 = v29[0];
          v198 = v29[1];
          if (v197 !== v30[0] || v198 !== v30[1]) {
            v1.sampleCoverage(v197, v198);
            v30[0] = v197;
            v30[1] = v198;
          }
          v199 = v4.stencil_enable;
          if (v199 !== v5.stencil_enable) {
            if (v199) {
              v1.enable(2960);
            } else {
              v1.disable(2960);
            }
            v5.stencil_enable = v199;
          }
          v200 = v4.stencil_mask;
          if (v200 !== v5.stencil_mask) {
            v1.stencilMask(v200);
            v5.stencil_mask = v200;
          }
          v201 = v31[0];
          v202 = v31[1];
          v203 = v31[2];
          if (v201 !== v32[0] || v202 !== v32[1] || v203 !== v32[2]) {
            v1.stencilFunc(v201, v202, v203);
            v32[0] = v201;
            v32[1] = v202;
            v32[2] = v203;
          }
          v204 = v33[0];
          v205 = v33[1];
          v206 = v33[2];
          v207 = v33[3];
          if (v204 !== v34[0] || v205 !== v34[1] || v206 !== v34[2] || v207 !== v34[3]) {
            v1.stencilOpSeparate(v204, v205, v206, v207);
            v34[0] = v204;
            v34[1] = v205;
            v34[2] = v206;
            v34[3] = v207;
          }
          v208 = v35[0];
          v209 = v35[1];
          v210 = v35[2];
          v211 = v35[3];
          if (v208 !== v36[0] || v209 !== v36[1] || v210 !== v36[2] || v211 !== v36[3]) {
            v1.stencilOpSeparate(v208, v209, v210, v211);
            v36[0] = v208;
            v36[1] = v209;
            v36[2] = v210;
            v36[3] = v211;
          }
          v212 = v4.scissor_enable;
          if (v212 !== v5.scissor_enable) {
            if (v212) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v212;
          }
        }
        v213 = v5.profile;
        if (v213) {
          v214 = performance.now();
          g48.count += a1;
        }
        v1.useProgram(g110.program);
        v215 = v14.angle_instanced_arrays;
        var v229, v230, v231, v232, v233, v234;
        v11.setVAO(null);
        v229 = g113.location;
        v230 = v10[v229];
        if (!v230.buffer) {
          v1.enableVertexAttribArray(v229);
        }
        v231 = 2;
        if (v230.type !== 5126 || v230.size !== v231 || v230.buffer !== g112 || v230.normalized !== false || v230.offset !== 0 || v230.stride !== 0) {
          v1.bindBuffer(34962, g112.buffer);
          v1.vertexAttribPointer(v229, v231, 5126, false, 0, 0);
          v230.type = 5126;
          v230.size = v231;
          v230.buffer = g112;
          v230.normalized = false;
          v230.offset = 0;
          v230.stride = 0;
        }
        if (v230.divisor !== 0) {
          v215.vertexAttribDivisorANGLE(v229, 0);
          v230.divisor = 0;
        }
        v232 = v6.elements;
        if (v232) {
          v1.bindBuffer(34963, v232.buffer.buffer);
        } else if (v11.currentVAO) {
          v232 = v7.getElements(v11.currentVAO.elements);
          if (v232)
            v1.bindBuffer(34963, v232.buffer.buffer);
        }
        v233 = v6.offset;
        v234 = v6.instances;
        for (v216 = 0; v216 < a1; ++v216) {
          v217 = a0[v216];
          var v218, v219, v220, v221, v222, v223, v224, v225, v226, v227, v228;
          v218 = g50.call(this, v2, v217, v216);
          v219 = v13.getFramebuffer(v218);
          v220 = v13.next;
          v13.next = v219;
          v221 = v2.framebufferWidth;
          v2.framebufferWidth = v219 ? v219.width : v2.drawingBufferWidth;
          v222 = v2.framebufferHeight;
          v2.framebufferHeight = v219 ? v219.height : v2.drawingBufferHeight;
          if (v219 !== v13.cur) {
            if (v219) {
              v1.bindFramebuffer(36160, v219.framebuffer);
            } else {
              v1.bindFramebuffer(36160, null);
            }
            v13.cur = v219;
          }
          v223 = v2.framebufferWidth;
          v224 = v2.framebufferHeight;
          v225 = v2.viewportWidth;
          v2.viewportWidth = v223;
          v226 = v2.viewportHeight;
          v2.viewportHeight = v224;
          v1.viewport(0, 0, v223, v224);
          v40[0] = 0;
          v40[1] = 0;
          v40[2] = v223;
          v40[3] = v224;
          v227 = v2.framebufferWidth;
          v228 = v2.framebufferHeight;
          v1.scissor(0, 0, v227, v228);
          v38[0] = 0;
          v38[1] = 0;
          v38[2] = v227;
          v38[3] = v228;
          if (v234 > 0) {
            if (v232) {
              v215.drawElementsInstancedANGLE(5, 4, v232.type, v233 << (v232.type - 5121 >> 1), v234);
            } else {
              v215.drawArraysInstancedANGLE(5, v233, 4, v234);
            }
          } else if (v234 < 0) {
            if (v232) {
              v1.drawElements(5, 4, v232.type, v233 << (v232.type - 5121 >> 1));
            } else {
              v1.drawArrays(5, v233, 4);
            }
          }
          v13.next = v220;
          v2.framebufferWidth = v221;
          v2.framebufferHeight = v222;
          v2.viewportWidth = v225;
          v2.viewportHeight = v226;
        }
        v5.dirty = true;
        v11.setVAO(null);
        if (v213) {
          g48.cpuTime += performance.now() - v214;
        }
      }
    };
  },
  "0313f92b852b73f25a96e0578ae69b31e2d4866f1f8cfd75345ecb3cf4ca66c6": function anonymous18(g0, g48, g50, g96, g97, g98, g101, g104, g106, g107, g111, g112, g114, g115, g117, g118, g120, g121, g126, g138, g140, g144, g146, g148, g150, g152, g154, g156, g158, g160, g164, g166, g170, g176, g179, g182, g185, g188, g190, g203, g205, g244, g245, g246, g247) {
    var v1, v2, v4, v5, v6, v7, v9, v10, v11, v12, v13, v14, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40;
    v1 = g0.gl;
    v2 = g0.context;
    g0.strings;
    v4 = g0.next;
    v5 = g0.current;
    v6 = g0.draw;
    v7 = g0.elements;
    g0.buffer;
    v9 = g0.shader;
    v10 = g0.attributes;
    v11 = g0.vao;
    v12 = g0.uniforms;
    v13 = g0.framebuffer;
    v14 = g0.extensions;
    g0.timer;
    g0.isBufferArgs;
    v17 = v4.blend_color;
    v18 = v5.blend_color;
    v19 = v4.blend_equation;
    v20 = v5.blend_equation;
    v21 = v4.blend_func;
    v22 = v5.blend_func;
    v23 = v4.depth_range;
    v24 = v5.depth_range;
    v25 = v4.colorMask;
    v26 = v5.colorMask;
    v27 = v4.polygonOffset_offset;
    v28 = v5.polygonOffset_offset;
    v29 = v4.sample_coverage;
    v30 = v5.sample_coverage;
    v31 = v4.stencil_func;
    v32 = v5.stencil_func;
    v33 = v4.stencil_opFront;
    v34 = v5.stencil_opFront;
    v35 = v4.stencil_opBack;
    v36 = v5.stencil_opBack;
    v37 = v4.scissor_box;
    v38 = v5.scissor_box;
    v39 = v4.viewport;
    v40 = v5.viewport;
    return {
      "draw": function(a0) {
        var v51, v52, v53, v54, v55, v92, v93, v94, v95, v99, v100, v102, v103, v105, v108, v109, v110, v113, v116, v119, v122, v123, v124, v125, v127, v128;
        v14.angle_instanced_arrays;
        v51 = g50.call(this, v2, a0, 0);
        v52 = v13.getFramebuffer(v51);
        v53 = v13.next;
        v13.next = v52;
        v54 = v2.framebufferWidth;
        v2.framebufferWidth = v52 ? v52.width : v2.drawingBufferWidth;
        v55 = v2.framebufferHeight;
        v2.framebufferHeight = v52 ? v52.height : v2.drawingBufferHeight;
        if (v52 !== v13.cur) {
          if (v52) {
            v1.bindFramebuffer(36160, v52.framebuffer);
          } else {
            v1.bindFramebuffer(36160, null);
          }
          v13.cur = v52;
        }
        if (v5.dirty) {
          var v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90, v91;
          v56 = v4.dither;
          if (v56 !== v5.dither) {
            if (v56) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v56;
          }
          v57 = v17[0];
          v58 = v17[1];
          v59 = v17[2];
          v60 = v17[3];
          if (v57 !== v18[0] || v58 !== v18[1] || v59 !== v18[2] || v60 !== v18[3]) {
            v1.blendColor(v57, v58, v59, v60);
            v18[0] = v57;
            v18[1] = v58;
            v18[2] = v59;
            v18[3] = v60;
          }
          v61 = v4.depth_func;
          if (v61 !== v5.depth_func) {
            v1.depthFunc(v61);
            v5.depth_func = v61;
          }
          v62 = v23[0];
          v63 = v23[1];
          if (v62 !== v24[0] || v63 !== v24[1]) {
            v1.depthRange(v62, v63);
            v24[0] = v62;
            v24[1] = v63;
          }
          v64 = v25[0];
          v65 = v25[1];
          v66 = v25[2];
          v67 = v25[3];
          if (v64 !== v26[0] || v65 !== v26[1] || v66 !== v26[2] || v67 !== v26[3]) {
            v1.colorMask(v64, v65, v66, v67);
            v26[0] = v64;
            v26[1] = v65;
            v26[2] = v66;
            v26[3] = v67;
          }
          v68 = v4.cull_enable;
          if (v68 !== v5.cull_enable) {
            if (v68) {
              v1.enable(2884);
            } else {
              v1.disable(2884);
            }
            v5.cull_enable = v68;
          }
          v69 = v4.cull_face;
          if (v69 !== v5.cull_face) {
            v1.cullFace(v69);
            v5.cull_face = v69;
          }
          v70 = v4.frontFace;
          if (v70 !== v5.frontFace) {
            v1.frontFace(v70);
            v5.frontFace = v70;
          }
          v71 = v4.lineWidth;
          if (v71 !== v5.lineWidth) {
            v1.lineWidth(v71);
            v5.lineWidth = v71;
          }
          v72 = v4.polygonOffset_enable;
          if (v72 !== v5.polygonOffset_enable) {
            if (v72) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v72;
          }
          v73 = v27[0];
          v74 = v27[1];
          if (v73 !== v28[0] || v74 !== v28[1]) {
            v1.polygonOffset(v73, v74);
            v28[0] = v73;
            v28[1] = v74;
          }
          v75 = v4.sample_alpha;
          if (v75 !== v5.sample_alpha) {
            if (v75) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v75;
          }
          v76 = v4.sample_enable;
          if (v76 !== v5.sample_enable) {
            if (v76) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v76;
          }
          v77 = v29[0];
          v78 = v29[1];
          if (v77 !== v30[0] || v78 !== v30[1]) {
            v1.sampleCoverage(v77, v78);
            v30[0] = v77;
            v30[1] = v78;
          }
          v79 = v4.stencil_mask;
          if (v79 !== v5.stencil_mask) {
            v1.stencilMask(v79);
            v5.stencil_mask = v79;
          }
          v80 = v31[0];
          v81 = v31[1];
          v82 = v31[2];
          if (v80 !== v32[0] || v81 !== v32[1] || v82 !== v32[2]) {
            v1.stencilFunc(v80, v81, v82);
            v32[0] = v80;
            v32[1] = v81;
            v32[2] = v82;
          }
          v83 = v33[0];
          v84 = v33[1];
          v85 = v33[2];
          v86 = v33[3];
          if (v83 !== v34[0] || v84 !== v34[1] || v85 !== v34[2] || v86 !== v34[3]) {
            v1.stencilOpSeparate(v83, v84, v85, v86);
            v34[0] = v83;
            v34[1] = v84;
            v34[2] = v85;
            v34[3] = v86;
          }
          v87 = v35[0];
          v88 = v35[1];
          v89 = v35[2];
          v90 = v35[3];
          if (v87 !== v36[0] || v88 !== v36[1] || v89 !== v36[2] || v90 !== v36[3]) {
            v1.stencilOpSeparate(v87, v88, v89, v90);
            v36[0] = v87;
            v36[1] = v88;
            v36[2] = v89;
            v36[3] = v90;
          }
          v91 = v4.scissor_enable;
          if (v91 !== v5.scissor_enable) {
            if (v91) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v91;
          }
        }
        v92 = v2.framebufferWidth;
        v93 = v2.framebufferHeight;
        v94 = v2.viewportWidth;
        v2.viewportWidth = v92;
        v95 = v2.viewportHeight;
        v2.viewportHeight = v93;
        v1.viewport(0, 0, v92, v93);
        v40[0] = 0;
        v40[1] = 0;
        v40[2] = v92;
        v40[3] = v93;
        if (g96) {
          v1.enable(3042);
        } else {
          v1.disable(3042);
        }
        v5.blend_enable = g96;
        v1.blendEquationSeparate(32774, 32774);
        v20[0] = 32774;
        v20[1] = 32774;
        v1.blendFuncSeparate(1, 1, 1, 1);
        v22[0] = 1;
        v22[1] = 1;
        v22[2] = 1;
        v22[3] = 1;
        if (g97) {
          v1.enable(2929);
        } else {
          v1.disable(2929);
        }
        v5.depth_enable = g97;
        v1.depthMask(g98);
        v5.depth_mask = g98;
        v99 = v2.framebufferWidth;
        v100 = v2.framebufferHeight;
        v1.scissor(0, 0, v99, v100);
        v38[0] = 0;
        v38[1] = 0;
        v38[2] = v99;
        v38[3] = v100;
        if (g101) {
          v1.enable(2960);
        } else {
          v1.disable(2960);
        }
        v5.stencil_enable = g101;
        v102 = v5.profile;
        if (v102) {
          v103 = performance.now();
          g48.count++;
        }
        v1.useProgram(g104.program);
        v105 = v14.angle_instanced_arrays;
        v11.setVAO(null);
        v108 = g107.location;
        v109 = v10[v108];
        if (!v109.buffer) {
          v1.enableVertexAttribArray(v108);
        }
        v110 = 2;
        if (v109.type !== 5126 || v109.size !== v110 || v109.buffer !== g106 || v109.normalized !== false || v109.offset !== 0 || v109.stride !== 0) {
          v1.bindBuffer(34962, g106.buffer);
          v1.vertexAttribPointer(v108, v110, 5126, false, 0, 0);
          v109.type = 5126;
          v109.size = v110;
          v109.buffer = g106;
          v109.normalized = false;
          v109.offset = 0;
          v109.stride = 0;
        }
        if (v109.divisor !== 0) {
          v105.vertexAttribDivisorANGLE(v108, 0);
          v109.divisor = 0;
        }
        v113 = g112.call(this, v2, a0, 0);
        v1.uniform1f(g111.location, v113);
        v116 = g115.call(this, v2, a0, 0);
        v1.uniform1f(g114.location, v116);
        v119 = g118.call(this, v2, a0, 0);
        v1.uniform1f(g117.location, v119);
        v122 = g121.call(this, v2, a0, 0);
        if (v122 && v122._reglType === "framebuffer") {
          v122 = v122.color[0];
        }
        v123 = v122._texture;
        v1.uniform1i(g120.location, v123.bind());
        v124 = v6.elements;
        if (v124) {
          v1.bindBuffer(34963, v124.buffer.buffer);
        } else if (v11.currentVAO) {
          v124 = v7.getElements(v11.currentVAO.elements);
          if (v124)
            v1.bindBuffer(34963, v124.buffer.buffer);
        }
        v125 = v6.offset;
        v127 = g126.call(this, v2, a0, 0);
        if (v127) {
          v128 = v6.instances;
          if (v128 > 0) {
            if (v124) {
              v105.drawElementsInstancedANGLE(0, v127, v124.type, v125 << (v124.type - 5121 >> 1), v128);
            } else {
              v105.drawArraysInstancedANGLE(0, v125, v127, v128);
            }
          } else if (v128 < 0) {
            if (v124) {
              v1.drawElements(0, v127, v124.type, v125 << (v124.type - 5121 >> 1));
            } else {
              v1.drawArrays(0, v125, v127);
            }
          }
          v5.dirty = true;
          v11.setVAO(null);
          v13.next = v53;
          v2.framebufferWidth = v54;
          v2.framebufferHeight = v55;
          v2.viewportWidth = v94;
          v2.viewportHeight = v95;
          if (v102) {
            g48.cpuTime += performance.now() - v103;
          }
          v123.unbind();
        }
      },
      "scope": function(a0, a1, a2) {
        var v129, v130, v131, v132, v133, v134, v135, v136, v137, v139, v141, v142, v143, v145, v147, v149, v151, v153, v155, v157, v159, v161, v162, v163, v165, v167, v168, v169, v171, v172, v173, v174, v175, v177, v178, v180, v181, v183, v184, v186, v187, v189, v191, v192, v193, v194, v195, v196, v197, v198, v199, v200, v201, v202, v204, v206;
        v129 = g50.call(this, v2, a0, a2);
        v130 = v13.getFramebuffer(v129);
        v131 = v13.next;
        v13.next = v130;
        v132 = v2.framebufferWidth;
        v2.framebufferWidth = v130 ? v130.width : v2.drawingBufferWidth;
        v133 = v2.framebufferHeight;
        v2.framebufferHeight = v130 ? v130.height : v2.drawingBufferHeight;
        v134 = v2.framebufferWidth;
        v135 = v2.framebufferHeight;
        v136 = v2.viewportWidth;
        v2.viewportWidth = v134;
        v137 = v2.viewportHeight;
        v2.viewportHeight = v135;
        v139 = v39[0];
        v39[0] = g138;
        v141 = v39[1];
        v39[1] = g140;
        v142 = v39[2];
        v39[2] = v134;
        v143 = v39[3];
        v39[3] = v135;
        v145 = v4.blend_enable;
        v4.blend_enable = g144;
        v147 = v19[0];
        v19[0] = g146;
        v149 = v19[1];
        v19[1] = g148;
        v151 = v21[0];
        v21[0] = g150;
        v153 = v21[1];
        v21[1] = g152;
        v155 = v21[2];
        v21[2] = g154;
        v157 = v21[3];
        v21[3] = g156;
        v159 = v4.depth_enable;
        v4.depth_enable = g158;
        v161 = v4.depth_mask;
        v4.depth_mask = g160;
        v162 = v2.framebufferWidth;
        v163 = v2.framebufferHeight;
        v165 = v37[0];
        v37[0] = g164;
        v167 = v37[1];
        v37[1] = g166;
        v168 = v37[2];
        v37[2] = v162;
        v169 = v37[3];
        v37[3] = v163;
        v171 = v4.stencil_enable;
        v4.stencil_enable = g170;
        v172 = v5.profile;
        if (v172) {
          v173 = performance.now();
          g48.count++;
        }
        v174 = g126.call(this, v2, a0, a2);
        v175 = v6.count;
        v6.count = v174;
        v177 = v6.primitive;
        v6.primitive = g176;
        v178 = g121.call(this, v2, a0, a2);
        v180 = v12[g179];
        v12[g179] = v178;
        v181 = g118.call(this, v2, a0, a2);
        v183 = v12[g182];
        v12[g182] = v181;
        v184 = g115.call(this, v2, a0, a2);
        v186 = v12[g185];
        v12[g185] = v184;
        v187 = g112.call(this, v2, a0, a2);
        v189 = v12[g188];
        v12[g188] = v187;
        v191 = g190.state;
        g190.state = 1;
        v192 = g190.x;
        g190.x = 0;
        v193 = g190.y;
        g190.y = 0;
        v194 = g190.z;
        g190.z = 0;
        v195 = g190.w;
        g190.w = 0;
        v196 = g190.buffer;
        g190.buffer = g106;
        v197 = g190.size;
        g190.size = 2;
        v198 = g190.normalized;
        g190.normalized = false;
        v199 = g190.type;
        g190.type = 5126;
        v200 = g190.offset;
        g190.offset = 0;
        v201 = g190.stride;
        g190.stride = 0;
        v202 = g190.divisor;
        g190.divisor = 0;
        v204 = v9.vert;
        v9.vert = g203;
        v206 = v9.frag;
        v9.frag = g205;
        v5.dirty = true;
        a1(v2, a0, a2);
        v13.next = v131;
        v2.framebufferWidth = v132;
        v2.framebufferHeight = v133;
        v2.viewportWidth = v136;
        v2.viewportHeight = v137;
        v39[0] = v139;
        v39[1] = v141;
        v39[2] = v142;
        v39[3] = v143;
        v4.blend_enable = v145;
        v19[0] = v147;
        v19[1] = v149;
        v21[0] = v151;
        v21[1] = v153;
        v21[2] = v155;
        v21[3] = v157;
        v4.depth_enable = v159;
        v4.depth_mask = v161;
        v37[0] = v165;
        v37[1] = v167;
        v37[2] = v168;
        v37[3] = v169;
        v4.stencil_enable = v171;
        if (v172) {
          g48.cpuTime += performance.now() - v173;
        }
        v6.count = v175;
        v6.primitive = v177;
        v12[g179] = v180;
        v12[g182] = v183;
        v12[g185] = v186;
        v12[g188] = v189;
        g190.state = v191;
        g190.x = v192;
        g190.y = v193;
        g190.z = v194;
        g190.w = v195;
        g190.buffer = v196;
        g190.size = v197;
        g190.normalized = v198;
        g190.type = v199;
        g190.offset = v200;
        g190.stride = v201;
        g190.divisor = v202;
        v9.vert = v204;
        v9.frag = v206;
        v5.dirty = true;
      },
      "batch": function(a0, a1) {
        var v248, v249, v250, v251, v252;
        v14.angle_instanced_arrays;
        if (v5.dirty) {
          var v208, v209, v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, v220, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, v235, v236, v237, v238, v239, v240, v241, v242, v243;
          v208 = v4.dither;
          if (v208 !== v5.dither) {
            if (v208) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v208;
          }
          v209 = v17[0];
          v210 = v17[1];
          v211 = v17[2];
          v212 = v17[3];
          if (v209 !== v18[0] || v210 !== v18[1] || v211 !== v18[2] || v212 !== v18[3]) {
            v1.blendColor(v209, v210, v211, v212);
            v18[0] = v209;
            v18[1] = v210;
            v18[2] = v211;
            v18[3] = v212;
          }
          v213 = v4.depth_func;
          if (v213 !== v5.depth_func) {
            v1.depthFunc(v213);
            v5.depth_func = v213;
          }
          v214 = v23[0];
          v215 = v23[1];
          if (v214 !== v24[0] || v215 !== v24[1]) {
            v1.depthRange(v214, v215);
            v24[0] = v214;
            v24[1] = v215;
          }
          v216 = v25[0];
          v217 = v25[1];
          v218 = v25[2];
          v219 = v25[3];
          if (v216 !== v26[0] || v217 !== v26[1] || v218 !== v26[2] || v219 !== v26[3]) {
            v1.colorMask(v216, v217, v218, v219);
            v26[0] = v216;
            v26[1] = v217;
            v26[2] = v218;
            v26[3] = v219;
          }
          v220 = v4.cull_enable;
          if (v220 !== v5.cull_enable) {
            if (v220) {
              v1.enable(2884);
            } else {
              v1.disable(2884);
            }
            v5.cull_enable = v220;
          }
          v221 = v4.cull_face;
          if (v221 !== v5.cull_face) {
            v1.cullFace(v221);
            v5.cull_face = v221;
          }
          v222 = v4.frontFace;
          if (v222 !== v5.frontFace) {
            v1.frontFace(v222);
            v5.frontFace = v222;
          }
          v223 = v4.lineWidth;
          if (v223 !== v5.lineWidth) {
            v1.lineWidth(v223);
            v5.lineWidth = v223;
          }
          v224 = v4.polygonOffset_enable;
          if (v224 !== v5.polygonOffset_enable) {
            if (v224) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v224;
          }
          v225 = v27[0];
          v226 = v27[1];
          if (v225 !== v28[0] || v226 !== v28[1]) {
            v1.polygonOffset(v225, v226);
            v28[0] = v225;
            v28[1] = v226;
          }
          v227 = v4.sample_alpha;
          if (v227 !== v5.sample_alpha) {
            if (v227) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v227;
          }
          v228 = v4.sample_enable;
          if (v228 !== v5.sample_enable) {
            if (v228) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v228;
          }
          v229 = v29[0];
          v230 = v29[1];
          if (v229 !== v30[0] || v230 !== v30[1]) {
            v1.sampleCoverage(v229, v230);
            v30[0] = v229;
            v30[1] = v230;
          }
          v231 = v4.stencil_mask;
          if (v231 !== v5.stencil_mask) {
            v1.stencilMask(v231);
            v5.stencil_mask = v231;
          }
          v232 = v31[0];
          v233 = v31[1];
          v234 = v31[2];
          if (v232 !== v32[0] || v233 !== v32[1] || v234 !== v32[2]) {
            v1.stencilFunc(v232, v233, v234);
            v32[0] = v232;
            v32[1] = v233;
            v32[2] = v234;
          }
          v235 = v33[0];
          v236 = v33[1];
          v237 = v33[2];
          v238 = v33[3];
          if (v235 !== v34[0] || v236 !== v34[1] || v237 !== v34[2] || v238 !== v34[3]) {
            v1.stencilOpSeparate(v235, v236, v237, v238);
            v34[0] = v235;
            v34[1] = v236;
            v34[2] = v237;
            v34[3] = v238;
          }
          v239 = v35[0];
          v240 = v35[1];
          v241 = v35[2];
          v242 = v35[3];
          if (v239 !== v36[0] || v240 !== v36[1] || v241 !== v36[2] || v242 !== v36[3]) {
            v1.stencilOpSeparate(v239, v240, v241, v242);
            v36[0] = v239;
            v36[1] = v240;
            v36[2] = v241;
            v36[3] = v242;
          }
          v243 = v4.scissor_enable;
          if (v243 !== v5.scissor_enable) {
            if (v243) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v243;
          }
        }
        if (g244) {
          v1.enable(3042);
        } else {
          v1.disable(3042);
        }
        v5.blend_enable = g244;
        v1.blendEquationSeparate(32774, 32774);
        v20[0] = 32774;
        v20[1] = 32774;
        v1.blendFuncSeparate(1, 1, 1, 1);
        v22[0] = 1;
        v22[1] = 1;
        v22[2] = 1;
        v22[3] = 1;
        if (g245) {
          v1.enable(2929);
        } else {
          v1.disable(2929);
        }
        v5.depth_enable = g245;
        v1.depthMask(g246);
        v5.depth_mask = g246;
        if (g247) {
          v1.enable(2960);
        } else {
          v1.disable(2960);
        }
        v5.stencil_enable = g247;
        v248 = v5.profile;
        if (v248) {
          v249 = performance.now();
          g48.count += a1;
        }
        v1.useProgram(g104.program);
        v250 = v14.angle_instanced_arrays;
        var v264, v265, v266, v267, v268, v269, v274, v275, v276, v277;
        v11.setVAO(null);
        v264 = g107.location;
        v265 = v10[v264];
        if (!v265.buffer) {
          v1.enableVertexAttribArray(v264);
        }
        v266 = 2;
        if (v265.type !== 5126 || v265.size !== v266 || v265.buffer !== g106 || v265.normalized !== false || v265.offset !== 0 || v265.stride !== 0) {
          v1.bindBuffer(34962, g106.buffer);
          v1.vertexAttribPointer(v264, v266, 5126, false, 0, 0);
          v265.type = 5126;
          v265.size = v266;
          v265.buffer = g106;
          v265.normalized = false;
          v265.offset = 0;
          v265.stride = 0;
        }
        if (v265.divisor !== 0) {
          v250.vertexAttribDivisorANGLE(v264, 0);
          v265.divisor = 0;
        }
        v267 = g118.call(this, v2, v252, v251);
        v1.uniform1f(g117.location, v267);
        v268 = g121.call(this, v2, v252, v251);
        if (v268 && v268._reglType === "framebuffer") {
          v268 = v268.color[0];
        }
        v269 = v268._texture;
        v1.uniform1i(g120.location, v269.bind());
        v274 = v6.elements;
        if (v274) {
          v1.bindBuffer(34963, v274.buffer.buffer);
        } else if (v11.currentVAO) {
          v274 = v7.getElements(v11.currentVAO.elements);
          if (v274)
            v1.bindBuffer(34963, v274.buffer.buffer);
        }
        v275 = v6.offset;
        v276 = g126.call(this, v2, v252, v251);
        v277 = v6.instances;
        for (v251 = 0; v251 < a1; ++v251) {
          v252 = a0[v251];
          var v253, v254, v255, v256, v257, v258, v259, v260, v261, v262, v263, v270, v271, v272, v273;
          v253 = g50.call(this, v2, v252, v251);
          v254 = v13.getFramebuffer(v253);
          v255 = v13.next;
          v13.next = v254;
          v256 = v2.framebufferWidth;
          v2.framebufferWidth = v254 ? v254.width : v2.drawingBufferWidth;
          v257 = v2.framebufferHeight;
          v2.framebufferHeight = v254 ? v254.height : v2.drawingBufferHeight;
          if (v254 !== v13.cur) {
            if (v254) {
              v1.bindFramebuffer(36160, v254.framebuffer);
            } else {
              v1.bindFramebuffer(36160, null);
            }
            v13.cur = v254;
          }
          v258 = v2.framebufferWidth;
          v259 = v2.framebufferHeight;
          v260 = v2.viewportWidth;
          v2.viewportWidth = v258;
          v261 = v2.viewportHeight;
          v2.viewportHeight = v259;
          v1.viewport(0, 0, v258, v259);
          v40[0] = 0;
          v40[1] = 0;
          v40[2] = v258;
          v40[3] = v259;
          v262 = v2.framebufferWidth;
          v263 = v2.framebufferHeight;
          v1.scissor(0, 0, v262, v263);
          v38[0] = 0;
          v38[1] = 0;
          v38[2] = v262;
          v38[3] = v263;
          v270 = g112.call(this, v2, v252, v251);
          if (!v251 || v271 !== v270) {
            v271 = v270;
            v1.uniform1f(g111.location, v270);
          }
          v272 = g115.call(this, v2, v252, v251);
          if (!v251 || v273 !== v272) {
            v273 = v272;
            v1.uniform1f(g114.location, v272);
          }
          if (v276) {
            if (v277 > 0) {
              if (v274) {
                v250.drawElementsInstancedANGLE(0, v276, v274.type, v275 << (v274.type - 5121 >> 1), v277);
              } else {
                v250.drawArraysInstancedANGLE(0, v275, v276, v277);
              }
            } else if (v277 < 0) {
              if (v274) {
                v1.drawElements(0, v276, v274.type, v275 << (v274.type - 5121 >> 1));
              } else {
                v1.drawArrays(0, v275, v276);
              }
            }
            v13.next = v255;
            v2.framebufferWidth = v256;
            v2.framebufferHeight = v257;
            v2.viewportWidth = v260;
            v2.viewportHeight = v261;
          }
        }
        v269.unbind();
        v5.dirty = true;
        v11.setVAO(null);
        if (v248) {
          g48.cpuTime += performance.now() - v249;
        }
      }
    };
  },
  "bcafcc30f5fd1e9f176e7deb4f9067870505d786fa0f2b66a991174be81e4f1a": function anonymous19(g0, g48, g50, g96, g97, g98, g101, g104, g106, g107, g111, g112, g114, g115, g117, g118, g121, g122, g124, g125, g126, g129, g130, g132, g133, g135, g136, g150, g152, g156, g158, g160, g162, g164, g166, g168, g170, g172, g176, g178, g182, g186, g188, g190, g193, g196, g199, g202, g205, g208, g211, g214, g216, g229, g231, g279, g280, g281, g284) {
    var v1, v2, v4, v5, v6, v7, v9, v10, v11, v12, v13, v14, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40;
    v1 = g0.gl;
    v2 = g0.context;
    g0.strings;
    v4 = g0.next;
    v5 = g0.current;
    v6 = g0.draw;
    v7 = g0.elements;
    g0.buffer;
    v9 = g0.shader;
    v10 = g0.attributes;
    v11 = g0.vao;
    v12 = g0.uniforms;
    v13 = g0.framebuffer;
    v14 = g0.extensions;
    g0.timer;
    g0.isBufferArgs;
    v17 = v4.blend_color;
    v18 = v5.blend_color;
    v19 = v4.blend_equation;
    v20 = v5.blend_equation;
    v21 = v4.blend_func;
    v22 = v5.blend_func;
    v23 = v4.depth_range;
    v24 = v5.depth_range;
    v25 = v4.colorMask;
    v26 = v5.colorMask;
    v27 = v4.polygonOffset_offset;
    v28 = v5.polygonOffset_offset;
    v29 = v4.sample_coverage;
    v30 = v5.sample_coverage;
    v31 = v4.stencil_func;
    v32 = v5.stencil_func;
    v33 = v4.stencil_opFront;
    v34 = v5.stencil_opFront;
    v35 = v4.stencil_opBack;
    v36 = v5.stencil_opBack;
    v37 = v4.scissor_box;
    v38 = v5.scissor_box;
    v39 = v4.viewport;
    v40 = v5.viewport;
    return {
      "draw": function(a0) {
        var v51, v52, v53, v54, v55, v92, v93, v94, v95, v99, v100, v102, v103, v105, v108, v109, v110, v113, v116, v119, v120, v123, v127, v128, v131, v134, v137, v138, v139, v140;
        v14.angle_instanced_arrays;
        v51 = g50.call(this, v2, a0, 0);
        v52 = v13.getFramebuffer(v51);
        v53 = v13.next;
        v13.next = v52;
        v54 = v2.framebufferWidth;
        v2.framebufferWidth = v52 ? v52.width : v2.drawingBufferWidth;
        v55 = v2.framebufferHeight;
        v2.framebufferHeight = v52 ? v52.height : v2.drawingBufferHeight;
        if (v52 !== v13.cur) {
          if (v52) {
            v1.bindFramebuffer(36160, v52.framebuffer);
          } else {
            v1.bindFramebuffer(36160, null);
          }
          v13.cur = v52;
        }
        if (v5.dirty) {
          var v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90, v91;
          v56 = v4.dither;
          if (v56 !== v5.dither) {
            if (v56) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v56;
          }
          v57 = v17[0];
          v58 = v17[1];
          v59 = v17[2];
          v60 = v17[3];
          if (v57 !== v18[0] || v58 !== v18[1] || v59 !== v18[2] || v60 !== v18[3]) {
            v1.blendColor(v57, v58, v59, v60);
            v18[0] = v57;
            v18[1] = v58;
            v18[2] = v59;
            v18[3] = v60;
          }
          v61 = v4.depth_func;
          if (v61 !== v5.depth_func) {
            v1.depthFunc(v61);
            v5.depth_func = v61;
          }
          v62 = v23[0];
          v63 = v23[1];
          if (v62 !== v24[0] || v63 !== v24[1]) {
            v1.depthRange(v62, v63);
            v24[0] = v62;
            v24[1] = v63;
          }
          v64 = v25[0];
          v65 = v25[1];
          v66 = v25[2];
          v67 = v25[3];
          if (v64 !== v26[0] || v65 !== v26[1] || v66 !== v26[2] || v67 !== v26[3]) {
            v1.colorMask(v64, v65, v66, v67);
            v26[0] = v64;
            v26[1] = v65;
            v26[2] = v66;
            v26[3] = v67;
          }
          v68 = v4.cull_enable;
          if (v68 !== v5.cull_enable) {
            if (v68) {
              v1.enable(2884);
            } else {
              v1.disable(2884);
            }
            v5.cull_enable = v68;
          }
          v69 = v4.cull_face;
          if (v69 !== v5.cull_face) {
            v1.cullFace(v69);
            v5.cull_face = v69;
          }
          v70 = v4.frontFace;
          if (v70 !== v5.frontFace) {
            v1.frontFace(v70);
            v5.frontFace = v70;
          }
          v71 = v4.lineWidth;
          if (v71 !== v5.lineWidth) {
            v1.lineWidth(v71);
            v5.lineWidth = v71;
          }
          v72 = v4.polygonOffset_enable;
          if (v72 !== v5.polygonOffset_enable) {
            if (v72) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v72;
          }
          v73 = v27[0];
          v74 = v27[1];
          if (v73 !== v28[0] || v74 !== v28[1]) {
            v1.polygonOffset(v73, v74);
            v28[0] = v73;
            v28[1] = v74;
          }
          v75 = v4.sample_alpha;
          if (v75 !== v5.sample_alpha) {
            if (v75) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v75;
          }
          v76 = v4.sample_enable;
          if (v76 !== v5.sample_enable) {
            if (v76) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v76;
          }
          v77 = v29[0];
          v78 = v29[1];
          if (v77 !== v30[0] || v78 !== v30[1]) {
            v1.sampleCoverage(v77, v78);
            v30[0] = v77;
            v30[1] = v78;
          }
          v79 = v4.stencil_mask;
          if (v79 !== v5.stencil_mask) {
            v1.stencilMask(v79);
            v5.stencil_mask = v79;
          }
          v80 = v31[0];
          v81 = v31[1];
          v82 = v31[2];
          if (v80 !== v32[0] || v81 !== v32[1] || v82 !== v32[2]) {
            v1.stencilFunc(v80, v81, v82);
            v32[0] = v80;
            v32[1] = v81;
            v32[2] = v82;
          }
          v83 = v33[0];
          v84 = v33[1];
          v85 = v33[2];
          v86 = v33[3];
          if (v83 !== v34[0] || v84 !== v34[1] || v85 !== v34[2] || v86 !== v34[3]) {
            v1.stencilOpSeparate(v83, v84, v85, v86);
            v34[0] = v83;
            v34[1] = v84;
            v34[2] = v85;
            v34[3] = v86;
          }
          v87 = v35[0];
          v88 = v35[1];
          v89 = v35[2];
          v90 = v35[3];
          if (v87 !== v36[0] || v88 !== v36[1] || v89 !== v36[2] || v90 !== v36[3]) {
            v1.stencilOpSeparate(v87, v88, v89, v90);
            v36[0] = v87;
            v36[1] = v88;
            v36[2] = v89;
            v36[3] = v90;
          }
          v91 = v4.scissor_enable;
          if (v91 !== v5.scissor_enable) {
            if (v91) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v91;
          }
        }
        v92 = v2.framebufferWidth;
        v93 = v2.framebufferHeight;
        v94 = v2.viewportWidth;
        v2.viewportWidth = v92;
        v95 = v2.viewportHeight;
        v2.viewportHeight = v93;
        v1.viewport(0, 0, v92, v93);
        v40[0] = 0;
        v40[1] = 0;
        v40[2] = v92;
        v40[3] = v93;
        if (g96) {
          v1.enable(3042);
        } else {
          v1.disable(3042);
        }
        v5.blend_enable = g96;
        v1.blendEquationSeparate(32774, 32774);
        v20[0] = 32774;
        v20[1] = 32774;
        v1.blendFuncSeparate(1, 1, 1, 1);
        v22[0] = 1;
        v22[1] = 1;
        v22[2] = 1;
        v22[3] = 1;
        if (g97) {
          v1.enable(2929);
        } else {
          v1.disable(2929);
        }
        v5.depth_enable = g97;
        v1.depthMask(g98);
        v5.depth_mask = g98;
        v99 = v2.framebufferWidth;
        v100 = v2.framebufferHeight;
        v1.scissor(0, 0, v99, v100);
        v38[0] = 0;
        v38[1] = 0;
        v38[2] = v99;
        v38[3] = v100;
        if (g101) {
          v1.enable(2960);
        } else {
          v1.disable(2960);
        }
        v5.stencil_enable = g101;
        v102 = v5.profile;
        if (v102) {
          v103 = performance.now();
          g48.count++;
        }
        v1.useProgram(g104.program);
        v105 = v14.angle_instanced_arrays;
        v11.setVAO(null);
        v108 = g107.location;
        v109 = v10[v108];
        if (!v109.buffer) {
          v1.enableVertexAttribArray(v108);
        }
        v110 = 2;
        if (v109.type !== 5126 || v109.size !== v110 || v109.buffer !== g106 || v109.normalized !== false || v109.offset !== 0 || v109.stride !== 0) {
          v1.bindBuffer(34962, g106.buffer);
          v1.vertexAttribPointer(v108, v110, 5126, false, 0, 0);
          v109.type = 5126;
          v109.size = v110;
          v109.buffer = g106;
          v109.normalized = false;
          v109.offset = 0;
          v109.stride = 0;
        }
        if (v109.divisor !== 0) {
          v105.vertexAttribDivisorANGLE(v108, 0);
          v109.divisor = 0;
        }
        v113 = g112.call(this, v2, a0, 0);
        v1.uniform1f(g111.location, v113);
        v116 = g115.call(this, v2, a0, 0);
        v1.uniform1f(g114.location, v116);
        v119 = g118.call(this, v2, a0, 0);
        if (v119 && v119._reglType === "framebuffer") {
          v119 = v119.color[0];
        }
        v120 = v119._texture;
        v1.uniform1i(g117.location, v120.bind());
        v123 = g122.call(this, v2, a0, 0);
        v1.uniform1f(g121.location, v123);
        v1.uniform1f(g124.location, 12);
        v127 = g126.call(this, v2, a0, 0);
        if (v127 && v127._reglType === "framebuffer") {
          v127 = v127.color[0];
        }
        v128 = v127._texture;
        v1.uniform1i(g125.location, v128.bind());
        v131 = g130.call(this, v2, a0, 0);
        v1.uniform1f(g129.location, v131);
        v134 = g133.call(this, v2, a0, 0);
        v1.uniform1f(g132.location, v134);
        v137 = g136.call(this, v2, a0, 0);
        v1.uniform1f(g135.location, v137);
        v138 = v6.elements;
        if (v138) {
          v1.bindBuffer(34963, v138.buffer.buffer);
        } else if (v11.currentVAO) {
          v138 = v7.getElements(v11.currentVAO.elements);
          if (v138)
            v1.bindBuffer(34963, v138.buffer.buffer);
        }
        v139 = v6.offset;
        v140 = v6.instances;
        if (v140 > 0) {
          if (v138) {
            v105.drawElementsInstancedANGLE(5, 4, v138.type, v139 << (v138.type - 5121 >> 1), v140);
          } else {
            v105.drawArraysInstancedANGLE(5, v139, 4, v140);
          }
        } else if (v140 < 0) {
          if (v138) {
            v1.drawElements(5, 4, v138.type, v139 << (v138.type - 5121 >> 1));
          } else {
            v1.drawArrays(5, v139, 4);
          }
        }
        v5.dirty = true;
        v11.setVAO(null);
        v13.next = v53;
        v2.framebufferWidth = v54;
        v2.framebufferHeight = v55;
        v2.viewportWidth = v94;
        v2.viewportHeight = v95;
        if (v102) {
          g48.cpuTime += performance.now() - v103;
        }
        v120.unbind();
        v128.unbind();
      },
      "scope": function(a0, a1, a2) {
        var v141, v142, v143, v144, v145, v146, v147, v148, v149, v151, v153, v154, v155, v157, v159, v161, v163, v165, v167, v169, v171, v173, v174, v175, v177, v179, v180, v181, v183, v184, v185, v187, v189, v191, v192, v194, v195, v197, v198, v200, v201, v203, v204, v206, v207, v209, v210, v212, v213, v215, v217, v218, v219, v220, v221, v222, v223, v224, v225, v226, v227, v228, v230, v232;
        v141 = g50.call(this, v2, a0, a2);
        v142 = v13.getFramebuffer(v141);
        v143 = v13.next;
        v13.next = v142;
        v144 = v2.framebufferWidth;
        v2.framebufferWidth = v142 ? v142.width : v2.drawingBufferWidth;
        v145 = v2.framebufferHeight;
        v2.framebufferHeight = v142 ? v142.height : v2.drawingBufferHeight;
        v146 = v2.framebufferWidth;
        v147 = v2.framebufferHeight;
        v148 = v2.viewportWidth;
        v2.viewportWidth = v146;
        v149 = v2.viewportHeight;
        v2.viewportHeight = v147;
        v151 = v39[0];
        v39[0] = g150;
        v153 = v39[1];
        v39[1] = g152;
        v154 = v39[2];
        v39[2] = v146;
        v155 = v39[3];
        v39[3] = v147;
        v157 = v4.blend_enable;
        v4.blend_enable = g156;
        v159 = v19[0];
        v19[0] = g158;
        v161 = v19[1];
        v19[1] = g160;
        v163 = v21[0];
        v21[0] = g162;
        v165 = v21[1];
        v21[1] = g164;
        v167 = v21[2];
        v21[2] = g166;
        v169 = v21[3];
        v21[3] = g168;
        v171 = v4.depth_enable;
        v4.depth_enable = g170;
        v173 = v4.depth_mask;
        v4.depth_mask = g172;
        v174 = v2.framebufferWidth;
        v175 = v2.framebufferHeight;
        v177 = v37[0];
        v37[0] = g176;
        v179 = v37[1];
        v37[1] = g178;
        v180 = v37[2];
        v37[2] = v174;
        v181 = v37[3];
        v37[3] = v175;
        v183 = v4.stencil_enable;
        v4.stencil_enable = g182;
        v184 = v5.profile;
        if (v184) {
          v185 = performance.now();
          g48.count++;
        }
        v187 = v6.count;
        v6.count = g186;
        v189 = v6.primitive;
        v6.primitive = g188;
        v191 = v12[g190];
        v12[g190] = 12;
        v192 = g126.call(this, v2, a0, a2);
        v194 = v12[g193];
        v12[g193] = v192;
        v195 = g115.call(this, v2, a0, a2);
        v197 = v12[g196];
        v12[g196] = v195;
        v198 = g118.call(this, v2, a0, a2);
        v200 = v12[g199];
        v12[g199] = v198;
        v201 = g122.call(this, v2, a0, a2);
        v203 = v12[g202];
        v12[g202] = v201;
        v204 = g112.call(this, v2, a0, a2);
        v206 = v12[g205];
        v12[g205] = v204;
        v207 = g130.call(this, v2, a0, a2);
        v209 = v12[g208];
        v12[g208] = v207;
        v210 = g133.call(this, v2, a0, a2);
        v212 = v12[g211];
        v12[g211] = v210;
        v213 = g136.call(this, v2, a0, a2);
        v215 = v12[g214];
        v12[g214] = v213;
        v217 = g216.state;
        g216.state = 1;
        v218 = g216.x;
        g216.x = 0;
        v219 = g216.y;
        g216.y = 0;
        v220 = g216.z;
        g216.z = 0;
        v221 = g216.w;
        g216.w = 0;
        v222 = g216.buffer;
        g216.buffer = g106;
        v223 = g216.size;
        g216.size = 2;
        v224 = g216.normalized;
        g216.normalized = false;
        v225 = g216.type;
        g216.type = 5126;
        v226 = g216.offset;
        g216.offset = 0;
        v227 = g216.stride;
        g216.stride = 0;
        v228 = g216.divisor;
        g216.divisor = 0;
        v230 = v9.vert;
        v9.vert = g229;
        v232 = v9.frag;
        v9.frag = g231;
        v5.dirty = true;
        a1(v2, a0, a2);
        v13.next = v143;
        v2.framebufferWidth = v144;
        v2.framebufferHeight = v145;
        v2.viewportWidth = v148;
        v2.viewportHeight = v149;
        v39[0] = v151;
        v39[1] = v153;
        v39[2] = v154;
        v39[3] = v155;
        v4.blend_enable = v157;
        v19[0] = v159;
        v19[1] = v161;
        v21[0] = v163;
        v21[1] = v165;
        v21[2] = v167;
        v21[3] = v169;
        v4.depth_enable = v171;
        v4.depth_mask = v173;
        v37[0] = v177;
        v37[1] = v179;
        v37[2] = v180;
        v37[3] = v181;
        v4.stencil_enable = v183;
        if (v184) {
          g48.cpuTime += performance.now() - v185;
        }
        v6.count = v187;
        v6.primitive = v189;
        v12[g190] = v191;
        v12[g193] = v194;
        v12[g196] = v197;
        v12[g199] = v200;
        v12[g202] = v203;
        v12[g205] = v206;
        v12[g208] = v209;
        v12[g211] = v212;
        v12[g214] = v215;
        g216.state = v217;
        g216.x = v218;
        g216.y = v219;
        g216.z = v220;
        g216.w = v221;
        g216.buffer = v222;
        g216.size = v223;
        g216.normalized = v224;
        g216.type = v225;
        g216.offset = v226;
        g216.stride = v227;
        g216.divisor = v228;
        v9.vert = v230;
        v9.frag = v232;
        v5.dirty = true;
      },
      "batch": function(a0, a1) {
        var v234, v235, v236, v237, v238, v275, v276, v277, v278, v282, v283, v285, v286, v287, v288, v289;
        v14.angle_instanced_arrays;
        v234 = g50.call(this, v2, a0, 0);
        v235 = v13.getFramebuffer(v234);
        v236 = v13.next;
        v13.next = v235;
        v237 = v2.framebufferWidth;
        v2.framebufferWidth = v235 ? v235.width : v2.drawingBufferWidth;
        v238 = v2.framebufferHeight;
        v2.framebufferHeight = v235 ? v235.height : v2.drawingBufferHeight;
        if (v235 !== v13.cur) {
          if (v235) {
            v1.bindFramebuffer(36160, v235.framebuffer);
          } else {
            v1.bindFramebuffer(36160, null);
          }
          v13.cur = v235;
        }
        if (v5.dirty) {
          var v239, v240, v241, v242, v243, v244, v245, v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, v259, v260, v261, v262, v263, v264, v265, v266, v267, v268, v269, v270, v271, v272, v273, v274;
          v239 = v4.dither;
          if (v239 !== v5.dither) {
            if (v239) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v239;
          }
          v240 = v17[0];
          v241 = v17[1];
          v242 = v17[2];
          v243 = v17[3];
          if (v240 !== v18[0] || v241 !== v18[1] || v242 !== v18[2] || v243 !== v18[3]) {
            v1.blendColor(v240, v241, v242, v243);
            v18[0] = v240;
            v18[1] = v241;
            v18[2] = v242;
            v18[3] = v243;
          }
          v244 = v4.depth_func;
          if (v244 !== v5.depth_func) {
            v1.depthFunc(v244);
            v5.depth_func = v244;
          }
          v245 = v23[0];
          v246 = v23[1];
          if (v245 !== v24[0] || v246 !== v24[1]) {
            v1.depthRange(v245, v246);
            v24[0] = v245;
            v24[1] = v246;
          }
          v247 = v25[0];
          v248 = v25[1];
          v249 = v25[2];
          v250 = v25[3];
          if (v247 !== v26[0] || v248 !== v26[1] || v249 !== v26[2] || v250 !== v26[3]) {
            v1.colorMask(v247, v248, v249, v250);
            v26[0] = v247;
            v26[1] = v248;
            v26[2] = v249;
            v26[3] = v250;
          }
          v251 = v4.cull_enable;
          if (v251 !== v5.cull_enable) {
            if (v251) {
              v1.enable(2884);
            } else {
              v1.disable(2884);
            }
            v5.cull_enable = v251;
          }
          v252 = v4.cull_face;
          if (v252 !== v5.cull_face) {
            v1.cullFace(v252);
            v5.cull_face = v252;
          }
          v253 = v4.frontFace;
          if (v253 !== v5.frontFace) {
            v1.frontFace(v253);
            v5.frontFace = v253;
          }
          v254 = v4.lineWidth;
          if (v254 !== v5.lineWidth) {
            v1.lineWidth(v254);
            v5.lineWidth = v254;
          }
          v255 = v4.polygonOffset_enable;
          if (v255 !== v5.polygonOffset_enable) {
            if (v255) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v255;
          }
          v256 = v27[0];
          v257 = v27[1];
          if (v256 !== v28[0] || v257 !== v28[1]) {
            v1.polygonOffset(v256, v257);
            v28[0] = v256;
            v28[1] = v257;
          }
          v258 = v4.sample_alpha;
          if (v258 !== v5.sample_alpha) {
            if (v258) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v258;
          }
          v259 = v4.sample_enable;
          if (v259 !== v5.sample_enable) {
            if (v259) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v259;
          }
          v260 = v29[0];
          v261 = v29[1];
          if (v260 !== v30[0] || v261 !== v30[1]) {
            v1.sampleCoverage(v260, v261);
            v30[0] = v260;
            v30[1] = v261;
          }
          v262 = v4.stencil_mask;
          if (v262 !== v5.stencil_mask) {
            v1.stencilMask(v262);
            v5.stencil_mask = v262;
          }
          v263 = v31[0];
          v264 = v31[1];
          v265 = v31[2];
          if (v263 !== v32[0] || v264 !== v32[1] || v265 !== v32[2]) {
            v1.stencilFunc(v263, v264, v265);
            v32[0] = v263;
            v32[1] = v264;
            v32[2] = v265;
          }
          v266 = v33[0];
          v267 = v33[1];
          v268 = v33[2];
          v269 = v33[3];
          if (v266 !== v34[0] || v267 !== v34[1] || v268 !== v34[2] || v269 !== v34[3]) {
            v1.stencilOpSeparate(v266, v267, v268, v269);
            v34[0] = v266;
            v34[1] = v267;
            v34[2] = v268;
            v34[3] = v269;
          }
          v270 = v35[0];
          v271 = v35[1];
          v272 = v35[2];
          v273 = v35[3];
          if (v270 !== v36[0] || v271 !== v36[1] || v272 !== v36[2] || v273 !== v36[3]) {
            v1.stencilOpSeparate(v270, v271, v272, v273);
            v36[0] = v270;
            v36[1] = v271;
            v36[2] = v272;
            v36[3] = v273;
          }
          v274 = v4.scissor_enable;
          if (v274 !== v5.scissor_enable) {
            if (v274) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v274;
          }
        }
        v275 = v2.framebufferWidth;
        v276 = v2.framebufferHeight;
        v277 = v2.viewportWidth;
        v2.viewportWidth = v275;
        v278 = v2.viewportHeight;
        v2.viewportHeight = v276;
        v1.viewport(0, 0, v275, v276);
        v40[0] = 0;
        v40[1] = 0;
        v40[2] = v275;
        v40[3] = v276;
        if (g279) {
          v1.enable(3042);
        } else {
          v1.disable(3042);
        }
        v5.blend_enable = g279;
        v1.blendEquationSeparate(32774, 32774);
        v20[0] = 32774;
        v20[1] = 32774;
        v1.blendFuncSeparate(1, 1, 1, 1);
        v22[0] = 1;
        v22[1] = 1;
        v22[2] = 1;
        v22[3] = 1;
        if (g280) {
          v1.enable(2929);
        } else {
          v1.disable(2929);
        }
        v5.depth_enable = g280;
        v1.depthMask(g281);
        v5.depth_mask = g281;
        v282 = v2.framebufferWidth;
        v283 = v2.framebufferHeight;
        v1.scissor(0, 0, v282, v283);
        v38[0] = 0;
        v38[1] = 0;
        v38[2] = v282;
        v38[3] = v283;
        if (g284) {
          v1.enable(2960);
        } else {
          v1.disable(2960);
        }
        v5.stencil_enable = g284;
        v285 = v5.profile;
        if (v285) {
          v286 = performance.now();
          g48.count += a1;
        }
        v1.useProgram(g104.program);
        v287 = v14.angle_instanced_arrays;
        var v290, v291, v292, v293, v294, v295, v296, v297, v298, v305, v306, v307;
        v11.setVAO(null);
        v290 = g107.location;
        v291 = v10[v290];
        if (!v291.buffer) {
          v1.enableVertexAttribArray(v290);
        }
        v292 = 2;
        if (v291.type !== 5126 || v291.size !== v292 || v291.buffer !== g106 || v291.normalized !== false || v291.offset !== 0 || v291.stride !== 0) {
          v1.bindBuffer(34962, g106.buffer);
          v1.vertexAttribPointer(v290, v292, 5126, false, 0, 0);
          v291.type = 5126;
          v291.size = v292;
          v291.buffer = g106;
          v291.normalized = false;
          v291.offset = 0;
          v291.stride = 0;
        }
        if (v291.divisor !== 0) {
          v287.vertexAttribDivisorANGLE(v290, 0);
          v291.divisor = 0;
        }
        v293 = g112.call(this, v2, v289, v288);
        v1.uniform1f(g111.location, v293);
        v1.uniform1f(g124.location, 12);
        v294 = g126.call(this, v2, v289, v288);
        if (v294 && v294._reglType === "framebuffer") {
          v294 = v294.color[0];
        }
        v295 = v294._texture;
        v1.uniform1i(g125.location, v295.bind());
        v296 = g130.call(this, v2, v289, v288);
        v1.uniform1f(g129.location, v296);
        v297 = g133.call(this, v2, v289, v288);
        v1.uniform1f(g132.location, v297);
        v298 = g136.call(this, v2, v289, v288);
        v1.uniform1f(g135.location, v298);
        v305 = v6.elements;
        if (v305) {
          v1.bindBuffer(34963, v305.buffer.buffer);
        } else if (v11.currentVAO) {
          v305 = v7.getElements(v11.currentVAO.elements);
          if (v305)
            v1.bindBuffer(34963, v305.buffer.buffer);
        }
        v306 = v6.offset;
        v307 = v6.instances;
        for (v288 = 0; v288 < a1; ++v288) {
          v289 = a0[v288];
          var v299, v300, v301, v302, v303, v304;
          v299 = g115.call(this, v2, v289, v288);
          if (!v288 || v300 !== v299) {
            v300 = v299;
            v1.uniform1f(g114.location, v299);
          }
          v301 = g118.call(this, v2, v289, v288);
          if (v301 && v301._reglType === "framebuffer") {
            v301 = v301.color[0];
          }
          v302 = v301._texture;
          v1.uniform1i(g117.location, v302.bind());
          v303 = g122.call(this, v2, v289, v288);
          if (!v288 || v304 !== v303) {
            v304 = v303;
            v1.uniform1f(g121.location, v303);
          }
          if (v307 > 0) {
            if (v305) {
              v287.drawElementsInstancedANGLE(5, 4, v305.type, v306 << (v305.type - 5121 >> 1), v307);
            } else {
              v287.drawArraysInstancedANGLE(5, v306, 4, v307);
            }
          } else if (v307 < 0) {
            if (v305) {
              v1.drawElements(5, 4, v305.type, v306 << (v305.type - 5121 >> 1));
            } else {
              v1.drawArrays(5, v306, 4);
            }
          }
          v302.unbind();
        }
        v295.unbind();
        v5.dirty = true;
        v11.setVAO(null);
        v13.next = v236;
        v2.framebufferWidth = v237;
        v2.framebufferHeight = v238;
        v2.viewportWidth = v277;
        v2.viewportHeight = v278;
        if (v285) {
          g48.cpuTime += performance.now() - v286;
        }
      }
    };
  },
  "5164528162536a2d3935adfd876eb6915b6448abe41d002329c46590ce9a98e6": function anonymous20(g0, g48, g50, g96, g97, g98, g101, g104, g106, g107, g111, g112, g114, g115, g118, g119, g121, g122, g125, g126, g129, g130, g144, g146, g150, g152, g154, g156, g158, g160, g162, g164, g166, g170, g172, g176, g180, g182, g185, g188, g191, g194, g197, g200, g202, g204, g206, g219, g221, g269, g270, g271, g274) {
    var v1, v2, v4, v5, v6, v7, v9, v10, v11, v12, v13, v14, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40;
    v1 = g0.gl;
    v2 = g0.context;
    g0.strings;
    v4 = g0.next;
    v5 = g0.current;
    v6 = g0.draw;
    v7 = g0.elements;
    g0.buffer;
    v9 = g0.shader;
    v10 = g0.attributes;
    v11 = g0.vao;
    v12 = g0.uniforms;
    v13 = g0.framebuffer;
    v14 = g0.extensions;
    g0.timer;
    g0.isBufferArgs;
    v17 = v4.blend_color;
    v18 = v5.blend_color;
    v19 = v4.blend_equation;
    v20 = v5.blend_equation;
    v21 = v4.blend_func;
    v22 = v5.blend_func;
    v23 = v4.depth_range;
    v24 = v5.depth_range;
    v25 = v4.colorMask;
    v26 = v5.colorMask;
    v27 = v4.polygonOffset_offset;
    v28 = v5.polygonOffset_offset;
    v29 = v4.sample_coverage;
    v30 = v5.sample_coverage;
    v31 = v4.stencil_func;
    v32 = v5.stencil_func;
    v33 = v4.stencil_opFront;
    v34 = v5.stencil_opFront;
    v35 = v4.stencil_opBack;
    v36 = v5.stencil_opBack;
    v37 = v4.scissor_box;
    v38 = v5.scissor_box;
    v39 = v4.viewport;
    v40 = v5.viewport;
    return {
      "draw": function(a0) {
        var v51, v52, v53, v54, v55, v92, v93, v94, v95, v99, v100, v102, v103, v105, v108, v109, v110, v113, v116, v117, v120, v123, v124, v127, v128, v131, v132, v133, v134;
        v14.angle_instanced_arrays;
        v51 = g50.call(this, v2, a0, 0);
        v52 = v13.getFramebuffer(v51);
        v53 = v13.next;
        v13.next = v52;
        v54 = v2.framebufferWidth;
        v2.framebufferWidth = v52 ? v52.width : v2.drawingBufferWidth;
        v55 = v2.framebufferHeight;
        v2.framebufferHeight = v52 ? v52.height : v2.drawingBufferHeight;
        if (v52 !== v13.cur) {
          if (v52) {
            v1.bindFramebuffer(36160, v52.framebuffer);
          } else {
            v1.bindFramebuffer(36160, null);
          }
          v13.cur = v52;
        }
        if (v5.dirty) {
          var v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90, v91;
          v56 = v4.dither;
          if (v56 !== v5.dither) {
            if (v56) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v56;
          }
          v57 = v17[0];
          v58 = v17[1];
          v59 = v17[2];
          v60 = v17[3];
          if (v57 !== v18[0] || v58 !== v18[1] || v59 !== v18[2] || v60 !== v18[3]) {
            v1.blendColor(v57, v58, v59, v60);
            v18[0] = v57;
            v18[1] = v58;
            v18[2] = v59;
            v18[3] = v60;
          }
          v61 = v4.depth_func;
          if (v61 !== v5.depth_func) {
            v1.depthFunc(v61);
            v5.depth_func = v61;
          }
          v62 = v23[0];
          v63 = v23[1];
          if (v62 !== v24[0] || v63 !== v24[1]) {
            v1.depthRange(v62, v63);
            v24[0] = v62;
            v24[1] = v63;
          }
          v64 = v25[0];
          v65 = v25[1];
          v66 = v25[2];
          v67 = v25[3];
          if (v64 !== v26[0] || v65 !== v26[1] || v66 !== v26[2] || v67 !== v26[3]) {
            v1.colorMask(v64, v65, v66, v67);
            v26[0] = v64;
            v26[1] = v65;
            v26[2] = v66;
            v26[3] = v67;
          }
          v68 = v4.cull_enable;
          if (v68 !== v5.cull_enable) {
            if (v68) {
              v1.enable(2884);
            } else {
              v1.disable(2884);
            }
            v5.cull_enable = v68;
          }
          v69 = v4.cull_face;
          if (v69 !== v5.cull_face) {
            v1.cullFace(v69);
            v5.cull_face = v69;
          }
          v70 = v4.frontFace;
          if (v70 !== v5.frontFace) {
            v1.frontFace(v70);
            v5.frontFace = v70;
          }
          v71 = v4.lineWidth;
          if (v71 !== v5.lineWidth) {
            v1.lineWidth(v71);
            v5.lineWidth = v71;
          }
          v72 = v4.polygonOffset_enable;
          if (v72 !== v5.polygonOffset_enable) {
            if (v72) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v72;
          }
          v73 = v27[0];
          v74 = v27[1];
          if (v73 !== v28[0] || v74 !== v28[1]) {
            v1.polygonOffset(v73, v74);
            v28[0] = v73;
            v28[1] = v74;
          }
          v75 = v4.sample_alpha;
          if (v75 !== v5.sample_alpha) {
            if (v75) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v75;
          }
          v76 = v4.sample_enable;
          if (v76 !== v5.sample_enable) {
            if (v76) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v76;
          }
          v77 = v29[0];
          v78 = v29[1];
          if (v77 !== v30[0] || v78 !== v30[1]) {
            v1.sampleCoverage(v77, v78);
            v30[0] = v77;
            v30[1] = v78;
          }
          v79 = v4.stencil_mask;
          if (v79 !== v5.stencil_mask) {
            v1.stencilMask(v79);
            v5.stencil_mask = v79;
          }
          v80 = v31[0];
          v81 = v31[1];
          v82 = v31[2];
          if (v80 !== v32[0] || v81 !== v32[1] || v82 !== v32[2]) {
            v1.stencilFunc(v80, v81, v82);
            v32[0] = v80;
            v32[1] = v81;
            v32[2] = v82;
          }
          v83 = v33[0];
          v84 = v33[1];
          v85 = v33[2];
          v86 = v33[3];
          if (v83 !== v34[0] || v84 !== v34[1] || v85 !== v34[2] || v86 !== v34[3]) {
            v1.stencilOpSeparate(v83, v84, v85, v86);
            v34[0] = v83;
            v34[1] = v84;
            v34[2] = v85;
            v34[3] = v86;
          }
          v87 = v35[0];
          v88 = v35[1];
          v89 = v35[2];
          v90 = v35[3];
          if (v87 !== v36[0] || v88 !== v36[1] || v89 !== v36[2] || v90 !== v36[3]) {
            v1.stencilOpSeparate(v87, v88, v89, v90);
            v36[0] = v87;
            v36[1] = v88;
            v36[2] = v89;
            v36[3] = v90;
          }
          v91 = v4.scissor_enable;
          if (v91 !== v5.scissor_enable) {
            if (v91) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v91;
          }
        }
        v92 = v2.framebufferWidth;
        v93 = v2.framebufferHeight;
        v94 = v2.viewportWidth;
        v2.viewportWidth = v92;
        v95 = v2.viewportHeight;
        v2.viewportHeight = v93;
        v1.viewport(0, 0, v92, v93);
        v40[0] = 0;
        v40[1] = 0;
        v40[2] = v92;
        v40[3] = v93;
        if (g96) {
          v1.enable(3042);
        } else {
          v1.disable(3042);
        }
        v5.blend_enable = g96;
        v1.blendEquationSeparate(32774, 32774);
        v20[0] = 32774;
        v20[1] = 32774;
        v1.blendFuncSeparate(1, 1, 1, 1);
        v22[0] = 1;
        v22[1] = 1;
        v22[2] = 1;
        v22[3] = 1;
        if (g97) {
          v1.enable(2929);
        } else {
          v1.disable(2929);
        }
        v5.depth_enable = g97;
        v1.depthMask(g98);
        v5.depth_mask = g98;
        v99 = v2.framebufferWidth;
        v100 = v2.framebufferHeight;
        v1.scissor(0, 0, v99, v100);
        v38[0] = 0;
        v38[1] = 0;
        v38[2] = v99;
        v38[3] = v100;
        if (g101) {
          v1.enable(2960);
        } else {
          v1.disable(2960);
        }
        v5.stencil_enable = g101;
        v102 = v5.profile;
        if (v102) {
          v103 = performance.now();
          g48.count++;
        }
        v1.useProgram(g104.program);
        v105 = v14.angle_instanced_arrays;
        v11.setVAO(null);
        v108 = g107.location;
        v109 = v10[v108];
        if (!v109.buffer) {
          v1.enableVertexAttribArray(v108);
        }
        v110 = 2;
        if (v109.type !== 5126 || v109.size !== v110 || v109.buffer !== g106 || v109.normalized !== false || v109.offset !== 0 || v109.stride !== 0) {
          v1.bindBuffer(34962, g106.buffer);
          v1.vertexAttribPointer(v108, v110, 5126, false, 0, 0);
          v109.type = 5126;
          v109.size = v110;
          v109.buffer = g106;
          v109.normalized = false;
          v109.offset = 0;
          v109.stride = 0;
        }
        if (v109.divisor !== 0) {
          v105.vertexAttribDivisorANGLE(v108, 0);
          v109.divisor = 0;
        }
        v113 = g112.call(this, v2, a0, 0);
        v1.uniform1f(g111.location, v113);
        v116 = g115.call(this, v2, a0, 0);
        if (v116 && v116._reglType === "framebuffer") {
          v116 = v116.color[0];
        }
        v117 = v116._texture;
        v1.uniform1i(g114.location, v117.bind());
        v120 = g119.call(this, v2, a0, 0);
        v1.uniform1f(g118.location, v120);
        v123 = g122.call(this, v2, a0, 0);
        if (v123 && v123._reglType === "framebuffer") {
          v123 = v123.color[0];
        }
        v124 = v123._texture;
        v1.uniform1i(g121.location, v124.bind());
        v127 = g126.call(this, v2, a0, 0);
        if (v127 && v127._reglType === "framebuffer") {
          v127 = v127.color[0];
        }
        v128 = v127._texture;
        v1.uniform1i(g125.location, v128.bind());
        v131 = g130.call(this, v2, a0, 0);
        v1.uniform1f(g129.location, v131);
        v132 = v6.elements;
        if (v132) {
          v1.bindBuffer(34963, v132.buffer.buffer);
        } else if (v11.currentVAO) {
          v132 = v7.getElements(v11.currentVAO.elements);
          if (v132)
            v1.bindBuffer(34963, v132.buffer.buffer);
        }
        v133 = v6.offset;
        v134 = v6.instances;
        if (v134 > 0) {
          if (v132) {
            v105.drawElementsInstancedANGLE(5, 4, v132.type, v133 << (v132.type - 5121 >> 1), v134);
          } else {
            v105.drawArraysInstancedANGLE(5, v133, 4, v134);
          }
        } else if (v134 < 0) {
          if (v132) {
            v1.drawElements(5, 4, v132.type, v133 << (v132.type - 5121 >> 1));
          } else {
            v1.drawArrays(5, v133, 4);
          }
        }
        v5.dirty = true;
        v11.setVAO(null);
        v13.next = v53;
        v2.framebufferWidth = v54;
        v2.framebufferHeight = v55;
        v2.viewportWidth = v94;
        v2.viewportHeight = v95;
        if (v102) {
          g48.cpuTime += performance.now() - v103;
        }
        v117.unbind();
        v124.unbind();
        v128.unbind();
      },
      "scope": function(a0, a1, a2) {
        var v135, v136, v137, v138, v139, v140, v141, v142, v143, v145, v147, v148, v149, v151, v153, v155, v157, v159, v161, v163, v165, v167, v168, v169, v171, v173, v174, v175, v177, v178, v179, v181, v183, v184, v186, v187, v189, v190, v192, v193, v195, v196, v198, v199, v201, v203, v205, v207, v208, v209, v210, v211, v212, v213, v214, v215, v216, v217, v218, v220, v222;
        v135 = g50.call(this, v2, a0, a2);
        v136 = v13.getFramebuffer(v135);
        v137 = v13.next;
        v13.next = v136;
        v138 = v2.framebufferWidth;
        v2.framebufferWidth = v136 ? v136.width : v2.drawingBufferWidth;
        v139 = v2.framebufferHeight;
        v2.framebufferHeight = v136 ? v136.height : v2.drawingBufferHeight;
        v140 = v2.framebufferWidth;
        v141 = v2.framebufferHeight;
        v142 = v2.viewportWidth;
        v2.viewportWidth = v140;
        v143 = v2.viewportHeight;
        v2.viewportHeight = v141;
        v145 = v39[0];
        v39[0] = g144;
        v147 = v39[1];
        v39[1] = g146;
        v148 = v39[2];
        v39[2] = v140;
        v149 = v39[3];
        v39[3] = v141;
        v151 = v4.blend_enable;
        v4.blend_enable = g150;
        v153 = v19[0];
        v19[0] = g152;
        v155 = v19[1];
        v19[1] = g154;
        v157 = v21[0];
        v21[0] = g156;
        v159 = v21[1];
        v21[1] = g158;
        v161 = v21[2];
        v21[2] = g160;
        v163 = v21[3];
        v21[3] = g162;
        v165 = v4.depth_enable;
        v4.depth_enable = g164;
        v167 = v4.depth_mask;
        v4.depth_mask = g166;
        v168 = v2.framebufferWidth;
        v169 = v2.framebufferHeight;
        v171 = v37[0];
        v37[0] = g170;
        v173 = v37[1];
        v37[1] = g172;
        v174 = v37[2];
        v37[2] = v168;
        v175 = v37[3];
        v37[3] = v169;
        v177 = v4.stencil_enable;
        v4.stencil_enable = g176;
        v178 = v5.profile;
        if (v178) {
          v179 = performance.now();
          g48.count++;
        }
        v181 = v6.count;
        v6.count = g180;
        v183 = v6.primitive;
        v6.primitive = g182;
        v184 = g122.call(this, v2, a0, a2);
        v186 = v12[g185];
        v12[g185] = v184;
        v187 = g126.call(this, v2, a0, a2);
        v189 = v12[g188];
        v12[g188] = v187;
        v190 = g115.call(this, v2, a0, a2);
        v192 = v12[g191];
        v12[g191] = v190;
        v193 = g119.call(this, v2, a0, a2);
        v195 = v12[g194];
        v12[g194] = v193;
        v196 = g112.call(this, v2, a0, a2);
        v198 = v12[g197];
        v12[g197] = v196;
        v199 = g130.call(this, v2, a0, a2);
        v201 = v12[g200];
        v12[g200] = v199;
        v203 = g202.call(this, v2, a0, a2);
        v205 = v12[g204];
        v12[g204] = v203;
        v207 = g206.state;
        g206.state = 1;
        v208 = g206.x;
        g206.x = 0;
        v209 = g206.y;
        g206.y = 0;
        v210 = g206.z;
        g206.z = 0;
        v211 = g206.w;
        g206.w = 0;
        v212 = g206.buffer;
        g206.buffer = g106;
        v213 = g206.size;
        g206.size = 2;
        v214 = g206.normalized;
        g206.normalized = false;
        v215 = g206.type;
        g206.type = 5126;
        v216 = g206.offset;
        g206.offset = 0;
        v217 = g206.stride;
        g206.stride = 0;
        v218 = g206.divisor;
        g206.divisor = 0;
        v220 = v9.vert;
        v9.vert = g219;
        v222 = v9.frag;
        v9.frag = g221;
        v5.dirty = true;
        a1(v2, a0, a2);
        v13.next = v137;
        v2.framebufferWidth = v138;
        v2.framebufferHeight = v139;
        v2.viewportWidth = v142;
        v2.viewportHeight = v143;
        v39[0] = v145;
        v39[1] = v147;
        v39[2] = v148;
        v39[3] = v149;
        v4.blend_enable = v151;
        v19[0] = v153;
        v19[1] = v155;
        v21[0] = v157;
        v21[1] = v159;
        v21[2] = v161;
        v21[3] = v163;
        v4.depth_enable = v165;
        v4.depth_mask = v167;
        v37[0] = v171;
        v37[1] = v173;
        v37[2] = v174;
        v37[3] = v175;
        v4.stencil_enable = v177;
        if (v178) {
          g48.cpuTime += performance.now() - v179;
        }
        v6.count = v181;
        v6.primitive = v183;
        v12[g185] = v186;
        v12[g188] = v189;
        v12[g191] = v192;
        v12[g194] = v195;
        v12[g197] = v198;
        v12[g200] = v201;
        v12[g204] = v205;
        g206.state = v207;
        g206.x = v208;
        g206.y = v209;
        g206.z = v210;
        g206.w = v211;
        g206.buffer = v212;
        g206.size = v213;
        g206.normalized = v214;
        g206.type = v215;
        g206.offset = v216;
        g206.stride = v217;
        g206.divisor = v218;
        v9.vert = v220;
        v9.frag = v222;
        v5.dirty = true;
      },
      "batch": function(a0, a1) {
        var v224, v225, v226, v227, v228, v265, v266, v267, v268, v272, v273, v275, v276, v277, v278, v279;
        v14.angle_instanced_arrays;
        v224 = g50.call(this, v2, a0, 0);
        v225 = v13.getFramebuffer(v224);
        v226 = v13.next;
        v13.next = v225;
        v227 = v2.framebufferWidth;
        v2.framebufferWidth = v225 ? v225.width : v2.drawingBufferWidth;
        v228 = v2.framebufferHeight;
        v2.framebufferHeight = v225 ? v225.height : v2.drawingBufferHeight;
        if (v225 !== v13.cur) {
          if (v225) {
            v1.bindFramebuffer(36160, v225.framebuffer);
          } else {
            v1.bindFramebuffer(36160, null);
          }
          v13.cur = v225;
        }
        if (v5.dirty) {
          var v229, v230, v231, v232, v233, v234, v235, v236, v237, v238, v239, v240, v241, v242, v243, v244, v245, v246, v247, v248, v249, v250, v251, v252, v253, v254, v255, v256, v257, v258, v259, v260, v261, v262, v263, v264;
          v229 = v4.dither;
          if (v229 !== v5.dither) {
            if (v229) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v229;
          }
          v230 = v17[0];
          v231 = v17[1];
          v232 = v17[2];
          v233 = v17[3];
          if (v230 !== v18[0] || v231 !== v18[1] || v232 !== v18[2] || v233 !== v18[3]) {
            v1.blendColor(v230, v231, v232, v233);
            v18[0] = v230;
            v18[1] = v231;
            v18[2] = v232;
            v18[3] = v233;
          }
          v234 = v4.depth_func;
          if (v234 !== v5.depth_func) {
            v1.depthFunc(v234);
            v5.depth_func = v234;
          }
          v235 = v23[0];
          v236 = v23[1];
          if (v235 !== v24[0] || v236 !== v24[1]) {
            v1.depthRange(v235, v236);
            v24[0] = v235;
            v24[1] = v236;
          }
          v237 = v25[0];
          v238 = v25[1];
          v239 = v25[2];
          v240 = v25[3];
          if (v237 !== v26[0] || v238 !== v26[1] || v239 !== v26[2] || v240 !== v26[3]) {
            v1.colorMask(v237, v238, v239, v240);
            v26[0] = v237;
            v26[1] = v238;
            v26[2] = v239;
            v26[3] = v240;
          }
          v241 = v4.cull_enable;
          if (v241 !== v5.cull_enable) {
            if (v241) {
              v1.enable(2884);
            } else {
              v1.disable(2884);
            }
            v5.cull_enable = v241;
          }
          v242 = v4.cull_face;
          if (v242 !== v5.cull_face) {
            v1.cullFace(v242);
            v5.cull_face = v242;
          }
          v243 = v4.frontFace;
          if (v243 !== v5.frontFace) {
            v1.frontFace(v243);
            v5.frontFace = v243;
          }
          v244 = v4.lineWidth;
          if (v244 !== v5.lineWidth) {
            v1.lineWidth(v244);
            v5.lineWidth = v244;
          }
          v245 = v4.polygonOffset_enable;
          if (v245 !== v5.polygonOffset_enable) {
            if (v245) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v245;
          }
          v246 = v27[0];
          v247 = v27[1];
          if (v246 !== v28[0] || v247 !== v28[1]) {
            v1.polygonOffset(v246, v247);
            v28[0] = v246;
            v28[1] = v247;
          }
          v248 = v4.sample_alpha;
          if (v248 !== v5.sample_alpha) {
            if (v248) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v248;
          }
          v249 = v4.sample_enable;
          if (v249 !== v5.sample_enable) {
            if (v249) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v249;
          }
          v250 = v29[0];
          v251 = v29[1];
          if (v250 !== v30[0] || v251 !== v30[1]) {
            v1.sampleCoverage(v250, v251);
            v30[0] = v250;
            v30[1] = v251;
          }
          v252 = v4.stencil_mask;
          if (v252 !== v5.stencil_mask) {
            v1.stencilMask(v252);
            v5.stencil_mask = v252;
          }
          v253 = v31[0];
          v254 = v31[1];
          v255 = v31[2];
          if (v253 !== v32[0] || v254 !== v32[1] || v255 !== v32[2]) {
            v1.stencilFunc(v253, v254, v255);
            v32[0] = v253;
            v32[1] = v254;
            v32[2] = v255;
          }
          v256 = v33[0];
          v257 = v33[1];
          v258 = v33[2];
          v259 = v33[3];
          if (v256 !== v34[0] || v257 !== v34[1] || v258 !== v34[2] || v259 !== v34[3]) {
            v1.stencilOpSeparate(v256, v257, v258, v259);
            v34[0] = v256;
            v34[1] = v257;
            v34[2] = v258;
            v34[3] = v259;
          }
          v260 = v35[0];
          v261 = v35[1];
          v262 = v35[2];
          v263 = v35[3];
          if (v260 !== v36[0] || v261 !== v36[1] || v262 !== v36[2] || v263 !== v36[3]) {
            v1.stencilOpSeparate(v260, v261, v262, v263);
            v36[0] = v260;
            v36[1] = v261;
            v36[2] = v262;
            v36[3] = v263;
          }
          v264 = v4.scissor_enable;
          if (v264 !== v5.scissor_enable) {
            if (v264) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v264;
          }
        }
        v265 = v2.framebufferWidth;
        v266 = v2.framebufferHeight;
        v267 = v2.viewportWidth;
        v2.viewportWidth = v265;
        v268 = v2.viewportHeight;
        v2.viewportHeight = v266;
        v1.viewport(0, 0, v265, v266);
        v40[0] = 0;
        v40[1] = 0;
        v40[2] = v265;
        v40[3] = v266;
        if (g269) {
          v1.enable(3042);
        } else {
          v1.disable(3042);
        }
        v5.blend_enable = g269;
        v1.blendEquationSeparate(32774, 32774);
        v20[0] = 32774;
        v20[1] = 32774;
        v1.blendFuncSeparate(1, 1, 1, 1);
        v22[0] = 1;
        v22[1] = 1;
        v22[2] = 1;
        v22[3] = 1;
        if (g270) {
          v1.enable(2929);
        } else {
          v1.disable(2929);
        }
        v5.depth_enable = g270;
        v1.depthMask(g271);
        v5.depth_mask = g271;
        v272 = v2.framebufferWidth;
        v273 = v2.framebufferHeight;
        v1.scissor(0, 0, v272, v273);
        v38[0] = 0;
        v38[1] = 0;
        v38[2] = v272;
        v38[3] = v273;
        if (g274) {
          v1.enable(2960);
        } else {
          v1.disable(2960);
        }
        v5.stencil_enable = g274;
        v275 = v5.profile;
        if (v275) {
          v276 = performance.now();
          g48.count += a1;
        }
        v1.useProgram(g104.program);
        v277 = v14.angle_instanced_arrays;
        var v280, v281, v282, v283, v284, v285, v286, v287, v288, v293, v294, v295;
        v11.setVAO(null);
        v280 = g107.location;
        v281 = v10[v280];
        if (!v281.buffer) {
          v1.enableVertexAttribArray(v280);
        }
        v282 = 2;
        if (v281.type !== 5126 || v281.size !== v282 || v281.buffer !== g106 || v281.normalized !== false || v281.offset !== 0 || v281.stride !== 0) {
          v1.bindBuffer(34962, g106.buffer);
          v1.vertexAttribPointer(v280, v282, 5126, false, 0, 0);
          v281.type = 5126;
          v281.size = v282;
          v281.buffer = g106;
          v281.normalized = false;
          v281.offset = 0;
          v281.stride = 0;
        }
        if (v281.divisor !== 0) {
          v277.vertexAttribDivisorANGLE(v280, 0);
          v281.divisor = 0;
        }
        v283 = g112.call(this, v2, v279, v278);
        v1.uniform1f(g111.location, v283);
        v284 = g122.call(this, v2, v279, v278);
        if (v284 && v284._reglType === "framebuffer") {
          v284 = v284.color[0];
        }
        v285 = v284._texture;
        v1.uniform1i(g121.location, v285.bind());
        v286 = g126.call(this, v2, v279, v278);
        if (v286 && v286._reglType === "framebuffer") {
          v286 = v286.color[0];
        }
        v287 = v286._texture;
        v1.uniform1i(g125.location, v287.bind());
        v288 = g130.call(this, v2, v279, v278);
        v1.uniform1f(g129.location, v288);
        v293 = v6.elements;
        if (v293) {
          v1.bindBuffer(34963, v293.buffer.buffer);
        } else if (v11.currentVAO) {
          v293 = v7.getElements(v11.currentVAO.elements);
          if (v293)
            v1.bindBuffer(34963, v293.buffer.buffer);
        }
        v294 = v6.offset;
        v295 = v6.instances;
        for (v278 = 0; v278 < a1; ++v278) {
          v279 = a0[v278];
          var v289, v290, v291, v292;
          v289 = g115.call(this, v2, v279, v278);
          if (v289 && v289._reglType === "framebuffer") {
            v289 = v289.color[0];
          }
          v290 = v289._texture;
          v1.uniform1i(g114.location, v290.bind());
          v291 = g119.call(this, v2, v279, v278);
          if (!v278 || v292 !== v291) {
            v292 = v291;
            v1.uniform1f(g118.location, v291);
          }
          if (v295 > 0) {
            if (v293) {
              v277.drawElementsInstancedANGLE(5, 4, v293.type, v294 << (v293.type - 5121 >> 1), v295);
            } else {
              v277.drawArraysInstancedANGLE(5, v294, 4, v295);
            }
          } else if (v295 < 0) {
            if (v293) {
              v1.drawElements(5, 4, v293.type, v294 << (v293.type - 5121 >> 1));
            } else {
              v1.drawArrays(5, v294, 4);
            }
          }
          v290.unbind();
        }
        v285.unbind();
        v287.unbind();
        v5.dirty = true;
        v11.setVAO(null);
        v13.next = v226;
        v2.framebufferWidth = v227;
        v2.framebufferHeight = v228;
        v2.viewportWidth = v267;
        v2.viewportHeight = v268;
        if (v275) {
          g48.cpuTime += performance.now() - v276;
        }
      }
    };
  },
  "4c49c9fbc540a4c73ceaba3ffddb6429d780830bc23a82ffeb3dbfe550c35fdb": function anonymous21(g0, g48, g50, g96, g97, g98, g101, g104, g106, g107, g111, g112, g114, g115, g120, g132, g134, g138, g140, g142, g144, g146, g148, g150, g152, g154, g158, g160, g164, g170, g173, g176, g178, g191, g193, g241, g242, g243, g246) {
    var v1, v2, v4, v5, v6, v7, v9, v10, v11, v12, v13, v14, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40;
    v1 = g0.gl;
    v2 = g0.context;
    g0.strings;
    v4 = g0.next;
    v5 = g0.current;
    v6 = g0.draw;
    v7 = g0.elements;
    g0.buffer;
    v9 = g0.shader;
    v10 = g0.attributes;
    v11 = g0.vao;
    v12 = g0.uniforms;
    v13 = g0.framebuffer;
    v14 = g0.extensions;
    g0.timer;
    g0.isBufferArgs;
    v17 = v4.blend_color;
    v18 = v5.blend_color;
    v19 = v4.blend_equation;
    v20 = v5.blend_equation;
    v21 = v4.blend_func;
    v22 = v5.blend_func;
    v23 = v4.depth_range;
    v24 = v5.depth_range;
    v25 = v4.colorMask;
    v26 = v5.colorMask;
    v27 = v4.polygonOffset_offset;
    v28 = v5.polygonOffset_offset;
    v29 = v4.sample_coverage;
    v30 = v5.sample_coverage;
    v31 = v4.stencil_func;
    v32 = v5.stencil_func;
    v33 = v4.stencil_opFront;
    v34 = v5.stencil_opFront;
    v35 = v4.stencil_opBack;
    v36 = v5.stencil_opBack;
    v37 = v4.scissor_box;
    v38 = v5.scissor_box;
    v39 = v4.viewport;
    v40 = v5.viewport;
    return {
      "draw": function(a0) {
        var v51, v52, v53, v54, v55, v92, v93, v94, v95, v99, v100, v102, v103, v105, v108, v109, v110, v113, v116, v117, v118, v119, v121, v122;
        v14.angle_instanced_arrays;
        v51 = g50.call(this, v2, a0, 0);
        v52 = v13.getFramebuffer(v51);
        v53 = v13.next;
        v13.next = v52;
        v54 = v2.framebufferWidth;
        v2.framebufferWidth = v52 ? v52.width : v2.drawingBufferWidth;
        v55 = v2.framebufferHeight;
        v2.framebufferHeight = v52 ? v52.height : v2.drawingBufferHeight;
        if (v52 !== v13.cur) {
          if (v52) {
            v1.bindFramebuffer(36160, v52.framebuffer);
          } else {
            v1.bindFramebuffer(36160, null);
          }
          v13.cur = v52;
        }
        if (v5.dirty) {
          var v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90, v91;
          v56 = v4.dither;
          if (v56 !== v5.dither) {
            if (v56) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v56;
          }
          v57 = v17[0];
          v58 = v17[1];
          v59 = v17[2];
          v60 = v17[3];
          if (v57 !== v18[0] || v58 !== v18[1] || v59 !== v18[2] || v60 !== v18[3]) {
            v1.blendColor(v57, v58, v59, v60);
            v18[0] = v57;
            v18[1] = v58;
            v18[2] = v59;
            v18[3] = v60;
          }
          v61 = v4.depth_func;
          if (v61 !== v5.depth_func) {
            v1.depthFunc(v61);
            v5.depth_func = v61;
          }
          v62 = v23[0];
          v63 = v23[1];
          if (v62 !== v24[0] || v63 !== v24[1]) {
            v1.depthRange(v62, v63);
            v24[0] = v62;
            v24[1] = v63;
          }
          v64 = v25[0];
          v65 = v25[1];
          v66 = v25[2];
          v67 = v25[3];
          if (v64 !== v26[0] || v65 !== v26[1] || v66 !== v26[2] || v67 !== v26[3]) {
            v1.colorMask(v64, v65, v66, v67);
            v26[0] = v64;
            v26[1] = v65;
            v26[2] = v66;
            v26[3] = v67;
          }
          v68 = v4.cull_enable;
          if (v68 !== v5.cull_enable) {
            if (v68) {
              v1.enable(2884);
            } else {
              v1.disable(2884);
            }
            v5.cull_enable = v68;
          }
          v69 = v4.cull_face;
          if (v69 !== v5.cull_face) {
            v1.cullFace(v69);
            v5.cull_face = v69;
          }
          v70 = v4.frontFace;
          if (v70 !== v5.frontFace) {
            v1.frontFace(v70);
            v5.frontFace = v70;
          }
          v71 = v4.lineWidth;
          if (v71 !== v5.lineWidth) {
            v1.lineWidth(v71);
            v5.lineWidth = v71;
          }
          v72 = v4.polygonOffset_enable;
          if (v72 !== v5.polygonOffset_enable) {
            if (v72) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v72;
          }
          v73 = v27[0];
          v74 = v27[1];
          if (v73 !== v28[0] || v74 !== v28[1]) {
            v1.polygonOffset(v73, v74);
            v28[0] = v73;
            v28[1] = v74;
          }
          v75 = v4.sample_alpha;
          if (v75 !== v5.sample_alpha) {
            if (v75) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v75;
          }
          v76 = v4.sample_enable;
          if (v76 !== v5.sample_enable) {
            if (v76) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v76;
          }
          v77 = v29[0];
          v78 = v29[1];
          if (v77 !== v30[0] || v78 !== v30[1]) {
            v1.sampleCoverage(v77, v78);
            v30[0] = v77;
            v30[1] = v78;
          }
          v79 = v4.stencil_mask;
          if (v79 !== v5.stencil_mask) {
            v1.stencilMask(v79);
            v5.stencil_mask = v79;
          }
          v80 = v31[0];
          v81 = v31[1];
          v82 = v31[2];
          if (v80 !== v32[0] || v81 !== v32[1] || v82 !== v32[2]) {
            v1.stencilFunc(v80, v81, v82);
            v32[0] = v80;
            v32[1] = v81;
            v32[2] = v82;
          }
          v83 = v33[0];
          v84 = v33[1];
          v85 = v33[2];
          v86 = v33[3];
          if (v83 !== v34[0] || v84 !== v34[1] || v85 !== v34[2] || v86 !== v34[3]) {
            v1.stencilOpSeparate(v83, v84, v85, v86);
            v34[0] = v83;
            v34[1] = v84;
            v34[2] = v85;
            v34[3] = v86;
          }
          v87 = v35[0];
          v88 = v35[1];
          v89 = v35[2];
          v90 = v35[3];
          if (v87 !== v36[0] || v88 !== v36[1] || v89 !== v36[2] || v90 !== v36[3]) {
            v1.stencilOpSeparate(v87, v88, v89, v90);
            v36[0] = v87;
            v36[1] = v88;
            v36[2] = v89;
            v36[3] = v90;
          }
          v91 = v4.scissor_enable;
          if (v91 !== v5.scissor_enable) {
            if (v91) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v91;
          }
        }
        v92 = v2.framebufferWidth;
        v93 = v2.framebufferHeight;
        v94 = v2.viewportWidth;
        v2.viewportWidth = v92;
        v95 = v2.viewportHeight;
        v2.viewportHeight = v93;
        v1.viewport(0, 0, v92, v93);
        v40[0] = 0;
        v40[1] = 0;
        v40[2] = v92;
        v40[3] = v93;
        if (g96) {
          v1.enable(3042);
        } else {
          v1.disable(3042);
        }
        v5.blend_enable = g96;
        v1.blendEquationSeparate(32774, 32774);
        v20[0] = 32774;
        v20[1] = 32774;
        v1.blendFuncSeparate(1, 1, 1, 1);
        v22[0] = 1;
        v22[1] = 1;
        v22[2] = 1;
        v22[3] = 1;
        if (g97) {
          v1.enable(2929);
        } else {
          v1.disable(2929);
        }
        v5.depth_enable = g97;
        v1.depthMask(g98);
        v5.depth_mask = g98;
        v99 = v2.framebufferWidth;
        v100 = v2.framebufferHeight;
        v1.scissor(0, 0, v99, v100);
        v38[0] = 0;
        v38[1] = 0;
        v38[2] = v99;
        v38[3] = v100;
        if (g101) {
          v1.enable(2960);
        } else {
          v1.disable(2960);
        }
        v5.stencil_enable = g101;
        v102 = v5.profile;
        if (v102) {
          v103 = performance.now();
          g48.count++;
        }
        v1.useProgram(g104.program);
        v105 = v14.angle_instanced_arrays;
        v11.setVAO(null);
        v108 = g107.location;
        v109 = v10[v108];
        if (!v109.buffer) {
          v1.enableVertexAttribArray(v108);
        }
        v110 = 2;
        if (v109.type !== 5126 || v109.size !== v110 || v109.buffer !== g106 || v109.normalized !== false || v109.offset !== 0 || v109.stride !== 0) {
          v1.bindBuffer(34962, g106.buffer);
          v1.vertexAttribPointer(v108, v110, 5126, false, 0, 0);
          v109.type = 5126;
          v109.size = v110;
          v109.buffer = g106;
          v109.normalized = false;
          v109.offset = 0;
          v109.stride = 0;
        }
        if (v109.divisor !== 0) {
          v105.vertexAttribDivisorANGLE(v108, 0);
          v109.divisor = 0;
        }
        v113 = g112.call(this, v2, a0, 0);
        v1.uniform1f(g111.location, v113);
        v116 = g115.call(this, v2, a0, 0);
        if (v116 && v116._reglType === "framebuffer") {
          v116 = v116.color[0];
        }
        v117 = v116._texture;
        v1.uniform1i(g114.location, v117.bind());
        v118 = v6.elements;
        if (v118) {
          v1.bindBuffer(34963, v118.buffer.buffer);
        } else if (v11.currentVAO) {
          v118 = v7.getElements(v11.currentVAO.elements);
          if (v118)
            v1.bindBuffer(34963, v118.buffer.buffer);
        }
        v119 = v6.offset;
        v121 = g120.call(this, v2, a0, 0);
        if (v121) {
          v122 = v6.instances;
          if (v122 > 0) {
            if (v118) {
              v105.drawElementsInstancedANGLE(0, v121, v118.type, v119 << (v118.type - 5121 >> 1), v122);
            } else {
              v105.drawArraysInstancedANGLE(0, v119, v121, v122);
            }
          } else if (v122 < 0) {
            if (v118) {
              v1.drawElements(0, v121, v118.type, v119 << (v118.type - 5121 >> 1));
            } else {
              v1.drawArrays(0, v119, v121);
            }
          }
          v5.dirty = true;
          v11.setVAO(null);
          v13.next = v53;
          v2.framebufferWidth = v54;
          v2.framebufferHeight = v55;
          v2.viewportWidth = v94;
          v2.viewportHeight = v95;
          if (v102) {
            g48.cpuTime += performance.now() - v103;
          }
          v117.unbind();
        }
      },
      "scope": function(a0, a1, a2) {
        var v123, v124, v125, v126, v127, v128, v129, v130, v131, v133, v135, v136, v137, v139, v141, v143, v145, v147, v149, v151, v153, v155, v156, v157, v159, v161, v162, v163, v165, v166, v167, v168, v169, v171, v172, v174, v175, v177, v179, v180, v181, v182, v183, v184, v185, v186, v187, v188, v189, v190, v192, v194;
        v123 = g50.call(this, v2, a0, a2);
        v124 = v13.getFramebuffer(v123);
        v125 = v13.next;
        v13.next = v124;
        v126 = v2.framebufferWidth;
        v2.framebufferWidth = v124 ? v124.width : v2.drawingBufferWidth;
        v127 = v2.framebufferHeight;
        v2.framebufferHeight = v124 ? v124.height : v2.drawingBufferHeight;
        v128 = v2.framebufferWidth;
        v129 = v2.framebufferHeight;
        v130 = v2.viewportWidth;
        v2.viewportWidth = v128;
        v131 = v2.viewportHeight;
        v2.viewportHeight = v129;
        v133 = v39[0];
        v39[0] = g132;
        v135 = v39[1];
        v39[1] = g134;
        v136 = v39[2];
        v39[2] = v128;
        v137 = v39[3];
        v39[3] = v129;
        v139 = v4.blend_enable;
        v4.blend_enable = g138;
        v141 = v19[0];
        v19[0] = g140;
        v143 = v19[1];
        v19[1] = g142;
        v145 = v21[0];
        v21[0] = g144;
        v147 = v21[1];
        v21[1] = g146;
        v149 = v21[2];
        v21[2] = g148;
        v151 = v21[3];
        v21[3] = g150;
        v153 = v4.depth_enable;
        v4.depth_enable = g152;
        v155 = v4.depth_mask;
        v4.depth_mask = g154;
        v156 = v2.framebufferWidth;
        v157 = v2.framebufferHeight;
        v159 = v37[0];
        v37[0] = g158;
        v161 = v37[1];
        v37[1] = g160;
        v162 = v37[2];
        v37[2] = v156;
        v163 = v37[3];
        v37[3] = v157;
        v165 = v4.stencil_enable;
        v4.stencil_enable = g164;
        v166 = v5.profile;
        if (v166) {
          v167 = performance.now();
          g48.count++;
        }
        v168 = g120.call(this, v2, a0, a2);
        v169 = v6.count;
        v6.count = v168;
        v171 = v6.primitive;
        v6.primitive = g170;
        v172 = g115.call(this, v2, a0, a2);
        v174 = v12[g173];
        v12[g173] = v172;
        v175 = g112.call(this, v2, a0, a2);
        v177 = v12[g176];
        v12[g176] = v175;
        v179 = g178.state;
        g178.state = 1;
        v180 = g178.x;
        g178.x = 0;
        v181 = g178.y;
        g178.y = 0;
        v182 = g178.z;
        g178.z = 0;
        v183 = g178.w;
        g178.w = 0;
        v184 = g178.buffer;
        g178.buffer = g106;
        v185 = g178.size;
        g178.size = 2;
        v186 = g178.normalized;
        g178.normalized = false;
        v187 = g178.type;
        g178.type = 5126;
        v188 = g178.offset;
        g178.offset = 0;
        v189 = g178.stride;
        g178.stride = 0;
        v190 = g178.divisor;
        g178.divisor = 0;
        v192 = v9.vert;
        v9.vert = g191;
        v194 = v9.frag;
        v9.frag = g193;
        v5.dirty = true;
        a1(v2, a0, a2);
        v13.next = v125;
        v2.framebufferWidth = v126;
        v2.framebufferHeight = v127;
        v2.viewportWidth = v130;
        v2.viewportHeight = v131;
        v39[0] = v133;
        v39[1] = v135;
        v39[2] = v136;
        v39[3] = v137;
        v4.blend_enable = v139;
        v19[0] = v141;
        v19[1] = v143;
        v21[0] = v145;
        v21[1] = v147;
        v21[2] = v149;
        v21[3] = v151;
        v4.depth_enable = v153;
        v4.depth_mask = v155;
        v37[0] = v159;
        v37[1] = v161;
        v37[2] = v162;
        v37[3] = v163;
        v4.stencil_enable = v165;
        if (v166) {
          g48.cpuTime += performance.now() - v167;
        }
        v6.count = v169;
        v6.primitive = v171;
        v12[g173] = v174;
        v12[g176] = v177;
        g178.state = v179;
        g178.x = v180;
        g178.y = v181;
        g178.z = v182;
        g178.w = v183;
        g178.buffer = v184;
        g178.size = v185;
        g178.normalized = v186;
        g178.type = v187;
        g178.offset = v188;
        g178.stride = v189;
        g178.divisor = v190;
        v9.vert = v192;
        v9.frag = v194;
        v5.dirty = true;
      },
      "batch": function(a0, a1) {
        var v196, v197, v198, v199, v200, v237, v238, v239, v240, v244, v245, v247, v248, v249, v250, v251;
        v14.angle_instanced_arrays;
        v196 = g50.call(this, v2, a0, 0);
        v197 = v13.getFramebuffer(v196);
        v198 = v13.next;
        v13.next = v197;
        v199 = v2.framebufferWidth;
        v2.framebufferWidth = v197 ? v197.width : v2.drawingBufferWidth;
        v200 = v2.framebufferHeight;
        v2.framebufferHeight = v197 ? v197.height : v2.drawingBufferHeight;
        if (v197 !== v13.cur) {
          if (v197) {
            v1.bindFramebuffer(36160, v197.framebuffer);
          } else {
            v1.bindFramebuffer(36160, null);
          }
          v13.cur = v197;
        }
        if (v5.dirty) {
          var v201, v202, v203, v204, v205, v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, v220, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, v235, v236;
          v201 = v4.dither;
          if (v201 !== v5.dither) {
            if (v201) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v201;
          }
          v202 = v17[0];
          v203 = v17[1];
          v204 = v17[2];
          v205 = v17[3];
          if (v202 !== v18[0] || v203 !== v18[1] || v204 !== v18[2] || v205 !== v18[3]) {
            v1.blendColor(v202, v203, v204, v205);
            v18[0] = v202;
            v18[1] = v203;
            v18[2] = v204;
            v18[3] = v205;
          }
          v206 = v4.depth_func;
          if (v206 !== v5.depth_func) {
            v1.depthFunc(v206);
            v5.depth_func = v206;
          }
          v207 = v23[0];
          v208 = v23[1];
          if (v207 !== v24[0] || v208 !== v24[1]) {
            v1.depthRange(v207, v208);
            v24[0] = v207;
            v24[1] = v208;
          }
          v209 = v25[0];
          v210 = v25[1];
          v211 = v25[2];
          v212 = v25[3];
          if (v209 !== v26[0] || v210 !== v26[1] || v211 !== v26[2] || v212 !== v26[3]) {
            v1.colorMask(v209, v210, v211, v212);
            v26[0] = v209;
            v26[1] = v210;
            v26[2] = v211;
            v26[3] = v212;
          }
          v213 = v4.cull_enable;
          if (v213 !== v5.cull_enable) {
            if (v213) {
              v1.enable(2884);
            } else {
              v1.disable(2884);
            }
            v5.cull_enable = v213;
          }
          v214 = v4.cull_face;
          if (v214 !== v5.cull_face) {
            v1.cullFace(v214);
            v5.cull_face = v214;
          }
          v215 = v4.frontFace;
          if (v215 !== v5.frontFace) {
            v1.frontFace(v215);
            v5.frontFace = v215;
          }
          v216 = v4.lineWidth;
          if (v216 !== v5.lineWidth) {
            v1.lineWidth(v216);
            v5.lineWidth = v216;
          }
          v217 = v4.polygonOffset_enable;
          if (v217 !== v5.polygonOffset_enable) {
            if (v217) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v217;
          }
          v218 = v27[0];
          v219 = v27[1];
          if (v218 !== v28[0] || v219 !== v28[1]) {
            v1.polygonOffset(v218, v219);
            v28[0] = v218;
            v28[1] = v219;
          }
          v220 = v4.sample_alpha;
          if (v220 !== v5.sample_alpha) {
            if (v220) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v220;
          }
          v221 = v4.sample_enable;
          if (v221 !== v5.sample_enable) {
            if (v221) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v221;
          }
          v222 = v29[0];
          v223 = v29[1];
          if (v222 !== v30[0] || v223 !== v30[1]) {
            v1.sampleCoverage(v222, v223);
            v30[0] = v222;
            v30[1] = v223;
          }
          v224 = v4.stencil_mask;
          if (v224 !== v5.stencil_mask) {
            v1.stencilMask(v224);
            v5.stencil_mask = v224;
          }
          v225 = v31[0];
          v226 = v31[1];
          v227 = v31[2];
          if (v225 !== v32[0] || v226 !== v32[1] || v227 !== v32[2]) {
            v1.stencilFunc(v225, v226, v227);
            v32[0] = v225;
            v32[1] = v226;
            v32[2] = v227;
          }
          v228 = v33[0];
          v229 = v33[1];
          v230 = v33[2];
          v231 = v33[3];
          if (v228 !== v34[0] || v229 !== v34[1] || v230 !== v34[2] || v231 !== v34[3]) {
            v1.stencilOpSeparate(v228, v229, v230, v231);
            v34[0] = v228;
            v34[1] = v229;
            v34[2] = v230;
            v34[3] = v231;
          }
          v232 = v35[0];
          v233 = v35[1];
          v234 = v35[2];
          v235 = v35[3];
          if (v232 !== v36[0] || v233 !== v36[1] || v234 !== v36[2] || v235 !== v36[3]) {
            v1.stencilOpSeparate(v232, v233, v234, v235);
            v36[0] = v232;
            v36[1] = v233;
            v36[2] = v234;
            v36[3] = v235;
          }
          v236 = v4.scissor_enable;
          if (v236 !== v5.scissor_enable) {
            if (v236) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v236;
          }
        }
        v237 = v2.framebufferWidth;
        v238 = v2.framebufferHeight;
        v239 = v2.viewportWidth;
        v2.viewportWidth = v237;
        v240 = v2.viewportHeight;
        v2.viewportHeight = v238;
        v1.viewport(0, 0, v237, v238);
        v40[0] = 0;
        v40[1] = 0;
        v40[2] = v237;
        v40[3] = v238;
        if (g241) {
          v1.enable(3042);
        } else {
          v1.disable(3042);
        }
        v5.blend_enable = g241;
        v1.blendEquationSeparate(32774, 32774);
        v20[0] = 32774;
        v20[1] = 32774;
        v1.blendFuncSeparate(1, 1, 1, 1);
        v22[0] = 1;
        v22[1] = 1;
        v22[2] = 1;
        v22[3] = 1;
        if (g242) {
          v1.enable(2929);
        } else {
          v1.disable(2929);
        }
        v5.depth_enable = g242;
        v1.depthMask(g243);
        v5.depth_mask = g243;
        v244 = v2.framebufferWidth;
        v245 = v2.framebufferHeight;
        v1.scissor(0, 0, v244, v245);
        v38[0] = 0;
        v38[1] = 0;
        v38[2] = v244;
        v38[3] = v245;
        if (g246) {
          v1.enable(2960);
        } else {
          v1.disable(2960);
        }
        v5.stencil_enable = g246;
        v247 = v5.profile;
        if (v247) {
          v248 = performance.now();
          g48.count += a1;
        }
        v1.useProgram(g104.program);
        v249 = v14.angle_instanced_arrays;
        var v252, v253, v254, v255, v256, v257, v258, v259, v260, v261;
        v11.setVAO(null);
        v252 = g107.location;
        v253 = v10[v252];
        if (!v253.buffer) {
          v1.enableVertexAttribArray(v252);
        }
        v254 = 2;
        if (v253.type !== 5126 || v253.size !== v254 || v253.buffer !== g106 || v253.normalized !== false || v253.offset !== 0 || v253.stride !== 0) {
          v1.bindBuffer(34962, g106.buffer);
          v1.vertexAttribPointer(v252, v254, 5126, false, 0, 0);
          v253.type = 5126;
          v253.size = v254;
          v253.buffer = g106;
          v253.normalized = false;
          v253.offset = 0;
          v253.stride = 0;
        }
        if (v253.divisor !== 0) {
          v249.vertexAttribDivisorANGLE(v252, 0);
          v253.divisor = 0;
        }
        v255 = g112.call(this, v2, v251, v250);
        v1.uniform1f(g111.location, v255);
        v256 = g115.call(this, v2, v251, v250);
        if (v256 && v256._reglType === "framebuffer") {
          v256 = v256.color[0];
        }
        v257 = v256._texture;
        v1.uniform1i(g114.location, v257.bind());
        v258 = v6.elements;
        if (v258) {
          v1.bindBuffer(34963, v258.buffer.buffer);
        } else if (v11.currentVAO) {
          v258 = v7.getElements(v11.currentVAO.elements);
          if (v258)
            v1.bindBuffer(34963, v258.buffer.buffer);
        }
        v259 = v6.offset;
        v260 = g120.call(this, v2, v251, v250);
        v261 = v6.instances;
        for (v250 = 0; v250 < a1; ++v250) {
          v251 = a0[v250];
          if (v260) {
            if (v261 > 0) {
              if (v258) {
                v249.drawElementsInstancedANGLE(0, v260, v258.type, v259 << (v258.type - 5121 >> 1), v261);
              } else {
                v249.drawArraysInstancedANGLE(0, v259, v260, v261);
              }
            } else if (v261 < 0) {
              if (v258) {
                v1.drawElements(0, v260, v258.type, v259 << (v258.type - 5121 >> 1));
              } else {
                v1.drawArrays(0, v259, v260);
              }
            }
          }
        }
        v257.unbind();
        v5.dirty = true;
        v11.setVAO(null);
        v13.next = v198;
        v2.framebufferWidth = v199;
        v2.framebufferHeight = v200;
        v2.viewportWidth = v239;
        v2.viewportHeight = v240;
        if (v247) {
          g48.cpuTime += performance.now() - v248;
        }
      }
    };
  },
  "21f35e0b5f6b6b998967928bf1cb4872a9803004bf6455ca860fe126500cf347": function anonymous22(g0, g48, g50, g110, g112, g113, g117, g118, g120, g121, g123, g124, g127, g128, g143, g145, g151, g153, g159, g161, g164, g167, g170, g173, g175, g188, g190) {
    var v1, v2, v4, v5, v6, v7, v9, v10, v11, v12, v13, v14, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40;
    v1 = g0.gl;
    v2 = g0.context;
    g0.strings;
    v4 = g0.next;
    v5 = g0.current;
    v6 = g0.draw;
    v7 = g0.elements;
    g0.buffer;
    v9 = g0.shader;
    v10 = g0.attributes;
    v11 = g0.vao;
    v12 = g0.uniforms;
    v13 = g0.framebuffer;
    v14 = g0.extensions;
    g0.timer;
    g0.isBufferArgs;
    v17 = v4.blend_color;
    v18 = v5.blend_color;
    v19 = v4.blend_equation;
    v20 = v5.blend_equation;
    v21 = v4.blend_func;
    v22 = v5.blend_func;
    v23 = v4.depth_range;
    v24 = v5.depth_range;
    v25 = v4.colorMask;
    v26 = v5.colorMask;
    v27 = v4.polygonOffset_offset;
    v28 = v5.polygonOffset_offset;
    v29 = v4.sample_coverage;
    v30 = v5.sample_coverage;
    v31 = v4.stencil_func;
    v32 = v5.stencil_func;
    v33 = v4.stencil_opFront;
    v34 = v5.stencil_opFront;
    v35 = v4.stencil_opBack;
    v36 = v5.stencil_opBack;
    v37 = v4.scissor_box;
    v38 = v5.scissor_box;
    v39 = v4.viewport;
    v40 = v5.viewport;
    return {
      "draw": function(a0) {
        var v51, v52, v53, v54, v55, v102, v103, v104, v105, v106, v107, v108, v109, v111, v114, v115, v116, v119, v122, v125, v126, v129, v130, v131, v132, v133;
        v14.angle_instanced_arrays;
        v51 = g50.call(this, v2, a0, 0);
        v52 = v13.getFramebuffer(v51);
        v53 = v13.next;
        v13.next = v52;
        v54 = v2.framebufferWidth;
        v2.framebufferWidth = v52 ? v52.width : v2.drawingBufferWidth;
        v55 = v2.framebufferHeight;
        v2.framebufferHeight = v52 ? v52.height : v2.drawingBufferHeight;
        if (v52 !== v13.cur) {
          if (v52) {
            v1.bindFramebuffer(36160, v52.framebuffer);
          } else {
            v1.bindFramebuffer(36160, null);
          }
          v13.cur = v52;
        }
        if (v5.dirty) {
          var v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99, v100, v101;
          v56 = v4.dither;
          if (v56 !== v5.dither) {
            if (v56) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v56;
          }
          v57 = v4.blend_enable;
          if (v57 !== v5.blend_enable) {
            if (v57) {
              v1.enable(3042);
            } else {
              v1.disable(3042);
            }
            v5.blend_enable = v57;
          }
          v58 = v17[0];
          v59 = v17[1];
          v60 = v17[2];
          v61 = v17[3];
          if (v58 !== v18[0] || v59 !== v18[1] || v60 !== v18[2] || v61 !== v18[3]) {
            v1.blendColor(v58, v59, v60, v61);
            v18[0] = v58;
            v18[1] = v59;
            v18[2] = v60;
            v18[3] = v61;
          }
          v62 = v19[0];
          v63 = v19[1];
          if (v62 !== v20[0] || v63 !== v20[1]) {
            v1.blendEquationSeparate(v62, v63);
            v20[0] = v62;
            v20[1] = v63;
          }
          v64 = v21[0];
          v65 = v21[1];
          v66 = v21[2];
          v67 = v21[3];
          if (v64 !== v22[0] || v65 !== v22[1] || v66 !== v22[2] || v67 !== v22[3]) {
            v1.blendFuncSeparate(v64, v65, v66, v67);
            v22[0] = v64;
            v22[1] = v65;
            v22[2] = v66;
            v22[3] = v67;
          }
          v68 = v4.depth_enable;
          if (v68 !== v5.depth_enable) {
            if (v68) {
              v1.enable(2929);
            } else {
              v1.disable(2929);
            }
            v5.depth_enable = v68;
          }
          v69 = v4.depth_func;
          if (v69 !== v5.depth_func) {
            v1.depthFunc(v69);
            v5.depth_func = v69;
          }
          v70 = v23[0];
          v71 = v23[1];
          if (v70 !== v24[0] || v71 !== v24[1]) {
            v1.depthRange(v70, v71);
            v24[0] = v70;
            v24[1] = v71;
          }
          v72 = v4.depth_mask;
          if (v72 !== v5.depth_mask) {
            v1.depthMask(v72);
            v5.depth_mask = v72;
          }
          v73 = v25[0];
          v74 = v25[1];
          v75 = v25[2];
          v76 = v25[3];
          if (v73 !== v26[0] || v74 !== v26[1] || v75 !== v26[2] || v76 !== v26[3]) {
            v1.colorMask(v73, v74, v75, v76);
            v26[0] = v73;
            v26[1] = v74;
            v26[2] = v75;
            v26[3] = v76;
          }
          v77 = v4.cull_enable;
          if (v77 !== v5.cull_enable) {
            if (v77) {
              v1.enable(2884);
            } else {
              v1.disable(2884);
            }
            v5.cull_enable = v77;
          }
          v78 = v4.cull_face;
          if (v78 !== v5.cull_face) {
            v1.cullFace(v78);
            v5.cull_face = v78;
          }
          v79 = v4.frontFace;
          if (v79 !== v5.frontFace) {
            v1.frontFace(v79);
            v5.frontFace = v79;
          }
          v80 = v4.lineWidth;
          if (v80 !== v5.lineWidth) {
            v1.lineWidth(v80);
            v5.lineWidth = v80;
          }
          v81 = v4.polygonOffset_enable;
          if (v81 !== v5.polygonOffset_enable) {
            if (v81) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v81;
          }
          v82 = v27[0];
          v83 = v27[1];
          if (v82 !== v28[0] || v83 !== v28[1]) {
            v1.polygonOffset(v82, v83);
            v28[0] = v82;
            v28[1] = v83;
          }
          v84 = v4.sample_alpha;
          if (v84 !== v5.sample_alpha) {
            if (v84) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v84;
          }
          v85 = v4.sample_enable;
          if (v85 !== v5.sample_enable) {
            if (v85) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v85;
          }
          v86 = v29[0];
          v87 = v29[1];
          if (v86 !== v30[0] || v87 !== v30[1]) {
            v1.sampleCoverage(v86, v87);
            v30[0] = v86;
            v30[1] = v87;
          }
          v88 = v4.stencil_enable;
          if (v88 !== v5.stencil_enable) {
            if (v88) {
              v1.enable(2960);
            } else {
              v1.disable(2960);
            }
            v5.stencil_enable = v88;
          }
          v89 = v4.stencil_mask;
          if (v89 !== v5.stencil_mask) {
            v1.stencilMask(v89);
            v5.stencil_mask = v89;
          }
          v90 = v31[0];
          v91 = v31[1];
          v92 = v31[2];
          if (v90 !== v32[0] || v91 !== v32[1] || v92 !== v32[2]) {
            v1.stencilFunc(v90, v91, v92);
            v32[0] = v90;
            v32[1] = v91;
            v32[2] = v92;
          }
          v93 = v33[0];
          v94 = v33[1];
          v95 = v33[2];
          v96 = v33[3];
          if (v93 !== v34[0] || v94 !== v34[1] || v95 !== v34[2] || v96 !== v34[3]) {
            v1.stencilOpSeparate(v93, v94, v95, v96);
            v34[0] = v93;
            v34[1] = v94;
            v34[2] = v95;
            v34[3] = v96;
          }
          v97 = v35[0];
          v98 = v35[1];
          v99 = v35[2];
          v100 = v35[3];
          if (v97 !== v36[0] || v98 !== v36[1] || v99 !== v36[2] || v100 !== v36[3]) {
            v1.stencilOpSeparate(v97, v98, v99, v100);
            v36[0] = v97;
            v36[1] = v98;
            v36[2] = v99;
            v36[3] = v100;
          }
          v101 = v4.scissor_enable;
          if (v101 !== v5.scissor_enable) {
            if (v101) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v101;
          }
        }
        v102 = v2.framebufferWidth;
        v103 = v2.framebufferHeight;
        v104 = v2.viewportWidth;
        v2.viewportWidth = v102;
        v105 = v2.viewportHeight;
        v2.viewportHeight = v103;
        v1.viewport(0, 0, v102, v103);
        v40[0] = 0;
        v40[1] = 0;
        v40[2] = v102;
        v40[3] = v103;
        v106 = v2.framebufferWidth;
        v107 = v2.framebufferHeight;
        v1.scissor(0, 0, v106, v107);
        v38[0] = 0;
        v38[1] = 0;
        v38[2] = v106;
        v38[3] = v107;
        v108 = v5.profile;
        if (v108) {
          v109 = performance.now();
          g48.count++;
        }
        v1.useProgram(g110.program);
        v111 = v14.angle_instanced_arrays;
        v11.setVAO(null);
        v114 = g113.location;
        v115 = v10[v114];
        if (!v115.buffer) {
          v1.enableVertexAttribArray(v114);
        }
        v116 = 2;
        if (v115.type !== 5126 || v115.size !== v116 || v115.buffer !== g112 || v115.normalized !== false || v115.offset !== 0 || v115.stride !== 0) {
          v1.bindBuffer(34962, g112.buffer);
          v1.vertexAttribPointer(v114, v116, 5126, false, 0, 0);
          v115.type = 5126;
          v115.size = v116;
          v115.buffer = g112;
          v115.normalized = false;
          v115.offset = 0;
          v115.stride = 0;
        }
        if (v115.divisor !== 0) {
          v111.vertexAttribDivisorANGLE(v114, 0);
          v115.divisor = 0;
        }
        v119 = g118.call(this, v2, a0, 0);
        v1.uniform1f(g117.location, v119);
        v122 = g121.call(this, v2, a0, 0);
        v1.uniform1f(g120.location, v122);
        v125 = g124.call(this, v2, a0, 0);
        if (v125 && v125._reglType === "framebuffer") {
          v125 = v125.color[0];
        }
        v126 = v125._texture;
        v1.uniform1i(g123.location, v126.bind());
        v129 = g128.call(this, v2, a0, 0);
        if (v129 && v129._reglType === "framebuffer") {
          v129 = v129.color[0];
        }
        v130 = v129._texture;
        v1.uniform1i(g127.location, v130.bind());
        v131 = v6.elements;
        if (v131) {
          v1.bindBuffer(34963, v131.buffer.buffer);
        } else if (v11.currentVAO) {
          v131 = v7.getElements(v11.currentVAO.elements);
          if (v131)
            v1.bindBuffer(34963, v131.buffer.buffer);
        }
        v132 = v6.offset;
        v133 = v6.instances;
        if (v133 > 0) {
          if (v131) {
            v111.drawElementsInstancedANGLE(5, 4, v131.type, v132 << (v131.type - 5121 >> 1), v133);
          } else {
            v111.drawArraysInstancedANGLE(5, v132, 4, v133);
          }
        } else if (v133 < 0) {
          if (v131) {
            v1.drawElements(5, 4, v131.type, v132 << (v131.type - 5121 >> 1));
          } else {
            v1.drawArrays(5, v132, 4);
          }
        }
        v5.dirty = true;
        v11.setVAO(null);
        v13.next = v53;
        v2.framebufferWidth = v54;
        v2.framebufferHeight = v55;
        v2.viewportWidth = v104;
        v2.viewportHeight = v105;
        if (v108) {
          g48.cpuTime += performance.now() - v109;
        }
        v126.unbind();
        v130.unbind();
      },
      "scope": function(a0, a1, a2) {
        var v134, v135, v136, v137, v138, v139, v140, v141, v142, v144, v146, v147, v148, v149, v150, v152, v154, v155, v156, v157, v158, v160, v162, v163, v165, v166, v168, v169, v171, v172, v174, v176, v177, v178, v179, v180, v181, v182, v183, v184, v185, v186, v187, v189, v191;
        v134 = g50.call(this, v2, a0, a2);
        v135 = v13.getFramebuffer(v134);
        v136 = v13.next;
        v13.next = v135;
        v137 = v2.framebufferWidth;
        v2.framebufferWidth = v135 ? v135.width : v2.drawingBufferWidth;
        v138 = v2.framebufferHeight;
        v2.framebufferHeight = v135 ? v135.height : v2.drawingBufferHeight;
        v139 = v2.framebufferWidth;
        v140 = v2.framebufferHeight;
        v141 = v2.viewportWidth;
        v2.viewportWidth = v139;
        v142 = v2.viewportHeight;
        v2.viewportHeight = v140;
        v144 = v39[0];
        v39[0] = g143;
        v146 = v39[1];
        v39[1] = g145;
        v147 = v39[2];
        v39[2] = v139;
        v148 = v39[3];
        v39[3] = v140;
        v149 = v2.framebufferWidth;
        v150 = v2.framebufferHeight;
        v152 = v37[0];
        v37[0] = g151;
        v154 = v37[1];
        v37[1] = g153;
        v155 = v37[2];
        v37[2] = v149;
        v156 = v37[3];
        v37[3] = v150;
        v157 = v5.profile;
        if (v157) {
          v158 = performance.now();
          g48.count++;
        }
        v160 = v6.count;
        v6.count = g159;
        v162 = v6.primitive;
        v6.primitive = g161;
        v163 = g128.call(this, v2, a0, a2);
        v165 = v12[g164];
        v12[g164] = v163;
        v166 = g124.call(this, v2, a0, a2);
        v168 = v12[g167];
        v12[g167] = v166;
        v169 = g121.call(this, v2, a0, a2);
        v171 = v12[g170];
        v12[g170] = v169;
        v172 = g118.call(this, v2, a0, a2);
        v174 = v12[g173];
        v12[g173] = v172;
        v176 = g175.state;
        g175.state = 1;
        v177 = g175.x;
        g175.x = 0;
        v178 = g175.y;
        g175.y = 0;
        v179 = g175.z;
        g175.z = 0;
        v180 = g175.w;
        g175.w = 0;
        v181 = g175.buffer;
        g175.buffer = g112;
        v182 = g175.size;
        g175.size = 2;
        v183 = g175.normalized;
        g175.normalized = false;
        v184 = g175.type;
        g175.type = 5126;
        v185 = g175.offset;
        g175.offset = 0;
        v186 = g175.stride;
        g175.stride = 0;
        v187 = g175.divisor;
        g175.divisor = 0;
        v189 = v9.vert;
        v9.vert = g188;
        v191 = v9.frag;
        v9.frag = g190;
        v5.dirty = true;
        a1(v2, a0, a2);
        v13.next = v136;
        v2.framebufferWidth = v137;
        v2.framebufferHeight = v138;
        v2.viewportWidth = v141;
        v2.viewportHeight = v142;
        v39[0] = v144;
        v39[1] = v146;
        v39[2] = v147;
        v39[3] = v148;
        v37[0] = v152;
        v37[1] = v154;
        v37[2] = v155;
        v37[3] = v156;
        if (v157) {
          g48.cpuTime += performance.now() - v158;
        }
        v6.count = v160;
        v6.primitive = v162;
        v12[g164] = v165;
        v12[g167] = v168;
        v12[g170] = v171;
        v12[g173] = v174;
        g175.state = v176;
        g175.x = v177;
        g175.y = v178;
        g175.z = v179;
        g175.w = v180;
        g175.buffer = v181;
        g175.size = v182;
        g175.normalized = v183;
        g175.type = v184;
        g175.offset = v185;
        g175.stride = v186;
        g175.divisor = v187;
        v9.vert = v189;
        v9.frag = v191;
        v5.dirty = true;
      },
      "batch": function(a0, a1) {
        var v193, v194, v195, v196, v197, v244, v245, v246, v247, v248, v249, v250, v251, v252, v253, v254;
        v14.angle_instanced_arrays;
        v193 = g50.call(this, v2, a0, 0);
        v194 = v13.getFramebuffer(v193);
        v195 = v13.next;
        v13.next = v194;
        v196 = v2.framebufferWidth;
        v2.framebufferWidth = v194 ? v194.width : v2.drawingBufferWidth;
        v197 = v2.framebufferHeight;
        v2.framebufferHeight = v194 ? v194.height : v2.drawingBufferHeight;
        if (v194 !== v13.cur) {
          if (v194) {
            v1.bindFramebuffer(36160, v194.framebuffer);
          } else {
            v1.bindFramebuffer(36160, null);
          }
          v13.cur = v194;
        }
        if (v5.dirty) {
          var v198, v199, v200, v201, v202, v203, v204, v205, v206, v207, v208, v209, v210, v211, v212, v213, v214, v215, v216, v217, v218, v219, v220, v221, v222, v223, v224, v225, v226, v227, v228, v229, v230, v231, v232, v233, v234, v235, v236, v237, v238, v239, v240, v241, v242, v243;
          v198 = v4.dither;
          if (v198 !== v5.dither) {
            if (v198) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v198;
          }
          v199 = v4.blend_enable;
          if (v199 !== v5.blend_enable) {
            if (v199) {
              v1.enable(3042);
            } else {
              v1.disable(3042);
            }
            v5.blend_enable = v199;
          }
          v200 = v17[0];
          v201 = v17[1];
          v202 = v17[2];
          v203 = v17[3];
          if (v200 !== v18[0] || v201 !== v18[1] || v202 !== v18[2] || v203 !== v18[3]) {
            v1.blendColor(v200, v201, v202, v203);
            v18[0] = v200;
            v18[1] = v201;
            v18[2] = v202;
            v18[3] = v203;
          }
          v204 = v19[0];
          v205 = v19[1];
          if (v204 !== v20[0] || v205 !== v20[1]) {
            v1.blendEquationSeparate(v204, v205);
            v20[0] = v204;
            v20[1] = v205;
          }
          v206 = v21[0];
          v207 = v21[1];
          v208 = v21[2];
          v209 = v21[3];
          if (v206 !== v22[0] || v207 !== v22[1] || v208 !== v22[2] || v209 !== v22[3]) {
            v1.blendFuncSeparate(v206, v207, v208, v209);
            v22[0] = v206;
            v22[1] = v207;
            v22[2] = v208;
            v22[3] = v209;
          }
          v210 = v4.depth_enable;
          if (v210 !== v5.depth_enable) {
            if (v210) {
              v1.enable(2929);
            } else {
              v1.disable(2929);
            }
            v5.depth_enable = v210;
          }
          v211 = v4.depth_func;
          if (v211 !== v5.depth_func) {
            v1.depthFunc(v211);
            v5.depth_func = v211;
          }
          v212 = v23[0];
          v213 = v23[1];
          if (v212 !== v24[0] || v213 !== v24[1]) {
            v1.depthRange(v212, v213);
            v24[0] = v212;
            v24[1] = v213;
          }
          v214 = v4.depth_mask;
          if (v214 !== v5.depth_mask) {
            v1.depthMask(v214);
            v5.depth_mask = v214;
          }
          v215 = v25[0];
          v216 = v25[1];
          v217 = v25[2];
          v218 = v25[3];
          if (v215 !== v26[0] || v216 !== v26[1] || v217 !== v26[2] || v218 !== v26[3]) {
            v1.colorMask(v215, v216, v217, v218);
            v26[0] = v215;
            v26[1] = v216;
            v26[2] = v217;
            v26[3] = v218;
          }
          v219 = v4.cull_enable;
          if (v219 !== v5.cull_enable) {
            if (v219) {
              v1.enable(2884);
            } else {
              v1.disable(2884);
            }
            v5.cull_enable = v219;
          }
          v220 = v4.cull_face;
          if (v220 !== v5.cull_face) {
            v1.cullFace(v220);
            v5.cull_face = v220;
          }
          v221 = v4.frontFace;
          if (v221 !== v5.frontFace) {
            v1.frontFace(v221);
            v5.frontFace = v221;
          }
          v222 = v4.lineWidth;
          if (v222 !== v5.lineWidth) {
            v1.lineWidth(v222);
            v5.lineWidth = v222;
          }
          v223 = v4.polygonOffset_enable;
          if (v223 !== v5.polygonOffset_enable) {
            if (v223) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v223;
          }
          v224 = v27[0];
          v225 = v27[1];
          if (v224 !== v28[0] || v225 !== v28[1]) {
            v1.polygonOffset(v224, v225);
            v28[0] = v224;
            v28[1] = v225;
          }
          v226 = v4.sample_alpha;
          if (v226 !== v5.sample_alpha) {
            if (v226) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v226;
          }
          v227 = v4.sample_enable;
          if (v227 !== v5.sample_enable) {
            if (v227) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v227;
          }
          v228 = v29[0];
          v229 = v29[1];
          if (v228 !== v30[0] || v229 !== v30[1]) {
            v1.sampleCoverage(v228, v229);
            v30[0] = v228;
            v30[1] = v229;
          }
          v230 = v4.stencil_enable;
          if (v230 !== v5.stencil_enable) {
            if (v230) {
              v1.enable(2960);
            } else {
              v1.disable(2960);
            }
            v5.stencil_enable = v230;
          }
          v231 = v4.stencil_mask;
          if (v231 !== v5.stencil_mask) {
            v1.stencilMask(v231);
            v5.stencil_mask = v231;
          }
          v232 = v31[0];
          v233 = v31[1];
          v234 = v31[2];
          if (v232 !== v32[0] || v233 !== v32[1] || v234 !== v32[2]) {
            v1.stencilFunc(v232, v233, v234);
            v32[0] = v232;
            v32[1] = v233;
            v32[2] = v234;
          }
          v235 = v33[0];
          v236 = v33[1];
          v237 = v33[2];
          v238 = v33[3];
          if (v235 !== v34[0] || v236 !== v34[1] || v237 !== v34[2] || v238 !== v34[3]) {
            v1.stencilOpSeparate(v235, v236, v237, v238);
            v34[0] = v235;
            v34[1] = v236;
            v34[2] = v237;
            v34[3] = v238;
          }
          v239 = v35[0];
          v240 = v35[1];
          v241 = v35[2];
          v242 = v35[3];
          if (v239 !== v36[0] || v240 !== v36[1] || v241 !== v36[2] || v242 !== v36[3]) {
            v1.stencilOpSeparate(v239, v240, v241, v242);
            v36[0] = v239;
            v36[1] = v240;
            v36[2] = v241;
            v36[3] = v242;
          }
          v243 = v4.scissor_enable;
          if (v243 !== v5.scissor_enable) {
            if (v243) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v243;
          }
        }
        v244 = v2.framebufferWidth;
        v245 = v2.framebufferHeight;
        v246 = v2.viewportWidth;
        v2.viewportWidth = v244;
        v247 = v2.viewportHeight;
        v2.viewportHeight = v245;
        v1.viewport(0, 0, v244, v245);
        v40[0] = 0;
        v40[1] = 0;
        v40[2] = v244;
        v40[3] = v245;
        v248 = v2.framebufferWidth;
        v249 = v2.framebufferHeight;
        v1.scissor(0, 0, v248, v249);
        v38[0] = 0;
        v38[1] = 0;
        v38[2] = v248;
        v38[3] = v249;
        v250 = v5.profile;
        if (v250) {
          v251 = performance.now();
          g48.count += a1;
        }
        v1.useProgram(g110.program);
        v252 = v14.angle_instanced_arrays;
        var v255, v256, v257, v258, v259, v260, v261, v262, v263, v264, v265, v266;
        v11.setVAO(null);
        v255 = g113.location;
        v256 = v10[v255];
        if (!v256.buffer) {
          v1.enableVertexAttribArray(v255);
        }
        v257 = 2;
        if (v256.type !== 5126 || v256.size !== v257 || v256.buffer !== g112 || v256.normalized !== false || v256.offset !== 0 || v256.stride !== 0) {
          v1.bindBuffer(34962, g112.buffer);
          v1.vertexAttribPointer(v255, v257, 5126, false, 0, 0);
          v256.type = 5126;
          v256.size = v257;
          v256.buffer = g112;
          v256.normalized = false;
          v256.offset = 0;
          v256.stride = 0;
        }
        if (v256.divisor !== 0) {
          v252.vertexAttribDivisorANGLE(v255, 0);
          v256.divisor = 0;
        }
        v258 = g118.call(this, v2, v254, v253);
        v1.uniform1f(g117.location, v258);
        v259 = g121.call(this, v2, v254, v253);
        v1.uniform1f(g120.location, v259);
        v260 = g124.call(this, v2, v254, v253);
        if (v260 && v260._reglType === "framebuffer") {
          v260 = v260.color[0];
        }
        v261 = v260._texture;
        v1.uniform1i(g123.location, v261.bind());
        v262 = g128.call(this, v2, v254, v253);
        if (v262 && v262._reglType === "framebuffer") {
          v262 = v262.color[0];
        }
        v263 = v262._texture;
        v1.uniform1i(g127.location, v263.bind());
        v264 = v6.elements;
        if (v264) {
          v1.bindBuffer(34963, v264.buffer.buffer);
        } else if (v11.currentVAO) {
          v264 = v7.getElements(v11.currentVAO.elements);
          if (v264)
            v1.bindBuffer(34963, v264.buffer.buffer);
        }
        v265 = v6.offset;
        v266 = v6.instances;
        for (v253 = 0; v253 < a1; ++v253) {
          v254 = a0[v253];
          if (v266 > 0) {
            if (v264) {
              v252.drawElementsInstancedANGLE(5, 4, v264.type, v265 << (v264.type - 5121 >> 1), v266);
            } else {
              v252.drawArraysInstancedANGLE(5, v265, 4, v266);
            }
          } else if (v266 < 0) {
            if (v264) {
              v1.drawElements(5, 4, v264.type, v265 << (v264.type - 5121 >> 1));
            } else {
              v1.drawArrays(5, v265, 4);
            }
          }
        }
        v261.unbind();
        v263.unbind();
        v5.dirty = true;
        v11.setVAO(null);
        v13.next = v195;
        v2.framebufferWidth = v196;
        v2.framebufferHeight = v197;
        v2.viewportWidth = v246;
        v2.viewportHeight = v247;
        if (v250) {
          g48.cpuTime += performance.now() - v251;
        }
      }
    };
  },
  "1596bccf6b7a59d3fe8f9b73749b6b4f7e0e856d9694b6958aec3c25433b26b6": function anonymous23(g0, g50, g51, g55, g56, g58, g59, g61, g62, g66, g67, g69, g70, g72, g73, g75, g76, g79, g80, g83, g84, g87, g88, g91, g92) {
    var v1, v2, v4, v5, v6, v7, v10, v11, v14;
    v1 = g0.gl;
    v2 = g0.context;
    g0.strings;
    v4 = g0.next;
    v5 = g0.current;
    v6 = g0.draw;
    v7 = g0.elements;
    g0.buffer;
    g0.shader;
    v10 = g0.attributes;
    v11 = g0.vao;
    g0.uniforms;
    g0.framebuffer;
    v14 = g0.extensions;
    g0.timer;
    g0.isBufferArgs;
    v4.blend_color;
    v5.blend_color;
    v4.blend_equation;
    v5.blend_equation;
    v4.blend_func;
    v5.blend_func;
    v4.depth_range;
    v5.depth_range;
    v4.colorMask;
    v5.colorMask;
    v4.polygonOffset_offset;
    v5.polygonOffset_offset;
    v4.sample_coverage;
    v5.sample_coverage;
    v4.stencil_func;
    v5.stencil_func;
    v4.stencil_opFront;
    v5.stencil_opFront;
    v4.stencil_opBack;
    v5.stencil_opBack;
    v4.scissor_box;
    v5.scissor_box;
    v4.viewport;
    v5.viewport;
    return {
      "body": function(a0) {
        var v49, v52, v53, v54, v57, v60, v63, v64, v65, v68, v71, v74, v77, v78, v81, v82, v85, v86, v89, v90, v93, v94, v95, v96, v97;
        v14.angle_instanced_arrays;
        v49 = v14.angle_instanced_arrays;
        v11.setVAO(null);
        v52 = g51.location;
        v53 = v10[v52];
        if (!v53.buffer) {
          v1.enableVertexAttribArray(v52);
        }
        v54 = 2;
        if (v53.type !== 5126 || v53.size !== v54 || v53.buffer !== g50 || v53.normalized !== false || v53.offset !== 0 || v53.stride !== 0) {
          v1.bindBuffer(34962, g50.buffer);
          v1.vertexAttribPointer(v52, v54, 5126, false, 0, 0);
          v53.type = 5126;
          v53.size = v54;
          v53.buffer = g50;
          v53.normalized = false;
          v53.offset = 0;
          v53.stride = 0;
        }
        if (v53.divisor !== 0) {
          v49.vertexAttribDivisorANGLE(v52, 0);
          v53.divisor = 0;
        }
        v57 = g56.call(this, v2, a0, 0);
        v1.uniform1f(g55.location, v57);
        v60 = g59.call(this, v2, a0, 0);
        v1.uniform1f(g58.location, v60);
        v63 = g62.call(this, v2, a0, 0);
        v64 = v63[0];
        v65 = v63[1];
        v1.uniform2f(g61.location, v64, v65);
        v68 = g67.call(this, v2, a0, 0);
        v1.uniform1f(g66.location, v68);
        v71 = g70.call(this, v2, a0, 0);
        v1.uniform1f(g69.location, v71);
        v74 = g73.call(this, v2, a0, 0);
        v1.uniform1f(g72.location, v74);
        v77 = g76.call(this, v2, a0, 0);
        if (v77 && v77._reglType === "framebuffer") {
          v77 = v77.color[0];
        }
        v78 = v77._texture;
        v1.uniform1i(g75.location, v78.bind());
        v81 = g80.call(this, v2, a0, 0);
        if (v81 && v81._reglType === "framebuffer") {
          v81 = v81.color[0];
        }
        v82 = v81._texture;
        v1.uniform1i(g79.location, v82.bind());
        v85 = g84.call(this, v2, a0, 0);
        if (v85 && v85._reglType === "framebuffer") {
          v85 = v85.color[0];
        }
        v86 = v85._texture;
        v1.uniform1i(g83.location, v86.bind());
        v89 = g88.call(this, v2, a0, 0);
        if (v89 && v89._reglType === "framebuffer") {
          v89 = v89.color[0];
        }
        v90 = v89._texture;
        v1.uniform1i(g87.location, v90.bind());
        v93 = g92.call(this, v2, a0, 0);
        if (v93 && v93._reglType === "framebuffer") {
          v93 = v93.color[0];
        }
        v94 = v93._texture;
        v1.uniform1i(g91.location, v94.bind());
        v95 = v6.elements;
        if (v95) {
          v1.bindBuffer(34963, v95.buffer.buffer);
        } else if (v11.currentVAO) {
          v95 = v7.getElements(v11.currentVAO.elements);
          if (v95)
            v1.bindBuffer(34963, v95.buffer.buffer);
        }
        v96 = v6.offset;
        v97 = v6.instances;
        if (v97 > 0) {
          if (v95) {
            v49.drawElementsInstancedANGLE(5, 4, v95.type, v96 << (v95.type - 5121 >> 1), v97);
          } else {
            v49.drawArraysInstancedANGLE(5, v96, 4, v97);
          }
        } else if (v97 < 0) {
          if (v95) {
            v1.drawElements(5, 4, v95.type, v96 << (v95.type - 5121 >> 1));
          } else {
            v1.drawArrays(5, v96, 4);
          }
        }
        v78.unbind();
        v82.unbind();
        v86.unbind();
        v90.unbind();
        v94.unbind();
      }
    };
  },
  "a05bf3c1b12ac6d06248a1605bddec766ce3c5beca448738b9fcb95625273f0b": function anonymous24(g0, g48, g50, g114, g122, g124, g130, g132, g202) {
    var v1, v2, v4, v5, v9, v11, v13, v14, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v111, v199;
    v1 = g0.gl;
    v2 = g0.context;
    g0.strings;
    v4 = g0.next;
    v5 = g0.current;
    g0.draw;
    g0.elements;
    g0.buffer;
    v9 = g0.shader;
    g0.attributes;
    v11 = g0.vao;
    g0.uniforms;
    v13 = g0.framebuffer;
    v14 = g0.extensions;
    g0.timer;
    g0.isBufferArgs;
    v17 = v4.blend_color;
    v18 = v5.blend_color;
    v19 = v4.blend_equation;
    v20 = v5.blend_equation;
    v21 = v4.blend_func;
    v22 = v5.blend_func;
    v23 = v4.depth_range;
    v24 = v5.depth_range;
    v25 = v4.colorMask;
    v26 = v5.colorMask;
    v27 = v4.polygonOffset_offset;
    v28 = v5.polygonOffset_offset;
    v29 = v4.sample_coverage;
    v30 = v5.sample_coverage;
    v31 = v4.stencil_func;
    v32 = v5.stencil_func;
    v33 = v4.stencil_opFront;
    v34 = v5.stencil_opFront;
    v35 = v4.stencil_opBack;
    v36 = v5.stencil_opBack;
    v37 = v4.scissor_box;
    v38 = v5.scissor_box;
    v39 = v4.viewport;
    v40 = v5.viewport;
    v111 = {};
    v199 = {};
    return {
      "draw": function(a0) {
        var v51, v52, v53, v100, v101, v102, v103, v104, v105, v106, v107, v108, v109, v110, v112, v113;
        v14.angle_instanced_arrays;
        v51 = v13.next;
        v13.next = g50;
        v52 = v2.framebufferWidth;
        v2.framebufferWidth = g50.width;
        v53 = v2.framebufferHeight;
        v2.framebufferHeight = g50.height;
        if (g50 !== v13.cur) {
          if (g50) {
            v1.bindFramebuffer(36160, g50.framebuffer);
          } else {
            v1.bindFramebuffer(36160, null);
          }
          v13.cur = g50;
        }
        if (v5.dirty) {
          var v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98, v99;
          v54 = v4.dither;
          if (v54 !== v5.dither) {
            if (v54) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v54;
          }
          v55 = v4.blend_enable;
          if (v55 !== v5.blend_enable) {
            if (v55) {
              v1.enable(3042);
            } else {
              v1.disable(3042);
            }
            v5.blend_enable = v55;
          }
          v56 = v17[0];
          v57 = v17[1];
          v58 = v17[2];
          v59 = v17[3];
          if (v56 !== v18[0] || v57 !== v18[1] || v58 !== v18[2] || v59 !== v18[3]) {
            v1.blendColor(v56, v57, v58, v59);
            v18[0] = v56;
            v18[1] = v57;
            v18[2] = v58;
            v18[3] = v59;
          }
          v60 = v19[0];
          v61 = v19[1];
          if (v60 !== v20[0] || v61 !== v20[1]) {
            v1.blendEquationSeparate(v60, v61);
            v20[0] = v60;
            v20[1] = v61;
          }
          v62 = v21[0];
          v63 = v21[1];
          v64 = v21[2];
          v65 = v21[3];
          if (v62 !== v22[0] || v63 !== v22[1] || v64 !== v22[2] || v65 !== v22[3]) {
            v1.blendFuncSeparate(v62, v63, v64, v65);
            v22[0] = v62;
            v22[1] = v63;
            v22[2] = v64;
            v22[3] = v65;
          }
          v66 = v4.depth_enable;
          if (v66 !== v5.depth_enable) {
            if (v66) {
              v1.enable(2929);
            } else {
              v1.disable(2929);
            }
            v5.depth_enable = v66;
          }
          v67 = v4.depth_func;
          if (v67 !== v5.depth_func) {
            v1.depthFunc(v67);
            v5.depth_func = v67;
          }
          v68 = v23[0];
          v69 = v23[1];
          if (v68 !== v24[0] || v69 !== v24[1]) {
            v1.depthRange(v68, v69);
            v24[0] = v68;
            v24[1] = v69;
          }
          v70 = v4.depth_mask;
          if (v70 !== v5.depth_mask) {
            v1.depthMask(v70);
            v5.depth_mask = v70;
          }
          v71 = v25[0];
          v72 = v25[1];
          v73 = v25[2];
          v74 = v25[3];
          if (v71 !== v26[0] || v72 !== v26[1] || v73 !== v26[2] || v74 !== v26[3]) {
            v1.colorMask(v71, v72, v73, v74);
            v26[0] = v71;
            v26[1] = v72;
            v26[2] = v73;
            v26[3] = v74;
          }
          v75 = v4.cull_enable;
          if (v75 !== v5.cull_enable) {
            if (v75) {
              v1.enable(2884);
            } else {
              v1.disable(2884);
            }
            v5.cull_enable = v75;
          }
          v76 = v4.cull_face;
          if (v76 !== v5.cull_face) {
            v1.cullFace(v76);
            v5.cull_face = v76;
          }
          v77 = v4.frontFace;
          if (v77 !== v5.frontFace) {
            v1.frontFace(v77);
            v5.frontFace = v77;
          }
          v78 = v4.lineWidth;
          if (v78 !== v5.lineWidth) {
            v1.lineWidth(v78);
            v5.lineWidth = v78;
          }
          v79 = v4.polygonOffset_enable;
          if (v79 !== v5.polygonOffset_enable) {
            if (v79) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v79;
          }
          v80 = v27[0];
          v81 = v27[1];
          if (v80 !== v28[0] || v81 !== v28[1]) {
            v1.polygonOffset(v80, v81);
            v28[0] = v80;
            v28[1] = v81;
          }
          v82 = v4.sample_alpha;
          if (v82 !== v5.sample_alpha) {
            if (v82) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v82;
          }
          v83 = v4.sample_enable;
          if (v83 !== v5.sample_enable) {
            if (v83) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v83;
          }
          v84 = v29[0];
          v85 = v29[1];
          if (v84 !== v30[0] || v85 !== v30[1]) {
            v1.sampleCoverage(v84, v85);
            v30[0] = v84;
            v30[1] = v85;
          }
          v86 = v4.stencil_enable;
          if (v86 !== v5.stencil_enable) {
            if (v86) {
              v1.enable(2960);
            } else {
              v1.disable(2960);
            }
            v5.stencil_enable = v86;
          }
          v87 = v4.stencil_mask;
          if (v87 !== v5.stencil_mask) {
            v1.stencilMask(v87);
            v5.stencil_mask = v87;
          }
          v88 = v31[0];
          v89 = v31[1];
          v90 = v31[2];
          if (v88 !== v32[0] || v89 !== v32[1] || v90 !== v32[2]) {
            v1.stencilFunc(v88, v89, v90);
            v32[0] = v88;
            v32[1] = v89;
            v32[2] = v90;
          }
          v91 = v33[0];
          v92 = v33[1];
          v93 = v33[2];
          v94 = v33[3];
          if (v91 !== v34[0] || v92 !== v34[1] || v93 !== v34[2] || v94 !== v34[3]) {
            v1.stencilOpSeparate(v91, v92, v93, v94);
            v34[0] = v91;
            v34[1] = v92;
            v34[2] = v93;
            v34[3] = v94;
          }
          v95 = v35[0];
          v96 = v35[1];
          v97 = v35[2];
          v98 = v35[3];
          if (v95 !== v36[0] || v96 !== v36[1] || v97 !== v36[2] || v98 !== v36[3]) {
            v1.stencilOpSeparate(v95, v96, v97, v98);
            v36[0] = v95;
            v36[1] = v96;
            v36[2] = v97;
            v36[3] = v98;
          }
          v99 = v4.scissor_enable;
          if (v99 !== v5.scissor_enable) {
            if (v99) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v99;
          }
        }
        v100 = v2.framebufferWidth;
        v101 = v2.framebufferHeight;
        v102 = v2.viewportWidth;
        v2.viewportWidth = v100;
        v103 = v2.viewportHeight;
        v2.viewportHeight = v101;
        v1.viewport(0, 0, v100, v101);
        v40[0] = 0;
        v40[1] = 0;
        v40[2] = v100;
        v40[3] = v101;
        v104 = v2.framebufferWidth;
        v105 = v2.framebufferHeight;
        v1.scissor(0, 0, v104, v105);
        v38[0] = 0;
        v38[1] = 0;
        v38[2] = v104;
        v38[3] = v105;
        v106 = v5.profile;
        if (v106) {
          v107 = performance.now();
          g48.count++;
        }
        v108 = v9.frag;
        v109 = v9.vert;
        v110 = v9.program(v109, v108);
        v1.useProgram(v110.program);
        v11.setVAO(null);
        v112 = v110.id;
        v113 = v111[v112];
        if (v113) {
          v113.call(this, a0);
        } else {
          v113 = v111[v112] = g114(v110);
          v113.call(this, a0);
        }
        v5.dirty = true;
        v11.setVAO(null);
        v13.next = v51;
        v2.framebufferWidth = v52;
        v2.framebufferHeight = v53;
        v2.viewportWidth = v102;
        v2.viewportHeight = v103;
        if (v106) {
          g48.cpuTime += performance.now() - v107;
        }
      },
      "scope": function(a0, a1, a2) {
        var v115, v116, v117, v118, v119, v120, v121, v123, v125, v126, v127, v128, v129, v131, v133, v134, v135, v136, v137;
        v115 = v13.next;
        v13.next = g50;
        v116 = v2.framebufferWidth;
        v2.framebufferWidth = g50.width;
        v117 = v2.framebufferHeight;
        v2.framebufferHeight = g50.height;
        v118 = v2.framebufferWidth;
        v119 = v2.framebufferHeight;
        v120 = v2.viewportWidth;
        v2.viewportWidth = v118;
        v121 = v2.viewportHeight;
        v2.viewportHeight = v119;
        v123 = v39[0];
        v39[0] = g122;
        v125 = v39[1];
        v39[1] = g124;
        v126 = v39[2];
        v39[2] = v118;
        v127 = v39[3];
        v39[3] = v119;
        v128 = v2.framebufferWidth;
        v129 = v2.framebufferHeight;
        v131 = v37[0];
        v37[0] = g130;
        v133 = v37[1];
        v37[1] = g132;
        v134 = v37[2];
        v37[2] = v128;
        v135 = v37[3];
        v37[3] = v129;
        v136 = v5.profile;
        if (v136) {
          v137 = performance.now();
          g48.count++;
        }
        v5.dirty = true;
        a1(v2, a0, a2);
        v13.next = v115;
        v2.framebufferWidth = v116;
        v2.framebufferHeight = v117;
        v2.viewportWidth = v120;
        v2.viewportHeight = v121;
        v39[0] = v123;
        v39[1] = v125;
        v39[2] = v126;
        v39[3] = v127;
        v37[0] = v131;
        v37[1] = v133;
        v37[2] = v134;
        v37[3] = v135;
        if (v136) {
          g48.cpuTime += performance.now() - v137;
        }
        v5.dirty = true;
      },
      "batch": function(a0, a1) {
        var v139, v140, v141, v188, v189, v190, v191, v192, v193, v194, v195, v196, v197, v198, v200, v201;
        v14.angle_instanced_arrays;
        v139 = v13.next;
        v13.next = g50;
        v140 = v2.framebufferWidth;
        v2.framebufferWidth = g50.width;
        v141 = v2.framebufferHeight;
        v2.framebufferHeight = g50.height;
        if (g50 !== v13.cur) {
          if (g50) {
            v1.bindFramebuffer(36160, g50.framebuffer);
          } else {
            v1.bindFramebuffer(36160, null);
          }
          v13.cur = g50;
        }
        if (v5.dirty) {
          var v142, v143, v144, v145, v146, v147, v148, v149, v150, v151, v152, v153, v154, v155, v156, v157, v158, v159, v160, v161, v162, v163, v164, v165, v166, v167, v168, v169, v170, v171, v172, v173, v174, v175, v176, v177, v178, v179, v180, v181, v182, v183, v184, v185, v186, v187;
          v142 = v4.dither;
          if (v142 !== v5.dither) {
            if (v142) {
              v1.enable(3024);
            } else {
              v1.disable(3024);
            }
            v5.dither = v142;
          }
          v143 = v4.blend_enable;
          if (v143 !== v5.blend_enable) {
            if (v143) {
              v1.enable(3042);
            } else {
              v1.disable(3042);
            }
            v5.blend_enable = v143;
          }
          v144 = v17[0];
          v145 = v17[1];
          v146 = v17[2];
          v147 = v17[3];
          if (v144 !== v18[0] || v145 !== v18[1] || v146 !== v18[2] || v147 !== v18[3]) {
            v1.blendColor(v144, v145, v146, v147);
            v18[0] = v144;
            v18[1] = v145;
            v18[2] = v146;
            v18[3] = v147;
          }
          v148 = v19[0];
          v149 = v19[1];
          if (v148 !== v20[0] || v149 !== v20[1]) {
            v1.blendEquationSeparate(v148, v149);
            v20[0] = v148;
            v20[1] = v149;
          }
          v150 = v21[0];
          v151 = v21[1];
          v152 = v21[2];
          v153 = v21[3];
          if (v150 !== v22[0] || v151 !== v22[1] || v152 !== v22[2] || v153 !== v22[3]) {
            v1.blendFuncSeparate(v150, v151, v152, v153);
            v22[0] = v150;
            v22[1] = v151;
            v22[2] = v152;
            v22[3] = v153;
          }
          v154 = v4.depth_enable;
          if (v154 !== v5.depth_enable) {
            if (v154) {
              v1.enable(2929);
            } else {
              v1.disable(2929);
            }
            v5.depth_enable = v154;
          }
          v155 = v4.depth_func;
          if (v155 !== v5.depth_func) {
            v1.depthFunc(v155);
            v5.depth_func = v155;
          }
          v156 = v23[0];
          v157 = v23[1];
          if (v156 !== v24[0] || v157 !== v24[1]) {
            v1.depthRange(v156, v157);
            v24[0] = v156;
            v24[1] = v157;
          }
          v158 = v4.depth_mask;
          if (v158 !== v5.depth_mask) {
            v1.depthMask(v158);
            v5.depth_mask = v158;
          }
          v159 = v25[0];
          v160 = v25[1];
          v161 = v25[2];
          v162 = v25[3];
          if (v159 !== v26[0] || v160 !== v26[1] || v161 !== v26[2] || v162 !== v26[3]) {
            v1.colorMask(v159, v160, v161, v162);
            v26[0] = v159;
            v26[1] = v160;
            v26[2] = v161;
            v26[3] = v162;
          }
          v163 = v4.cull_enable;
          if (v163 !== v5.cull_enable) {
            if (v163) {
              v1.enable(2884);
            } else {
              v1.disable(2884);
            }
            v5.cull_enable = v163;
          }
          v164 = v4.cull_face;
          if (v164 !== v5.cull_face) {
            v1.cullFace(v164);
            v5.cull_face = v164;
          }
          v165 = v4.frontFace;
          if (v165 !== v5.frontFace) {
            v1.frontFace(v165);
            v5.frontFace = v165;
          }
          v166 = v4.lineWidth;
          if (v166 !== v5.lineWidth) {
            v1.lineWidth(v166);
            v5.lineWidth = v166;
          }
          v167 = v4.polygonOffset_enable;
          if (v167 !== v5.polygonOffset_enable) {
            if (v167) {
              v1.enable(32823);
            } else {
              v1.disable(32823);
            }
            v5.polygonOffset_enable = v167;
          }
          v168 = v27[0];
          v169 = v27[1];
          if (v168 !== v28[0] || v169 !== v28[1]) {
            v1.polygonOffset(v168, v169);
            v28[0] = v168;
            v28[1] = v169;
          }
          v170 = v4.sample_alpha;
          if (v170 !== v5.sample_alpha) {
            if (v170) {
              v1.enable(32926);
            } else {
              v1.disable(32926);
            }
            v5.sample_alpha = v170;
          }
          v171 = v4.sample_enable;
          if (v171 !== v5.sample_enable) {
            if (v171) {
              v1.enable(32928);
            } else {
              v1.disable(32928);
            }
            v5.sample_enable = v171;
          }
          v172 = v29[0];
          v173 = v29[1];
          if (v172 !== v30[0] || v173 !== v30[1]) {
            v1.sampleCoverage(v172, v173);
            v30[0] = v172;
            v30[1] = v173;
          }
          v174 = v4.stencil_enable;
          if (v174 !== v5.stencil_enable) {
            if (v174) {
              v1.enable(2960);
            } else {
              v1.disable(2960);
            }
            v5.stencil_enable = v174;
          }
          v175 = v4.stencil_mask;
          if (v175 !== v5.stencil_mask) {
            v1.stencilMask(v175);
            v5.stencil_mask = v175;
          }
          v176 = v31[0];
          v177 = v31[1];
          v178 = v31[2];
          if (v176 !== v32[0] || v177 !== v32[1] || v178 !== v32[2]) {
            v1.stencilFunc(v176, v177, v178);
            v32[0] = v176;
            v32[1] = v177;
            v32[2] = v178;
          }
          v179 = v33[0];
          v180 = v33[1];
          v181 = v33[2];
          v182 = v33[3];
          if (v179 !== v34[0] || v180 !== v34[1] || v181 !== v34[2] || v182 !== v34[3]) {
            v1.stencilOpSeparate(v179, v180, v181, v182);
            v34[0] = v179;
            v34[1] = v180;
            v34[2] = v181;
            v34[3] = v182;
          }
          v183 = v35[0];
          v184 = v35[1];
          v185 = v35[2];
          v186 = v35[3];
          if (v183 !== v36[0] || v184 !== v36[1] || v185 !== v36[2] || v186 !== v36[3]) {
            v1.stencilOpSeparate(v183, v184, v185, v186);
            v36[0] = v183;
            v36[1] = v184;
            v36[2] = v185;
            v36[3] = v186;
          }
          v187 = v4.scissor_enable;
          if (v187 !== v5.scissor_enable) {
            if (v187) {
              v1.enable(3089);
            } else {
              v1.disable(3089);
            }
            v5.scissor_enable = v187;
          }
        }
        v188 = v2.framebufferWidth;
        v189 = v2.framebufferHeight;
        v190 = v2.viewportWidth;
        v2.viewportWidth = v188;
        v191 = v2.viewportHeight;
        v2.viewportHeight = v189;
        v1.viewport(0, 0, v188, v189);
        v40[0] = 0;
        v40[1] = 0;
        v40[2] = v188;
        v40[3] = v189;
        v192 = v2.framebufferWidth;
        v193 = v2.framebufferHeight;
        v1.scissor(0, 0, v192, v193);
        v38[0] = 0;
        v38[1] = 0;
        v38[2] = v192;
        v38[3] = v193;
        v194 = v5.profile;
        if (v194) {
          v195 = performance.now();
          g48.count += a1;
        }
        v196 = v9.frag;
        v197 = v9.vert;
        v198 = v9.program(v197, v196);
        v1.useProgram(v198.program);
        v11.setVAO(null);
        v200 = v198.id;
        v201 = v199[v200];
        if (v201) {
          v201.call(this, a0, a1);
        } else {
          v201 = v199[v200] = g202(v198);
          v201.call(this, a0, a1);
        }
        v5.dirty = true;
        v11.setVAO(null);
        v13.next = v139;
        v2.framebufferWidth = v140;
        v2.framebufferHeight = v141;
        v2.viewportWidth = v190;
        v2.viewportHeight = v191;
        if (v194) {
          g48.cpuTime += performance.now() - v195;
        }
      }
    };
  }
};
var Graph = class {
  constructor(canvas, config) {
    var _a, _b;
    this.config = new GraphConfig();
    this.graph = new GraphData();
    this.requestAnimationFrameId = 0;
    this.isRightClickMouse = false;
    this.store = new Store();
    this.zoomInstance = new Zoom(this.store, this.config);
    this.hasParticleSystemDestroyed = false;
    this._findHoveredPointExecutionCount = 0;
    this._isMouseOnCanvas = false;
    this._isFirstDataAfterInit = true;
    if (config)
      this.config.init(config);
    const w = canvas.clientWidth;
    const h = canvas.clientHeight;
    canvas.width = w * this.config.pixelRatio;
    canvas.height = h * this.config.pixelRatio;
    if (canvas.style.width === "" && canvas.style.height === "") {
      select_default(canvas).style("width", "100%").style("height", "100%");
    }
    this.canvas = canvas;
    this.canvasD3Selection = select_default(canvas);
    this.canvasD3Selection.on("mouseenter.cosmos", () => {
      this._isMouseOnCanvas = true;
    }).on("mouseleave.cosmos", () => {
      this._isMouseOnCanvas = false;
    });
    this.zoomInstance.behavior.on("start.detect", (e) => {
      this.currentEvent = e;
    }).on("zoom.detect", (e) => {
      const userDriven = !!e.sourceEvent;
      if (userDriven)
        this.updateMousePosition(e.sourceEvent);
      this.currentEvent = e;
    }).on("end.detect", (e) => {
      this.currentEvent = e;
    });
    this.canvasD3Selection.call(this.zoomInstance.behavior).on("click", this.onClick.bind(this)).on("mousemove", this.onMouseMove.bind(this)).on("contextmenu", this.onRightClickMouse.bind(this));
    if (this.config.disableZoom)
      this.disableZoom();
    this.setZoomLevel((_a = this.config.initialZoomLevel) !== null && _a !== void 0 ? _a : 1);
    this.reglInstance = (0, import_regl.default)({
      canvas: this.canvas,
      attributes: {
        antialias: false,
        preserveDrawingBuffer: true
      },
      extensions: ["OES_texture_float", "ANGLE_instanced_arrays"],
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      cachedCode: reglCachedCode
    });
    this.store.maxPointSize = ((_b = this.reglInstance.limits.pointSizeDims[1]) !== null && _b !== void 0 ? _b : MAX_POINT_SIZE) / this.config.pixelRatio;
    this.store.adjustSpaceSize(this.config.spaceSize, this.reglInstance.limits.maxTextureSize);
    this.store.updateScreenSize(w, h);
    this.points = new Points(this.reglInstance, this.config, this.store, this.graph);
    this.lines = new Lines(this.reglInstance, this.config, this.store, this.graph, this.points);
    if (!this.config.disableSimulation) {
      this.forceGravity = new ForceGravity(this.reglInstance, this.config, this.store, this.graph, this.points);
      this.forceCenter = new ForceCenter(this.reglInstance, this.config, this.store, this.graph, this.points);
      this.forceManyBody = this.config.useQuadtree ? new ForceManyBodyQuadtree(this.reglInstance, this.config, this.store, this.graph, this.points) : new ForceManyBody(this.reglInstance, this.config, this.store, this.graph, this.points);
      this.forceLinkIncoming = new ForceLink(this.reglInstance, this.config, this.store, this.graph, this.points);
      this.forceLinkOutgoing = new ForceLink(this.reglInstance, this.config, this.store, this.graph, this.points);
      this.forceMouse = new ForceMouse(this.reglInstance, this.config, this.store, this.graph, this.points);
    }
    this.store.backgroundColor = getRgbaColor(this.config.backgroundColor);
    if (this.config.highlightedNodeRingColor) {
      this.store.setHoveredNodeRingColor(this.config.highlightedNodeRingColor);
      this.store.setFocusedNodeRingColor(this.config.highlightedNodeRingColor);
    } else {
      if (this.config.hoveredNodeRingColor) {
        this.store.setHoveredNodeRingColor(this.config.hoveredNodeRingColor);
      }
      if (this.config.focusedNodeRingColor) {
        this.store.setFocusedNodeRingColor(this.config.focusedNodeRingColor);
      }
    }
    if (this.config.showFPSMonitor)
      this.fpsMonitor = new FPSMonitor(this.canvas);
    if (this.config.randomSeed !== void 0)
      this.store.addRandomSeed(this.config.randomSeed);
  }
  get progress() {
    return this.store.simulationProgress;
  }
  /**
   * A value that gives information about the running simulation status.
   */
  get isSimulationRunning() {
    return this.store.isSimulationRunning;
  }
  /**
   * The maximum point size.
   * This value is the maximum size of the `gl.POINTS` primitive that WebGL can render on the user's hardware.
   */
  get maxPointSize() {
    return this.store.maxPointSize;
  }
  /**
   * Set or update Cosmos configuration. The changes will be applied in real time.
   * @param config Cosmos configuration object.
   */
  setConfig(config) {
    var _a, _b;
    const prevConfig = { ...this.config };
    this.config.init(config);
    if (prevConfig.linkColor !== this.config.linkColor)
      this.lines.updateColor();
    if (prevConfig.nodeColor !== this.config.nodeColor)
      this.points.updateColor();
    if (prevConfig.nodeSize !== this.config.nodeSize)
      this.points.updateSize();
    if (prevConfig.linkWidth !== this.config.linkWidth)
      this.lines.updateWidth();
    if (prevConfig.linkArrows !== this.config.linkArrows)
      this.lines.updateArrow();
    if (prevConfig.curvedLinkSegments !== this.config.curvedLinkSegments || prevConfig.curvedLinks !== this.config.curvedLinks) {
      this.lines.updateCurveLineGeometry();
    }
    if (prevConfig.backgroundColor !== this.config.backgroundColor)
      this.store.backgroundColor = getRgbaColor(this.config.backgroundColor);
    if (prevConfig.highlightedNodeRingColor !== this.config.highlightedNodeRingColor) {
      this.store.setHoveredNodeRingColor(this.config.highlightedNodeRingColor);
      this.store.setFocusedNodeRingColor(this.config.highlightedNodeRingColor);
    }
    if (prevConfig.hoveredNodeRingColor !== this.config.hoveredNodeRingColor) {
      this.store.setHoveredNodeRingColor(this.config.hoveredNodeRingColor);
    }
    if (prevConfig.focusedNodeRingColor !== this.config.focusedNodeRingColor) {
      this.store.setFocusedNodeRingColor(this.config.focusedNodeRingColor);
    }
    if (prevConfig.spaceSize !== this.config.spaceSize || prevConfig.simulation.repulsionQuadtreeLevels !== this.config.simulation.repulsionQuadtreeLevels) {
      this.store.adjustSpaceSize(this.config.spaceSize, this.reglInstance.limits.maxTextureSize);
      this.resizeCanvas(true);
      this.update(this.store.isSimulationRunning);
    }
    if (prevConfig.showFPSMonitor !== this.config.showFPSMonitor) {
      if (this.config.showFPSMonitor) {
        this.fpsMonitor = new FPSMonitor(this.canvas);
      } else {
        (_a = this.fpsMonitor) === null || _a === void 0 ? void 0 : _a.destroy();
        this.fpsMonitor = void 0;
      }
    }
    if (prevConfig.pixelRatio !== this.config.pixelRatio) {
      this.store.maxPointSize = ((_b = this.reglInstance.limits.pointSizeDims[1]) !== null && _b !== void 0 ? _b : MAX_POINT_SIZE) / this.config.pixelRatio;
    }
    if (prevConfig.disableZoom !== this.config.disableZoom) {
      if (this.config.disableZoom)
        this.disableZoom();
      else
        this.enableZoom();
    }
  }
  /**
   * Pass data to Cosmos.
   * @param nodes Array of nodes.
   * @param links Array of links.
   * @param runSimulation When set to `false`, the simulation won't be started automatically (`true` by default).
   */
  setData(nodes, links, runSimulation = true) {
    const { fitViewOnInit, fitViewDelay, fitViewByNodesInRect, initialZoomLevel } = this.config;
    if (!nodes.length && !links.length) {
      this.destroyParticleSystem();
      this.reglInstance.clear({
        color: this.store.backgroundColor,
        depth: 1,
        stencil: 0
      });
      return;
    }
    this.graph.setData(nodes, links);
    if (this._isFirstDataAfterInit && fitViewOnInit && initialZoomLevel === void 0) {
      this._fitViewOnInitTimeoutID = window.setTimeout(() => {
        if (fitViewByNodesInRect)
          this.setZoomTransformByNodePositions(fitViewByNodesInRect, void 0, void 0, 0);
        else
          this.fitView();
      }, fitViewDelay);
    }
    this._isFirstDataAfterInit = false;
    this.update(runSimulation);
  }
  /**
   * Center the view on a node and zoom in, by node id.
   * @param id Id of the node.
   * @param duration Duration of the animation transition in milliseconds (`700` by default).
   * @param scale Scale value to zoom in or out (`3` by default).
   * @param canZoomOut Set to `false` to prevent zooming out from the node (`true` by default).
   */
  zoomToNodeById(id, duration = 700, scale3 = defaultScaleToZoom, canZoomOut = true) {
    const node = this.graph.getNodeById(id);
    if (!node)
      return;
    this.zoomToNode(node, duration, scale3, canZoomOut);
  }
  /**
   * Center the view on a node and zoom in, by node index.
   * @param index The index of the node in the array of nodes.
   * @param duration Duration of the animation transition in milliseconds (`700` by default).
   * @param scale Scale value to zoom in or out (`3` by default).
   * @param canZoomOut Set to `false` to prevent zooming out from the node (`true` by default).
   */
  zoomToNodeByIndex(index, duration = 700, scale3 = defaultScaleToZoom, canZoomOut = true) {
    const node = this.graph.getNodeByIndex(index);
    if (!node)
      return;
    this.zoomToNode(node, duration, scale3, canZoomOut);
  }
  /**
   * Zoom the view in or out to the specified zoom level.
   * @param value Zoom level
   * @param duration Duration of the zoom in/out transition.
   */
  zoom(value, duration = 0) {
    this.setZoomLevel(value, duration);
  }
  /**
   * Zoom the view in or out to the specified zoom level.
   * @param value Zoom level
   * @param duration Duration of the zoom in/out transition.
   */
  setZoomLevel(value, duration = 0) {
    if (duration === 0) {
      this.canvasD3Selection.call(this.zoomInstance.behavior.scaleTo, value);
    } else {
      this.canvasD3Selection.transition().duration(duration).call(this.zoomInstance.behavior.scaleTo, value);
    }
  }
  /**
   * Get zoom level.
   * @returns Zoom level value of the view.
   */
  getZoomLevel() {
    return this.zoomInstance.eventTransform.k;
  }
  /**
   * Get current X and Y coordinates of the nodes.
   * @returns Object where keys are the ids of the nodes and values are corresponding `{ x: number; y: number }` objects.
   */
  getNodePositions() {
    if (this.hasParticleSystemDestroyed)
      return {};
    const particlePositionPixels = readPixels(this.reglInstance, this.points.currentPositionFbo);
    return this.graph.nodes.reduce((acc, curr) => {
      const index = this.graph.getSortedIndexById(curr.id);
      const posX = particlePositionPixels[index * 4 + 0];
      const posY = particlePositionPixels[index * 4 + 1];
      if (posX !== void 0 && posY !== void 0) {
        acc[curr.id] = {
          x: posX,
          y: posY
        };
      }
      return acc;
    }, {});
  }
  /**
   * Get current X and Y coordinates of the nodes.
   * @returns A Map object where keys are the ids of the nodes and values are their corresponding X and Y coordinates in the [number, number] format.
   */
  getNodePositionsMap() {
    const positionMap = /* @__PURE__ */ new Map();
    if (this.hasParticleSystemDestroyed)
      return positionMap;
    const particlePositionPixels = readPixels(this.reglInstance, this.points.currentPositionFbo);
    return this.graph.nodes.reduce((acc, curr) => {
      const index = this.graph.getSortedIndexById(curr.id);
      const posX = particlePositionPixels[index * 4 + 0];
      const posY = particlePositionPixels[index * 4 + 1];
      if (posX !== void 0 && posY !== void 0) {
        acc.set(curr.id, [posX, posY]);
      }
      return acc;
    }, positionMap);
  }
  /**
   * Get current X and Y coordinates of the nodes.
   * @returns Array of `[x: number, y: number]` arrays.
   */
  getNodePositionsArray() {
    const positions = [];
    if (this.hasParticleSystemDestroyed)
      return [];
    const particlePositionPixels = readPixels(this.reglInstance, this.points.currentPositionFbo);
    positions.length = this.graph.nodes.length;
    for (let i = 0; i < this.graph.nodes.length; i += 1) {
      const index = this.graph.getSortedIndexByInputIndex(i);
      const posX = particlePositionPixels[index * 4 + 0];
      const posY = particlePositionPixels[index * 4 + 1];
      if (posX !== void 0 && posY !== void 0) {
        positions[i] = [posX, posY];
      }
    }
    return positions;
  }
  /**
   * Center and zoom in/out the view to fit all nodes in the scene.
   * @param duration Duration of the center and zoom in/out animation in milliseconds (`250` by default).
   * @param padding Padding around the viewport in percentage
   */
  fitView(duration = 250, padding = 0.1) {
    this.setZoomTransformByNodePositions(this.getNodePositionsArray(), duration, void 0, padding);
  }
  /**
   * Center and zoom in/out the view to fit nodes by their ids in the scene.
   * @param duration Duration of the center and zoom in/out animation in milliseconds (`250` by default).
   * @param padding Padding around the viewport in percentage
   */
  fitViewByNodeIds(ids, duration = 250, padding = 0.1) {
    const positionsMap = this.getNodePositionsMap();
    const positions = ids.map((id) => positionsMap.get(id)).filter((d) => d !== void 0);
    this.setZoomTransformByNodePositions(positions, duration, void 0, padding);
  }
  /** Select nodes inside a rectangular area.
   * @param selection - Array of two corner points `[[left, top], [right, bottom]]`.
   * The `left` and `right` coordinates should be from 0 to the width of the canvas.
   * The `top` and `bottom` coordinates should be from 0 to the height of the canvas. */
  selectNodesInRange(selection) {
    if (selection) {
      const h = this.store.screenSize[1];
      this.store.selectedArea = [[selection[0][0], h - selection[1][1]], [selection[1][0], h - selection[0][1]]];
      this.points.findPointsOnAreaSelection();
      const pixels = readPixels(this.reglInstance, this.points.selectedFbo);
      this.store.selectedIndices = pixels.map((pixel, i) => {
        if (i % 4 === 0 && pixel !== 0)
          return i / 4;
        else
          return -1;
      }).filter((d) => d !== -1);
    } else {
      this.store.selectedIndices = null;
    }
    this.points.updateGreyoutStatus();
  }
  /**
   * Select a node by id. If you want the adjacent nodes to get selected too, provide `true` as the second argument.
   * @param id Id of the node.
   * @param selectAdjacentNodes When set to `true`, selects adjacent nodes (`false` by default).
   */
  selectNodeById(id, selectAdjacentNodes = false) {
    var _a;
    if (selectAdjacentNodes) {
      const adjacentNodes = (_a = this.graph.getAdjacentNodes(id)) !== null && _a !== void 0 ? _a : [];
      this.selectNodesByIds([id, ...adjacentNodes.map((d) => d.id)]);
    } else
      this.selectNodesByIds([id]);
  }
  /**
   * Select a node by index. If you want the adjacent nodes to get selected too, provide `true` as the second argument.
   * @param index The index of the node in the array of nodes.
   * @param selectAdjacentNodes When set to `true`, selects adjacent nodes (`false` by default).
   */
  selectNodeByIndex(index, selectAdjacentNodes = false) {
    const node = this.graph.getNodeByIndex(index);
    if (node)
      this.selectNodeById(node.id, selectAdjacentNodes);
  }
  /**
   * Select multiples nodes by their ids.
   * @param ids Array of nodes ids.
   */
  selectNodesByIds(ids) {
    this.selectNodesByIndices(ids === null || ids === void 0 ? void 0 : ids.map((d) => this.graph.getSortedIndexById(d)));
  }
  /**
   * Select multiples nodes by their indices.
   * @param indices Array of nodes indices.
   */
  selectNodesByIndices(indices) {
    if (!indices) {
      this.store.selectedIndices = null;
    } else if (indices.length === 0) {
      this.store.selectedIndices = new Float32Array();
    } else {
      this.store.selectedIndices = new Float32Array(indices.filter((d) => d !== void 0));
    }
    this.points.updateGreyoutStatus();
  }
  /**
   * Unselect all nodes.
   */
  unselectNodes() {
    this.store.selectedIndices = null;
    this.points.updateGreyoutStatus();
  }
  /**
   * Get nodes that are currently selected.
   * @returns Array of selected nodes.
   */
  getSelectedNodes() {
    const { selectedIndices } = this.store;
    if (!selectedIndices)
      return null;
    const points = new Array(selectedIndices.length);
    for (const [i, selectedIndex] of selectedIndices.entries()) {
      if (selectedIndex !== void 0) {
        const index = this.graph.getInputIndexBySortedIndex(selectedIndex);
        if (index !== void 0)
          points[i] = this.graph.nodes[index];
      }
    }
    return points;
  }
  /**
   * Get nodes that are adjacent to a specific node by its id.
   * @param id Id of the node.
   * @returns Array of adjacent nodes.
   */
  getAdjacentNodes(id) {
    return this.graph.getAdjacentNodes(id);
  }
  /**
   * Set focus on a node by id. A ring will be highlighted around the focused node.
   * If no id is specified, the focus will be reset.
   * @param id Id of the node.
   */
  setFocusedNodeById(id) {
    if (id === void 0) {
      this.store.setFocusedNode();
    } else {
      this.store.setFocusedNode(this.graph.getNodeById(id), this.graph.getSortedIndexById(id));
    }
  }
  /**
   * Set focus on a node by index. A ring will be highlighted around the focused node.
   * If no index is specified, the focus will be reset.
   * @param index The index of the node in the array of nodes.
   */
  setFocusedNodeByIndex(index) {
    if (index === void 0) {
      this.store.setFocusedNode();
    } else {
      this.store.setFocusedNode(this.graph.getNodeByIndex(index), index);
    }
  }
  /**
   * Converts the X and Y node coordinates from the space coordinate system to the screen coordinate system.
   * @param spacePosition Array of x and y coordinates in the space coordinate system.
   * @returns Array of x and y coordinates in the screen coordinate system.
   */
  spaceToScreenPosition(spacePosition) {
    return this.zoomInstance.convertSpaceToScreenPosition(spacePosition);
  }
  /**
   * Converts the node radius value from the space coordinate system to the screen coordinate system.
   * @param spaceRadius Radius of Node in the space coordinate system.
   * @returns Radius of Node in the screen coordinate system.
   */
  spaceToScreenRadius(spaceRadius) {
    return this.zoomInstance.convertSpaceToScreenRadius(spaceRadius);
  }
  /**
   * Get node radius by its index.
   * @param index Index of the node.
   * @returns Radius of the node.
   */
  getNodeRadiusByIndex(index) {
    return this.points.getNodeRadiusByIndex(index);
  }
  /**
   * Get node radius by its id.
   * @param id Id of the node.
   * @returns Radius of the node.
   */
  getNodeRadiusById(id) {
    const index = this.graph.getInputIndexById(id);
    if (index === void 0)
      return void 0;
    return this.points.getNodeRadiusByIndex(index);
  }
  /**
   * Track multiple node positions by their ids on each Cosmos tick.
   * @param ids Array of nodes ids.
   */
  trackNodePositionsByIds(ids) {
    this.points.trackNodesByIds(ids);
  }
  /**
   * Track multiple node positions by their indices on each Cosmos tick.
   * @param ids Array of nodes indices.
   */
  trackNodePositionsByIndices(indices) {
    this.points.trackNodesByIds(indices.map((index) => this.graph.getNodeByIndex(index)).filter((d) => d !== void 0).map((d) => d.id));
  }
  /**
   * Get current X and Y coordinates of the tracked nodes.
   * @returns A Map object where keys are the ids of the nodes and values are their corresponding X and Y coordinates in the [number, number] format.
   */
  getTrackedNodePositionsMap() {
    return this.points.getTrackedPositions();
  }
  /**
   * For the nodes that are currently visible on the screen, get a sample of node ids with their coordinates.
   * The resulting number of nodes will depend on the `nodeSamplingDistance` configuration property,
   * and the sampled nodes will be evenly distributed.
   * @returns A Map object where keys are the ids of the nodes and values are their corresponding X and Y coordinates in the [number, number] format.
   */
  getSampledNodePositionsMap() {
    return this.points.getSampledNodePositionsMap();
  }
  /**
   * Start the simulation.
   * @param alpha Value from 0 to 1. The higher the value, the more initial energy the simulation will get.
   */
  start(alpha = 1) {
    var _a, _b;
    if (!this.graph.nodes.length)
      return;
    this.store.isSimulationRunning = true;
    this.store.alpha = alpha;
    this.store.simulationProgress = 0;
    (_b = (_a = this.config.simulation).onStart) === null || _b === void 0 ? void 0 : _b.call(_a);
    this.stopFrames();
    this.frame();
  }
  /**
   * Pause the simulation.
   */
  pause() {
    var _a, _b;
    this.store.isSimulationRunning = false;
    (_b = (_a = this.config.simulation).onPause) === null || _b === void 0 ? void 0 : _b.call(_a);
  }
  /**
   * Restart the simulation.
   */
  restart() {
    var _a, _b;
    this.store.isSimulationRunning = true;
    (_b = (_a = this.config.simulation).onRestart) === null || _b === void 0 ? void 0 : _b.call(_a);
  }
  /**
   * Render only one frame of the simulation (stops the simulation if it was running).
   */
  step() {
    this.store.isSimulationRunning = false;
    this.stopFrames();
    this.frame();
  }
  /**
   * Destroy this Cosmos instance.
   */
  destroy() {
    var _a, _b;
    window.clearTimeout(this._fitViewOnInitTimeoutID);
    this.stopFrames();
    this.destroyParticleSystem();
    (_a = this.fpsMonitor) === null || _a === void 0 ? void 0 : _a.destroy();
    (_b = document.getElementById("gl-bench-style")) === null || _b === void 0 ? void 0 : _b.remove();
  }
  /**
   * Create new Cosmos instance.
   */
  create() {
    var _a, _b, _c, _d;
    this.points.create();
    this.lines.create();
    (_a = this.forceManyBody) === null || _a === void 0 ? void 0 : _a.create();
    (_b = this.forceLinkIncoming) === null || _b === void 0 ? void 0 : _b.create(LinkDirection.INCOMING);
    (_c = this.forceLinkOutgoing) === null || _c === void 0 ? void 0 : _c.create(LinkDirection.OUTGOING);
    (_d = this.forceCenter) === null || _d === void 0 ? void 0 : _d.create();
    this.hasParticleSystemDestroyed = false;
  }
  destroyParticleSystem() {
    var _a, _b, _c, _d;
    if (this.hasParticleSystemDestroyed)
      return;
    this.points.destroy();
    this.lines.destroy();
    (_a = this.forceCenter) === null || _a === void 0 ? void 0 : _a.destroy();
    (_b = this.forceLinkIncoming) === null || _b === void 0 ? void 0 : _b.destroy();
    (_c = this.forceLinkOutgoing) === null || _c === void 0 ? void 0 : _c.destroy();
    (_d = this.forceManyBody) === null || _d === void 0 ? void 0 : _d.destroy();
    this.reglInstance.destroy();
    this.hasParticleSystemDestroyed = true;
  }
  update(runSimulation) {
    const { graph } = this;
    this.store.pointsTextureSize = Math.ceil(Math.sqrt(graph.nodes.length));
    this.store.linksTextureSize = Math.ceil(Math.sqrt(graph.linksNumber * 2));
    this.destroyParticleSystem();
    this.create();
    this.initPrograms();
    this.setFocusedNodeById();
    this.store.hoveredNode = void 0;
    if (runSimulation) {
      this.start();
    } else {
      this.step();
    }
  }
  initPrograms() {
    var _a, _b, _c, _d, _e, _f;
    this.points.initPrograms();
    this.lines.initPrograms();
    (_a = this.forceGravity) === null || _a === void 0 ? void 0 : _a.initPrograms();
    (_b = this.forceLinkIncoming) === null || _b === void 0 ? void 0 : _b.initPrograms();
    (_c = this.forceLinkOutgoing) === null || _c === void 0 ? void 0 : _c.initPrograms();
    (_d = this.forceMouse) === null || _d === void 0 ? void 0 : _d.initPrograms();
    (_e = this.forceManyBody) === null || _e === void 0 ? void 0 : _e.initPrograms();
    (_f = this.forceCenter) === null || _f === void 0 ? void 0 : _f.initPrograms();
  }
  frame() {
    const { config: { simulation, renderLinks, disableSimulation }, store: { alpha, isSimulationRunning } } = this;
    if (alpha < ALPHA_MIN && isSimulationRunning)
      this.end();
    if (!this.store.pointsTextureSize)
      return;
    this.requestAnimationFrameId = window.requestAnimationFrame((now) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
      (_a = this.fpsMonitor) === null || _a === void 0 ? void 0 : _a.begin();
      this.resizeCanvas();
      this.findHoveredPoint();
      if (!disableSimulation) {
        if (this.isRightClickMouse) {
          if (!isSimulationRunning)
            this.start(0.1);
          (_b = this.forceMouse) === null || _b === void 0 ? void 0 : _b.run();
          this.points.updatePosition();
        }
        if (isSimulationRunning && !this.zoomInstance.isRunning) {
          if (simulation.gravity) {
            (_c = this.forceGravity) === null || _c === void 0 ? void 0 : _c.run();
            this.points.updatePosition();
          }
          if (simulation.center) {
            (_d = this.forceCenter) === null || _d === void 0 ? void 0 : _d.run();
            this.points.updatePosition();
          }
          (_e = this.forceManyBody) === null || _e === void 0 ? void 0 : _e.run();
          this.points.updatePosition();
          if (this.store.linksTextureSize) {
            (_f = this.forceLinkIncoming) === null || _f === void 0 ? void 0 : _f.run();
            this.points.updatePosition();
            (_g = this.forceLinkOutgoing) === null || _g === void 0 ? void 0 : _g.run();
            this.points.updatePosition();
          }
          this.store.alpha += this.store.addAlpha((_h = this.config.simulation.decay) !== null && _h !== void 0 ? _h : defaultConfigValues.simulation.decay);
          if (this.isRightClickMouse)
            this.store.alpha = Math.max(this.store.alpha, 0.1);
          this.store.simulationProgress = Math.sqrt(Math.min(1, ALPHA_MIN / this.store.alpha));
          (_k = (_j = this.config.simulation).onTick) === null || _k === void 0 ? void 0 : _k.call(_j, this.store.alpha, (_l = this.store.hoveredNode) === null || _l === void 0 ? void 0 : _l.node, this.store.hoveredNode ? this.graph.getInputIndexBySortedIndex(this.store.hoveredNode.index) : void 0, (_m = this.store.hoveredNode) === null || _m === void 0 ? void 0 : _m.position);
        }
        this.points.trackPoints();
      }
      this.reglInstance.clear({
        color: this.store.backgroundColor,
        depth: 1,
        stencil: 0
      });
      if (renderLinks && this.store.linksTextureSize) {
        this.lines.draw();
      }
      this.points.draw();
      (_o = this.fpsMonitor) === null || _o === void 0 ? void 0 : _o.end(now);
      this.currentEvent = void 0;
      this.frame();
    });
  }
  stopFrames() {
    if (this.requestAnimationFrameId)
      window.cancelAnimationFrame(this.requestAnimationFrameId);
  }
  end() {
    var _a, _b;
    this.store.isSimulationRunning = false;
    this.store.simulationProgress = 1;
    (_b = (_a = this.config.simulation).onEnd) === null || _b === void 0 ? void 0 : _b.call(_a);
  }
  onClick(event) {
    var _a, _b, _c, _d;
    (_b = (_a = this.config.events).onClick) === null || _b === void 0 ? void 0 : _b.call(_a, (_c = this.store.hoveredNode) === null || _c === void 0 ? void 0 : _c.node, this.store.hoveredNode ? this.graph.getInputIndexBySortedIndex(this.store.hoveredNode.index) : void 0, (_d = this.store.hoveredNode) === null || _d === void 0 ? void 0 : _d.position, event);
  }
  updateMousePosition(event) {
    if (!event || event.offsetX === void 0 || event.offsetY === void 0)
      return;
    const mouseX = event.offsetX;
    const mouseY = event.offsetY;
    this.store.mousePosition = this.zoomInstance.convertScreenToSpacePosition([mouseX, mouseY]);
    this.store.screenMousePosition = [mouseX, this.store.screenSize[1] - mouseY];
  }
  onMouseMove(event) {
    var _a, _b, _c, _d;
    this.currentEvent = event;
    this.updateMousePosition(event);
    this.isRightClickMouse = event.which === 3;
    (_b = (_a = this.config.events).onMouseMove) === null || _b === void 0 ? void 0 : _b.call(_a, (_c = this.store.hoveredNode) === null || _c === void 0 ? void 0 : _c.node, this.store.hoveredNode ? this.graph.getInputIndexBySortedIndex(this.store.hoveredNode.index) : void 0, (_d = this.store.hoveredNode) === null || _d === void 0 ? void 0 : _d.position, this.currentEvent);
  }
  onRightClickMouse(event) {
    event.preventDefault();
  }
  resizeCanvas(forceResize = false) {
    const prevWidth = this.canvas.width;
    const prevHeight = this.canvas.height;
    const w = this.canvas.clientWidth;
    const h = this.canvas.clientHeight;
    if (forceResize || prevWidth !== w * this.config.pixelRatio || prevHeight !== h * this.config.pixelRatio) {
      const [prevW, prevH] = this.store.screenSize;
      const { k } = this.zoomInstance.eventTransform;
      const centerPosition = this.zoomInstance.convertScreenToSpacePosition([prevW / 2, prevH / 2]);
      this.store.updateScreenSize(w, h);
      this.canvas.width = w * this.config.pixelRatio;
      this.canvas.height = h * this.config.pixelRatio;
      this.reglInstance.poll();
      this.canvasD3Selection.call(this.zoomInstance.behavior.transform, this.zoomInstance.getTransform([centerPosition], k));
      this.points.updateSampledNodesGrid();
    }
  }
  setZoomTransformByNodePositions(positions, duration = 250, scale3, padding) {
    this.resizeCanvas();
    const transform2 = this.zoomInstance.getTransform(positions, scale3, padding);
    this.canvasD3Selection.transition().ease(quadInOut).duration(duration).call(this.zoomInstance.behavior.transform, transform2);
  }
  zoomToNode(node, duration, scale3, canZoomOut) {
    const { graph, store: { screenSize } } = this;
    const positionPixels = readPixels(this.reglInstance, this.points.currentPositionFbo);
    const nodeIndex = graph.getSortedIndexById(node.id);
    if (nodeIndex === void 0)
      return;
    const posX = positionPixels[nodeIndex * 4 + 0];
    const posY = positionPixels[nodeIndex * 4 + 1];
    if (posX === void 0 || posY === void 0)
      return;
    const distance = this.zoomInstance.getDistanceToPoint([posX, posY]);
    const zoomLevel = canZoomOut ? scale3 : Math.max(this.getZoomLevel(), scale3);
    if (distance < Math.min(screenSize[0], screenSize[1])) {
      this.setZoomTransformByNodePositions([[posX, posY]], duration, zoomLevel);
    } else {
      const transform2 = this.zoomInstance.getTransform([[posX, posY]], zoomLevel);
      const middle = this.zoomInstance.getMiddlePointTransform([posX, posY]);
      this.canvasD3Selection.transition().ease(quadIn).duration(duration / 2).call(this.zoomInstance.behavior.transform, middle).transition().ease(quadOut).duration(duration / 2).call(this.zoomInstance.behavior.transform, transform2);
    }
  }
  disableZoom() {
    this.canvasD3Selection.call(this.zoomInstance.behavior).on("wheel.zoom", null);
  }
  enableZoom() {
    this.canvasD3Selection.call(this.zoomInstance.behavior);
  }
  findHoveredPoint() {
    var _a, _b, _c, _d, _e;
    if (!this._isMouseOnCanvas)
      return;
    if (this._findHoveredPointExecutionCount < 2) {
      this._findHoveredPointExecutionCount += 1;
      return;
    }
    this._findHoveredPointExecutionCount = 0;
    this.points.findHoveredPoint();
    let isMouseover = false;
    let isMouseout = false;
    const pixels = readPixels(this.reglInstance, this.points.hoveredFbo);
    const nodeSize = pixels[1];
    if (nodeSize) {
      const index = pixels[0];
      const inputIndex = this.graph.getInputIndexBySortedIndex(index);
      const hovered = inputIndex !== void 0 ? this.graph.getNodeByIndex(inputIndex) : void 0;
      if (((_a = this.store.hoveredNode) === null || _a === void 0 ? void 0 : _a.node) !== hovered)
        isMouseover = true;
      const pointX = pixels[2];
      const pointY = pixels[3];
      this.store.hoveredNode = hovered && {
        node: hovered,
        index,
        position: [pointX, pointY]
      };
    } else {
      if (this.store.hoveredNode)
        isMouseout = true;
      this.store.hoveredNode = void 0;
    }
    if (isMouseover && this.store.hoveredNode) {
      (_c = (_b = this.config.events).onNodeMouseOver) === null || _c === void 0 ? void 0 : _c.call(_b, this.store.hoveredNode.node, this.graph.getInputIndexBySortedIndex(this.graph.getSortedIndexById(this.store.hoveredNode.node.id)), this.store.hoveredNode.position, this.currentEvent);
    }
    if (isMouseout)
      (_e = (_d = this.config.events).onNodeMouseOut) === null || _e === void 0 ? void 0 : _e.call(_d, this.currentEvent);
  }
};

export {
  Graph
};
//# sourceMappingURL=chunk-V7EMR6PC.js.map
