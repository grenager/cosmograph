{
  "version": 3,
  "sources": ["../../@interacta/css-labels/src/helper.ts", "../../@interacta/css-labels/src/variables.ts", "../../@interacta/css-labels/src/css-label-styles.ts", "../../@interacta/css-labels/src/css-label.ts", "../../@interacta/css-labels/src/styles.ts", "../../@interacta/css-labels/src/index.ts"],
  "sourcesContent": ["export type Rect = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n}\n\nexport function rectIntersect (rect1: Rect, rect2: Rect): boolean {\n  const [left1, top1, right1, bottom1] = [rect1.x, rect1.y + rect1.height, rect1.x + rect1.width, rect1.y]\n  const [left2, top2, right2, bottom2] = [rect2.x, rect2.y + rect2.height, rect2.x + rect2.width, rect2.y]\n\n  return !(top1 < bottom2 || top2 < bottom1 || right1 < left2 || right2 < left1)\n}\n", "export const TOP_BOTTOM_PADDING = 6\nexport const LEFT_RIGHT_PADDING = 9\nexport const DEFAULT_FONT_SIZE = 14\n", "export const label = 'css-label--label'\nexport const hiddenLabel = 'css-label--hidden'\n\nlet globalCssLabelStyles: HTMLStyleElement\nexport const createCssStyles = (): void => {\n  if (globalCssLabelStyles) return\n  globalCssLabelStyles = document.createElement('style')\n  globalCssLabelStyles.innerHTML = `\n  :root {\n    --css-label-background-color: #1e2428;\n    --css-label-brightness: brightness(150%);\n  }\n\n  .${label} {\n    position: absolute;\n    top: 0;\n    left: 0;\n\n    font-weight: 500;\n    cursor: pointer;\n    \n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n\n    filter: var(--css-label-brightness);\n    pointer-events: none;\n    background-color: var(--css-label-background-color);\n    font-weight: 700;\n    border-radius: 6px;\n    \n    transition: opacity 600ms;\n    opacity: 1;\n  }\n\n  .${hiddenLabel} {\n    opacity: 0 !important;\n  }\n`\n\n  // Insert the global CSS style element into the head of the document if it doesn't already exist\n  const firstStyleTagInHead = document.head.getElementsByTagName('style')[0]\n  if (firstStyleTagInHead) document.head.insertBefore(globalCssLabelStyles, firstStyleTagInHead)\n  else document.head.appendChild(globalCssLabelStyles)\n}\n", "import { rectIntersect } from './helper.js'\nimport { LEFT_RIGHT_PADDING, TOP_BOTTOM_PADDING, DEFAULT_FONT_SIZE } from './variables.js'\nimport { Padding, Options } from './types.js'\n\nimport * as s from './css-label-styles.js'\n\nexport class CssLabel {\n  public element: HTMLDivElement = document.createElement('div')\n  public readonly fontWidthHeightRatio = 0.6\n  private _container: HTMLDivElement\n  private _x = 0\n  private _y = 0\n  private _estimatedWidth = 0\n  private _estimatedHeight = 0\n  private _visible = false\n  private _prevVisible = false\n  private _weight = 0\n\n  private _customFontSize = DEFAULT_FONT_SIZE\n  private _customColor: string | undefined = undefined\n  private _customOpacity: number | undefined = undefined\n  private _shouldBeShown = false\n  private _text = ''\n  private _customPadding: Padding = {\n    left: LEFT_RIGHT_PADDING,\n    top: TOP_BOTTOM_PADDING,\n    right: LEFT_RIGHT_PADDING,\n    bottom: TOP_BOTTOM_PADDING,\n  }\n\n  private _customPointerEvents: Options['pointerEvents'] | undefined\n  private _customStyle: string | undefined\n  private _customClassName: string | undefined\n\n  public constructor (container: HTMLDivElement, text?: string) {\n    s.createCssStyles()\n    this._container = container\n    this._updateClasses()\n    if (text) this.setText(text)\n    this.resetFontSize()\n    this.resetPadding()\n  }\n\n  /**\n   * Sets the text of the element.\n   * @param text - The text to set.\n   */\n  public setText (text: string): void {\n    if (this._text !== text) {\n      this._text = text\n      this.element.innerHTML = text\n      this._measureText()\n    }\n  }\n\n  /**\n   * Sets the position of the label\n   * @param x - The x coordinate of the label\n   * @param y - The y coordinate of the label\n   */\n  public setPosition (x: number, y: number): void {\n    this._x = x\n    this._y = y\n  }\n\n  /**\n   * Sets the CSS style of the element.\n   * If a color, opacity or pointer-events is specified using the `setColor`,\n   * `setOpacity` or `setPointerEvents` method, it takes priority over all custom styles.\n   * The `fontSize` style will not apply from `setStyle`, and the `transform` style\n   * will not apply, as it is used in the draw method to update the label position.\n   * @param style - The style to be set.\n   */\n  public setStyle (style: string): void {\n    if (this._customStyle !== style) {\n      this._customStyle = style\n      this.element.style.cssText = this._customStyle\n\n      if (this._customColor) this.element.style.color = this._customColor\n      if (this._customOpacity) this.element.style.opacity = String(this._customOpacity)\n      if (this._customPointerEvents) this.element.style.pointerEvents = this._customPointerEvents\n      if (this._customFontSize) this.element.style.fontSize = `${this._customFontSize}px`\n      if (this._customPadding) {\n        const { top, right, bottom, left } = this._customPadding\n        this.element.style.padding = `${top}px ${right}px ${bottom}px ${left}px`\n      }\n    }\n  }\n\n  /**\n   * Sets the class name of the component\n   * @param className - The class name to be set\n   */\n  public setClassName (className: string): void {\n    if (this._customClassName !== className) {\n      this._customClassName = className\n      this._updateClasses()\n    }\n  }\n\n  /**\n   * Sets the font size of the text in pixels.\n   * This value cannot be changed through `setStyle` or `setClassName`\n   * methods because it is used to measure the width and height of the label.\n   * @param fontSize - The font size to set. If not specified, it will use the default value of `14px`.\n   */\n  public setFontSize (fontSize = DEFAULT_FONT_SIZE): void {\n    if (this._customFontSize !== fontSize) {\n      this.element.style.fontSize = `${fontSize}px`\n      this._customFontSize = fontSize\n      this._measureText()\n    }\n  }\n\n  /**\n   * Resets the font size of the element to default value.\n   */\n  public resetFontSize (): void {\n    this.element.style.fontSize = `${DEFAULT_FONT_SIZE}px`\n    this._customFontSize = DEFAULT_FONT_SIZE\n    this._measureText()\n  }\n\n  /**\n   * Sets the color of the element.\n   * This color will rewrite the color from `setStyle` CSS style if specified.\n   * @param color - The color to set\n   */\n  public setColor (color: string): void {\n    if (this._customColor !== color) {\n      this.element.style.color = color\n      this._customColor = color\n    }\n  }\n\n  /**\n   * Resets the color of the element.\n   */\n  public resetColor (): void {\n    this.element.style.removeProperty('color')\n    this._customColor = undefined\n  }\n\n  /**\n   * Sets the opacity of the element.\n   * This opacity will rewrite the opacity from `setStyle` CSS style if specified.\n   * @param opacity - The opacity to set.\n   */\n  public setOpacity (opacity: number): void {\n    if (this._customOpacity !== opacity) {\n      this.element.style.opacity = String(opacity)\n      this._customOpacity = opacity\n    }\n  }\n\n  /**\n   * Resets the opacity of the element.\n   */\n  public resetOpacity (): void {\n    this.element.style.removeProperty('opacity')\n    this._customOpacity = undefined\n  }\n\n  /**\n   * Sets the `pointerEvents` property to 'none', 'auto', or 'all'.\n   * This `pointerEvents` value will rewrite the opacity from `setStyle` CSS style if specified.\n   * @param pointerEvents - The `pointerEvents` value to be set.\n   */\n  public setPointerEvents (pointerEvents: Options['pointerEvents']): void {\n    if (this._customPointerEvents !== pointerEvents) {\n      this.element.style.pointerEvents = `${pointerEvents}`\n      this._customPointerEvents = pointerEvents\n    }\n  }\n\n  /**\n   * Resets the pointer-events of the element.\n   */\n  public resetPointerEvents (): void {\n    this.element.style.removeProperty('pointer-events')\n    this._customPointerEvents = undefined\n  }\n\n  /**\n   * Sets the padding of the element in pixels.\n   * This value cannot be changed through `setStyle` or `setClassName`\n   * methods because it is used to measure the width and height of the label.\n   * @param padding - The padding object with left, top, right and bottom properties.\n   * If not specified, it will use the default value of `{ left: 9px, top: 6px, right: 9px, bottom: 6px }`.\n   */\n  public setPadding (padding = {\n    left: LEFT_RIGHT_PADDING,\n    top: TOP_BOTTOM_PADDING,\n    right: LEFT_RIGHT_PADDING,\n    bottom: TOP_BOTTOM_PADDING,\n  }): void {\n    if (this._customPadding.left !== padding.left ||\n        this._customPadding.top !== padding.top ||\n        this._customPadding.right !== padding.right ||\n        this._customPadding.bottom !== padding.bottom) {\n      this._customPadding = padding\n      this.element.style.padding = `${padding.top}px ${padding.right}px ${padding.bottom}px ${padding.left}px`\n      this._measureText()\n    }\n  }\n\n  public resetPadding (): void {\n    const padding = {\n      left: LEFT_RIGHT_PADDING,\n      top: TOP_BOTTOM_PADDING,\n      right: LEFT_RIGHT_PADDING,\n      bottom: TOP_BOTTOM_PADDING,\n    }\n    this.element.style.padding = `${padding.top}px ${padding.right}px ${padding.bottom}px ${padding.left}px`\n    this._customPadding = padding\n    this._measureText()\n  }\n\n  /**\n   * Sets the boolean value of whether the element should be forced to shown or not\n   * @param shouldBeShown - The boolean value to set\n   */\n  public setForceShow (shouldBeShown: boolean): void {\n    this._shouldBeShown = shouldBeShown\n  }\n\n  /**\n   * Gets the boolean value of whether the element should be shown or not.\n   * @returns The boolean value of whether the element should be shown or not.\n   */\n  public getForceShow (): boolean {\n    return this._shouldBeShown\n  }\n\n  /**\n   * Draws the element to the container and updates the label's coordinate.\n   * The label's coordinate updates using `transform` style. It rewrite\n   * the `transform` from `setStyle` CSS style if specified.\n   */\n  public draw (): void {\n    const isVisible = this.getVisibility()\n    if (isVisible !== this._prevVisible) {\n      if (this._prevVisible === false) {\n        this._container.appendChild(this.element)\n      } else {\n        this._container.removeChild(this.element)\n      }\n      this._updateClasses()\n      this._prevVisible = isVisible\n    }\n\n    if (isVisible) {\n      this.element.style.transform = `\n        translate(-50%, -100%)\n        translate3d(${this._x}px, ${this._y}px, 0)\n      `\n    }\n  }\n\n  public overlaps (label: CssLabel): boolean {\n    return rectIntersect({\n      height: this._estimatedHeight,\n      width: this._estimatedWidth,\n      x: this._x,\n      y: this._y,\n    }, {\n      height: label._estimatedHeight,\n      width: label._estimatedWidth,\n      x: label._x,\n      y: label._y,\n    })\n  }\n\n  public setVisibility (visible = true): void {\n    this._visible = visible\n  }\n\n  public getVisibility (): boolean {\n    return this._visible\n  }\n\n  public isOnScreen (): boolean {\n    return this._x > 0 && this._y > 0 && this._x < this._container.offsetWidth && this._y < this._container.offsetHeight\n  }\n\n  public setWeight (weight: number): void {\n    this._weight = weight\n  }\n\n  public getWeight (): number {\n    return this._weight\n  }\n\n  /**\n   * Appends the element to the top of the container\n   */\n  public raise (): void {\n    this._container.appendChild(this.element)\n  }\n\n  /**\n   * Removes the element from the DOM.\n   */\n  public destroy (): void {\n    this.element.remove()\n  }\n\n  private _updateClasses (): void {\n    const isVisible = this.getVisibility()\n    if (isVisible) {\n      window.requestAnimationFrame(() => {\n        this.element.className = `${s.label} ${this._customClassName || ''}`\n      })\n    } else {\n      this.element.className = `${s.label} ${this._customClassName || ''} ${s.hiddenLabel}`\n    }\n  }\n\n  private _measureText (): void {\n    const { left, top, right, bottom } = this._customPadding\n    this._estimatedWidth = this._customFontSize * this.fontWidthHeightRatio * this.element.innerHTML.length + left + right\n    this._estimatedHeight = this._customFontSize + top + bottom\n  }\n}\n", "export const labelsContainer = 'css-label--labels-container'\nexport const hidden = 'css-label--labels-container-hidden'\n\nlet globalContainerStyle: HTMLStyleElement\nexport const createCssStyles = (): void => {\n  if (globalContainerStyle) return\n  globalContainerStyle = document.createElement('style')\n  globalContainerStyle.innerHTML = `\n  .${labelsContainer} {\n    transition: opacity 100ms;\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    top: 0%;\n    pointer-events: none;\n    opacity: 1;\n  }\n  .${hidden} {\n    opacity: 0;\n\n    div {\n      pointer-events: none;\n    }\n  }\n`\n\n  // Insert the global CSS style element into the head of the document if it doesn't already exist\n  const firstStyleTagInHead = document.head.getElementsByTagName('style')[0]\n  if (firstStyleTagInHead) document.head.insertBefore(globalContainerStyle, firstStyleTagInHead)\n  else document.head.appendChild(globalContainerStyle)\n}\n", "import { CssLabel } from './css-label.js'\nimport { LabelOptions, OnClickCallback, Options, Padding } from './types.js'\n\nimport * as s from './styles.js'\n\nexport class LabelRenderer {\n  private _cssLabels = new Map<string, CssLabel>()\n  private _container: HTMLDivElement\n  private _onClickCallback: OnClickCallback | undefined\n  private _padding: Padding | undefined\n  private _pointerEvents: Options['pointerEvents'] | undefined\n  private _elementToData = new Map<HTMLDivElement, LabelOptions>()\n  private _dispatchWheelEventElement: HTMLElement | undefined\n\n  public constructor (container: HTMLDivElement, options?: Options) {\n    s.createCssStyles()\n    this._container = container\n    container.addEventListener('click', this._onClick.bind(this))\n\n    this._container.className = s.labelsContainer\n    if (options?.onLabelClick) this._onClickCallback = options.onLabelClick\n    if (options?.padding) this._padding = options.padding\n    if (options?.pointerEvents) this._pointerEvents = options.pointerEvents\n\n    if (options?.dispatchWheelEventElement) {\n      this._dispatchWheelEventElement = options.dispatchWheelEventElement\n      this._container.addEventListener('wheel', this._onWheel.bind(this))\n    }\n  }\n\n  public setLabels (labels: LabelOptions[]): void {\n    // Add new labels and take into account existing labels\n    const labelsToDelete = new Map(this._cssLabels)\n    labels.forEach(label => {\n      const { x, y, fontSize, color, text, weight, opacity, shouldBeShown, style, className } = label\n      const exists = this._cssLabels.get(label.id)\n      if (exists) {\n        labelsToDelete.delete(label.id)\n      } else {\n        const cssLabel = new CssLabel(this._container, label.text)\n        this._cssLabels.set(label.id, cssLabel)\n        this._elementToData.set(cssLabel.element, label)\n      }\n      const labelToUpdate = this._cssLabels.get(label.id)\n      if (labelToUpdate) {\n        labelToUpdate.setText(text)\n        labelToUpdate.setPosition(x, y)\n        if (style !== undefined) labelToUpdate.setStyle(style)\n        if (weight !== undefined) labelToUpdate.setWeight(weight)\n        if (fontSize !== undefined) labelToUpdate.setFontSize(fontSize)\n        if (color !== undefined) labelToUpdate.setColor(color)\n        if (this._padding !== undefined) labelToUpdate.setPadding(this._padding)\n        if (this._pointerEvents !== undefined) labelToUpdate.setPointerEvents(this._pointerEvents)\n        if (opacity !== undefined) labelToUpdate.setOpacity(opacity)\n        if (shouldBeShown !== undefined) labelToUpdate.setForceShow(shouldBeShown)\n        if (className !== undefined) labelToUpdate.setClassName(className)\n      }\n    })\n\n    // Remove labels from points that don't longer exist\n    for (const [key] of labelsToDelete) {\n      const cssLabel = this._cssLabels.get(key)\n      if (cssLabel) {\n        this._elementToData.delete(cssLabel.element)\n        cssLabel.destroy()\n      }\n      this._cssLabels.delete(key)\n    }\n  }\n\n  public draw (withIntersection = true): void {\n    if (withIntersection) this._intersectLabels()\n    this._cssLabels.forEach(cssLabel => cssLabel.draw())\n  }\n\n  public show (): void {\n    this._container.className = s.labelsContainer\n  }\n\n  public hide (): void {\n    this._container.className = `${s.labelsContainer} ${s.hidden}`\n  }\n\n  public destroy (): void {\n    this._container.removeEventListener('click', this._onClick.bind(this))\n    this._container.removeEventListener('wheel', this._onWheel.bind(this))\n    this._cssLabels.forEach(cssLabel => cssLabel.destroy())\n  }\n\n  private _onClick (e: MouseEvent): void {\n    const label = this._elementToData.get(e.target as HTMLDivElement)\n    if (label) {\n      this._onClickCallback?.(e, label)\n    }\n  }\n\n  private _onWheel (e: WheelEvent): void {\n    e.preventDefault()\n    const newWheelEvent = new WheelEvent('wheel', e)\n    this._dispatchWheelEventElement?.dispatchEvent(newWheelEvent)\n  }\n\n  private _intersectLabels (): void {\n    const cssLabels = Array.from(this._cssLabels.values())\n    cssLabels.forEach(l => l.setVisibility(l.isOnScreen()))\n    for (let i = 0; i < cssLabels.length; i += 1) {\n      const label1 = cssLabels[i] as CssLabel\n      if (!label1.getVisibility()) continue\n\n      for (let j = i + 1; j < cssLabels.length; j += 1) {\n        const label2 = cssLabels[j] as CssLabel\n        if (!label2.getVisibility()) continue\n\n        const isOverlapping = label1.overlaps(label2)\n        if (isOverlapping) {\n          if (label2.getWeight() > label1.getWeight()) {\n            label1.setVisibility(label2.getForceShow() ? false : label1.getForceShow())\n          } else {\n            label2.setVisibility(label1.getForceShow() ? false : label2.getForceShow())\n          }\n          continue\n        }\n      }\n    }\n  }\n}\n\nexport { CssLabel }\nexport type { LabelOptions }\n"],
  "mappings": "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",
  "names": ["label", "createCssStyles", "createCssStyles", "label"]
}
